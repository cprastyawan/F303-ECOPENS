
F303-ECOPENS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800d680  0800d680  0001d680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da58  0800da58  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800da58  0800da58  0001da58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da60  0800da60  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da60  0800da60  0001da60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da64  0800da64  0001da64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800da68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  200001f8  0800dc60  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  0800dc60  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142c9  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000297a  00000000  00000000  000344f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001240  00000000  00000000  00036e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  000380b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d16d  00000000  00000000  00039198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fbcc  00000000  00000000  00056305  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae6f8  00000000  00000000  00065ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001145c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac0  00000000  00000000  00114644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d668 	.word	0x0800d668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800d668 	.word	0x0800d668

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <DWT_Init+0x38>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10e      	bne.n	8000fb6 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <DWT_Init+0x38>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <DWT_Init+0x38>)
 8000f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fa2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <DWT_Init+0x3c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <DWT_Init+0x3c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <DWT_Init+0x3c>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6013      	str	r3, [r2, #0]
    }
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000edf0 	.word	0xe000edf0
 8000fc4:	e0001000 	.word	0xe0001000

08000fc8 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <DWT_Delay+0x40>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <DWT_Delay+0x44>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <DWT_Delay+0x48>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	0c9a      	lsrs	r2, r3, #18
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000fea:	bf00      	nop
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <DWT_Delay+0x40>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d8f8      	bhi.n	8000fec <DWT_Delay+0x24>
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e0001000 	.word	0xe0001000
 800100c:	2000001c 	.word	0x2000001c
 8001010:	431bde83 	.word	0x431bde83

08001014 <getUSARTData>:
	TIM1->CCR1 = setPWM;
	TIM1->CCR5 = setPWM + compWindowOffset;

}

void getUSARTData(){
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b085      	sub	sp, #20
 8001018:	af02      	add	r7, sp, #8
	 if(USART1DataFlag){
 800101a:	4ba3      	ldr	r3, [pc, #652]	; (80012a8 <getUSARTData+0x294>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 81af 	beq.w	8001382 <getUSARTData+0x36e>
		 USART1DataFlag = false;
 8001024:	4ba0      	ldr	r3, [pc, #640]	; (80012a8 <getUSARTData+0x294>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
		 if(data[0] == '#'){
 800102a:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <getUSARTData+0x298>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b23      	cmp	r3, #35	; 0x23
 8001030:	f040 81a7 	bne.w	8001382 <getUSARTData+0x36e>
			 if(memcmp(data + 1, "PWM=", 4) == 0 || memcmp(data + 1, "pwm=", 4) == 0){
 8001034:	4b9e      	ldr	r3, [pc, #632]	; (80012b0 <getUSARTData+0x29c>)
 8001036:	2204      	movs	r2, #4
 8001038:	499e      	ldr	r1, [pc, #632]	; (80012b4 <getUSARTData+0x2a0>)
 800103a:	4618      	mov	r0, r3
 800103c:	f008 fece 	bl	8009ddc <memcmp>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d008      	beq.n	8001058 <getUSARTData+0x44>
 8001046:	4b9a      	ldr	r3, [pc, #616]	; (80012b0 <getUSARTData+0x29c>)
 8001048:	2204      	movs	r2, #4
 800104a:	499b      	ldr	r1, [pc, #620]	; (80012b8 <getUSARTData+0x2a4>)
 800104c:	4618      	mov	r0, r3
 800104e:	f008 fec5 	bl	8009ddc <memcmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d154      	bne.n	8001102 <getUSARTData+0xee>
				uint8_t value[4];
				memcpy(value, data + 5, 4);
 8001058:	4b98      	ldr	r3, [pc, #608]	; (80012bc <getUSARTData+0x2a8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	603b      	str	r3, [r7, #0]
				uint16_t x = atoi((char*)value);
 800105e:	463b      	mov	r3, r7
 8001060:	4618      	mov	r0, r3
 8001062:	f008 fe8c 	bl	8009d7e <atoi>
 8001066:	4603      	mov	r3, r0
 8001068:	80fb      	strh	r3, [r7, #6]
				if(x){
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 8187 	beq.w	8001380 <getUSARTData+0x36c>
					x = constrain(x, 1000, 2000);
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001078:	d307      	bcc.n	800108a <getUSARTData+0x76>
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001080:	bf28      	it	cs
 8001082:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8001086:	b29b      	uxth	r3, r3
 8001088:	e001      	b.n	800108e <getUSARTData+0x7a>
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	80fb      	strh	r3, [r7, #6]
					newPWM = map(x, 1000, 2000, PWM_MIN, PWM_MAX);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001096:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	4a88      	ldr	r2, [pc, #544]	; (80012c0 <getUSARTData+0x2ac>)
 80010a0:	fb82 1203 	smull	r1, r2, r2, r3
 80010a4:	1192      	asrs	r2, r2, #6
 80010a6:	17db      	asrs	r3, r3, #31
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b85      	ldr	r3, [pc, #532]	; (80012c4 <getUSARTData+0x2b0>)
 80010ae:	801a      	strh	r2, [r3, #0]
					setPWM = newPWM;
 80010b0:	4b84      	ldr	r3, [pc, #528]	; (80012c4 <getUSARTData+0x2b0>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b84      	ldr	r3, [pc, #528]	; (80012c8 <getUSARTData+0x2b4>)
 80010b8:	801a      	strh	r2, [r3, #0]

					TIM1->CCR1 = setPWM;
 80010ba:	4b83      	ldr	r3, [pc, #524]	; (80012c8 <getUSARTData+0x2b4>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	b21a      	sxth	r2, r3
 80010c0:	4b82      	ldr	r3, [pc, #520]	; (80012cc <getUSARTData+0x2b8>)
 80010c2:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR5 = setPWM + compWindowOffset;
 80010c4:	4b80      	ldr	r3, [pc, #512]	; (80012c8 <getUSARTData+0x2b4>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <getUSARTData+0x2bc>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	441a      	add	r2, r3
 80010d4:	4b7d      	ldr	r3, [pc, #500]	; (80012cc <getUSARTData+0x2b8>)
 80010d6:	659a      	str	r2, [r3, #88]	; 0x58

					strSize = sprintf((char*)buffer, "PWM: %d\r\n", newPWM);
 80010d8:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <getUSARTData+0x2b0>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	497c      	ldr	r1, [pc, #496]	; (80012d4 <getUSARTData+0x2c0>)
 80010e2:	487d      	ldr	r0, [pc, #500]	; (80012d8 <getUSARTData+0x2c4>)
 80010e4:	f009 faee 	bl	800a6c4 <siprintf>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b7b      	ldr	r3, [pc, #492]	; (80012dc <getUSARTData+0x2c8>)
 80010ee:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 80010f0:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <getUSARTData+0x2c8>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	2332      	movs	r3, #50	; 0x32
 80010f8:	4977      	ldr	r1, [pc, #476]	; (80012d8 <getUSARTData+0x2c4>)
 80010fa:	4879      	ldr	r0, [pc, #484]	; (80012e0 <getUSARTData+0x2cc>)
 80010fc:	f007 fe8a 	bl	8008e14 <HAL_UART_Transmit>
			 if(memcmp(data + 1, "PWM=", 4) == 0 || memcmp(data + 1, "pwm=", 4) == 0){
 8001100:	e13e      	b.n	8001380 <getUSARTData+0x36c>
				}
			}
			else if(memcmp(data + 1, "OC5=", 4) == 0 || memcmp(data + 1, "oc5=", 4) == 0){
 8001102:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <getUSARTData+0x29c>)
 8001104:	2204      	movs	r2, #4
 8001106:	4977      	ldr	r1, [pc, #476]	; (80012e4 <getUSARTData+0x2d0>)
 8001108:	4618      	mov	r0, r3
 800110a:	f008 fe67 	bl	8009ddc <memcmp>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <getUSARTData+0x112>
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <getUSARTData+0x29c>)
 8001116:	2204      	movs	r2, #4
 8001118:	4973      	ldr	r1, [pc, #460]	; (80012e8 <getUSARTData+0x2d4>)
 800111a:	4618      	mov	r0, r3
 800111c:	f008 fe5e 	bl	8009ddc <memcmp>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11e      	bne.n	8001164 <getUSARTData+0x150>
				//uint8_t value[3];
				//memcpy(value, data + 5, 3);
				oc5Value = (uint16_t)strtoul((char*)data + 5, '\0',10);
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <getUSARTData+0x2a8>)
 8001128:	220a      	movs	r2, #10
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f00a fa5b 	bl	800b5e8 <strtoul>
 8001132:	4603      	mov	r3, r0
 8001134:	b29a      	uxth	r2, r3
 8001136:	4b6d      	ldr	r3, [pc, #436]	; (80012ec <getUSARTData+0x2d8>)
 8001138:	801a      	strh	r2, [r3, #0]
				strSize = sprintf((char*)buffer, "oc5: %d\r\n", oc5Value);
 800113a:	4b6c      	ldr	r3, [pc, #432]	; (80012ec <getUSARTData+0x2d8>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	496b      	ldr	r1, [pc, #428]	; (80012f0 <getUSARTData+0x2dc>)
 8001144:	4864      	ldr	r0, [pc, #400]	; (80012d8 <getUSARTData+0x2c4>)
 8001146:	f009 fabd 	bl	800a6c4 <siprintf>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b63      	ldr	r3, [pc, #396]	; (80012dc <getUSARTData+0x2c8>)
 8001150:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 8001152:	4b62      	ldr	r3, [pc, #392]	; (80012dc <getUSARTData+0x2c8>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29a      	uxth	r2, r3
 8001158:	2332      	movs	r3, #50	; 0x32
 800115a:	495f      	ldr	r1, [pc, #380]	; (80012d8 <getUSARTData+0x2c4>)
 800115c:	4860      	ldr	r0, [pc, #384]	; (80012e0 <getUSARTData+0x2cc>)
 800115e:	f007 fe59 	bl	8008e14 <HAL_UART_Transmit>
 8001162:	e10e      	b.n	8001382 <getUSARTData+0x36e>
			}
			else if(memcmp(data + 1, "STA", 3) == 0 || memcmp(data + 1, "sta", 3) == 0){
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <getUSARTData+0x29c>)
 8001166:	2203      	movs	r2, #3
 8001168:	4962      	ldr	r1, [pc, #392]	; (80012f4 <getUSARTData+0x2e0>)
 800116a:	4618      	mov	r0, r3
 800116c:	f008 fe36 	bl	8009ddc <memcmp>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <getUSARTData+0x174>
 8001176:	4b4e      	ldr	r3, [pc, #312]	; (80012b0 <getUSARTData+0x29c>)
 8001178:	2203      	movs	r2, #3
 800117a:	495f      	ldr	r1, [pc, #380]	; (80012f8 <getUSARTData+0x2e4>)
 800117c:	4618      	mov	r0, r3
 800117e:	f008 fe2d 	bl	8009ddc <memcmp>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d118      	bne.n	80011ba <getUSARTData+0x1a6>
				motorGotStarted = 1;
 8001188:	4b5c      	ldr	r3, [pc, #368]	; (80012fc <getUSARTData+0x2e8>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
				strSize = sprintf((char*)buffer, "Start Motor\r\n");
 800118e:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <getUSARTData+0x2c4>)
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <getUSARTData+0x2ec>)
 8001192:	4614      	mov	r4, r2
 8001194:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001196:	6020      	str	r0, [r4, #0]
 8001198:	6061      	str	r1, [r4, #4]
 800119a:	60a2      	str	r2, [r4, #8]
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	81a3      	strh	r3, [r4, #12]
 80011a0:	230d      	movs	r3, #13
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b4d      	ldr	r3, [pc, #308]	; (80012dc <getUSARTData+0x2c8>)
 80011a6:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 80011a8:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <getUSARTData+0x2c8>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	2332      	movs	r3, #50	; 0x32
 80011b0:	4949      	ldr	r1, [pc, #292]	; (80012d8 <getUSARTData+0x2c4>)
 80011b2:	484b      	ldr	r0, [pc, #300]	; (80012e0 <getUSARTData+0x2cc>)
 80011b4:	f007 fe2e 	bl	8008e14 <HAL_UART_Transmit>
 80011b8:	e0e3      	b.n	8001382 <getUSARTData+0x36e>
			}
			else if(memcmp(data + 1, "STO", 3) == 0 || memcmp(data + 1, "sto", 3) == 0){
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <getUSARTData+0x29c>)
 80011bc:	2203      	movs	r2, #3
 80011be:	4951      	ldr	r1, [pc, #324]	; (8001304 <getUSARTData+0x2f0>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f008 fe0b 	bl	8009ddc <memcmp>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d008      	beq.n	80011de <getUSARTData+0x1ca>
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <getUSARTData+0x29c>)
 80011ce:	2203      	movs	r2, #3
 80011d0:	494d      	ldr	r1, [pc, #308]	; (8001308 <getUSARTData+0x2f4>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f008 fe02 	bl	8009ddc <memcmp>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d12e      	bne.n	800123c <getUSARTData+0x228>
				newPWM = setPWM = 0;
 80011de:	2100      	movs	r1, #0
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <getUSARTData+0x2b4>)
 80011e2:	460a      	mov	r2, r1
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <getUSARTData+0x2b0>)
 80011e8:	460a      	mov	r2, r1
 80011ea:	801a      	strh	r2, [r3, #0]
				TIM1->CCR1 = setPWM;
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <getUSARTData+0x2b4>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <getUSARTData+0x2b8>)
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR5 = setPWM + compWindowOffset;
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <getUSARTData+0x2b4>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <getUSARTData+0x2bc>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	b21b      	sxth	r3, r3
 8001204:	441a      	add	r2, r3
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <getUSARTData+0x2b8>)
 8001208:	659a      	str	r2, [r3, #88]	; 0x58
				motorGotStarted = 0;
 800120a:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <getUSARTData+0x2e8>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
				strSize = sprintf((char*)buffer, "Stop Motor\r\n");
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <getUSARTData+0x2c4>)
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <getUSARTData+0x2f8>)
 8001214:	4614      	mov	r4, r2
 8001216:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001218:	6020      	str	r0, [r4, #0]
 800121a:	6061      	str	r1, [r4, #4]
 800121c:	60a2      	str	r2, [r4, #8]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	7323      	strb	r3, [r4, #12]
 8001222:	230c      	movs	r3, #12
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <getUSARTData+0x2c8>)
 8001228:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <getUSARTData+0x2c8>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29a      	uxth	r2, r3
 8001230:	2332      	movs	r3, #50	; 0x32
 8001232:	4929      	ldr	r1, [pc, #164]	; (80012d8 <getUSARTData+0x2c4>)
 8001234:	482a      	ldr	r0, [pc, #168]	; (80012e0 <getUSARTData+0x2cc>)
 8001236:	f007 fded 	bl	8008e14 <HAL_UART_Transmit>
 800123a:	e0a2      	b.n	8001382 <getUSARTData+0x36e>
			}
			else if(memcmp(data + 1, "ADO", 3) == 0 || memcmp(data +1, "ado", 3) == 0){
 800123c:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <getUSARTData+0x29c>)
 800123e:	2203      	movs	r2, #3
 8001240:	4933      	ldr	r1, [pc, #204]	; (8001310 <getUSARTData+0x2fc>)
 8001242:	4618      	mov	r0, r3
 8001244:	f008 fdca 	bl	8009ddc <memcmp>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <getUSARTData+0x24c>
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <getUSARTData+0x29c>)
 8001250:	2203      	movs	r2, #3
 8001252:	4930      	ldr	r1, [pc, #192]	; (8001314 <getUSARTData+0x300>)
 8001254:	4618      	mov	r0, r3
 8001256:	f008 fdc1 	bl	8009ddc <memcmp>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d15f      	bne.n	8001320 <getUSARTData+0x30c>
				adcOffset = (float)strtof((char*)data + 5,'\0');
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <getUSARTData+0x2a8>)
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f00a f85f 	bl	800b328 <strtof>
 800126a:	eef0 7a40 	vmov.f32	s15, s0
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <getUSARTData+0x304>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
				strSize = sprintf((char*)buffer, "ADC Offset: %f\r\n", adcOffset);
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <getUSARTData+0x304>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f965 	bl	8000548 <__aeabi_f2d>
 800127e:	4603      	mov	r3, r0
 8001280:	460c      	mov	r4, r1
 8001282:	461a      	mov	r2, r3
 8001284:	4623      	mov	r3, r4
 8001286:	4925      	ldr	r1, [pc, #148]	; (800131c <getUSARTData+0x308>)
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <getUSARTData+0x2c4>)
 800128a:	f009 fa1b 	bl	800a6c4 <siprintf>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <getUSARTData+0x2c8>)
 8001294:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 20);
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <getUSARTData+0x2c8>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	b29a      	uxth	r2, r3
 800129c:	2314      	movs	r3, #20
 800129e:	490e      	ldr	r1, [pc, #56]	; (80012d8 <getUSARTData+0x2c4>)
 80012a0:	480f      	ldr	r0, [pc, #60]	; (80012e0 <getUSARTData+0x2cc>)
 80012a2:	f007 fdb7 	bl	8008e14 <HAL_UART_Transmit>
 80012a6:	e06c      	b.n	8001382 <getUSARTData+0x36e>
 80012a8:	20000214 	.word	0x20000214
 80012ac:	20000234 	.word	0x20000234
 80012b0:	20000235 	.word	0x20000235
 80012b4:	0800d680 	.word	0x0800d680
 80012b8:	0800d688 	.word	0x0800d688
 80012bc:	20000239 	.word	0x20000239
 80012c0:	10624dd3 	.word	0x10624dd3
 80012c4:	20000002 	.word	0x20000002
 80012c8:	20000004 	.word	0x20000004
 80012cc:	40012c00 	.word	0x40012c00
 80012d0:	20000006 	.word	0x20000006
 80012d4:	0800d690 	.word	0x0800d690
 80012d8:	2000056c 	.word	0x2000056c
 80012dc:	20000976 	.word	0x20000976
 80012e0:	200004d8 	.word	0x200004d8
 80012e4:	0800d69c 	.word	0x0800d69c
 80012e8:	0800d6a4 	.word	0x0800d6a4
 80012ec:	20000008 	.word	0x20000008
 80012f0:	0800d6ac 	.word	0x0800d6ac
 80012f4:	0800d6b8 	.word	0x0800d6b8
 80012f8:	0800d6bc 	.word	0x0800d6bc
 80012fc:	2000021d 	.word	0x2000021d
 8001300:	0800d6c0 	.word	0x0800d6c0
 8001304:	0800d6d0 	.word	0x0800d6d0
 8001308:	0800d6d4 	.word	0x0800d6d4
 800130c:	0800d6d8 	.word	0x0800d6d8
 8001310:	0800d6e8 	.word	0x0800d6e8
 8001314:	0800d6ec 	.word	0x0800d6ec
 8001318:	2000000c 	.word	0x2000000c
 800131c:	0800d6f0 	.word	0x0800d6f0
			}
			else if(memcmp(data + 1, "STS", 3) == 0 || memcmp(data + 1, "sts", 3) == 0){
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <getUSARTData+0x378>)
 8001322:	2203      	movs	r2, #3
 8001324:	491a      	ldr	r1, [pc, #104]	; (8001390 <getUSARTData+0x37c>)
 8001326:	4618      	mov	r0, r3
 8001328:	f008 fd58 	bl	8009ddc <memcmp>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <getUSARTData+0x330>
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <getUSARTData+0x378>)
 8001334:	2203      	movs	r2, #3
 8001336:	4917      	ldr	r1, [pc, #92]	; (8001394 <getUSARTData+0x380>)
 8001338:	4618      	mov	r0, r3
 800133a:	f008 fd4f 	bl	8009ddc <memcmp>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d11e      	bne.n	8001382 <getUSARTData+0x36e>
				strSize = sprintf((char*)buffer, "adcOffset: %f\r\noc5Value: %d\r\n", adcOffset, oc5Value);
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <getUSARTData+0x384>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8fd 	bl	8000548 <__aeabi_f2d>
 800134e:	460a      	mov	r2, r1
 8001350:	4601      	mov	r1, r0
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <getUSARTData+0x388>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	4613      	mov	r3, r2
 800135c:	460a      	mov	r2, r1
 800135e:	4910      	ldr	r1, [pc, #64]	; (80013a0 <getUSARTData+0x38c>)
 8001360:	4810      	ldr	r0, [pc, #64]	; (80013a4 <getUSARTData+0x390>)
 8001362:	f009 f9af 	bl	800a6c4 <siprintf>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <getUSARTData+0x394>)
 800136c:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, buffer, strSize);
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <getUSARTData+0x394>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	490b      	ldr	r1, [pc, #44]	; (80013a4 <getUSARTData+0x390>)
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <getUSARTData+0x398>)
 800137a:	f007 fddf 	bl	8008f3c <HAL_UART_Transmit_IT>
			}
		}
	 }
}
 800137e:	e000      	b.n	8001382 <getUSARTData+0x36e>
			 if(memcmp(data + 1, "PWM=", 4) == 0 || memcmp(data + 1, "pwm=", 4) == 0){
 8001380:	bf00      	nop
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}
 800138a:	bf00      	nop
 800138c:	20000235 	.word	0x20000235
 8001390:	0800d704 	.word	0x0800d704
 8001394:	0800d708 	.word	0x0800d708
 8001398:	2000000c 	.word	0x2000000c
 800139c:	20000008 	.word	0x20000008
 80013a0:	0800d70c 	.word	0x0800d70c
 80013a4:	2000056c 	.word	0x2000056c
 80013a8:	20000976 	.word	0x20000976
 80013ac:	200004d8 	.word	0x200004d8

080013b0 <commutateNow_0>:
void commutateNow_0(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <commutateNow_0+0x28>)
 80013ba:	f004 fcf1 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <commutateNow_0+0x28>)
 80013c4:	f004 fcec 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ce:	4802      	ldr	r0, [pc, #8]	; (80013d8 <commutateNow_0+0x28>)
 80013d0:	f004 fce6 	bl	8005da0 <HAL_GPIO_WritePin>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	48000400 	.word	0x48000400

080013dc <commutateNow_1>:

void commutateNow_1(void){
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2110      	movs	r1, #16
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <commutateNow_1+0x28>)
 80013e6:	f004 fcdb 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2120      	movs	r1, #32
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <commutateNow_1+0x28>)
 80013f0:	f004 fcd6 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <commutateNow_1+0x28>)
 80013fa:	f004 fcd1 	bl	8005da0 <HAL_GPIO_WritePin>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	48000400 	.word	0x48000400

08001408 <commutateNow_2>:

void commutateNow_2(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2108      	movs	r1, #8
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <commutateNow_2+0x28>)
 8001412:	f004 fcc5 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2110      	movs	r1, #16
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <commutateNow_2+0x28>)
 800141c:	f004 fcc0 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001426:	4802      	ldr	r0, [pc, #8]	; (8001430 <commutateNow_2+0x28>)
 8001428:	f004 fcba 	bl	8005da0 <HAL_GPIO_WritePin>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	48000400 	.word	0x48000400

08001434 <commutateNow_3>:

void commutateNow_3(void){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET); //INH_B connected to ground, IC B Sleep Mode
 8001438:	2200      	movs	r2, #0
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <commutateNow_3+0x28>)
 800143e:	f004 fcaf 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_SET); //IN_C floating, pwm mode
 8001442:	2201      	movs	r2, #1
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <commutateNow_3+0x28>)
 8001448:	f004 fcaa 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //INH_C is high, IC C Active Mode
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <commutateNow_3+0x28>)
 8001454:	f004 fca4 	bl	8005da0 <HAL_GPIO_WritePin>

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	48000400 	.word	0x48000400

08001460 <commutateNow_4>:

void commutateNow_4(void){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET); //INH_A connected to ground, IC A Sleep Mode
 8001464:	2200      	movs	r2, #0
 8001466:	2110      	movs	r1, #16
 8001468:	4807      	ldr	r0, [pc, #28]	; (8001488 <commutateNow_4+0x28>)
 800146a:	f004 fc99 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET); //IN_B connected to ground
 800146e:	2200      	movs	r2, #0
 8001470:	2120      	movs	r1, #32
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <commutateNow_4+0x28>)
 8001474:	f004 fc94 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //INH_B is high, IC B Active Mode
 8001478:	2201      	movs	r2, #1
 800147a:	2140      	movs	r1, #64	; 0x40
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <commutateNow_4+0x28>)
 800147e:	f004 fc8f 	bl	8005da0 <HAL_GPIO_WritePin>

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	48000400 	.word	0x48000400

0800148c <commutateNow_5>:
void commutateNow_5(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_SET); //IN_A connected to ground, PWM Mode
 8001490:	2201      	movs	r2, #1
 8001492:	2108      	movs	r1, #8
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <commutateNow_5+0x28>)
 8001496:	f004 fc83 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //INH_A is HIGH, IC A Active Mode
 800149a:	2201      	movs	r2, #1
 800149c:	2110      	movs	r1, #16
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <commutateNow_5+0x28>)
 80014a0:	f004 fc7e 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_RESET); //INH_C connected to ground, IC C Sleep Mode
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <commutateNow_5+0x28>)
 80014ac:	f004 fc78 	bl	8005da0 <HAL_GPIO_WritePin>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	48000400 	.word	0x48000400

080014b8 <commutationPattern>:

void commutationPattern(uint8_t step){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	if (step == NEXT && waitForCommutation == 1) {
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	f040 809e 	bne.w	8001606 <commutationPattern+0x14e>
 80014ca:	4b65      	ldr	r3, [pc, #404]	; (8001660 <commutationPattern+0x1a8>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	f040 8098 	bne.w	8001606 <commutationPattern+0x14e>
		if (commutationStepCounter < STEP_5)
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <commutationPattern+0x1ac>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d807      	bhi.n	80014f0 <commutationPattern+0x38>
			commutationStepCounter++;
 80014e0:	4b60      	ldr	r3, [pc, #384]	; (8001664 <commutationPattern+0x1ac>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <commutationPattern+0x1ac>)
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e002      	b.n	80014f6 <commutationPattern+0x3e>
		else{
			commutationStepCounter = STEP_0;
 80014f0:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <commutationPattern+0x1ac>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
		}
		switch (commutationStepCounter) {
 80014f6:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <commutationPattern+0x1ac>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	f200 80a9 	bhi.w	8001654 <commutationPattern+0x19c>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <commutationPattern+0x50>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001521 	.word	0x08001521
 800150c:	08001547 	.word	0x08001547
 8001510:	0800156d 	.word	0x0800156d
 8001514:	08001593 	.word	0x08001593
 8001518:	080015b9 	.word	0x080015b9
 800151c:	080015df 	.word	0x080015df
		case STEP_0:
			commutateNow_0();
 8001520:	f7ff ff46 	bl	80013b0 <commutateNow_0>
			COMPDELAY;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
 8001528:	e003      	b.n	8001532 <commutationPattern+0x7a>
 800152a:	bf00      	nop
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	3301      	adds	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	2bf9      	cmp	r3, #249	; 0xf9
 8001536:	d9f8      	bls.n	800152a <commutationPattern+0x72>
			waitForCommutation = 0;
 8001538:	4b49      	ldr	r3, [pc, #292]	; (8001660 <commutationPattern+0x1a8>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 800153e:	484a      	ldr	r0, [pc, #296]	; (8001668 <commutationPattern+0x1b0>)
 8001540:	f003 fc0a 	bl	8004d58 <HAL_COMP_Start_IT>
			break;
 8001544:	e05e      	b.n	8001604 <commutationPattern+0x14c>
		case STEP_1:
			commutateNow_1();
 8001546:	f7ff ff49 	bl	80013dc <commutateNow_1>
			COMPDELAY;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	e003      	b.n	8001558 <commutationPattern+0xa0>
 8001550:	bf00      	nop
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	3301      	adds	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2bf9      	cmp	r3, #249	; 0xf9
 800155c:	d9f8      	bls.n	8001550 <commutationPattern+0x98>
			waitForCommutation = 0;
 800155e:	4b40      	ldr	r3, [pc, #256]	; (8001660 <commutationPattern+0x1a8>)
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 8001564:	4841      	ldr	r0, [pc, #260]	; (800166c <commutationPattern+0x1b4>)
 8001566:	f003 fbf7 	bl	8004d58 <HAL_COMP_Start_IT>
			break;
 800156a:	e04b      	b.n	8001604 <commutationPattern+0x14c>
		case STEP_2:
			commutateNow_2();
 800156c:	f7ff ff4c 	bl	8001408 <commutateNow_2>
			COMPDELAY;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e003      	b.n	800157e <commutationPattern+0xc6>
 8001576:	bf00      	nop
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2bf9      	cmp	r3, #249	; 0xf9
 8001582:	d9f8      	bls.n	8001576 <commutationPattern+0xbe>
			waitForCommutation = 0;
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <commutationPattern+0x1a8>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 800158a:	4839      	ldr	r0, [pc, #228]	; (8001670 <commutationPattern+0x1b8>)
 800158c:	f003 fbe4 	bl	8004d58 <HAL_COMP_Start_IT>
			break;
 8001590:	e038      	b.n	8001604 <commutationPattern+0x14c>
		case STEP_3:
			commutateNow_3();
 8001592:	f7ff ff4f 	bl	8001434 <commutateNow_3>
			COMPDELAY;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	e003      	b.n	80015a4 <commutationPattern+0xec>
 800159c:	bf00      	nop
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	3301      	adds	r3, #1
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	2bf9      	cmp	r3, #249	; 0xf9
 80015a8:	d9f8      	bls.n	800159c <commutationPattern+0xe4>
			waitForCommutation = 0;
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <commutationPattern+0x1a8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 80015b0:	482d      	ldr	r0, [pc, #180]	; (8001668 <commutationPattern+0x1b0>)
 80015b2:	f003 fbd1 	bl	8004d58 <HAL_COMP_Start_IT>
			break;
 80015b6:	e025      	b.n	8001604 <commutationPattern+0x14c>
		case STEP_4:
			commutateNow_4();
 80015b8:	f7ff ff52 	bl	8001460 <commutateNow_4>
			COMPDELAY;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e003      	b.n	80015ca <commutationPattern+0x112>
 80015c2:	bf00      	nop
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3301      	adds	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2bf9      	cmp	r3, #249	; 0xf9
 80015ce:	d9f8      	bls.n	80015c2 <commutationPattern+0x10a>
			waitForCommutation = 0;
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <commutationPattern+0x1a8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 80015d6:	4825      	ldr	r0, [pc, #148]	; (800166c <commutationPattern+0x1b4>)
 80015d8:	f003 fbbe 	bl	8004d58 <HAL_COMP_Start_IT>
			break;
 80015dc:	e012      	b.n	8001604 <commutationPattern+0x14c>
		case STEP_5:
			commutateNow_5();
 80015de:	f7ff ff55 	bl	800148c <commutateNow_5>
			COMPDELAY;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	e003      	b.n	80015f0 <commutationPattern+0x138>
 80015e8:	bf00      	nop
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3301      	adds	r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2bf9      	cmp	r3, #249	; 0xf9
 80015f4:	d9f8      	bls.n	80015e8 <commutationPattern+0x130>
			waitForCommutation = 0;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <commutationPattern+0x1a8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 80015fc:	481c      	ldr	r0, [pc, #112]	; (8001670 <commutationPattern+0x1b8>)
 80015fe:	f003 fbab 	bl	8004d58 <HAL_COMP_Start_IT>
			break;
 8001602:	bf00      	nop
		}
	} else {
 8001604:	e026      	b.n	8001654 <commutationPattern+0x19c>
		waitForCommutation = 0;
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <commutationPattern+0x1a8>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
		switch (step) {
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d821      	bhi.n	8001656 <commutationPattern+0x19e>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <commutationPattern+0x160>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001631 	.word	0x08001631
 800161c:	08001637 	.word	0x08001637
 8001620:	0800163d 	.word	0x0800163d
 8001624:	08001643 	.word	0x08001643
 8001628:	08001649 	.word	0x08001649
 800162c:	0800164f 	.word	0x0800164f
		case STEP_0:
			commutateNow_0();
 8001630:	f7ff febe 	bl	80013b0 <commutateNow_0>
			break;
 8001634:	e00f      	b.n	8001656 <commutationPattern+0x19e>
		case STEP_1:
			commutateNow_1();
 8001636:	f7ff fed1 	bl	80013dc <commutateNow_1>
			break;
 800163a:	e00c      	b.n	8001656 <commutationPattern+0x19e>
		case STEP_2:
			commutateNow_2();
 800163c:	f7ff fee4 	bl	8001408 <commutateNow_2>
			break;
 8001640:	e009      	b.n	8001656 <commutationPattern+0x19e>
		case STEP_3:
			commutateNow_3();
 8001642:	f7ff fef7 	bl	8001434 <commutateNow_3>
			break;
 8001646:	e006      	b.n	8001656 <commutationPattern+0x19e>
		case STEP_4:
			commutateNow_4();
 8001648:	f7ff ff0a 	bl	8001460 <commutateNow_4>
			break;
 800164c:	e003      	b.n	8001656 <commutationPattern+0x19e>
		case STEP_5:
			commutateNow_5();
 800164e:	f7ff ff1d 	bl	800148c <commutateNow_5>
			break;
 8001652:	e000      	b.n	8001656 <commutationPattern+0x19e>
	} else {
 8001654:	bf00      	nop
		}
	}
}
 8001656:	bf00      	nop
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000000 	.word	0x20000000
 8001664:	200002b4 	.word	0x200002b4
 8001668:	20000714 	.word	0x20000714
 800166c:	200003cc 	.word	0x200003cc
 8001670:	20000744 	.word	0x20000744

08001674 <startMotor>:
	//HAL_ADC_Start_IT(&hadc1);

	motorGotStarted = 2;
}*/

void startMotor(){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
	adcIntegral = 0;
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <startMotor+0xec>)
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
	setPWM =  newPWM = 350;
 8001682:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001686:	4b37      	ldr	r3, [pc, #220]	; (8001764 <startMotor+0xf0>)
 8001688:	460a      	mov	r2, r1
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	4b36      	ldr	r3, [pc, #216]	; (8001768 <startMotor+0xf4>)
 800168e:	460a      	mov	r2, r1
 8001690:	801a      	strh	r2, [r3, #0]

	TIM1->CCR1 = setPWM;
 8001692:	4b35      	ldr	r3, [pc, #212]	; (8001768 <startMotor+0xf4>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	b21a      	sxth	r2, r3
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <startMotor+0xf8>)
 800169a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR5 = setPWM + compWindowOffset;
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <startMotor+0xf4>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b32      	ldr	r3, [pc, #200]	; (8001770 <startMotor+0xfc>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	441a      	add	r2, r3
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <startMotor+0xf8>)
 80016ae:	659a      	str	r2, [r3, #88]	; 0x58

	uint8_t step = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 2020;
 80016b4:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80016b8:	80bb      	strh	r3, [r7, #4]

	while(i > 1300){
 80016ba:	e018      	b.n	80016ee <startMotor+0x7a>
		DWT_Delay(i);
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fc82 	bl	8000fc8 <DWT_Delay>
		commutationPattern(step);
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fef6 	bl	80014b8 <commutationPattern>
		step += 1;
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	3301      	adds	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
		step %= 6;
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <startMotor+0x100>)
 80016d6:	fba3 1302 	umull	r1, r3, r3, r2
 80016da:	0899      	lsrs	r1, r3, #2
 80016dc:	460b      	mov	r3, r1
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	440b      	add	r3, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	71fb      	strb	r3, [r7, #7]
		i -= 10;
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	3b0a      	subs	r3, #10
 80016ec:	80bb      	strh	r3, [r7, #4]
	while(i > 1300){
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	f240 5214 	movw	r2, #1300	; 0x514
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d8e1      	bhi.n	80016bc <startMotor+0x48>
		//DWT_Delay(10);
	}

	//HAL_ADC_Start_IT(&hadc1);
	__HAL_ADC_DISABLE_IT(&hadc1, ADC_IT_EOC);
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <startMotor+0x104>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <startMotor+0x104>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0204 	bic.w	r2, r2, #4
 8001706:	605a      	str	r2, [r3, #4]
	__HAL_ADC_DISABLE_IT(&hadc1, ADC_IT_EOS);
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <startMotor+0x104>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <startMotor+0x104>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0208 	bic.w	r2, r2, #8
 8001716:	605a      	str	r2, [r3, #4]
	__HAL_ADC_DISABLE_IT(&hadc2, ADC_IT_EOC);
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <startMotor+0x108>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <startMotor+0x108>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0204 	bic.w	r2, r2, #4
 8001726:	605a      	str	r2, [r3, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)csADC, 12);
 8001728:	220c      	movs	r2, #12
 800172a:	4915      	ldr	r1, [pc, #84]	; (8001780 <startMotor+0x10c>)
 800172c:	4812      	ldr	r0, [pc, #72]	; (8001778 <startMotor+0x104>)
 800172e:	f002 faa3 	bl	8003c78 <HAL_ADC_Start_DMA>

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <startMotor+0x110>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
	commutationStepCounter = STEP_5;
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <startMotor+0x114>)
 800173c:	2205      	movs	r2, #5
 800173e:	701a      	strb	r2, [r3, #0]
	waitForCommutation = 1;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <startMotor+0x118>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim7);
 8001746:	4812      	ldr	r0, [pc, #72]	; (8001790 <startMotor+0x11c>)
 8001748:	f005 fe78 	bl	800743c <HAL_TIM_Base_Start>
	commutationPattern(NEXT);
 800174c:	2009      	movs	r0, #9
 800174e:	f7ff feb3 	bl	80014b8 <commutationPattern>

	mode_motor = MODE_MOTOR_RUN;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <startMotor+0x120>)
 8001754:	2204      	movs	r2, #4
 8001756:	701a      	strb	r2, [r3, #0]
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000218 	.word	0x20000218
 8001764:	20000002 	.word	0x20000002
 8001768:	20000004 	.word	0x20000004
 800176c:	40012c00 	.word	0x40012c00
 8001770:	20000006 	.word	0x20000006
 8001774:	aaaaaaab 	.word	0xaaaaaaab
 8001778:	20000440 	.word	0x20000440
 800177c:	200002d0 	.word	0x200002d0
 8001780:	20000678 	.word	0x20000678
 8001784:	20000870 	.word	0x20000870
 8001788:	200002b4 	.word	0x200002b4
 800178c:	20000000 	.word	0x20000000
 8001790:	20000934 	.word	0x20000934
 8001794:	20000230 	.word	0x20000230

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b598      	push	{r3, r4, r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179c:	f001 fff0 	bl	8003780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a0:	f000 f9a4 	bl	8001aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a4:	f000 fe76 	bl	8002494 <MX_GPIO_Init>
  MX_DMA_Init();
 80017a8:	f000 fe3a 	bl	8002420 <MX_DMA_Init>
  MX_ADC1_Init();
 80017ac:	f000 f9fe 	bl	8001bac <MX_ADC1_Init>
  MX_COMP1_Init();
 80017b0:	f000 faca 	bl	8001d48 <MX_COMP1_Init>
  MX_COMP2_Init();
 80017b4:	f000 faf8 	bl	8001da8 <MX_COMP2_Init>
  MX_COMP3_Init();
 80017b8:	f000 fb26 	bl	8001e08 <MX_COMP3_Init>
  MX_DAC_Init();
 80017bc:	f000 fb54 	bl	8001e68 <MX_DAC_Init>
  MX_TIM1_Init();
 80017c0:	f000 fb7c 	bl	8001ebc <MX_TIM1_Init>
  MX_TIM3_Init();
 80017c4:	f000 fc82 	bl	80020cc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80017c8:	f000 fdfa 	bl	80023c0 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80017cc:	f000 fa5e 	bl	8001c8c <MX_ADC2_Init>
  MX_TIM15_Init();
 80017d0:	f000 fd4c 	bl	800226c <MX_TIM15_Init>
  MX_TIM2_Init();
 80017d4:	f000 fc2c 	bl	8002030 <MX_TIM2_Init>
  MX_TIM6_Init();
 80017d8:	f000 fcdc 	bl	8002194 <MX_TIM6_Init>
  MX_TIM7_Init();
 80017dc:	f000 fd10 	bl	8002200 <MX_TIM7_Init>
  MX_TIM16_Init();
 80017e0:	f000 fdc8 	bl	8002374 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80017e4:	2064      	movs	r0, #100	; 0x64
 80017e6:	f002 f831 	bl	800384c <HAL_Delay>
  DWT_Init();
 80017ea:	f7ff fbcd 	bl	8000f88 <DWT_Init>
  mode_motor = MODE_MOTOR_STOP;
 80017ee:	4ba3      	ldr	r3, [pc, #652]	; (8001a7c <main+0x2e4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]

  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f4:	4ba2      	ldr	r3, [pc, #648]	; (8001a80 <main+0x2e8>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	605a      	str	r2, [r3, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017fa:	4ba1      	ldr	r3, [pc, #644]	; (8001a80 <main+0x2e8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001800:	4b9f      	ldr	r3, [pc, #636]	; (8001a80 <main+0x2e8>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001806:	4b9e      	ldr	r3, [pc, #632]	; (8001a80 <main+0x2e8>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  sConfig.Offset = 0;
 800180c:	4b9c      	ldr	r3, [pc, #624]	; (8001a80 <main+0x2e8>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]

  sConfigOC5B.OCMode = TIM_OCMODE_PWM1;
 8001812:	4b9c      	ldr	r3, [pc, #624]	; (8001a84 <main+0x2ec>)
 8001814:	2260      	movs	r2, #96	; 0x60
 8001816:	601a      	str	r2, [r3, #0]
  sConfigOC5B.OCFastMode = TIM_OCFAST_DISABLE;
 8001818:	4b9a      	ldr	r3, [pc, #616]	; (8001a84 <main+0x2ec>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  sConfigOC5B.OCIdleState = TIM_OCIDLESTATE_RESET;
 800181e:	4b99      	ldr	r3, [pc, #612]	; (8001a84 <main+0x2ec>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
  sConfigOC5B.OCPolarity = TIM_OCPOLARITY_HIGH; //HIGH for PWM low detection
 8001824:	4b97      	ldr	r3, [pc, #604]	; (8001a84 <main+0x2ec>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]

  sConfigOC5A.OCMode = TIM_OCMODE_PWM1;
 800182a:	4b97      	ldr	r3, [pc, #604]	; (8001a88 <main+0x2f0>)
 800182c:	2260      	movs	r2, #96	; 0x60
 800182e:	601a      	str	r2, [r3, #0]
  sConfigOC5A.OCFastMode = TIM_OCFAST_DISABLE; //DISABLE
 8001830:	4b95      	ldr	r3, [pc, #596]	; (8001a88 <main+0x2f0>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  sConfigOC5A.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001836:	4b94      	ldr	r3, [pc, #592]	; (8001a88 <main+0x2f0>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
  sConfigOC5A.OCPolarity = TIM_OCPOLARITY_LOW; //LOW for PWM high detection
 800183c:	4b92      	ldr	r3, [pc, #584]	; (8001a88 <main+0x2f0>)
 800183e:	2202      	movs	r2, #2
 8001840:	609a      	str	r2, [r3, #8]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001842:	2100      	movs	r1, #0
 8001844:	4891      	ldr	r0, [pc, #580]	; (8001a8c <main+0x2f4>)
 8001846:	f005 fea3 	bl	8007590 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 800184a:	2110      	movs	r1, #16
 800184c:	488f      	ldr	r0, [pc, #572]	; (8001a8c <main+0x2f4>)
 800184e:	f005 fe9f 	bl	8007590 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 8001852:	488f      	ldr	r0, [pc, #572]	; (8001a90 <main+0x2f8>)
 8001854:	f005 fdf2 	bl	800743c <HAL_TIM_Base_Start>
  //HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001858:	2100      	movs	r1, #0
 800185a:	488e      	ldr	r0, [pc, #568]	; (8001a94 <main+0x2fc>)
 800185c:	f003 fde8 	bl	8005430 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001860:	2300      	movs	r3, #0
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	488b      	ldr	r0, [pc, #556]	; (8001a94 <main+0x2fc>)
 8001868:	f003 fdbd 	bl	80053e6 <HAL_DAC_SetValue>
  newPWM = setPWM = TIM1->CCR1 = TIM1->CCR5 = 0;
 800186c:	4a8a      	ldr	r2, [pc, #552]	; (8001a98 <main+0x300>)
 800186e:	2300      	movs	r3, #0
 8001870:	6593      	str	r3, [r2, #88]	; 0x58
 8001872:	4a89      	ldr	r2, [pc, #548]	; (8001a98 <main+0x300>)
 8001874:	6353      	str	r3, [r2, #52]	; 0x34
 8001876:	b21a      	sxth	r2, r3
 8001878:	4b88      	ldr	r3, [pc, #544]	; (8001a9c <main+0x304>)
 800187a:	4611      	mov	r1, r2
 800187c:	8019      	strh	r1, [r3, #0]
 800187e:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <main+0x308>)
 8001880:	801a      	strh	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001882:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <main+0x30c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b86      	ldr	r3, [pc, #536]	; (8001aa4 <main+0x30c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0210 	orr.w	r2, r2, #16
 8001890:	601a      	str	r2, [r3, #0]

  if(HAL_UART_Receive_DMA(&huart1, dma_rx_buf, DMA_BUF_SIZE) != HAL_OK){
 8001892:	2232      	movs	r2, #50	; 0x32
 8001894:	4984      	ldr	r1, [pc, #528]	; (8001aa8 <main+0x310>)
 8001896:	4883      	ldr	r0, [pc, #524]	; (8001aa4 <main+0x30c>)
 8001898:	f007 fbac 	bl	8008ff4 <HAL_UART_Receive_DMA>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <main+0x10e>
	  Error_Handler();
 80018a2:	f001 fa91 	bl	8002dc8 <Error_Handler>
  }

  HAL_TIM_Base_Start_IT(&htim6);
 80018a6:	4881      	ldr	r0, [pc, #516]	; (8001aac <main+0x314>)
 80018a8:	f005 fdf2 	bl	8007490 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80018ac:	4880      	ldr	r0, [pc, #512]	; (8001ab0 <main+0x318>)
 80018ae:	f005 fdef 	bl	8007490 <HAL_TIM_Base_Start_IT>

  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80018b2:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <main+0x30c>)
 80018b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b7a      	ldr	r3, [pc, #488]	; (8001aa4 <main+0x30c>)
 80018bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0204 	bic.w	r2, r2, #4
 80018c4:	601a      	str	r2, [r3, #0]

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80018c6:	2100      	movs	r1, #0
 80018c8:	487a      	ldr	r0, [pc, #488]	; (8001ab4 <main+0x31c>)
 80018ca:	f005 ff5d 	bl	8007788 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 80018ce:	2104      	movs	r1, #4
 80018d0:	4878      	ldr	r0, [pc, #480]	; (8001ab4 <main+0x31c>)
 80018d2:	f005 ff59 	bl	8007788 <HAL_TIM_IC_Start_IT>

  strSize = sprintf((char*)buffer, "Test\r\n");
 80018d6:	4b78      	ldr	r3, [pc, #480]	; (8001ab8 <main+0x320>)
 80018d8:	4a78      	ldr	r2, [pc, #480]	; (8001abc <main+0x324>)
 80018da:	6810      	ldr	r0, [r2, #0]
 80018dc:	6018      	str	r0, [r3, #0]
 80018de:	8891      	ldrh	r1, [r2, #4]
 80018e0:	7992      	ldrb	r2, [r2, #6]
 80018e2:	8099      	strh	r1, [r3, #4]
 80018e4:	719a      	strb	r2, [r3, #6]
 80018e6:	2306      	movs	r3, #6
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b75      	ldr	r3, [pc, #468]	; (8001ac0 <main+0x328>)
 80018ec:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80018ee:	4b74      	ldr	r3, [pc, #464]	; (8001ac0 <main+0x328>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	230a      	movs	r3, #10
 80018f6:	4970      	ldr	r1, [pc, #448]	; (8001ab8 <main+0x320>)
 80018f8:	486a      	ldr	r0, [pc, #424]	; (8001aa4 <main+0x30c>)
 80018fa:	f007 fa8b 	bl	8008e14 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(mode_motor){
 80018fe:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <main+0x2e4>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b04      	cmp	r3, #4
 8001904:	f200 80b6 	bhi.w	8001a74 <main+0x2dc>
 8001908:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <main+0x178>)
 800190a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190e:	bf00      	nop
 8001910:	08001a75 	.word	0x08001a75
 8001914:	080019ab 	.word	0x080019ab
 8001918:	080019b5 	.word	0x080019b5
 800191c:	080019c9 	.word	0x080019c9
 8001920:	080019cf 	.word	0x080019cf
	  case MODE_MOTOR_STOP:
		  break;
	  case MODE_MOTOR_CALIBRATION:
		  while(mode_motor == MODE_MOTOR_CALIBRATION){
			  static int calibration_counter;
			  if(inputDutyCycle < input_pwm_min) input_pwm_min = inputDutyCycle;
 8001924:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <main+0x32c>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b67      	ldr	r3, [pc, #412]	; (8001ac8 <main+0x330>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d904      	bls.n	800193c <main+0x1a4>
 8001932:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <main+0x330>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <main+0x32c>)
 800193a:	801a      	strh	r2, [r3, #0]
			  if(inputDutyCycle > input_pwm_max) input_pwm_max = inputDutyCycle;
 800193c:	4b63      	ldr	r3, [pc, #396]	; (8001acc <main+0x334>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b61      	ldr	r3, [pc, #388]	; (8001ac8 <main+0x330>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d204      	bcs.n	8001954 <main+0x1bc>
 800194a:	4b5f      	ldr	r3, [pc, #380]	; (8001ac8 <main+0x330>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b5e      	ldr	r3, [pc, #376]	; (8001acc <main+0x334>)
 8001952:	801a      	strh	r2, [r3, #0]
			  if(inputDutyCycle < 1050){
 8001954:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <main+0x330>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f240 4219 	movw	r2, #1049	; 0x419
 800195c:	4293      	cmp	r3, r2
 800195e:	d824      	bhi.n	80019aa <main+0x212>
				  if(calibration_counter > 1000){
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <main+0x338>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001968:	dd17      	ble.n	800199a <main+0x202>
					  strSize = sprintf((char*)buffer, "motor ready\r\n");
 800196a:	4a53      	ldr	r2, [pc, #332]	; (8001ab8 <main+0x320>)
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <main+0x33c>)
 800196e:	4614      	mov	r4, r2
 8001970:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001972:	6020      	str	r0, [r4, #0]
 8001974:	6061      	str	r1, [r4, #4]
 8001976:	60a2      	str	r2, [r4, #8]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	81a3      	strh	r3, [r4, #12]
 800197c:	230d      	movs	r3, #13
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <main+0x328>)
 8001982:	801a      	strh	r2, [r3, #0]
					  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001984:	4b4e      	ldr	r3, [pc, #312]	; (8001ac0 <main+0x328>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	b29a      	uxth	r2, r3
 800198a:	230a      	movs	r3, #10
 800198c:	494a      	ldr	r1, [pc, #296]	; (8001ab8 <main+0x320>)
 800198e:	4845      	ldr	r0, [pc, #276]	; (8001aa4 <main+0x30c>)
 8001990:	f007 fa40 	bl	8008e14 <HAL_UART_Transmit>
					  mode_motor = MODE_MOTOR_READY;
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <main+0x2e4>)
 8001996:	2202      	movs	r2, #2
 8001998:	701a      	strb	r2, [r3, #0]
				  }
				  calibration_counter++;
 800199a:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <main+0x338>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a4b      	ldr	r2, [pc, #300]	; (8001ad0 <main+0x338>)
 80019a2:	6013      	str	r3, [r2, #0]
				  HAL_Delay(1);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f001 ff51 	bl	800384c <HAL_Delay>
		  while(mode_motor == MODE_MOTOR_CALIBRATION){
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <main+0x2e4>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d0b8      	beq.n	8001924 <main+0x18c>
			  }
		  }
		  break;
 80019b2:	e05f      	b.n	8001a74 <main+0x2dc>
	  case MODE_MOTOR_READY:
		  TIM1->CCR1 = 0;
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <main+0x300>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM1->CCR5 = 0;
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <main+0x300>)
 80019bc:	2200      	movs	r2, #0
 80019be:	659a      	str	r2, [r3, #88]	; 0x58
		  tim2cnt = 0;
 80019c0:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <main+0x340>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
		  break;
 80019c6:	e055      	b.n	8001a74 <main+0x2dc>
	  case MODE_MOTOR_START:
		  startMotor();
 80019c8:	f7ff fe54 	bl	8001674 <startMotor>
		  break;
 80019cc:	e052      	b.n	8001a74 <main+0x2dc>
	  case MODE_MOTOR_RUN:
			newPWM = map(inputDutyCycle, input_pwm_min, input_pwm_max, PWM_MIN, PWM_MAX);
 80019ce:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <main+0x330>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a3c      	ldr	r2, [pc, #240]	; (8001ac4 <main+0x32c>)
 80019d4:	8812      	ldrh	r2, [r2, #0]
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	4a3a      	ldr	r2, [pc, #232]	; (8001acc <main+0x334>)
 80019e2:	8812      	ldrh	r2, [r2, #0]
 80019e4:	4611      	mov	r1, r2
 80019e6:	4a37      	ldr	r2, [pc, #220]	; (8001ac4 <main+0x32c>)
 80019e8:	8812      	ldrh	r2, [r2, #0]
 80019ea:	1a8a      	subs	r2, r1, r2
 80019ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <main+0x308>)
 80019f4:	801a      	strh	r2, [r3, #0]
			setPWM = newPWM;
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <main+0x308>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b21a      	sxth	r2, r3
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <main+0x304>)
 80019fe:	801a      	strh	r2, [r3, #0]

		  	if(inputDutyCycle < 1050){
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <main+0x330>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f240 4219 	movw	r2, #1049	; 0x419
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d823      	bhi.n	8001a54 <main+0x2bc>
				measuredRPM = 0;
 8001a0c:	4b33      	ldr	r3, [pc, #204]	; (8001adc <main+0x344>)
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
				inputRPM = 0;
 8001a14:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <main+0x348>)
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
				mode_motor = MODE_MOTOR_READY;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <main+0x2e4>)
 8001a1e:	2202      	movs	r2, #2
 8001a20:	701a      	strb	r2, [r3, #0]
				strSize = sprintf((char*)buffer, "motor ready\r\n");
 8001a22:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <main+0x320>)
 8001a24:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <main+0x33c>)
 8001a26:	4614      	mov	r4, r2
 8001a28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a2a:	6020      	str	r0, [r4, #0]
 8001a2c:	6061      	str	r1, [r4, #4]
 8001a2e:	60a2      	str	r2, [r4, #8]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	81a3      	strh	r3, [r4, #12]
 8001a34:	230d      	movs	r3, #13
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <main+0x328>)
 8001a3a:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001a3c:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <main+0x328>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	230a      	movs	r3, #10
 8001a44:	491c      	ldr	r1, [pc, #112]	; (8001ab8 <main+0x320>)
 8001a46:	4817      	ldr	r0, [pc, #92]	; (8001aa4 <main+0x30c>)
 8001a48:	f007 f9e4 	bl	8008e14 <HAL_UART_Transmit>
				HAL_ADC_Stop_DMA(&hadc1);
 8001a4c:	4825      	ldr	r0, [pc, #148]	; (8001ae4 <main+0x34c>)
 8001a4e:	f002 fa2f 	bl	8003eb0 <HAL_ADC_Stop_DMA>
		  	} else {
				TIM1->CCR1 = setPWM;
				TIM1->CCR5 = setPWM + compWindowOffset;
		  	}
	  	  break;
 8001a52:	e00e      	b.n	8001a72 <main+0x2da>
				TIM1->CCR1 = setPWM;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <main+0x304>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <main+0x300>)
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR5 = setPWM + compWindowOffset;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <main+0x304>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <main+0x350>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	441a      	add	r2, r3
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <main+0x300>)
 8001a70:	659a      	str	r2, [r3, #88]	; 0x58
	  	  break;
 8001a72:	bf00      	nop
	  }

	  getUSARTData();
 8001a74:	f7ff face 	bl	8001014 <getUSARTData>
	  switch(mode_motor){
 8001a78:	e741      	b.n	80018fe <main+0x166>
 8001a7a:	bf00      	nop
 8001a7c:	20000230 	.word	0x20000230
 8001a80:	20000774 	.word	0x20000774
 8001a84:	2000078c 	.word	0x2000078c
 8001a88:	200009ac 	.word	0x200009ac
 8001a8c:	200006d4 	.word	0x200006d4
 8001a90:	20000870 	.word	0x20000870
 8001a94:	20000558 	.word	0x20000558
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	20000002 	.word	0x20000002
 8001aa4:	200004d8 	.word	0x200004d8
 8001aa8:	20000978 	.word	0x20000978
 8001aac:	20000690 	.word	0x20000690
 8001ab0:	200008f4 	.word	0x200008f4
 8001ab4:	20000324 	.word	0x20000324
 8001ab8:	2000056c 	.word	0x2000056c
 8001abc:	0800d72c 	.word	0x0800d72c
 8001ac0:	20000976 	.word	0x20000976
 8001ac4:	20000010 	.word	0x20000010
 8001ac8:	20000228 	.word	0x20000228
 8001acc:	20000012 	.word	0x20000012
 8001ad0:	20000268 	.word	0x20000268
 8001ad4:	0800d734 	.word	0x0800d734
 8001ad8:	200006d0 	.word	0x200006d0
 8001adc:	20000220 	.word	0x20000220
 8001ae0:	20000224 	.word	0x20000224
 8001ae4:	20000440 	.word	0x20000440
 8001ae8:	20000006 	.word	0x20000006

08001aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b09e      	sub	sp, #120	; 0x78
 8001af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001af6:	2228      	movs	r2, #40	; 0x28
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f008 f97d 	bl	8009dfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b10:	463b      	mov	r3, r7
 8001b12:	223c      	movs	r2, #60	; 0x3c
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f008 f96f 	bl	8009dfa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001b26:	2301      	movs	r3, #1
 8001b28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b36:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b38:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b3c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 f95e 	bl	8005e04 <HAL_RCC_OscConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b4e:	f001 f93b 	bl	8002dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b52:	230f      	movs	r3, #15
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b56:	2302      	movs	r3, #2
 8001b58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 f850 	bl	8006c14 <HAL_RCC_ClockConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001b7a:	f001 f925 	bl	8002dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8001b7e:	f241 0381 	movw	r3, #4225	; 0x1081
 8001b82:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV6;
 8001b88:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b92:	463b      	mov	r3, r7
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fa75 	bl	8007084 <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ba0:	f001 f912 	bl	8002dc8 <Error_Handler>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3778      	adds	r7, #120	; 0x78
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
 8001bcc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bce:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001bd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bd4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bdc:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001c18:	2208      	movs	r2, #8
 8001c1a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c28:	4817      	ldr	r0, [pc, #92]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001c2a:	f001 fe45 	bl	80038b8 <HAL_ADC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001c34:	f001 f8c8 	bl	8002dc8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4811      	ldr	r0, [pc, #68]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001c44:	f002 fc7c 	bl	8004540 <HAL_ADCEx_MultiModeConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001c4e:	f001 f8bb 	bl	8002dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <MX_ADC1_Init+0xdc>)
 8001c70:	f002 f97a 	bl	8003f68 <HAL_ADC_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001c7a:	f001 f8a5 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000440 	.word	0x20000440

08001c8c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c92:	463b      	mov	r3, r7
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
 8001ca0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ca2:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001ca4:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <MX_ADC2_Init+0xb8>)
 8001ca6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cea:	2204      	movs	r2, #4
 8001cec:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cfa:	4811      	ldr	r0, [pc, #68]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001cfc:	f001 fddc 	bl	80038b8 <HAL_ADC_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001d06:	f001 f85f 	bl	8002dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d22:	463b      	mov	r3, r7
 8001d24:	4619      	mov	r1, r3
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <MX_ADC2_Init+0xb4>)
 8001d28:	f002 f91e 	bl	8003f68 <HAL_ADC_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001d32:	f001 f849 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002d0 	.word	0x200002d0
 8001d44:	50000100 	.word	0x50000100

08001d48 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d4e:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <MX_COMP1_Init+0x5c>)
 8001d50:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d54:	2240      	movs	r2, #64	; 0x40
 8001d56:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d60:	227f      	movs	r2, #127	; 0x7f
 8001d62:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d72:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d76:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d86:	2203      	movs	r2, #3
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_COMP1_Init+0x58>)
 8001d8c:	f002 fe9c 	bl	8004ac8 <HAL_COMP_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 8001d96:	f001 f817 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200003cc 	.word	0x200003cc
 8001da4:	4001001c 	.word	0x4001001c

08001da8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <MX_COMP2_Init+0x5c>)
 8001db0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001dc0:	227f      	movs	r2, #127	; 0x7f
 8001dc2:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001dd2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dd6:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001de6:	2203      	movs	r2, #3
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_COMP2_Init+0x58>)
 8001dec:	f002 fe6c 	bl	8004ac8 <HAL_COMP_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8001df6:	f000 ffe7 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000714 	.word	0x20000714
 8001e04:	40010020 	.word	0x40010020

08001e08 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e0e:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <MX_COMP3_Init+0x5c>)
 8001e10:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e20:	227f      	movs	r2, #127	; 0x7f
 8001e22:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e36:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e46:	2203      	movs	r2, #3
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_COMP3_Init+0x58>)
 8001e4c:	f002 fe3c 	bl	8004ac8 <HAL_COMP_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_COMP3_Init+0x52>
  {
    Error_Handler();
 8001e56:	f000 ffb7 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000744 	.word	0x20000744
 8001e64:	40010024 	.word	0x40010024

08001e68 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <MX_DAC_Init+0x4c>)
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <MX_DAC_Init+0x50>)
 8001e7c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <MX_DAC_Init+0x4c>)
 8001e80:	f003 fa85 	bl	800538e <HAL_DAC_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001e8a:	f000 ff9d 	bl	8002dc8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <MX_DAC_Init+0x4c>)
 8001e9e:	f003 fb6c 	bl	800557a <HAL_DAC_ConfigChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8001ea8:	f000 ff8e 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000558 	.word	0x20000558
 8001eb8:	40007400 	.word	0x40007400

08001ebc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b096      	sub	sp, #88	; 0x58
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	222c      	movs	r2, #44	; 0x2c
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f007 ff86 	bl	8009dfa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eee:	4b4e      	ldr	r3, [pc, #312]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001ef0:	4a4e      	ldr	r2, [pc, #312]	; (800202c <MX_TIM1_Init+0x170>)
 8001ef2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2 - 1;
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001efc:	2260      	movs	r2, #96	; 0x60
 8001efe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001f00:	4b49      	ldr	r3, [pc, #292]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001f02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b47      	ldr	r3, [pc, #284]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f14:	4b44      	ldr	r3, [pc, #272]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f1a:	4843      	ldr	r0, [pc, #268]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001f1c:	f005 fb0d 	bl	800753a <HAL_TIM_PWM_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001f26:	f000 ff4f 	bl	8002dc8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001f2a:	483f      	ldr	r0, [pc, #252]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001f2c:	f005 fada 	bl	80074e4 <HAL_TIM_OC_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001f36:	f000 ff47 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8001f3a:	2330      	movs	r3, #48	; 0x30
 8001f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF_RISING_OC6REF_RISING;
 8001f3e:	f44f 0360 	mov.w	r3, #14680064	; 0xe00000
 8001f42:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4836      	ldr	r0, [pc, #216]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001f50:	f006 fdf6 	bl	8008b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001f5a:	f000 ff35 	bl	8002dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5e:	2360      	movs	r3, #96	; 0x60
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8001f62:	2364      	movs	r3, #100	; 0x64
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f66:	2300      	movs	r3, #0
 8001f68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f80:	2200      	movs	r2, #0
 8001f82:	4619      	mov	r1, r3
 8001f84:	4828      	ldr	r0, [pc, #160]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001f86:	f005 fea7 	bl	8007cd8 <HAL_TIM_PWM_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001f90:	f000 ff1a 	bl	8002dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001f94:	2330      	movs	r3, #48	; 0x30
 8001f96:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4820      	ldr	r0, [pc, #128]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001fa6:	f005 fd7d 	bl	8007aa4 <HAL_TIM_OC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001fb0:	f000 ff0a 	bl	8002dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb4:	2360      	movs	r3, #96	; 0x60
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 120;
 8001fb8:	2378      	movs	r3, #120	; 0x78
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8001fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4818      	ldr	r0, [pc, #96]	; (8002028 <MX_TIM1_Init+0x16c>)
 8001fc6:	f005 fe87 	bl	8007cd8 <HAL_TIM_PWM_ConfigChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001fd0:	f000 fefa 	bl	8002dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM1_Init+0x16c>)
 800200a:	f006 fe19 	bl	8008c40 <HAL_TIMEx_ConfigBreakDeadTime>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8002014:	f000 fed8 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM1_Init+0x16c>)
 800201a:	f001 f9af 	bl	800337c <HAL_TIM_MspPostInit>

}
 800201e:	bf00      	nop
 8002020:	3758      	adds	r7, #88	; 0x58
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200006d4 	.word	0x200006d4
 800202c:	40012c00 	.word	0x40012c00

08002030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002050:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002054:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4 - 1;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002058:	2203      	movs	r2, #3
 800205a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <MX_TIM2_Init+0x98>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <MX_TIM2_Init+0x98>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002076:	4814      	ldr	r0, [pc, #80]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002078:	f005 f9b4 	bl	80073e4 <HAL_TIM_Base_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002082:	f000 fea1 	bl	8002dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4619      	mov	r1, r3
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <MX_TIM2_Init+0x98>)
 8002094:	f005 ff38 	bl	8007f08 <HAL_TIM_ConfigClockSource>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800209e:	f000 fe93 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <MX_TIM2_Init+0x98>)
 80020b0:	f006 fd46 	bl	8008b40 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80020ba:	f000 fe85 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000870 	.word	0x20000870

080020cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d2:	f107 031c 	add.w	r3, r7, #28
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020de:	463b      	mov	r3, r7
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	615a      	str	r2, [r3, #20]
 80020ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <MX_TIM3_Init+0xc0>)
 80020f2:	4a27      	ldr	r2, [pc, #156]	; (8002190 <MX_TIM3_Init+0xc4>)
 80020f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <MX_TIM3_Init+0xc0>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <MX_TIM3_Init+0xc0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <MX_TIM3_Init+0xc0>)
 8002104:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002108:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_TIM3_Init+0xc0>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_TIM3_Init+0xc0>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002116:	481d      	ldr	r0, [pc, #116]	; (800218c <MX_TIM3_Init+0xc0>)
 8002118:	f005 f9e4 	bl	80074e4 <HAL_TIM_OC_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002122:	f000 fe51 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	4815      	ldr	r0, [pc, #84]	; (800218c <MX_TIM3_Init+0xc0>)
 8002136:	f006 fd03 	bl	8008b40 <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002140:	f000 fe42 	bl	8002dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002144:	2300      	movs	r3, #0
 8002146:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002148:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800214c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002156:	463b      	mov	r3, r7
 8002158:	2200      	movs	r2, #0
 800215a:	4619      	mov	r1, r3
 800215c:	480b      	ldr	r0, [pc, #44]	; (800218c <MX_TIM3_Init+0xc0>)
 800215e:	f005 fca1 	bl	8007aa4 <HAL_TIM_OC_ConfigChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002168:	f000 fe2e 	bl	8002dc8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800216c:	463b      	mov	r3, r7
 800216e:	2204      	movs	r2, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4806      	ldr	r0, [pc, #24]	; (800218c <MX_TIM3_Init+0xc0>)
 8002174:	f005 fc96 	bl	8007aa4 <HAL_TIM_OC_ConfigChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800217e:	f000 fe23 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200003fc 	.word	0x200003fc
 8002190:	40000400 	.word	0x40000400

08002194 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <MX_TIM6_Init+0x64>)
 80021a6:	4a15      	ldr	r2, [pc, #84]	; (80021fc <MX_TIM6_Init+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <MX_TIM6_Init+0x64>)
 80021ac:	2247      	movs	r2, #71	; 0x47
 80021ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_TIM6_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10 ;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_TIM6_Init+0x64>)
 80021b8:	220a      	movs	r2, #10
 80021ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_TIM6_Init+0x64>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <MX_TIM6_Init+0x64>)
 80021c4:	f005 f90e 	bl	80073e4 <HAL_TIM_Base_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80021ce:	f000 fdfb 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <MX_TIM6_Init+0x64>)
 80021e0:	f006 fcae 	bl	8008b40 <HAL_TIMEx_MasterConfigSynchronization>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80021ea:	f000 fded 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000690 	.word	0x20000690
 80021fc:	40001000 	.word	0x40001000

08002200 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_TIM7_Init+0x64>)
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <MX_TIM7_Init+0x68>)
 8002214:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6 - 1;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <MX_TIM7_Init+0x64>)
 8002218:	2205      	movs	r2, #5
 800221a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_TIM7_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <MX_TIM7_Init+0x64>)
 8002224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002228:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_TIM7_Init+0x64>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002230:	480c      	ldr	r0, [pc, #48]	; (8002264 <MX_TIM7_Init+0x64>)
 8002232:	f005 f8d7 	bl	80073e4 <HAL_TIM_Base_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800223c:	f000 fdc4 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_TIM7_Init+0x64>)
 800224e:	f006 fc77 	bl	8008b40 <HAL_TIMEx_MasterConfigSynchronization>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002258:	f000 fdb6 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000934 	.word	0x20000934
 8002268:	40001400 	.word	0x40001400

0800226c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	; 0x30
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <MX_TIM15_Init+0x100>)
 800229a:	4a35      	ldr	r2, [pc, #212]	; (8002370 <MX_TIM15_Init+0x104>)
 800229c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72 - 1;
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <MX_TIM15_Init+0x100>)
 80022a0:	2247      	movs	r2, #71	; 0x47
 80022a2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a4:	4b31      	ldr	r3, [pc, #196]	; (800236c <MX_TIM15_Init+0x100>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80022aa:	4b30      	ldr	r3, [pc, #192]	; (800236c <MX_TIM15_Init+0x100>)
 80022ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <MX_TIM15_Init+0x100>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80022b8:	4b2c      	ldr	r3, [pc, #176]	; (800236c <MX_TIM15_Init+0x100>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022be:	4b2b      	ldr	r3, [pc, #172]	; (800236c <MX_TIM15_Init+0x100>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80022c4:	4829      	ldr	r0, [pc, #164]	; (800236c <MX_TIM15_Init+0x100>)
 80022c6:	f005 f88d 	bl	80073e4 <HAL_TIM_Base_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 80022d0:	f000 fd7a 	bl	8002dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80022da:	f107 0320 	add.w	r3, r7, #32
 80022de:	4619      	mov	r1, r3
 80022e0:	4822      	ldr	r0, [pc, #136]	; (800236c <MX_TIM15_Init+0x100>)
 80022e2:	f005 fe11 	bl	8007f08 <HAL_TIM_ConfigClockSource>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 80022ec:	f000 fd6c 	bl	8002dc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80022f0:	481e      	ldr	r0, [pc, #120]	; (800236c <MX_TIM15_Init+0x100>)
 80022f2:	f005 fa13 	bl	800771c <HAL_TIM_IC_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80022fc:	f000 fd64 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	4817      	ldr	r0, [pc, #92]	; (800236c <MX_TIM15_Init+0x100>)
 8002310:	f006 fc16 	bl	8008b40 <HAL_TIMEx_MasterConfigSynchronization>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 800231a:	f000 fd55 	bl	8002dc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002322:	2301      	movs	r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	2200      	movs	r2, #0
 8002332:	4619      	mov	r1, r3
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_TIM15_Init+0x100>)
 8002336:	f005 fc33 	bl	8007ba0 <HAL_TIM_IC_ConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8002340:	f000 fd42 	bl	8002dc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002344:	2302      	movs	r3, #2
 8002346:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002348:	2302      	movs	r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	2204      	movs	r2, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4806      	ldr	r0, [pc, #24]	; (800236c <MX_TIM15_Init+0x100>)
 8002354:	f005 fc24 	bl	8007ba0 <HAL_TIM_IC_ConfigChannel>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800235e:	f000 fd33 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	3730      	adds	r7, #48	; 0x30
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000324 	.word	0x20000324
 8002370:	40014000 	.word	0x40014000

08002374 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_TIM16_Init+0x44>)
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <MX_TIM16_Init+0x48>)
 800237c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72 - 1;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_TIM16_Init+0x44>)
 8002380:	2247      	movs	r2, #71	; 0x47
 8002382:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_TIM16_Init+0x44>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_TIM16_Init+0x44>)
 800238c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002390:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_TIM16_Init+0x44>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <MX_TIM16_Init+0x44>)
 800239a:	2200      	movs	r2, #0
 800239c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_TIM16_Init+0x44>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_TIM16_Init+0x44>)
 80023a6:	f005 f81d 	bl	80073e4 <HAL_TIM_Base_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80023b0:	f000 fd0a 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200008f4 	.word	0x200008f4
 80023bc:	40014400 	.word	0x40014400

080023c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023c6:	4a14      	ldr	r2, [pc, #80]	; (8002418 <MX_USART1_UART_Init+0x58>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023cc:	4a13      	ldr	r2, [pc, #76]	; (800241c <MX_USART1_UART_Init+0x5c>)
 80023ce:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023e4:	220c      	movs	r2, #12
 80023e6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_USART1_UART_Init+0x54>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002400:	4804      	ldr	r0, [pc, #16]	; (8002414 <MX_USART1_UART_Init+0x54>)
 8002402:	f006 fcb9 	bl	8008d78 <HAL_UART_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800240c:	f000 fcdc 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200004d8 	.word	0x200004d8
 8002418:	40013800 	.word	0x40013800
 800241c:	000f4240 	.word	0x000f4240

08002420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <MX_DMA_Init+0x70>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4a19      	ldr	r2, [pc, #100]	; (8002490 <MX_DMA_Init+0x70>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6153      	str	r3, [r2, #20]
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <MX_DMA_Init+0x70>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <MX_DMA_Init+0x70>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4a13      	ldr	r2, [pc, #76]	; (8002490 <MX_DMA_Init+0x70>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6153      	str	r3, [r2, #20]
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_DMA_Init+0x70>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2103      	movs	r1, #3
 800245a:	200b      	movs	r0, #11
 800245c:	f002 ff61 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002460:	200b      	movs	r0, #11
 8002462:	f002 ff7a 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	200f      	movs	r0, #15
 800246c:	f002 ff59 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002470:	200f      	movs	r0, #15
 8002472:	f002 ff72 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	2038      	movs	r0, #56	; 0x38
 800247c:	f002 ff51 	bl	8005322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002480:	2038      	movs	r0, #56	; 0x38
 8002482:	f002 ff6a 	bl	800535a <HAL_NVIC_EnableIRQ>

}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000

08002494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <MX_GPIO_Init+0xc8>)
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	4a2b      	ldr	r2, [pc, #172]	; (800255c <MX_GPIO_Init+0xc8>)
 80024b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024b4:	6153      	str	r3, [r2, #20]
 80024b6:	4b29      	ldr	r3, [pc, #164]	; (800255c <MX_GPIO_Init+0xc8>)
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	4b26      	ldr	r3, [pc, #152]	; (800255c <MX_GPIO_Init+0xc8>)
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	4a25      	ldr	r2, [pc, #148]	; (800255c <MX_GPIO_Init+0xc8>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	6153      	str	r3, [r2, #20]
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <MX_GPIO_Init+0xc8>)
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <MX_GPIO_Init+0xc8>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4a1f      	ldr	r2, [pc, #124]	; (800255c <MX_GPIO_Init+0xc8>)
 80024e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e4:	6153      	str	r3, [r2, #20]
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <MX_GPIO_Init+0xc8>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|LED1_Pin
 80024f2:	2200      	movs	r2, #0
 80024f4:	f243 51fb 	movw	r1, #13819	; 0x35fb
 80024f8:	4819      	ldr	r0, [pc, #100]	; (8002560 <MX_GPIO_Init+0xcc>)
 80024fa:	f003 fc51 	bl	8005da0 <HAL_GPIO_WritePin>
                          |LED2_Pin|IN_A_Pin|INH_A_Pin|IN_B_Pin
                          |INH_B_Pin|IN_C_Pin|INH_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ADC_PHASEA_Pin */
  GPIO_InitStruct.Pin = ADC_PHASEA_Pin;
 80024fe:	2320      	movs	r3, #32
 8002500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002502:	2303      	movs	r3, #3
 8002504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC_PHASEA_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	4619      	mov	r1, r3
 8002510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002514:	f003 fab2 	bl	8005a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_A_Pin OUT_B_Pin OUT_C_Pin IN_A_Pin
                           IN_B_Pin IN_C_Pin */
  GPIO_InitStruct.Pin = OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|IN_A_Pin
 8002518:	f240 43ab 	movw	r3, #1195	; 0x4ab
 800251c:	60fb      	str	r3, [r7, #12]
                          |IN_B_Pin|IN_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800251e:	2311      	movs	r3, #17
 8002520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	4619      	mov	r1, r3
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <MX_GPIO_Init+0xcc>)
 8002532:	f003 faa3 	bl	8005a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin INH_A_Pin INH_B_Pin
                           INH_C_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|INH_A_Pin|INH_B_Pin
 8002536:	f243 1350 	movw	r3, #12624	; 0x3150
 800253a:	60fb      	str	r3, [r7, #12]
                          |INH_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	4619      	mov	r1, r3
 800254e:	4804      	ldr	r0, [pc, #16]	; (8002560 <MX_GPIO_Init+0xcc>)
 8002550:	f003 fa94 	bl	8005a7c <HAL_GPIO_Init>

}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	48000400 	.word	0x48000400

08002564 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    uint16_t i, pos, start, length;
    uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	823b      	strh	r3, [r7, #16]

    /* Ignore IDLE Timeout when the received characters exactly filled up the DMA buffer and DMA Rx Complete IT is generated, but there is no new character during timeout */
    if(dma_uart_rx.flag && currCNDTR == DMA_BUF_SIZE)
 8002576:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <HAL_UART_RxCpltCallback+0x2a>
 8002580:	8a3b      	ldrh	r3, [r7, #16]
 8002582:	2b32      	cmp	r3, #50	; 0x32
 8002584:	d103      	bne.n	800258e <HAL_UART_RxCpltCallback+0x2a>
    {
        dma_uart_rx.flag = 0;
 8002586:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
        return;
 800258c:	e045      	b.n	800261a <HAL_UART_RxCpltCallback+0xb6>
    }

    /* Determine start position in DMA buffer based on previous CNDTR value */
    start = (dma_uart_rx.prevCNDTR < DMA_BUF_SIZE) ? (DMA_BUF_SIZE - dma_uart_rx.prevCNDTR) : 0;
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 8002590:	889b      	ldrh	r3, [r3, #4]
 8002592:	2b31      	cmp	r3, #49	; 0x31
 8002594:	d805      	bhi.n	80025a2 <HAL_UART_RxCpltCallback+0x3e>
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 8002598:	889b      	ldrh	r3, [r3, #4]
 800259a:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 800259e:	b29b      	uxth	r3, r3
 80025a0:	e000      	b.n	80025a4 <HAL_UART_RxCpltCallback+0x40>
 80025a2:	2300      	movs	r3, #0
 80025a4:	81fb      	strh	r3, [r7, #14]

    if(dma_uart_rx.flag)    /* Timeout event */
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d015      	beq.n	80025dc <HAL_UART_RxCpltCallback+0x78>
    {
        /* Determine new data length based on previous DMA_CNDTR value:
         *  If previous CNDTR is less than DMA buffer size: there is old data in DMA buffer (from previous timeout) that has to be ignored.
         *  If CNDTR == DMA buffer size: entire buffer content is new and has to be processed.
        */
        length = (dma_uart_rx.prevCNDTR < DMA_BUF_SIZE) ? (dma_uart_rx.prevCNDTR - currCNDTR) : (DMA_BUF_SIZE - currCNDTR);
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 80025b2:	889b      	ldrh	r3, [r3, #4]
 80025b4:	2b31      	cmp	r3, #49	; 0x31
 80025b6:	d805      	bhi.n	80025c4 <HAL_UART_RxCpltCallback+0x60>
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 80025ba:	889a      	ldrh	r2, [r3, #4]
 80025bc:	8a3b      	ldrh	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	e003      	b.n	80025cc <HAL_UART_RxCpltCallback+0x68>
 80025c4:	8a3b      	ldrh	r3, [r7, #16]
 80025c6:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	827b      	strh	r3, [r7, #18]
        dma_uart_rx.prevCNDTR = currCNDTR;
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 80025d0:	8a3b      	ldrh	r3, [r7, #16]
 80025d2:	8093      	strh	r3, [r2, #4]
        dma_uart_rx.flag = 0;
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e006      	b.n	80025ea <HAL_UART_RxCpltCallback+0x86>
    }
    else                /* DMA Rx Complete event */
    {
        length = DMA_BUF_SIZE - start;
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 80025e2:	827b      	strh	r3, [r7, #18]
        dma_uart_rx.prevCNDTR = DMA_BUF_SIZE;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <HAL_UART_RxCpltCallback+0xc0>)
 80025e6:	2232      	movs	r2, #50	; 0x32
 80025e8:	809a      	strh	r2, [r3, #4]
    }

    /* Copy and Process new data */
    for(i=0,pos=start; i<length; ++i,++pos)
 80025ea:	2300      	movs	r3, #0
 80025ec:	82fb      	strh	r3, [r7, #22]
 80025ee:	89fb      	ldrh	r3, [r7, #14]
 80025f0:	82bb      	strh	r3, [r7, #20]
 80025f2:	e00b      	b.n	800260c <HAL_UART_RxCpltCallback+0xa8>
    {
        data[i] = dma_rx_buf[pos];
 80025f4:	8aba      	ldrh	r2, [r7, #20]
 80025f6:	8afb      	ldrh	r3, [r7, #22]
 80025f8:	490b      	ldr	r1, [pc, #44]	; (8002628 <HAL_UART_RxCpltCallback+0xc4>)
 80025fa:	5c89      	ldrb	r1, [r1, r2]
 80025fc:	4a0b      	ldr	r2, [pc, #44]	; (800262c <HAL_UART_RxCpltCallback+0xc8>)
 80025fe:	54d1      	strb	r1, [r2, r3]
    for(i=0,pos=start; i<length; ++i,++pos)
 8002600:	8afb      	ldrh	r3, [r7, #22]
 8002602:	3301      	adds	r3, #1
 8002604:	82fb      	strh	r3, [r7, #22]
 8002606:	8abb      	ldrh	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	82bb      	strh	r3, [r7, #20]
 800260c:	8afa      	ldrh	r2, [r7, #22]
 800260e:	8a7b      	ldrh	r3, [r7, #18]
 8002610:	429a      	cmp	r2, r3
 8002612:	d3ef      	bcc.n	80025f4 <HAL_UART_RxCpltCallback+0x90>
    }
    USART1DataFlag = true;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_UART_RxCpltCallback+0xcc>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]

}
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	20000014 	.word	0x20000014
 8002628:	20000978 	.word	0x20000978
 800262c:	20000234 	.word	0x20000234
 8002630:	20000214 	.word	0x20000214

08002634 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	static uint32_t Count_FallingEdge;
	static uint32_t Count_Freq1;
	static uint32_t Count_Freq2;
	static bool Freq_State;

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7f1b      	ldrb	r3, [r3, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d13d      	bne.n	80026c0 <HAL_TIM_IC_CaptureCallback+0x8c>
		Count_RisingEdge = TIM15->CCR1;
 8002644:	4b6e      	ldr	r3, [pc, #440]	; (8002800 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 8002646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002648:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800264a:	6013      	str	r3, [r2, #0]

		if(Freq_State == 0){
 800264c:	4b6e      	ldr	r3, [pc, #440]	; (8002808 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_TIM_IC_CaptureCallback+0x36>
			Freq_State = 1;
 800265a:	4b6b      	ldr	r3, [pc, #428]	; (8002808 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
			Count_Freq1 = Count_RisingEdge;
 8002660:	4b68      	ldr	r3, [pc, #416]	; (8002804 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a69      	ldr	r2, [pc, #420]	; (800280c <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e045      	b.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xc2>

		}
		else if(Freq_State == 1){
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d041      	beq.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xc2>
			Freq_State = 0;
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
			Count_Freq2 = Count_RisingEdge;
 8002678:	4b62      	ldr	r3, [pc, #392]	; (8002804 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a64      	ldr	r2, [pc, #400]	; (8002810 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800267e:	6013      	str	r3, [r2, #0]
			if(Count_Freq2 > Count_Freq1) inputFrequency = 1/((float)Count_Freq2 - (float)Count_Freq1) * 1000000; //in kHz;
 8002680:	4b63      	ldr	r3, [pc, #396]	; (8002810 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d934      	bls.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xc2>
 800268c:	4b60      	ldr	r3, [pc, #384]	; (8002810 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002698:	4b5c      	ldr	r3, [pc, #368]	; (800280c <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	ee07 3a90 	vmov	s15, r3
 80026a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002814 <HAL_TIM_IC_CaptureCallback+0x1e0>
 80026b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80026ba:	edc3 7a00 	vstr	s15, [r3]
 80026be:	e01a      	b.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xc2>
		}
	}

	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7f1b      	ldrb	r3, [r3, #28]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d116      	bne.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xc2>
		Count_FallingEdge = TIM15->CCR2;
 80026c8:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <HAL_TIM_IC_CaptureCallback+0x1cc>)
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	4a53      	ldr	r2, [pc, #332]	; (800281c <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80026ce:	6013      	str	r3, [r2, #0]

		if(Count_RisingEdge < Count_FallingEdge){
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b51      	ldr	r3, [pc, #324]	; (800281c <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d20c      	bcs.n	80026f6 <HAL_TIM_IC_CaptureCallback+0xc2>
			inputDutyCycle = Count_FallingEdge - Count_RisingEdge;
 80026dc:	4b4f      	ldr	r3, [pc, #316]	; (800281c <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	4a4e      	ldr	r2, [pc, #312]	; (8002820 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80026e8:	6013      	str	r3, [r2, #0]
			//strSize = sprintf((char*)buffer, "DutyCycle: %lu, Frequency: %f\r\n", inputDutyCycle, inputFrequency);
			//HAL_UART_Transmit(&huart1, buffer, strSize, 10);

			//inputRPM = map(inputDutyCycle, 1000, 2000, 0, 5000);

			Count_RisingEdge = 0;
 80026ea:	4b46      	ldr	r3, [pc, #280]	; (8002804 <HAL_TIM_IC_CaptureCallback+0x1d0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
			Count_FallingEdge = 0;
 80026f0:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
		}
	}

	if(inputFrequency >= FREQ_INPUT_PWM_MIN && inputFrequency <= FREQ_INPUT_PWM_MAX){
 80026f6:	4b48      	ldr	r3, [pc, #288]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002824 <HAL_TIM_IC_CaptureCallback+0x1f0>
 8002700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002708:	da00      	bge.n	800270c <HAL_TIM_IC_CaptureCallback+0xd8>
			mode_motor = MODE_MOTOR_START;
			strSize = sprintf((char*)buffer, "motor start\r\n");
			HAL_UART_Transmit(&huart1, buffer, strSize, 10);
		}
	}
}
 800270a:	e075      	b.n	80027f8 <HAL_TIM_IC_CaptureCallback+0x1c4>
	if(inputFrequency >= FREQ_INPUT_PWM_MIN && inputFrequency <= FREQ_INPUT_PWM_MAX){
 800270c:	4b42      	ldr	r3, [pc, #264]	; (8002818 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002828 <HAL_TIM_IC_CaptureCallback+0x1f4>
 8002716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271e:	d900      	bls.n	8002722 <HAL_TIM_IC_CaptureCallback+0xee>
}
 8002720:	e06a      	b.n	80027f8 <HAL_TIM_IC_CaptureCallback+0x1c4>
		if(inputDutyCycle >= 1050 && mode_motor == MODE_MOTOR_STOP){
 8002722:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f240 4219 	movw	r2, #1049	; 0x419
 800272a:	4293      	cmp	r3, r2
 800272c:	d91e      	bls.n	800276c <HAL_TIM_IC_CaptureCallback+0x138>
 800272e:	4b3f      	ldr	r3, [pc, #252]	; (800282c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11a      	bne.n	800276c <HAL_TIM_IC_CaptureCallback+0x138>
			mode_motor = MODE_MOTOR_CALIBRATION;
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
			strSize = sprintf((char*)buffer, "motor calibration\r\n");
 800273c:	4a3c      	ldr	r2, [pc, #240]	; (8002830 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800273e:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <HAL_TIM_IC_CaptureCallback+0x200>)
 8002740:	4615      	mov	r5, r2
 8002742:	461c      	mov	r4, r3
 8002744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002746:	6028      	str	r0, [r5, #0]
 8002748:	6069      	str	r1, [r5, #4]
 800274a:	60aa      	str	r2, [r5, #8]
 800274c:	60eb      	str	r3, [r5, #12]
 800274e:	6820      	ldr	r0, [r4, #0]
 8002750:	6128      	str	r0, [r5, #16]
 8002752:	2313      	movs	r3, #19
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_TIM_IC_CaptureCallback+0x204>)
 8002758:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_TIM_IC_CaptureCallback+0x204>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29a      	uxth	r2, r3
 8002760:	230a      	movs	r3, #10
 8002762:	4933      	ldr	r1, [pc, #204]	; (8002830 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002764:	4835      	ldr	r0, [pc, #212]	; (800283c <HAL_TIM_IC_CaptureCallback+0x208>)
 8002766:	f006 fb55 	bl	8008e14 <HAL_UART_Transmit>
 800276a:	e045      	b.n	80027f8 <HAL_TIM_IC_CaptureCallback+0x1c4>
		} else if(inputDutyCycle < 1050 && mode_motor == MODE_MOTOR_STOP){
 800276c:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f240 4219 	movw	r2, #1049	; 0x419
 8002774:	4293      	cmp	r3, r2
 8002776:	d81c      	bhi.n	80027b2 <HAL_TIM_IC_CaptureCallback+0x17e>
 8002778:	4b2c      	ldr	r3, [pc, #176]	; (800282c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d118      	bne.n	80027b2 <HAL_TIM_IC_CaptureCallback+0x17e>
			mode_motor = MODE_MOTOR_READY;
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002782:	2202      	movs	r2, #2
 8002784:	701a      	strb	r2, [r3, #0]
			strSize = sprintf((char*)buffer, "motor ready\r\n");
 8002786:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800278a:	4614      	mov	r4, r2
 800278c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800278e:	6020      	str	r0, [r4, #0]
 8002790:	6061      	str	r1, [r4, #4]
 8002792:	60a2      	str	r2, [r4, #8]
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	81a3      	strh	r3, [r4, #12]
 8002798:	230d      	movs	r3, #13
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <HAL_TIM_IC_CaptureCallback+0x204>)
 800279e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_TIM_IC_CaptureCallback+0x204>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	230a      	movs	r3, #10
 80027a8:	4921      	ldr	r1, [pc, #132]	; (8002830 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80027aa:	4824      	ldr	r0, [pc, #144]	; (800283c <HAL_TIM_IC_CaptureCallback+0x208>)
 80027ac:	f006 fb32 	bl	8008e14 <HAL_UART_Transmit>
 80027b0:	e022      	b.n	80027f8 <HAL_TIM_IC_CaptureCallback+0x1c4>
		} else if(inputDutyCycle >= 1050 && mode_motor == MODE_MOTOR_READY){
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f240 4219 	movw	r2, #1049	; 0x419
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d91c      	bls.n	80027f8 <HAL_TIM_IC_CaptureCallback+0x1c4>
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d118      	bne.n	80027f8 <HAL_TIM_IC_CaptureCallback+0x1c4>
			mode_motor = MODE_MOTOR_START;
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80027c8:	2203      	movs	r2, #3
 80027ca:	701a      	strb	r2, [r3, #0]
			strSize = sprintf((char*)buffer, "motor start\r\n");
 80027cc:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_TIM_IC_CaptureCallback+0x210>)
 80027d0:	4614      	mov	r4, r2
 80027d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027d4:	6020      	str	r0, [r4, #0]
 80027d6:	6061      	str	r1, [r4, #4]
 80027d8:	60a2      	str	r2, [r4, #8]
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	81a3      	strh	r3, [r4, #12]
 80027de:	230d      	movs	r3, #13
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_TIM_IC_CaptureCallback+0x204>)
 80027e4:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <HAL_TIM_IC_CaptureCallback+0x204>)
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	230a      	movs	r3, #10
 80027ee:	4910      	ldr	r1, [pc, #64]	; (8002830 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80027f0:	4812      	ldr	r0, [pc, #72]	; (800283c <HAL_TIM_IC_CaptureCallback+0x208>)
 80027f2:	f006 fb0f 	bl	8008e14 <HAL_UART_Transmit>
}
 80027f6:	e7ff      	b.n	80027f8 <HAL_TIM_IC_CaptureCallback+0x1c4>
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002800:	40014000 	.word	0x40014000
 8002804:	2000026c 	.word	0x2000026c
 8002808:	20000270 	.word	0x20000270
 800280c:	20000274 	.word	0x20000274
 8002810:	20000278 	.word	0x20000278
 8002814:	49742400 	.word	0x49742400
 8002818:	2000022c 	.word	0x2000022c
 800281c:	2000027c 	.word	0x2000027c
 8002820:	20000228 	.word	0x20000228
 8002824:	42400000 	.word	0x42400000
 8002828:	424c0000 	.word	0x424c0000
 800282c:	20000230 	.word	0x20000230
 8002830:	2000056c 	.word	0x2000056c
 8002834:	0800d744 	.word	0x0800d744
 8002838:	20000976 	.word	0x20000976
 800283c:	200004d8 	.word	0x200004d8
 8002840:	0800d734 	.word	0x0800d734
 8002844:	0800d758 	.word	0x0800d758

08002848 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6a      	ldr	r2, [pc, #424]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d12c      	bne.n	80028b4 <HAL_TIM_PeriodElapsedCallback+0x6c>
		static int count;
		count++;
 800285a:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	4a68      	ldr	r2, [pc, #416]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002862:	6013      	str	r3, [r2, #0]
		//measuredRPM = getRPM(tim2cnt);
		//strSize = sprintf((char*)buffer, "%f\r\n", measuredRPM);
		//HAL_UART_Transmit_IT(&huart1, buffer, strSize);
		if(count % 100 == 0 && mode_motor == MODE_MOTOR_RUN){
 8002864:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800286a:	fb83 1302 	smull	r1, r3, r3, r2
 800286e:	1159      	asrs	r1, r3, #5
 8002870:	17d3      	asrs	r3, r2, #31
 8002872:	1acb      	subs	r3, r1, r3
 8002874:	2164      	movs	r1, #100	; 0x64
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f040 80bb 	bne.w	80029f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8002882:	4b62      	ldr	r3, [pc, #392]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b04      	cmp	r3, #4
 8002888:	f040 80b6 	bne.w	80029f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			strSize = sprintf((char*)buffer, "%lu\r\n", tim2cnt);
 800288c:	4b60      	ldr	r3, [pc, #384]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4960      	ldr	r1, [pc, #384]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002894:	4860      	ldr	r0, [pc, #384]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002896:	f007 ff15 	bl	800a6c4 <siprintf>
 800289a:	4603      	mov	r3, r0
 800289c:	b29a      	uxth	r2, r3
 800289e:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80028a0:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, buffer, strSize);
 80028a2:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	495b      	ldr	r1, [pc, #364]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80028ac:	485c      	ldr	r0, [pc, #368]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80028ae:	f006 fb45 	bl	8008f3c <HAL_UART_Transmit_IT>
			if(HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) != GPIO_PIN_SET) 	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
			break;

		}
	}
}
 80028b2:	e0a1      	b.n	80029f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
	else if(htim->Instance == TIM16){
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5a      	ldr	r2, [pc, #360]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	f040 8093 	bne.w	80029e6 <HAL_TIM_PeriodElapsedCallback+0x19e>
		led_counter++;
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80028c2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80028c6:	1c4b      	adds	r3, r1, #1
 80028c8:	f142 0400 	adc.w	r4, r2, #0
 80028cc:	4a56      	ldr	r2, [pc, #344]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80028ce:	e9c2 3400 	strd	r3, r4, [r2]
		switch(mode_motor){
 80028d2:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d016      	beq.n	8002908 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d027      	beq.n	800292e <HAL_TIM_PeriodElapsedCallback+0xe6>
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d172      	bne.n	80029c8 <HAL_TIM_PeriodElapsedCallback+0x180>
			if(led_counter % 1000 == 0) HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80028e2:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80028e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f7fe f9ca 	bl	8000c88 <__aeabi_uldivmod>
 80028f4:	461c      	mov	r4, r3
 80028f6:	4613      	mov	r3, r2
 80028f8:	4323      	orrs	r3, r4
 80028fa:	d176      	bne.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x1a2>
 80028fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002900:	484a      	ldr	r0, [pc, #296]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002902:	f003 fa65 	bl	8005dd0 <HAL_GPIO_TogglePin>
			break;
 8002906:	e070      	b.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x1a2>
			if(led_counter % 100 == 0) HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002908:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800290a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800290e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	f7fe f9b7 	bl	8000c88 <__aeabi_uldivmod>
 800291a:	461c      	mov	r4, r3
 800291c:	4613      	mov	r3, r2
 800291e:	4323      	orrs	r3, r4
 8002920:	d165      	bne.n	80029ee <HAL_TIM_PeriodElapsedCallback+0x1a6>
 8002922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002926:	4841      	ldr	r0, [pc, #260]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002928:	f003 fa52 	bl	8005dd0 <HAL_GPIO_TogglePin>
			break;
 800292c:	e05f      	b.n	80029ee <HAL_TIM_PeriodElapsedCallback+0x1a6>
			if(led_counter % 2000 == 0) flash = true;
 800292e:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002934:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	f7fe f9a4 	bl	8000c88 <__aeabi_uldivmod>
 8002940:	461c      	mov	r4, r3
 8002942:	4613      	mov	r3, r2
 8002944:	4323      	orrs	r3, r4
 8002946:	d102      	bne.n	800294e <HAL_TIM_PeriodElapsedCallback+0x106>
 8002948:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
			if(flash){
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d022      	beq.n	800299c <HAL_TIM_PeriodElapsedCallback+0x154>
				if(led_counter % 100 == 0){
 8002956:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002958:	e9d3 0100 	ldrd	r0, r1, [r3]
 800295c:	f04f 0264 	mov.w	r2, #100	; 0x64
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f7fe f990 	bl	8000c88 <__aeabi_uldivmod>
 8002968:	461c      	mov	r4, r3
 800296a:	4613      	mov	r3, r2
 800296c:	4323      	orrs	r3, r4
 800296e:	d140      	bne.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
					flash_count++;
 8002970:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800297a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800297c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002980:	482a      	ldr	r0, [pc, #168]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002982:	f003 fa25 	bl	8005dd0 <HAL_GPIO_TogglePin>
					if(flash_count >= 10) {
 8002986:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b09      	cmp	r3, #9
 800298c:	d931      	bls.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
						flash_count = 0;
 800298e:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
						flash = false;
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
			break;
 800299a:	e02a      	b.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			} else if(HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) != GPIO_PIN_SET && !flash)
 800299c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029a0:	4822      	ldr	r0, [pc, #136]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80029a2:	f003 f9e5 	bl	8005d70 <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d022      	beq.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01b      	beq.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80029ba:	2201      	movs	r2, #1
 80029bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029c0:	481a      	ldr	r0, [pc, #104]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80029c2:	f003 f9ed 	bl	8005da0 <HAL_GPIO_WritePin>
			break;
 80029c6:	e014      	b.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
			if(HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) != GPIO_PIN_SET) 	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80029c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029cc:	4817      	ldr	r0, [pc, #92]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80029ce:	f003 f9cf 	bl	8005d70 <HAL_GPIO_ReadPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d00e      	beq.n	80029f6 <HAL_TIM_PeriodElapsedCallback+0x1ae>
 80029d8:	2201      	movs	r2, #1
 80029da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029de:	4813      	ldr	r0, [pc, #76]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80029e0:	f003 f9de 	bl	8005da0 <HAL_GPIO_WritePin>
			break;
 80029e4:	e007      	b.n	80029f6 <HAL_TIM_PeriodElapsedCallback+0x1ae>
	}
 80029e6:	bf00      	nop
 80029e8:	e006      	b.n	80029f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			break;
 80029ea:	bf00      	nop
 80029ec:	e004      	b.n	80029f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			break;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			break;
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			break;
 80029f6:	bf00      	nop
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	40001000 	.word	0x40001000
 8002a04:	20000280 	.word	0x20000280
 8002a08:	51eb851f 	.word	0x51eb851f
 8002a0c:	20000230 	.word	0x20000230
 8002a10:	200006d0 	.word	0x200006d0
 8002a14:	0800d768 	.word	0x0800d768
 8002a18:	2000056c 	.word	0x2000056c
 8002a1c:	20000976 	.word	0x20000976
 8002a20:	200004d8 	.word	0x200004d8
 8002a24:	40014400 	.word	0x40014400
 8002a28:	20000288 	.word	0x20000288
 8002a2c:	48000400 	.word	0x48000400
 8002a30:	20000290 	.word	0x20000290
 8002a34:	20000291 	.word	0x20000291

08002a38 <HAL_COMP_TriggerCallback>:

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	static uint8_t count;
	TIM1->CCR5 = setPWM + compWindowOffset;
 8002a40:	4b82      	ldr	r3, [pc, #520]	; (8002c4c <HAL_COMP_TriggerCallback+0x214>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b81      	ldr	r3, [pc, #516]	; (8002c50 <HAL_COMP_TriggerCallback+0x218>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	441a      	add	r2, r3
 8002a50:	4b80      	ldr	r3, [pc, #512]	; (8002c54 <HAL_COMP_TriggerCallback+0x21c>)
 8002a52:	659a      	str	r2, [r3, #88]	; 0x58

	if(hcomp->Instance == COMP1 && waitForCommutation == 0){
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a7f      	ldr	r2, [pc, #508]	; (8002c58 <HAL_COMP_TriggerCallback+0x220>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d129      	bne.n	8002ab2 <HAL_COMP_TriggerCallback+0x7a>
 8002a5e:	4b7f      	ldr	r3, [pc, #508]	; (8002c5c <HAL_COMP_TriggerCallback+0x224>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d124      	bne.n	8002ab2 <HAL_COMP_TriggerCallback+0x7a>
		count++;
 8002a68:	4b7d      	ldr	r3, [pc, #500]	; (8002c60 <HAL_COMP_TriggerCallback+0x228>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b7b      	ldr	r3, [pc, #492]	; (8002c60 <HAL_COMP_TriggerCallback+0x228>)
 8002a72:	701a      	strb	r2, [r3, #0]
		if(count >= 0){
			count = 0;
 8002a74:	4b7a      	ldr	r3, [pc, #488]	; (8002c60 <HAL_COMP_TriggerCallback+0x228>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]

			tim2cnt = __HAL_TIM_GET_COUNTER(&htim2);
 8002a7a:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <HAL_COMP_TriggerCallback+0x22c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	4a79      	ldr	r2, [pc, #484]	; (8002c68 <HAL_COMP_TriggerCallback+0x230>)
 8002a82:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002a84:	4b77      	ldr	r3, [pc, #476]	; (8002c64 <HAL_COMP_TriggerCallback+0x22c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24


			HAL_COMP_Stop_IT(&hcomp1);
 8002a8c:	4877      	ldr	r0, [pc, #476]	; (8002c6c <HAL_COMP_TriggerCallback+0x234>)
 8002a8e:	f002 fa57 	bl	8004f40 <HAL_COMP_Stop_IT>
			sConfig.Channel = ADC_CHANNEL_2;
 8002a92:	4b77      	ldr	r3, [pc, #476]	; (8002c70 <HAL_COMP_TriggerCallback+0x238>)
 8002a94:	2202      	movs	r2, #2
 8002a96:	601a      	str	r2, [r3, #0]
			HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8002a98:	4975      	ldr	r1, [pc, #468]	; (8002c70 <HAL_COMP_TriggerCallback+0x238>)
 8002a9a:	4876      	ldr	r0, [pc, #472]	; (8002c74 <HAL_COMP_TriggerCallback+0x23c>)
 8002a9c:	f001 fa64 	bl	8003f68 <HAL_ADC_ConfigChannel>
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adcBuffer, 10);
 8002aa0:	220a      	movs	r2, #10
 8002aa2:	4975      	ldr	r1, [pc, #468]	; (8002c78 <HAL_COMP_TriggerCallback+0x240>)
 8002aa4:	4873      	ldr	r0, [pc, #460]	; (8002c74 <HAL_COMP_TriggerCallback+0x23c>)
 8002aa6:	f001 f8e7 	bl	8003c78 <HAL_ADC_Start_DMA>
			//HAL_ADC_Start_IT(&hadc2);

			waitForCommutation = 1;
 8002aaa:	4b6c      	ldr	r3, [pc, #432]	; (8002c5c <HAL_COMP_TriggerCallback+0x224>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]
		if(count >= 0){
 8002ab0:	e05c      	b.n	8002b6c <HAL_COMP_TriggerCallback+0x134>
		}


	}

	else if(hcomp->Instance == COMP2 && waitForCommutation == 0){
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a71      	ldr	r2, [pc, #452]	; (8002c7c <HAL_COMP_TriggerCallback+0x244>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d129      	bne.n	8002b10 <HAL_COMP_TriggerCallback+0xd8>
 8002abc:	4b67      	ldr	r3, [pc, #412]	; (8002c5c <HAL_COMP_TriggerCallback+0x224>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d124      	bne.n	8002b10 <HAL_COMP_TriggerCallback+0xd8>
		count++;
 8002ac6:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_COMP_TriggerCallback+0x228>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4b64      	ldr	r3, [pc, #400]	; (8002c60 <HAL_COMP_TriggerCallback+0x228>)
 8002ad0:	701a      	strb	r2, [r3, #0]
		if(count >= 0){
			count = 0;
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_COMP_TriggerCallback+0x228>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]

			tim2cnt = __HAL_TIM_GET_COUNTER(&htim2);
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_COMP_TriggerCallback+0x22c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	4a62      	ldr	r2, [pc, #392]	; (8002c68 <HAL_COMP_TriggerCallback+0x230>)
 8002ae0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002ae2:	4b60      	ldr	r3, [pc, #384]	; (8002c64 <HAL_COMP_TriggerCallback+0x22c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

			HAL_COMP_Stop_IT(&hcomp2);
 8002aea:	4865      	ldr	r0, [pc, #404]	; (8002c80 <HAL_COMP_TriggerCallback+0x248>)
 8002aec:	f002 fa28 	bl	8004f40 <HAL_COMP_Stop_IT>
			sConfig.Channel = ADC_CHANNEL_3;
 8002af0:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <HAL_COMP_TriggerCallback+0x238>)
 8002af2:	2203      	movs	r2, #3
 8002af4:	601a      	str	r2, [r3, #0]
			HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8002af6:	495e      	ldr	r1, [pc, #376]	; (8002c70 <HAL_COMP_TriggerCallback+0x238>)
 8002af8:	485e      	ldr	r0, [pc, #376]	; (8002c74 <HAL_COMP_TriggerCallback+0x23c>)
 8002afa:	f001 fa35 	bl	8003f68 <HAL_ADC_ConfigChannel>
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adcBuffer, 10);
 8002afe:	220a      	movs	r2, #10
 8002b00:	495d      	ldr	r1, [pc, #372]	; (8002c78 <HAL_COMP_TriggerCallback+0x240>)
 8002b02:	485c      	ldr	r0, [pc, #368]	; (8002c74 <HAL_COMP_TriggerCallback+0x23c>)
 8002b04:	f001 f8b8 	bl	8003c78 <HAL_ADC_Start_DMA>
			//HAL_ADC_Start_IT(&hadc2);

			waitForCommutation = 1;
 8002b08:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <HAL_COMP_TriggerCallback+0x224>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
		if(count >= 0){
 8002b0e:	e02d      	b.n	8002b6c <HAL_COMP_TriggerCallback+0x134>
		}

	}

	else if(hcomp->Instance == COMP3 && waitForCommutation == 0){
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <HAL_COMP_TriggerCallback+0x24c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d128      	bne.n	8002b6c <HAL_COMP_TriggerCallback+0x134>
 8002b1a:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_COMP_TriggerCallback+0x224>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d123      	bne.n	8002b6c <HAL_COMP_TriggerCallback+0x134>
		count++;
 8002b24:	4b4e      	ldr	r3, [pc, #312]	; (8002c60 <HAL_COMP_TriggerCallback+0x228>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_COMP_TriggerCallback+0x228>)
 8002b2e:	701a      	strb	r2, [r3, #0]
		if(count >= 0){
			count = 0;
 8002b30:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <HAL_COMP_TriggerCallback+0x228>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]

			tim2cnt = __HAL_TIM_GET_COUNTER(&htim2);
 8002b36:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <HAL_COMP_TriggerCallback+0x22c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_COMP_TriggerCallback+0x230>)
 8002b3e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002b40:	4b48      	ldr	r3, [pc, #288]	; (8002c64 <HAL_COMP_TriggerCallback+0x22c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24

			HAL_COMP_Stop_IT(&hcomp3);
 8002b48:	484f      	ldr	r0, [pc, #316]	; (8002c88 <HAL_COMP_TriggerCallback+0x250>)
 8002b4a:	f002 f9f9 	bl	8004f40 <HAL_COMP_Stop_IT>
			sConfig.Channel = ADC_CHANNEL_4;
 8002b4e:	4b48      	ldr	r3, [pc, #288]	; (8002c70 <HAL_COMP_TriggerCallback+0x238>)
 8002b50:	2204      	movs	r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
			HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8002b54:	4946      	ldr	r1, [pc, #280]	; (8002c70 <HAL_COMP_TriggerCallback+0x238>)
 8002b56:	4847      	ldr	r0, [pc, #284]	; (8002c74 <HAL_COMP_TriggerCallback+0x23c>)
 8002b58:	f001 fa06 	bl	8003f68 <HAL_ADC_ConfigChannel>
			HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adcBuffer, 10);
 8002b5c:	220a      	movs	r2, #10
 8002b5e:	4946      	ldr	r1, [pc, #280]	; (8002c78 <HAL_COMP_TriggerCallback+0x240>)
 8002b60:	4844      	ldr	r0, [pc, #272]	; (8002c74 <HAL_COMP_TriggerCallback+0x23c>)
 8002b62:	f001 f889 	bl	8003c78 <HAL_ADC_Start_DMA>
			//HAL_ADC_Start_IT(&hadc2);

			waitForCommutation = 1;
 8002b66:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_COMP_TriggerCallback+0x224>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
		}

	}

	if(setPWM > 300 && !pwmState){
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <HAL_COMP_TriggerCallback+0x214>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b21b      	sxth	r3, r3
 8002b72:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002b76:	dd32      	ble.n	8002bde <HAL_COMP_TriggerCallback+0x1a6>
 8002b78:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <HAL_COMP_TriggerCallback+0x254>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d12d      	bne.n	8002bde <HAL_COMP_TriggerCallback+0x1a6>
		HAL_GPIO_WritePin(GPIOB, OUT_A_Pin | OUT_B_Pin | OUT_C_Pin, GPIO_PIN_RESET);
 8002b82:	2200      	movs	r2, #0
 8002b84:	f240 4103 	movw	r1, #1027	; 0x403
 8002b88:	4841      	ldr	r0, [pc, #260]	; (8002c90 <HAL_COMP_TriggerCallback+0x258>)
 8002b8a:	f003 f909 	bl	8005da0 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_5);
 8002b8e:	2110      	movs	r1, #16
 8002b90:	4840      	ldr	r0, [pc, #256]	; (8002c94 <HAL_COMP_TriggerCallback+0x25c>)
 8002b92:	f004 fd55 	bl	8007640 <HAL_TIM_PWM_Stop>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1800 + oc5Value);
 8002b96:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <HAL_COMP_TriggerCallback+0x260>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	483d      	ldr	r0, [pc, #244]	; (8002c9c <HAL_COMP_TriggerCallback+0x264>)
 8002ba6:	f002 fc1e 	bl	80053e6 <HAL_DAC_SetValue>
		compWindowOffset = -80;
 8002baa:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_COMP_TriggerCallback+0x218>)
 8002bac:	f64f 72b0 	movw	r2, #65456	; 0xffb0
 8002bb0:	801a      	strh	r2, [r3, #0]

		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC5A, TIM_CHANNEL_5);
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	493a      	ldr	r1, [pc, #232]	; (8002ca0 <HAL_COMP_TriggerCallback+0x268>)
 8002bb6:	4837      	ldr	r0, [pc, #220]	; (8002c94 <HAL_COMP_TriggerCallback+0x25c>)
 8002bb8:	f005 f88e 	bl	8007cd8 <HAL_TIM_PWM_ConfigChannel>
		TIM1->CCR5 = setPWM + compWindowOffset;
 8002bbc:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <HAL_COMP_TriggerCallback+0x214>)
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	b21b      	sxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_COMP_TriggerCallback+0x218>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	441a      	add	r2, r3
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_COMP_TriggerCallback+0x21c>)
 8002bce:	659a      	str	r2, [r3, #88]	; 0x58
		pwmState = 1;
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <HAL_COMP_TriggerCallback+0x254>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 8002bd6:	2110      	movs	r1, #16
 8002bd8:	482e      	ldr	r0, [pc, #184]	; (8002c94 <HAL_COMP_TriggerCallback+0x25c>)
 8002bda:	f004 fcd9 	bl	8007590 <HAL_TIM_PWM_Start>
	}

	if(setPWM < 250 && pwmState){
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_COMP_TriggerCallback+0x214>)
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b21b      	sxth	r3, r3
 8002be4:	2bf9      	cmp	r3, #249	; 0xf9
 8002be6:	dc2d      	bgt.n	8002c44 <HAL_COMP_TriggerCallback+0x20c>
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_COMP_TriggerCallback+0x254>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <HAL_COMP_TriggerCallback+0x20c>
		HAL_GPIO_WritePin(GPIOB, OUT_A_Pin | OUT_B_Pin | OUT_C_Pin, GPIO_PIN_SET);
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f240 4103 	movw	r1, #1027	; 0x403
 8002bf8:	4825      	ldr	r0, [pc, #148]	; (8002c90 <HAL_COMP_TriggerCallback+0x258>)
 8002bfa:	f003 f8d1 	bl	8005da0 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_5);
 8002bfe:	2110      	movs	r1, #16
 8002c00:	4824      	ldr	r0, [pc, #144]	; (8002c94 <HAL_COMP_TriggerCallback+0x25c>)
 8002c02:	f004 fd1d 	bl	8007640 <HAL_TIM_PWM_Stop>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002c06:	2300      	movs	r3, #0
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4823      	ldr	r0, [pc, #140]	; (8002c9c <HAL_COMP_TriggerCallback+0x264>)
 8002c0e:	f002 fbea 	bl	80053e6 <HAL_DAC_SetValue>
		compWindowOffset = 250;
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_COMP_TriggerCallback+0x218>)
 8002c14:	22fa      	movs	r2, #250	; 0xfa
 8002c16:	801a      	strh	r2, [r3, #0]

		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC5B, TIM_CHANNEL_5);
 8002c18:	2210      	movs	r2, #16
 8002c1a:	4922      	ldr	r1, [pc, #136]	; (8002ca4 <HAL_COMP_TriggerCallback+0x26c>)
 8002c1c:	481d      	ldr	r0, [pc, #116]	; (8002c94 <HAL_COMP_TriggerCallback+0x25c>)
 8002c1e:	f005 f85b 	bl	8007cd8 <HAL_TIM_PWM_ConfigChannel>
		TIM1->CCR5 = setPWM + compWindowOffset;
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_COMP_TriggerCallback+0x214>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_COMP_TriggerCallback+0x218>)
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b21b      	sxth	r3, r3
 8002c30:	441a      	add	r2, r3
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_COMP_TriggerCallback+0x21c>)
 8002c34:	659a      	str	r2, [r3, #88]	; 0x58
		pwmState = 0;
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_COMP_TriggerCallback+0x254>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 8002c3c:	2110      	movs	r1, #16
 8002c3e:	4815      	ldr	r0, [pc, #84]	; (8002c94 <HAL_COMP_TriggerCallback+0x25c>)
 8002c40:	f004 fca6 	bl	8007590 <HAL_TIM_PWM_Start>
	}
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000004 	.word	0x20000004
 8002c50:	20000006 	.word	0x20000006
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	4001001c 	.word	0x4001001c
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000292 	.word	0x20000292
 8002c64:	20000870 	.word	0x20000870
 8002c68:	200006d0 	.word	0x200006d0
 8002c6c:	200003cc 	.word	0x200003cc
 8002c70:	20000774 	.word	0x20000774
 8002c74:	200002d0 	.word	0x200002d0
 8002c78:	200002b8 	.word	0x200002b8
 8002c7c:	40010020 	.word	0x40010020
 8002c80:	20000714 	.word	0x20000714
 8002c84:	40010024 	.word	0x40010024
 8002c88:	20000744 	.word	0x20000744
 8002c8c:	2000021c 	.word	0x2000021c
 8002c90:	48000400 	.word	0x48000400
 8002c94:	200006d4 	.word	0x200006d4
 8002c98:	20000008 	.word	0x20000008
 8002c9c:	20000558 	.word	0x20000558
 8002ca0:	200009ac 	.word	0x200009ac
 8002ca4:	2000078c 	.word	0x2000078c

08002ca8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
			commutationPattern(NEXT);
		} else{
			HAL_ADC_Start_IT(&hadc2);
		}
	}*/
	if(hadc->Instance == ADC2){
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3a      	ldr	r2, [pc, #232]	; (8002da0 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d146      	bne.n	8002d48 <HAL_ADC_ConvCpltCallback+0xa0>
		for(int i = 0; i < 10; i++){
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e012      	b.n	8002ce6 <HAL_ADC_ConvCpltCallback+0x3e>
			adcTotal += (float)adcBuffer[i];
 8002cc0:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cd0:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x100>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cda:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x100>)
 8002cdc:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < 10; i++){
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	dde9      	ble.n	8002cc0 <HAL_ADC_ConvCpltCallback+0x18>
		}
		adcAverage = adcTotal / 10;
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x100>)
 8002cee:	ed93 7a00 	vldr	s14, [r3]
 8002cf2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_ADC_ConvCpltCallback+0x104>)
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
		adcIntegral += adcAverage;
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_ADC_ConvCpltCallback+0x108>)
 8002d02:	ed93 7a00 	vldr	s14, [r3]
 8002d06:	4b29      	ldr	r3, [pc, #164]	; (8002dac <HAL_ADC_ConvCpltCallback+0x104>)
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <HAL_ADC_ConvCpltCallback+0x108>)
 8002d12:	edc3 7a00 	vstr	s15, [r3]

		adcTotal = 0;
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_ADC_ConvCpltCallback+0x100>)
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

		if(adcIntegral > adcOffset){
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_ADC_ConvCpltCallback+0x108>)
 8002d20:	ed93 7a00 	vldr	s14, [r3]
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d32:	dd09      	ble.n	8002d48 <HAL_ADC_ConvCpltCallback+0xa0>
			HAL_ADC_Stop_DMA(&hadc2);
 8002d34:	4820      	ldr	r0, [pc, #128]	; (8002db8 <HAL_ADC_ConvCpltCallback+0x110>)
 8002d36:	f001 f8bb 	bl	8003eb0 <HAL_ADC_Stop_DMA>
			adcIntegral = 0;
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_ADC_ConvCpltCallback+0x108>)
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

			commutationPattern(NEXT);
 8002d42:	2009      	movs	r0, #9
 8002d44:	f7fe fbb8 	bl	80014b8 <commutationPattern>
		}
	}

	if(hadc->Instance == ADC1){
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d50:	d122      	bne.n	8002d98 <HAL_ADC_ConvCpltCallback+0xf0>
		for(int i = 0; i < 12; i++){
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	e00c      	b.n	8002d72 <HAL_ADC_ConvCpltCallback+0xca>
			csADCTotal += csADC[i];
 8002d58:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_ADC_ConvCpltCallback+0x114>)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_ADC_ConvCpltCallback+0x118>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <HAL_ADC_ConvCpltCallback+0x118>)
 8002d6a:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 12; i++){
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b0b      	cmp	r3, #11
 8002d76:	ddef      	ble.n	8002d58 <HAL_ADC_ConvCpltCallback+0xb0>
		}
		csADCAverage = (float)csADCTotal / 12;
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_ADC_ConvCpltCallback+0x118>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	ee07 3a90 	vmov	s15, r3
 8002d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d84:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8002d8e:	edc3 7a00 	vstr	s15, [r3]
		csADCTotal = 0;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_ADC_ConvCpltCallback+0x118>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
		//csSize = sprintf((char*)csString, "%f\r\n", csADCAverage);
		//HAL_UART_Transmit_IT(&huart1, csString, csSize);
	}
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	50000100 	.word	0x50000100
 8002da4:	200002b8 	.word	0x200002b8
 8002da8:	20000294 	.word	0x20000294
 8002dac:	20000298 	.word	0x20000298
 8002db0:	20000218 	.word	0x20000218
 8002db4:	2000000c 	.word	0x2000000c
 8002db8:	200002d0 	.word	0x200002d0
 8002dbc:	20000678 	.word	0x20000678
 8002dc0:	2000029c 	.word	0x2000029c
 8002dc4:	200002a0 	.word	0x200002a0

08002dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <HAL_MspInit+0x44>)
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <HAL_MspInit+0x44>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6193      	str	r3, [r2, #24]
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_MspInit+0x44>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	607b      	str	r3, [r7, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_MspInit+0x44>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_MspInit+0x44>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_MspInit+0x44>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e40:	d156      	bne.n	8002ef0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e42:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <HAL_ADC_MspInit+0x190>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	4a59      	ldr	r2, [pc, #356]	; (8002fb0 <HAL_ADC_MspInit+0x190>)
 8002e4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e4c:	4b58      	ldr	r3, [pc, #352]	; (8002fb0 <HAL_ADC_MspInit+0x190>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d10b      	bne.n	8002e6c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e54:	4b57      	ldr	r3, [pc, #348]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	4a56      	ldr	r2, [pc, #344]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6153      	str	r3, [r2, #20]
 8002e60:	4b54      	ldr	r3, [pc, #336]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6c:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	4a50      	ldr	r2, [pc, #320]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e76:	6153      	str	r3, [r2, #20]
 8002e78:	4b4e      	ldr	r3, [pc, #312]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CS_Pin;
 8002e84:	2301      	movs	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	4619      	mov	r1, r3
 8002e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e9a:	f002 fdef 	bl	8005a7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e9e:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002ea0:	4a46      	ldr	r2, [pc, #280]	; (8002fbc <HAL_ADC_MspInit+0x19c>)
 8002ea2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ea4:	4b44      	ldr	r3, [pc, #272]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eaa:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002eb0:	4b41      	ldr	r3, [pc, #260]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002eb6:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ebc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ebe:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002ec8:	2220      	movs	r2, #32
 8002eca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ecc:	4b3a      	ldr	r3, [pc, #232]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ed2:	4839      	ldr	r0, [pc, #228]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002ed4:	f002 fba8 	bl	8005628 <HAL_DMA_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8002ede:	f7ff ff73 	bl	8002dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ee8:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <HAL_ADC_MspInit+0x198>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002eee:	e05b      	b.n	8002fa8 <HAL_ADC_MspInit+0x188>
  else if(hadc->Instance==ADC2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a32      	ldr	r2, [pc, #200]	; (8002fc0 <HAL_ADC_MspInit+0x1a0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d156      	bne.n	8002fa8 <HAL_ADC_MspInit+0x188>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002efa:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_ADC_MspInit+0x190>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	4a2b      	ldr	r2, [pc, #172]	; (8002fb0 <HAL_ADC_MspInit+0x190>)
 8002f02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002f04:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_ADC_MspInit+0x190>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10b      	bne.n	8002f24 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6153      	str	r3, [r2, #20]
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f24:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2e:	6153      	str	r3, [r2, #20]
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_ADC_MspInit+0x194>)
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_PHASEA_Pin|ADC_PHASEB_Pin|ADC_PHASEC_Pin;
 8002f3c:	23e0      	movs	r3, #224	; 0xe0
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f40:	2303      	movs	r3, #3
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f52:	f002 fd93 	bl	8005a7c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002f58:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <HAL_ADC_MspInit+0x1a8>)
 8002f5a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f74:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f7c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002f80:	2220      	movs	r2, #32
 8002f82:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002f8c:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002f8e:	f002 fb4b 	bl	8005628 <HAL_DMA_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_ADC_MspInit+0x17c>
      Error_Handler();
 8002f98:	f7ff ff16 	bl	8002dc8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_ADC_MspInit+0x1a4>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002fa8:	bf00      	nop
 8002faa:	3730      	adds	r7, #48	; 0x30
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200002a4 	.word	0x200002a4
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	20000634 	.word	0x20000634
 8002fbc:	40020008 	.word	0x40020008
 8002fc0:	50000100 	.word	0x50000100
 8002fc4:	200008b0 	.word	0x200008b0
 8002fc8:	40020408 	.word	0x40020408

08002fcc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3a      	ldr	r2, [pc, #232]	; (80030d4 <HAL_COMP_MspInit+0x108>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d121      	bne.n	8003032 <HAL_COMP_MspInit+0x66>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fee:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_COMP_MspInit+0x10c>)
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4a39      	ldr	r2, [pc, #228]	; (80030d8 <HAL_COMP_MspInit+0x10c>)
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff8:	6153      	str	r3, [r2, #20]
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_COMP_MspInit+0x10c>)
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = COMP_PHASEA_Pin;
 8003006:	2302      	movs	r3, #2
 8003008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800300a:	2303      	movs	r3, #3
 800300c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEA_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800301c:	f002 fd2e 	bl	8005a7c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	2040      	movs	r0, #64	; 0x40
 8003026:	f002 f97c 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800302a:	2040      	movs	r0, #64	; 0x40
 800302c:	f002 f995 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP3_MspInit 1 */

  /* USER CODE END COMP3_MspInit 1 */
  }

}
 8003030:	e04c      	b.n	80030cc <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a29      	ldr	r2, [pc, #164]	; (80030dc <HAL_COMP_MspInit+0x110>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d121      	bne.n	8003080 <HAL_COMP_MspInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_COMP_MspInit+0x10c>)
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <HAL_COMP_MspInit+0x10c>)
 8003042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003046:	6153      	str	r3, [r2, #20]
 8003048:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_COMP_MspInit+0x10c>)
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COMP_PHASEB_Pin;
 8003054:	2308      	movs	r3, #8
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003058:	2303      	movs	r3, #3
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEB_GPIO_Port, &GPIO_InitStruct);
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	4619      	mov	r1, r3
 8003066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800306a:	f002 fd07 	bl	8005a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 800306e:	2200      	movs	r2, #0
 8003070:	2100      	movs	r1, #0
 8003072:	2040      	movs	r0, #64	; 0x40
 8003074:	f002 f955 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8003078:	2040      	movs	r0, #64	; 0x40
 800307a:	f002 f96e 	bl	800535a <HAL_NVIC_EnableIRQ>
}
 800307e:	e025      	b.n	80030cc <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_COMP_MspInit+0x114>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d120      	bne.n	80030cc <HAL_COMP_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_COMP_MspInit+0x10c>)
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <HAL_COMP_MspInit+0x10c>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6153      	str	r3, [r2, #20]
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_COMP_MspInit+0x10c>)
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = COMP_PHASEC_Pin;
 80030a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030a8:	2303      	movs	r3, #3
 80030aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEC_GPIO_Port, &GPIO_InitStruct);
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	4619      	mov	r1, r3
 80030b6:	480b      	ldr	r0, [pc, #44]	; (80030e4 <HAL_COMP_MspInit+0x118>)
 80030b8:	f002 fce0 	bl	8005a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2100      	movs	r1, #0
 80030c0:	2040      	movs	r0, #64	; 0x40
 80030c2:	f002 f92e 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80030c6:	2040      	movs	r0, #64	; 0x40
 80030c8:	f002 f947 	bl	800535a <HAL_NVIC_EnableIRQ>
}
 80030cc:	bf00      	nop
 80030ce:	3728      	adds	r7, #40	; 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	4001001c 	.word	0x4001001c
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40010020 	.word	0x40010020
 80030e0:	40010024 	.word	0x40010024
 80030e4:	48000400 	.word	0x48000400

080030e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_DAC_MspInit+0x84>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d12c      	bne.n	8003164 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800310a:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_DAC_MspInit+0x88>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <HAL_DAC_MspInit+0x88>)
 8003110:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003114:	61d3      	str	r3, [r2, #28]
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_DAC_MspInit+0x88>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_DAC_MspInit+0x88>)
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <HAL_DAC_MspInit+0x88>)
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	6153      	str	r3, [r2, #20]
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <HAL_DAC_MspInit+0x88>)
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800313a:	2310      	movs	r3, #16
 800313c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800313e:	2303      	movs	r3, #3
 8003140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4619      	mov	r1, r3
 800314c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003150:	f002 fc94 	bl	8005a7c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8003154:	2200      	movs	r2, #0
 8003156:	2102      	movs	r1, #2
 8003158:	2036      	movs	r0, #54	; 0x36
 800315a:	f002 f8e2 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800315e:	2036      	movs	r0, #54	; 0x36
 8003160:	f002 f8fb 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003164:	bf00      	nop
 8003166:	3728      	adds	r7, #40	; 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40007400 	.word	0x40007400
 8003170:	40021000 	.word	0x40021000

08003174 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <HAL_TIM_PWM_MspInit+0x64>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d123      	bne.n	80031ce <HAL_TIM_PWM_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <HAL_TIM_PWM_MspInit+0x68>)
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	4a14      	ldr	r2, [pc, #80]	; (80031dc <HAL_TIM_PWM_MspInit+0x68>)
 800318c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003190:	6193      	str	r3, [r2, #24]
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_TIM_PWM_MspInit+0x68>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2100      	movs	r1, #0
 80031a2:	2018      	movs	r0, #24
 80031a4:	f002 f8bd 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80031a8:	2018      	movs	r0, #24
 80031aa:	f002 f8d6 	bl	800535a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2101      	movs	r1, #1
 80031b2:	2019      	movs	r0, #25
 80031b4:	f002 f8b5 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80031b8:	2019      	movs	r0, #25
 80031ba:	f002 f8ce 	bl	800535a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	201b      	movs	r0, #27
 80031c4:	f002 f8ad 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031c8:	201b      	movs	r0, #27
 80031ca:	f002 f8c6 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40021000 	.word	0x40021000

080031e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08e      	sub	sp, #56	; 0x38
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d10c      	bne.n	800321c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003202:	4b46      	ldr	r3, [pc, #280]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	4a45      	ldr	r2, [pc, #276]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	61d3      	str	r3, [r2, #28]
 800320e:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800321a:	e07b      	b.n	8003314 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM6)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a3f      	ldr	r2, [pc, #252]	; (8003320 <HAL_TIM_Base_MspInit+0x140>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d114      	bne.n	8003250 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a3c      	ldr	r2, [pc, #240]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 800322c:	f043 0310 	orr.w	r3, r3, #16
 8003230:	61d3      	str	r3, [r2, #28]
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2102      	movs	r1, #2
 8003242:	2036      	movs	r0, #54	; 0x36
 8003244:	f002 f86d 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003248:	2036      	movs	r0, #54	; 0x36
 800324a:	f002 f886 	bl	800535a <HAL_NVIC_EnableIRQ>
}
 800324e:	e061      	b.n	8003314 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM7)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a33      	ldr	r2, [pc, #204]	; (8003324 <HAL_TIM_Base_MspInit+0x144>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10c      	bne.n	8003274 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800325a:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4a2f      	ldr	r2, [pc, #188]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003260:	f043 0320 	orr.w	r3, r3, #32
 8003264:	61d3      	str	r3, [r2, #28]
 8003266:	4b2d      	ldr	r3, [pc, #180]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	69bb      	ldr	r3, [r7, #24]
}
 8003272:	e04f      	b.n	8003314 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM15)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a2b      	ldr	r2, [pc, #172]	; (8003328 <HAL_TIM_Base_MspInit+0x148>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d131      	bne.n	80032e2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800327e:	4b27      	ldr	r3, [pc, #156]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	4a26      	ldr	r2, [pc, #152]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6193      	str	r3, [r2, #24]
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	6153      	str	r3, [r2, #20]
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWMIN_Pin;
 80032ae:	2304      	movs	r3, #4
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032b6:	2302      	movs	r3, #2
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80032be:	2309      	movs	r3, #9
 80032c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PWMIN_GPIO_Port, &GPIO_InitStruct);
 80032c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c6:	4619      	mov	r1, r3
 80032c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032cc:	f002 fbd6 	bl	8005a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	2018      	movs	r0, #24
 80032d6:	f002 f824 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80032da:	2018      	movs	r0, #24
 80032dc:	f002 f83d 	bl	800535a <HAL_NVIC_EnableIRQ>
}
 80032e0:	e018      	b.n	8003314 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM16)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_TIM_Base_MspInit+0x14c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d113      	bne.n	8003314 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 80032f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f6:	6193      	str	r3, [r2, #24]
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_TIM_Base_MspInit+0x13c>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8003304:	2200      	movs	r2, #0
 8003306:	2101      	movs	r1, #1
 8003308:	2019      	movs	r0, #25
 800330a:	f002 f80a 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800330e:	2019      	movs	r0, #25
 8003310:	f002 f823 	bl	800535a <HAL_NVIC_EnableIRQ>
}
 8003314:	bf00      	nop
 8003316:	3738      	adds	r7, #56	; 0x38
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	40001000 	.word	0x40001000
 8003324:	40001400 	.word	0x40001400
 8003328:	40014000 	.word	0x40014000
 800332c:	40014400 	.word	0x40014400

08003330 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <HAL_TIM_OC_MspInit+0x44>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d113      	bne.n	800336a <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <HAL_TIM_OC_MspInit+0x48>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	4a0c      	ldr	r2, [pc, #48]	; (8003378 <HAL_TIM_OC_MspInit+0x48>)
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	61d3      	str	r3, [r2, #28]
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <HAL_TIM_OC_MspInit+0x48>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	2100      	movs	r1, #0
 800335e:	201d      	movs	r0, #29
 8003360:	f001 ffdf 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003364:	201d      	movs	r0, #29
 8003366:	f001 fff8 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40000400 	.word	0x40000400
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	f107 030c 	add.w	r3, r7, #12
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <HAL_TIM_MspPostInit+0x68>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d11d      	bne.n	80033da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_TIM_MspPostInit+0x6c>)
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <HAL_TIM_MspPostInit+0x6c>)
 80033a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a8:	6153      	str	r3, [r2, #20]
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <HAL_TIM_MspPostInit+0x6c>)
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMOUT_Pin;
 80033b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033c0:	2302      	movs	r3, #2
 80033c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033c4:	2303      	movs	r3, #3
 80033c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80033c8:	2306      	movs	r3, #6
 80033ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOUT_GPIO_Port, &GPIO_InitStruct);
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	4619      	mov	r1, r3
 80033d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d6:	f002 fb51 	bl	8005a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80033da:	bf00      	nop
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40021000 	.word	0x40021000

080033ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 0314 	add.w	r3, r7, #20
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <HAL_UART_MspInit+0xdc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d157      	bne.n	80034be <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800340e:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_UART_MspInit+0xe0>)
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	4a2e      	ldr	r2, [pc, #184]	; (80034cc <HAL_UART_MspInit+0xe0>)
 8003414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003418:	6193      	str	r3, [r2, #24]
 800341a:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <HAL_UART_MspInit+0xe0>)
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003426:	4b29      	ldr	r3, [pc, #164]	; (80034cc <HAL_UART_MspInit+0xe0>)
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_UART_MspInit+0xe0>)
 800342c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003430:	6153      	str	r3, [r2, #20]
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_UART_MspInit+0xe0>)
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800343e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800344c:	2303      	movs	r3, #3
 800344e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003450:	2307      	movs	r3, #7
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003454:	f107 0314 	add.w	r3, r7, #20
 8003458:	4619      	mov	r1, r3
 800345a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800345e:	f002 fb0d 	bl	8005a7c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <HAL_UART_MspInit+0xe8>)
 8003466:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 800346a:	2200      	movs	r2, #0
 800346c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003474:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 800347c:	2200      	movs	r2, #0
 800347e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003480:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 8003482:	2200      	movs	r2, #0
 8003484:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 8003488:	2220      	movs	r2, #32
 800348a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800348c:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 800348e:	2200      	movs	r2, #0
 8003490:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003492:	480f      	ldr	r0, [pc, #60]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 8003494:	f002 f8c8 	bl	8005628 <HAL_DMA_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800349e:	f7ff fc93 	bl	8002dc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 80034a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80034a8:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_UART_MspInit+0xe4>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2101      	movs	r1, #1
 80034b2:	2025      	movs	r0, #37	; 0x25
 80034b4:	f001 ff35 	bl	8005322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034b8:	2025      	movs	r0, #37	; 0x25
 80034ba:	f001 ff4e 	bl	800535a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034be:	bf00      	nop
 80034c0:	3728      	adds	r7, #40	; 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40013800 	.word	0x40013800
 80034cc:	40021000 	.word	0x40021000
 80034d0:	20000490 	.word	0x20000490
 80034d4:	40020058 	.word	0x40020058

080034d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 80034ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034f0:	4803      	ldr	r0, [pc, #12]	; (8003500 <HardFault_Handler+0x18>)
 80034f2:	f002 fc6d 	bl	8005dd0 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80034f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034fa:	f000 f9a7 	bl	800384c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 80034fe:	e7f5      	b.n	80034ec <HardFault_Handler+0x4>
 8003500:	48000400 	.word	0x48000400

08003504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003508:	e7fe      	b.n	8003508 <MemManage_Handler+0x4>

0800350a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800350e:	e7fe      	b.n	800350e <BusFault_Handler+0x4>

08003510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003514:	e7fe      	b.n	8003514 <UsageFault_Handler+0x4>

08003516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003544:	f000 f962 	bl	800380c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(dma_uart_rx.timer == 1)
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <SysTick_Handler+0x38>)
 800354a:	885b      	ldrh	r3, [r3, #2]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d106      	bne.n	800355e <SysTick_Handler+0x1e>
     {
         /* DMA Timeout event: set Timeout Flag and call DMA Rx Complete Callback */
         dma_uart_rx.flag = 1;
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <SysTick_Handler+0x38>)
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
         hdma_usart1_rx.XferCpltCallback(&hdma_usart1_rx);
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <SysTick_Handler+0x3c>)
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	4808      	ldr	r0, [pc, #32]	; (800357c <SysTick_Handler+0x3c>)
 800355c:	4798      	blx	r3
     }
     if(dma_uart_rx.timer) { --dma_uart_rx.timer; }
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <SysTick_Handler+0x38>)
 8003560:	885b      	ldrh	r3, [r3, #2]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <SysTick_Handler+0x32>
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <SysTick_Handler+0x38>)
 8003568:	885b      	ldrh	r3, [r3, #2]
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	4b02      	ldr	r3, [pc, #8]	; (8003578 <SysTick_Handler+0x38>)
 8003570:	805a      	strh	r2, [r3, #2]
  /* USER CODE END SysTick_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000014 	.word	0x20000014
 800357c:	20000490 	.word	0x20000490

08003580 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <DMA1_Channel1_IRQHandler+0x10>)
 8003586:	f002 f96c 	bl	8005862 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000634 	.word	0x20000634

08003594 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <DMA1_Channel5_IRQHandler+0x10>)
 800359a:	f002 f962 	bl	8005862 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000490 	.word	0x20000490

080035a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035ac:	4803      	ldr	r0, [pc, #12]	; (80035bc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80035ae:	f004 f959 	bl	8007864 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80035b2:	4803      	ldr	r0, [pc, #12]	; (80035c0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80035b4:	f004 f956 	bl	8007864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	200006d4 	.word	0x200006d4
 80035c0:	20000324 	.word	0x20000324

080035c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035c8:	4803      	ldr	r0, [pc, #12]	; (80035d8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80035ca:	f004 f94b 	bl	8007864 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80035ce:	4803      	ldr	r0, [pc, #12]	; (80035dc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80035d0:	f004 f948 	bl	8007864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200006d4 	.word	0x200006d4
 80035dc:	200008f4 	.word	0x200008f4

080035e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035e4:	4802      	ldr	r0, [pc, #8]	; (80035f0 <TIM1_CC_IRQHandler+0x10>)
 80035e6:	f004 f93d 	bl	8007864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200006d4 	.word	0x200006d4

080035f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <TIM3_IRQHandler+0x10>)
 80035fa:	f004 f933 	bl	8007864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	200003fc 	.word	0x200003fc

08003608 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    if((USART1->ISR & USART_ISR_IDLE) != RESET)
 800360c:	4b08      	ldr	r3, [pc, #32]	; (8003630 <USART1_IRQHandler+0x28>)
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <USART1_IRQHandler+0x1c>
    {
        USART1->ICR = UART_CLEAR_IDLEF;
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <USART1_IRQHandler+0x28>)
 800361a:	2210      	movs	r2, #16
 800361c:	621a      	str	r2, [r3, #32]
        /* Start DMA timer */
        dma_uart_rx.timer = DMA_TIMEOUT_MS;
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <USART1_IRQHandler+0x2c>)
 8003620:	220a      	movs	r2, #10
 8003622:	805a      	strh	r2, [r3, #2]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003624:	4804      	ldr	r0, [pc, #16]	; (8003638 <USART1_IRQHandler+0x30>)
 8003626:	f005 fd69 	bl	80090fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40013800 	.word	0x40013800
 8003634:	20000014 	.word	0x20000014
 8003638:	200004d8 	.word	0x200004d8

0800363c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003640:	4803      	ldr	r0, [pc, #12]	; (8003650 <TIM6_DAC_IRQHandler+0x14>)
 8003642:	f004 f90f 	bl	8007864 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8003646:	4803      	ldr	r0, [pc, #12]	; (8003654 <TIM6_DAC_IRQHandler+0x18>)
 8003648:	f001 ff3d 	bl	80054c6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000690 	.word	0x20000690
 8003654:	20000558 	.word	0x20000558

08003658 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <DMA2_Channel1_IRQHandler+0x10>)
 800365e:	f002 f900 	bl	8005862 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	200008b0 	.word	0x200008b0

0800366c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8003670:	4805      	ldr	r0, [pc, #20]	; (8003688 <COMP1_2_3_IRQHandler+0x1c>)
 8003672:	f001 fd0b 	bl	800508c <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 8003676:	4805      	ldr	r0, [pc, #20]	; (800368c <COMP1_2_3_IRQHandler+0x20>)
 8003678:	f001 fd08 	bl	800508c <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp3);
 800367c:	4804      	ldr	r0, [pc, #16]	; (8003690 <COMP1_2_3_IRQHandler+0x24>)
 800367e:	f001 fd05 	bl	800508c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200003cc 	.word	0x200003cc
 800368c:	20000714 	.word	0x20000714
 8003690:	20000744 	.word	0x20000744

08003694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <_sbrk+0x5c>)
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <_sbrk+0x60>)
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036a8:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <_sbrk+0x64>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <_sbrk+0x64>)
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <_sbrk+0x68>)
 80036b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <_sbrk+0x64>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d207      	bcs.n	80036d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c4:	f006 fb60 	bl	8009d88 <__errno>
 80036c8:	4602      	mov	r2, r0
 80036ca:	230c      	movs	r3, #12
 80036cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80036ce:	f04f 33ff 	mov.w	r3, #4294967295
 80036d2:	e009      	b.n	80036e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <_sbrk+0x64>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036da:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <_sbrk+0x64>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	4a05      	ldr	r2, [pc, #20]	; (80036f8 <_sbrk+0x64>)
 80036e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036e6:	68fb      	ldr	r3, [r7, #12]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	2000a000 	.word	0x2000a000
 80036f4:	00000400 	.word	0x00000400
 80036f8:	200002a8 	.word	0x200002a8
 80036fc:	200009d0 	.word	0x200009d0

08003700 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <SystemInit+0x28>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	4a07      	ldr	r2, [pc, #28]	; (8003728 <SystemInit+0x28>)
 800370c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <SystemInit+0x28>)
 8003716:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800371a:	609a      	str	r2, [r3, #8]
#endif
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800372c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003764 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003730:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003732:	e003      	b.n	800373c <LoopCopyDataInit>

08003734 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003736:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003738:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800373a:	3104      	adds	r1, #4

0800373c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800373c:	480b      	ldr	r0, [pc, #44]	; (800376c <LoopForever+0xa>)
	ldr	r3, =_edata
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003740:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003742:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003744:	d3f6      	bcc.n	8003734 <CopyDataInit>
	ldr	r2, =_sbss
 8003746:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003748:	e002      	b.n	8003750 <LoopFillZerobss>

0800374a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800374a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800374c:	f842 3b04 	str.w	r3, [r2], #4

08003750 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <LoopForever+0x16>)
	cmp	r2, r3
 8003752:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003754:	d3f9      	bcc.n	800374a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003756:	f7ff ffd3 	bl	8003700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800375a:	f006 fb1b 	bl	8009d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800375e:	f7fe f81b 	bl	8001798 <main>

08003762 <LoopForever>:

LoopForever:
    b LoopForever
 8003762:	e7fe      	b.n	8003762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003764:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8003768:	0800da68 	.word	0x0800da68
	ldr	r0, =_sdata
 800376c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003770:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8003774:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8003778:	200009d0 	.word	0x200009d0

0800377c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800377c:	e7fe      	b.n	800377c <ADC1_2_IRQHandler>
	...

08003780 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <HAL_Init+0x28>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <HAL_Init+0x28>)
 800378a:	f043 0310 	orr.w	r3, r3, #16
 800378e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003790:	2003      	movs	r0, #3
 8003792:	f001 fdbb 	bl	800530c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003796:	2000      	movs	r0, #0
 8003798:	f000 f808 	bl	80037ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800379c:	f7ff fb1c 	bl	8002dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40022000 	.word	0x40022000

080037ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <HAL_InitTick+0x54>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_InitTick+0x58>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	4619      	mov	r1, r3
 80037be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fdd3 	bl	8005376 <HAL_SYSTICK_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00e      	b.n	80037f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b0f      	cmp	r3, #15
 80037de:	d80a      	bhi.n	80037f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037e0:	2200      	movs	r2, #0
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f001 fd9b 	bl	8005322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037ec:	4a06      	ldr	r2, [pc, #24]	; (8003808 <HAL_InitTick+0x5c>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	2000001c 	.word	0x2000001c
 8003804:	20000024 	.word	0x20000024
 8003808:	20000020 	.word	0x20000020

0800380c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_IncTick+0x20>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_IncTick+0x24>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4413      	add	r3, r2
 800381c:	4a04      	ldr	r2, [pc, #16]	; (8003830 <HAL_IncTick+0x24>)
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000024 	.word	0x20000024
 8003830:	200009c8 	.word	0x200009c8

08003834 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return uwTick;  
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <HAL_GetTick+0x14>)
 800383a:	681b      	ldr	r3, [r3, #0]
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	200009c8 	.word	0x200009c8

0800384c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003854:	f7ff ffee 	bl	8003834 <HAL_GetTick>
 8003858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d005      	beq.n	8003872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_Delay+0x40>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003872:	bf00      	nop
 8003874:	f7ff ffde 	bl	8003834 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	429a      	cmp	r2, r3
 8003882:	d8f7      	bhi.n	8003874 <HAL_Delay+0x28>
  {
  }
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20000024 	.word	0x20000024

08003890 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b09a      	sub	sp, #104	; 0x68
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e1c9      	b.n	8003c6c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d176      	bne.n	80039d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d152      	bne.n	8003998 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff fa87 	bl	8002e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d13b      	bne.n	8003998 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 ffc3 	bl	80048ac <ADC_Disable>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d12f      	bne.n	8003998 <HAL_ADC_Init+0xe0>
 8003938:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800393c:	2b00      	cmp	r3, #0
 800393e:	d12b      	bne.n	8003998 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003948:	f023 0302 	bic.w	r3, r3, #2
 800394c:	f043 0202 	orr.w	r2, r3, #2
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003962:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003972:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003974:	4b86      	ldr	r3, [pc, #536]	; (8003b90 <HAL_ADC_Init+0x2d8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a86      	ldr	r2, [pc, #536]	; (8003b94 <HAL_ADC_Init+0x2dc>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0c9a      	lsrs	r2, r3, #18
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800398a:	e002      	b.n	8003992 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3b01      	subs	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80039b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b4:	d110      	bne.n	80039d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f023 0312 	bic.w	r3, r3, #18
 80039be:	f043 0210 	orr.w	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8136 	bne.w	8003c52 <HAL_ADC_Init+0x39a>
 80039e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 8131 	bne.w	8003c52 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 8129 	bne.w	8003c52 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a08:	f043 0202 	orr.w	r2, r3, #2
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a18:	d004      	beq.n	8003a24 <HAL_ADC_Init+0x16c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a5e      	ldr	r2, [pc, #376]	; (8003b98 <HAL_ADC_Init+0x2e0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_Init+0x170>
 8003a24:	4b5d      	ldr	r3, [pc, #372]	; (8003b9c <HAL_ADC_Init+0x2e4>)
 8003a26:	e000      	b.n	8003a2a <HAL_ADC_Init+0x172>
 8003a28:	4b5d      	ldr	r3, [pc, #372]	; (8003ba0 <HAL_ADC_Init+0x2e8>)
 8003a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a34:	d102      	bne.n	8003a3c <HAL_ADC_Init+0x184>
 8003a36:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <HAL_ADC_Init+0x2e0>)
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e01a      	b.n	8003a72 <HAL_ADC_Init+0x1ba>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a55      	ldr	r2, [pc, #340]	; (8003b98 <HAL_ADC_Init+0x2e0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d103      	bne.n	8003a4e <HAL_ADC_Init+0x196>
 8003a46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e011      	b.n	8003a72 <HAL_ADC_Init+0x1ba>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a54      	ldr	r2, [pc, #336]	; (8003ba4 <HAL_ADC_Init+0x2ec>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d102      	bne.n	8003a5e <HAL_ADC_Init+0x1a6>
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_ADC_Init+0x2f0>)
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e009      	b.n	8003a72 <HAL_ADC_Init+0x1ba>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a51      	ldr	r2, [pc, #324]	; (8003ba8 <HAL_ADC_Init+0x2f0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d102      	bne.n	8003a6e <HAL_ADC_Init+0x1b6>
 8003a68:	4b4e      	ldr	r3, [pc, #312]	; (8003ba4 <HAL_ADC_Init+0x2ec>)
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <HAL_ADC_Init+0x1ba>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d108      	bne.n	8003a92 <HAL_ADC_Init+0x1da>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_ADC_Init+0x1da>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <HAL_ADC_Init+0x1dc>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d11c      	bne.n	8003ad2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a98:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d010      	beq.n	8003ac0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d107      	bne.n	8003aba <HAL_ADC_Init+0x202>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_Init+0x202>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_ADC_Init+0x204>
 8003aba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d108      	bne.n	8003ad2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7e5b      	ldrb	r3, [r3, #25]
 8003ad6:	035b      	lsls	r3, r3, #13
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003adc:	2a01      	cmp	r2, #1
 8003ade:	d002      	beq.n	8003ae6 <HAL_ADC_Init+0x22e>
 8003ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ae4:	e000      	b.n	8003ae8 <HAL_ADC_Init+0x230>
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003af8:	4313      	orrs	r3, r2
 8003afa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d11b      	bne.n	8003b3e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7e5b      	ldrb	r3, [r3, #25]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	3b01      	subs	r3, #1
 8003b14:	045a      	lsls	r2, r3, #17
 8003b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b20:	e00d      	b.n	8003b3e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d03a      	beq.n	8003bbc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a16      	ldr	r2, [pc, #88]	; (8003ba4 <HAL_ADC_Init+0x2ec>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_ADC_Init+0x2a2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <HAL_ADC_Init+0x2f0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d128      	bne.n	8003bac <HAL_ADC_Init+0x2f4>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003b62:	d012      	beq.n	8003b8a <HAL_ADC_Init+0x2d2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6c:	d00a      	beq.n	8003b84 <HAL_ADC_Init+0x2cc>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003b76:	d002      	beq.n	8003b7e <HAL_ADC_Init+0x2c6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	e018      	b.n	8003bb0 <HAL_ADC_Init+0x2f8>
 8003b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b82:	e015      	b.n	8003bb0 <HAL_ADC_Init+0x2f8>
 8003b84:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003b88:	e012      	b.n	8003bb0 <HAL_ADC_Init+0x2f8>
 8003b8a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003b8e:	e00f      	b.n	8003bb0 <HAL_ADC_Init+0x2f8>
 8003b90:	2000001c 	.word	0x2000001c
 8003b94:	431bde83 	.word	0x431bde83
 8003b98:	50000100 	.word	0x50000100
 8003b9c:	50000300 	.word	0x50000300
 8003ba0:	50000700 	.word	0x50000700
 8003ba4:	50000400 	.word	0x50000400
 8003ba8:	50000500 	.word	0x50000500
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d114      	bne.n	8003bf4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd8:	f023 0302 	bic.w	r3, r3, #2
 8003bdc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7e1b      	ldrb	r3, [r3, #24]
 8003be2:	039a      	lsls	r2, r3, #14
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <HAL_ADC_Init+0x3bc>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003c04:	430b      	orrs	r3, r1
 8003c06:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10c      	bne.n	8003c2a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f023 010f 	bic.w	r1, r3, #15
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	1e5a      	subs	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
 8003c28:	e007      	b.n	8003c3a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 020f 	bic.w	r2, r2, #15
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f023 0303 	bic.w	r3, r3, #3
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
 8003c50:	e00a      	b.n	8003c68 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f023 0312 	bic.w	r3, r3, #18
 8003c5a:	f043 0210 	orr.w	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003c68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3768      	adds	r7, #104	; 0x68
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	fff0c007 	.word	0xfff0c007

08003c78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 80f7 	bne.w	8003e86 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_Start_DMA+0x2e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0f2      	b.n	8003e8c <HAL_ADC_Start_DMA+0x214>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb6:	d004      	beq.n	8003cc2 <HAL_ADC_Start_DMA+0x4a>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a75      	ldr	r2, [pc, #468]	; (8003e94 <HAL_ADC_Start_DMA+0x21c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d109      	bne.n	8003cd6 <HAL_ADC_Start_DMA+0x5e>
 8003cc2:	4b75      	ldr	r3, [pc, #468]	; (8003e98 <HAL_ADC_Start_DMA+0x220>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	e008      	b.n	8003ce8 <HAL_ADC_Start_DMA+0x70>
 8003cd6:	4b71      	ldr	r3, [pc, #452]	; (8003e9c <HAL_ADC_Start_DMA+0x224>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80c5 	beq.w	8003e78 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fd7e 	bl	80047f0 <ADC_Enable>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 80b7 	bne.w	8003e6e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d1c:	d004      	beq.n	8003d28 <HAL_ADC_Start_DMA+0xb0>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a5c      	ldr	r2, [pc, #368]	; (8003e94 <HAL_ADC_Start_DMA+0x21c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d106      	bne.n	8003d36 <HAL_ADC_Start_DMA+0xbe>
 8003d28:	4b5b      	ldr	r3, [pc, #364]	; (8003e98 <HAL_ADC_Start_DMA+0x220>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d010      	beq.n	8003d56 <HAL_ADC_Start_DMA+0xde>
 8003d34:	e005      	b.n	8003d42 <HAL_ADC_Start_DMA+0xca>
 8003d36:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <HAL_ADC_Start_DMA+0x224>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_ADC_Start_DMA+0xde>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d4a:	d004      	beq.n	8003d56 <HAL_ADC_Start_DMA+0xde>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a53      	ldr	r2, [pc, #332]	; (8003ea0 <HAL_ADC_Start_DMA+0x228>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d115      	bne.n	8003d82 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d036      	beq.n	8003dde <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003d80:	e02d      	b.n	8003dde <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d96:	d004      	beq.n	8003da2 <HAL_ADC_Start_DMA+0x12a>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3d      	ldr	r2, [pc, #244]	; (8003e94 <HAL_ADC_Start_DMA+0x21c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d10a      	bne.n	8003db8 <HAL_ADC_Start_DMA+0x140>
 8003da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e008      	b.n	8003dca <HAL_ADC_Start_DMA+0x152>
 8003db8:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <HAL_ADC_Start_DMA+0x228>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dea:	d106      	bne.n	8003dfa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f023 0206 	bic.w	r2, r3, #6
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44
 8003df8:	e002      	b.n	8003e00 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_ADC_Start_DMA+0x22c>)
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_ADC_Start_DMA+0x230>)
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	4a23      	ldr	r2, [pc, #140]	; (8003eac <HAL_ADC_Start_DMA+0x234>)
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	221c      	movs	r2, #28
 8003e26:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0210 	orr.w	r2, r2, #16
 8003e36:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3340      	adds	r3, #64	; 0x40
 8003e52:	4619      	mov	r1, r3
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f001 fc2d 	bl	80056b6 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0204 	orr.w	r2, r2, #4
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	e00d      	b.n	8003e8a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e76:	e008      	b.n	8003e8a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e84:	e001      	b.n	8003e8a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
 8003e88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	50000100 	.word	0x50000100
 8003e98:	50000300 	.word	0x50000300
 8003e9c:	50000700 	.word	0x50000700
 8003ea0:	50000400 	.word	0x50000400
 8003ea4:	08004725 	.word	0x08004725
 8003ea8:	0800479f 	.word	0x0800479f
 8003eac:	080047bb 	.word	0x080047bb

08003eb0 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_Stop_DMA+0x1a>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e04a      	b.n	8003f60 <HAL_ADC_Stop_DMA+0xb0>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003ed2:	216c      	movs	r1, #108	; 0x6c
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fd49 	bl	800496c <ADC_ConversionStop>
 8003eda:	4603      	mov	r3, r0
 8003edc:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d138      	bne.n	8003f56 <HAL_ADC_Stop_DMA+0xa6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 fc3b 	bl	8005774 <HAL_DMA_Abort>
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_ADC_Stop_DMA+0x64>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0210 	bic.w	r2, r2, #16
 8003f22:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fcbe 	bl	80048ac <ADC_Disable>
 8003f30:	4603      	mov	r3, r0
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	e002      	b.n	8003f3c <HAL_ADC_Stop_DMA+0x8c>
    }
    else
    {
      ADC_Disable(hadc);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fcb8 	bl	80048ac <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_ADC_Stop_DMA+0xa6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b09b      	sub	sp, #108	; 0x6c
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x22>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e2cb      	b.n	8004522 <HAL_ADC_ConfigChannel+0x5ba>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f040 82af 	bne.w	8004500 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d81c      	bhi.n	8003fe4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	231f      	movs	r3, #31
 8003fc0:	4093      	lsls	r3, r2
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	4019      	ands	r1, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fe2:	e063      	b.n	80040ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b09      	cmp	r3, #9
 8003fea:	d81e      	bhi.n	800402a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	3b1e      	subs	r3, #30
 8004000:	221f      	movs	r2, #31
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	4019      	ands	r1, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	3b1e      	subs	r3, #30
 800401c:	fa00 f203 	lsl.w	r2, r0, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	635a      	str	r2, [r3, #52]	; 0x34
 8004028:	e040      	b.n	80040ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b0e      	cmp	r3, #14
 8004030:	d81e      	bhi.n	8004070 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4413      	add	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	3b3c      	subs	r3, #60	; 0x3c
 8004046:	221f      	movs	r2, #31
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	4019      	ands	r1, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	3b3c      	subs	r3, #60	; 0x3c
 8004062:	fa00 f203 	lsl.w	r2, r0, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
 800406e:	e01d      	b.n	80040ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	3b5a      	subs	r3, #90	; 0x5a
 8004084:	221f      	movs	r2, #31
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	4019      	ands	r1, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	3b5a      	subs	r3, #90	; 0x5a
 80040a0:	fa00 f203 	lsl.w	r2, r0, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 80e5 	bne.w	8004286 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b09      	cmp	r3, #9
 80040c2:	d91c      	bls.n	80040fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6999      	ldr	r1, [r3, #24]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	3b1e      	subs	r3, #30
 80040d6:	2207      	movs	r2, #7
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	4019      	ands	r1, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	6898      	ldr	r0, [r3, #8]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	3b1e      	subs	r3, #30
 80040f0:	fa00 f203 	lsl.w	r2, r0, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	619a      	str	r2, [r3, #24]
 80040fc:	e019      	b.n	8004132 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6959      	ldr	r1, [r3, #20]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	2207      	movs	r2, #7
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	4019      	ands	r1, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6898      	ldr	r0, [r3, #8]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	fa00 f203 	lsl.w	r2, r0, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	3b01      	subs	r3, #1
 8004150:	2b03      	cmp	r3, #3
 8004152:	d84f      	bhi.n	80041f4 <HAL_ADC_ConfigChannel+0x28c>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <HAL_ADC_ConfigChannel+0x1f4>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	0800416d 	.word	0x0800416d
 8004160:	0800418f 	.word	0x0800418f
 8004164:	080041b1 	.word	0x080041b1
 8004168:	080041d3 	.word	0x080041d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004172:	4b9f      	ldr	r3, [pc, #636]	; (80043f0 <HAL_ADC_ConfigChannel+0x488>)
 8004174:	4013      	ands	r3, r2
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	0691      	lsls	r1, r2, #26
 800417c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800417e:	430a      	orrs	r2, r1
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800418a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800418c:	e07e      	b.n	800428c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004194:	4b96      	ldr	r3, [pc, #600]	; (80043f0 <HAL_ADC_ConfigChannel+0x488>)
 8004196:	4013      	ands	r3, r2
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	0691      	lsls	r1, r2, #26
 800419e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041a0:	430a      	orrs	r2, r1
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041ac:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041ae:	e06d      	b.n	800428c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80041b6:	4b8e      	ldr	r3, [pc, #568]	; (80043f0 <HAL_ADC_ConfigChannel+0x488>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	0691      	lsls	r1, r2, #26
 80041c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041c2:	430a      	orrs	r2, r1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041ce:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041d0:	e05c      	b.n	800428c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041d8:	4b85      	ldr	r3, [pc, #532]	; (80043f0 <HAL_ADC_ConfigChannel+0x488>)
 80041da:	4013      	ands	r3, r2
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	0691      	lsls	r1, r2, #26
 80041e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041e4:	430a      	orrs	r2, r1
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041f0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80041f2:	e04b      	b.n	800428c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	069b      	lsls	r3, r3, #26
 8004204:	429a      	cmp	r2, r3
 8004206:	d107      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800421e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	069b      	lsls	r3, r3, #26
 8004228:	429a      	cmp	r2, r3
 800422a:	d107      	bne.n	800423c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800423a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004242:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	069b      	lsls	r3, r3, #26
 800424c:	429a      	cmp	r2, r3
 800424e:	d107      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800425e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004266:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	069b      	lsls	r3, r3, #26
 8004270:	429a      	cmp	r2, r3
 8004272:	d10a      	bne.n	800428a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004282:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004284:	e001      	b.n	800428a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <HAL_ADC_ConfigChannel+0x324>
      break;
 800428a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d108      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x344>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x344>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_ADC_ConfigChannel+0x346>
 80042ac:	2300      	movs	r3, #0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f040 8131 	bne.w	8004516 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d00f      	beq.n	80042dc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2201      	movs	r2, #1
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	400a      	ands	r2, r1
 80042d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80042da:	e049      	b.n	8004370 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b09      	cmp	r3, #9
 80042fc:	d91c      	bls.n	8004338 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6999      	ldr	r1, [r3, #24]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	3b1b      	subs	r3, #27
 8004310:	2207      	movs	r2, #7
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	4019      	ands	r1, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6898      	ldr	r0, [r3, #8]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	4413      	add	r3, r2
 8004328:	3b1b      	subs	r3, #27
 800432a:	fa00 f203 	lsl.w	r2, r0, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	619a      	str	r2, [r3, #24]
 8004336:	e01b      	b.n	8004370 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6959      	ldr	r1, [r3, #20]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	2207      	movs	r2, #7
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	4019      	ands	r1, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6898      	ldr	r0, [r3, #8]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	4613      	mov	r3, r2
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	4413      	add	r3, r2
 8004364:	fa00 f203 	lsl.w	r2, r0, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004378:	d004      	beq.n	8004384 <HAL_ADC_ConfigChannel+0x41c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_ADC_ConfigChannel+0x48c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x420>
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <HAL_ADC_ConfigChannel+0x490>)
 8004386:	e000      	b.n	800438a <HAL_ADC_ConfigChannel+0x422>
 8004388:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <HAL_ADC_ConfigChannel+0x494>)
 800438a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b10      	cmp	r3, #16
 8004392:	d105      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80043a4:	2b11      	cmp	r3, #17
 80043a6:	d105      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80043a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80043b8:	2b12      	cmp	r3, #18
 80043ba:	f040 80ac 	bne.w	8004516 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80043be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 80a5 	bne.w	8004516 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d4:	d102      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x474>
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <HAL_ADC_ConfigChannel+0x48c>)
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	e023      	b.n	8004424 <HAL_ADC_ConfigChannel+0x4bc>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <HAL_ADC_ConfigChannel+0x48c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10c      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x498>
 80043e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e01a      	b.n	8004424 <HAL_ADC_ConfigChannel+0x4bc>
 80043ee:	bf00      	nop
 80043f0:	83fff000 	.word	0x83fff000
 80043f4:	50000100 	.word	0x50000100
 80043f8:	50000300 	.word	0x50000300
 80043fc:	50000700 	.word	0x50000700
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a4a      	ldr	r2, [pc, #296]	; (8004530 <HAL_ADC_ConfigChannel+0x5c8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d102      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x4a8>
 800440a:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <HAL_ADC_ConfigChannel+0x5cc>)
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e009      	b.n	8004424 <HAL_ADC_ConfigChannel+0x4bc>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a47      	ldr	r2, [pc, #284]	; (8004534 <HAL_ADC_ConfigChannel+0x5cc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d102      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x4b8>
 800441a:	4b45      	ldr	r3, [pc, #276]	; (8004530 <HAL_ADC_ConfigChannel+0x5c8>)
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e001      	b.n	8004424 <HAL_ADC_ConfigChannel+0x4bc>
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d108      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x4dc>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x4dc>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_ADC_ConfigChannel+0x4de>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d150      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800444a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800444c:	2b00      	cmp	r3, #0
 800444e:	d010      	beq.n	8004472 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_ADC_ConfigChannel+0x504>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_ADC_ConfigChannel+0x504>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_ADC_ConfigChannel+0x506>
 800446c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800446e:	2b00      	cmp	r3, #0
 8004470:	d13c      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b10      	cmp	r3, #16
 8004478:	d11d      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x54e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004482:	d118      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800448c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004490:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_ADC_ConfigChannel+0x5d0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a29      	ldr	r2, [pc, #164]	; (800453c <HAL_ADC_ConfigChannel+0x5d4>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	0c9a      	lsrs	r2, r3, #18
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044a6:	e002      	b.n	80044ae <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f9      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044b4:	e02e      	b.n	8004514 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b11      	cmp	r3, #17
 80044bc:	d10b      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x56e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c6:	d106      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80044c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80044d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044d4:	e01e      	b.n	8004514 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b12      	cmp	r3, #18
 80044dc:	d11a      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80044de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044ea:	e013      	b.n	8004514 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80044fe:	e00a      	b.n	8004516 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004512:	e000      	b.n	8004516 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004514:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800451e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004522:	4618      	mov	r0, r3
 8004524:	376c      	adds	r7, #108	; 0x6c
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	50000400 	.word	0x50000400
 8004534:	50000500 	.word	0x50000500
 8004538:	2000001c 	.word	0x2000001c
 800453c:	431bde83 	.word	0x431bde83

08004540 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004540:	b480      	push	{r7}
 8004542:	b099      	sub	sp, #100	; 0x64
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004558:	d102      	bne.n	8004560 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800455a:	4b6d      	ldr	r3, [pc, #436]	; (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	e01a      	b.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6a      	ldr	r2, [pc, #424]	; (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d103      	bne.n	8004572 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800456a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	e011      	b.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a67      	ldr	r2, [pc, #412]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d102      	bne.n	8004582 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800457c:	4b66      	ldr	r3, [pc, #408]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	e009      	b.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a64      	ldr	r2, [pc, #400]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d102      	bne.n	8004592 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800458c:	4b61      	ldr	r3, [pc, #388]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	e001      	b.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0b0      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e0a9      	b.n	8004702 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 808d 	bne.w	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 8086 	bne.w	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045dc:	d004      	beq.n	80045e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4b      	ldr	r2, [pc, #300]	; (8004710 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80045e8:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80045ea:	e000      	b.n	80045ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80045ec:	4b4c      	ldr	r3, [pc, #304]	; (8004720 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80045ee:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d040      	beq.n	800467a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80045f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	6859      	ldr	r1, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800460a:	035b      	lsls	r3, r3, #13
 800460c:	430b      	orrs	r3, r1
 800460e:	431a      	orrs	r2, r3
 8004610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004612:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d108      	bne.n	8004634 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004634:	2300      	movs	r3, #0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d15c      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d107      	bne.n	8004656 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004656:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004658:	2b00      	cmp	r3, #0
 800465a:	d14b      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800465c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004664:	f023 030f 	bic.w	r3, r3, #15
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	6811      	ldr	r1, [r2, #0]
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	6892      	ldr	r2, [r2, #8]
 8004670:	430a      	orrs	r2, r1
 8004672:	431a      	orrs	r2, r3
 8004674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004676:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004678:	e03c      	b.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800467a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004684:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d108      	bne.n	80046a6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d123      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d107      	bne.n	80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80046c8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d112      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80046ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046d6:	f023 030f 	bic.w	r3, r3, #15
 80046da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046dc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80046de:	e009      	b.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	f043 0220 	orr.w	r2, r3, #32
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80046f2:	e000      	b.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80046f4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80046fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004702:	4618      	mov	r0, r3
 8004704:	3764      	adds	r7, #100	; 0x64
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	50000100 	.word	0x50000100
 8004714:	50000400 	.word	0x50000400
 8004718:	50000500 	.word	0x50000500
 800471c:	50000300 	.word	0x50000300
 8004720:	50000700 	.word	0x50000700

08004724 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800473a:	2b00      	cmp	r3, #0
 800473c:	d126      	bne.n	800478c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004754:	2b00      	cmp	r3, #0
 8004756:	d115      	bne.n	8004784 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800475c:	2b00      	cmp	r3, #0
 800475e:	d111      	bne.n	8004784 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	f043 0201 	orr.w	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7fe fa8f 	bl	8002ca8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800478a:	e004      	b.n	8004796 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	4798      	blx	r3
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff f86f 	bl	8003890 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	f043 0204 	orr.w	r2, r3, #4
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7ff f85f 	bl	80038a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d108      	bne.n	800481c <ADC_Enable+0x2c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <ADC_Enable+0x2c>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <ADC_Enable+0x2e>
 800481c:	2300      	movs	r3, #0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d13c      	bne.n	800489c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <ADC_Enable+0xb8>)
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	f043 0210 	orr.w	r2, r3, #16
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	f043 0201 	orr.w	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e028      	b.n	800489e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800485c:	f7fe ffea 	bl	8003834 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004862:	e014      	b.n	800488e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004864:	f7fe ffe6 	bl	8003834 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d90d      	bls.n	800488e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0210 	orr.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f043 0201 	orr.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e007      	b.n	800489e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d1e3      	bne.n	8004864 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	8000003f 	.word	0x8000003f

080048ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d108      	bne.n	80048d8 <ADC_Disable+0x2c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <ADC_Disable+0x2c>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <ADC_Disable+0x2e>
 80048d8:	2300      	movs	r3, #0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d040      	beq.n	8004960 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030d 	and.w	r3, r3, #13
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10f      	bne.n	800490c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0202 	orr.w	r2, r2, #2
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2203      	movs	r2, #3
 8004902:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004904:	f7fe ff96 	bl	8003834 <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800490a:	e022      	b.n	8004952 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	f043 0210 	orr.w	r2, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e01c      	b.n	8004962 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004928:	f7fe ff84 	bl	8003834 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d90d      	bls.n	8004952 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0210 	orr.w	r2, r3, #16
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f043 0201 	orr.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e007      	b.n	8004962 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d0e3      	beq.n	8004928 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8093 	beq.w	8004ab8 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049a0:	d12a      	bne.n	80049f8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d126      	bne.n	80049f8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d122      	bne.n	80049f8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80049b2:	230c      	movs	r3, #12
 80049b4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80049b6:	e014      	b.n	80049e2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4a42      	ldr	r2, [pc, #264]	; (8004ac4 <ADC_ConversionStop+0x158>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d90d      	bls.n	80049dc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	f043 0210 	orr.w	r2, r3, #16
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	f043 0201 	orr.w	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e06e      	b.n	8004aba <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	3301      	adds	r3, #1
 80049e0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d1e3      	bne.n	80049b8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2240      	movs	r2, #64	; 0x40
 80049f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b60      	cmp	r3, #96	; 0x60
 80049fc:	d015      	beq.n	8004a2a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d10e      	bne.n	8004a2a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d107      	bne.n	8004a2a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0210 	orr.w	r2, r2, #16
 8004a28:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b0c      	cmp	r3, #12
 8004a2e:	d015      	beq.n	8004a5c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d10e      	bne.n	8004a5c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0220 	orr.w	r2, r2, #32
 8004a5a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b60      	cmp	r3, #96	; 0x60
 8004a60:	d004      	beq.n	8004a6c <ADC_ConversionStop+0x100>
 8004a62:	2b6c      	cmp	r3, #108	; 0x6c
 8004a64:	d105      	bne.n	8004a72 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004a66:	230c      	movs	r3, #12
 8004a68:	617b      	str	r3, [r7, #20]
        break;
 8004a6a:	e005      	b.n	8004a78 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	617b      	str	r3, [r7, #20]
        break;
 8004a70:	e002      	b.n	8004a78 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004a72:	2304      	movs	r3, #4
 8004a74:	617b      	str	r3, [r7, #20]
        break;
 8004a76:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004a78:	f7fe fedc 	bl	8003834 <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004a7e:	e014      	b.n	8004aaa <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004a80:	f7fe fed8 	bl	8003834 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b0b      	cmp	r3, #11
 8004a8c:	d90d      	bls.n	8004aaa <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f043 0210 	orr.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	f043 0201 	orr.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e007      	b.n	8004aba <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e3      	bne.n	8004a80 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	000993ff 	.word	0x000993ff

08004ac8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_COMP_Init+0x22>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
 8004aee:	e064      	b.n	8004bba <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af0:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <HAL_COMP_Init+0xfc>)
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	4a33      	ldr	r2, [pc, #204]	; (8004bc4 <HAL_COMP_Init+0xfc>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	6193      	str	r3, [r2, #24]
 8004afc:	4b31      	ldr	r3, [pc, #196]	; (8004bc4 <HAL_COMP_Init+0xfc>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7fe fa5f 	bl	8002fcc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f023 020c 	bic.w	r2, r3, #12
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <HAL_COMP_Stop+0x22>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_COMP_Stop+0x28>
  {
    status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
 8004bee:	e09d      	b.n	8004d2c <HAL_COMP_Stop+0x164>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_BUSY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	f040 8095 	bne.w	8004d28 <HAL_COMP_Stop+0x160>
    {
      /* Disable the EXTI Line event mode if any */
      COMP_EXTI_DISABLE_EVENT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a4e      	ldr	r2, [pc, #312]	; (8004d3c <HAL_COMP_Stop+0x174>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d04b      	beq.n	8004ca0 <HAL_COMP_Stop+0xd8>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a4c      	ldr	r2, [pc, #304]	; (8004d40 <HAL_COMP_Stop+0x178>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d046      	beq.n	8004ca0 <HAL_COMP_Stop+0xd8>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a4b      	ldr	r2, [pc, #300]	; (8004d44 <HAL_COMP_Stop+0x17c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d041      	beq.n	8004ca0 <HAL_COMP_Stop+0xd8>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a49      	ldr	r2, [pc, #292]	; (8004d48 <HAL_COMP_Stop+0x180>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d03c      	beq.n	8004ca0 <HAL_COMP_Stop+0xd8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a48      	ldr	r2, [pc, #288]	; (8004d4c <HAL_COMP_Stop+0x184>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d037      	beq.n	8004ca0 <HAL_COMP_Stop+0xd8>
 8004c30:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_COMP_Stop+0x188>)
 8004c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4940      	ldr	r1, [pc, #256]	; (8004d3c <HAL_COMP_Stop+0x174>)
 8004c3a:	428b      	cmp	r3, r1
 8004c3c:	d02a      	beq.n	8004c94 <HAL_COMP_Stop+0xcc>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	493f      	ldr	r1, [pc, #252]	; (8004d40 <HAL_COMP_Stop+0x178>)
 8004c44:	428b      	cmp	r3, r1
 8004c46:	d022      	beq.n	8004c8e <HAL_COMP_Stop+0xc6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	493d      	ldr	r1, [pc, #244]	; (8004d44 <HAL_COMP_Stop+0x17c>)
 8004c4e:	428b      	cmp	r3, r1
 8004c50:	d01a      	beq.n	8004c88 <HAL_COMP_Stop+0xc0>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	493c      	ldr	r1, [pc, #240]	; (8004d48 <HAL_COMP_Stop+0x180>)
 8004c58:	428b      	cmp	r3, r1
 8004c5a:	d012      	beq.n	8004c82 <HAL_COMP_Stop+0xba>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	493a      	ldr	r1, [pc, #232]	; (8004d4c <HAL_COMP_Stop+0x184>)
 8004c62:	428b      	cmp	r3, r1
 8004c64:	d00a      	beq.n	8004c7c <HAL_COMP_Stop+0xb4>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	493a      	ldr	r1, [pc, #232]	; (8004d54 <HAL_COMP_Stop+0x18c>)
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	d102      	bne.n	8004c76 <HAL_COMP_Stop+0xae>
 8004c70:	f06f 0301 	mvn.w	r3, #1
 8004c74:	e010      	b.n	8004c98 <HAL_COMP_Stop+0xd0>
 8004c76:	f06f 0302 	mvn.w	r3, #2
 8004c7a:	e00d      	b.n	8004c98 <HAL_COMP_Stop+0xd0>
 8004c7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004c80:	e00a      	b.n	8004c98 <HAL_COMP_Stop+0xd0>
 8004c82:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004c86:	e007      	b.n	8004c98 <HAL_COMP_Stop+0xd0>
 8004c88:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004c8c:	e004      	b.n	8004c98 <HAL_COMP_Stop+0xd0>
 8004c8e:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004c92:	e001      	b.n	8004c98 <HAL_COMP_Stop+0xd0>
 8004c94:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004c98:	492d      	ldr	r1, [pc, #180]	; (8004d50 <HAL_COMP_Stop+0x188>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	624b      	str	r3, [r1, #36]	; 0x24
 8004c9e:	e036      	b.n	8004d0e <HAL_COMP_Stop+0x146>
 8004ca0:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <HAL_COMP_Stop+0x188>)
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4924      	ldr	r1, [pc, #144]	; (8004d3c <HAL_COMP_Stop+0x174>)
 8004caa:	428b      	cmp	r3, r1
 8004cac:	d02a      	beq.n	8004d04 <HAL_COMP_Stop+0x13c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4923      	ldr	r1, [pc, #140]	; (8004d40 <HAL_COMP_Stop+0x178>)
 8004cb4:	428b      	cmp	r3, r1
 8004cb6:	d022      	beq.n	8004cfe <HAL_COMP_Stop+0x136>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4921      	ldr	r1, [pc, #132]	; (8004d44 <HAL_COMP_Stop+0x17c>)
 8004cbe:	428b      	cmp	r3, r1
 8004cc0:	d01a      	beq.n	8004cf8 <HAL_COMP_Stop+0x130>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4920      	ldr	r1, [pc, #128]	; (8004d48 <HAL_COMP_Stop+0x180>)
 8004cc8:	428b      	cmp	r3, r1
 8004cca:	d012      	beq.n	8004cf2 <HAL_COMP_Stop+0x12a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	491e      	ldr	r1, [pc, #120]	; (8004d4c <HAL_COMP_Stop+0x184>)
 8004cd2:	428b      	cmp	r3, r1
 8004cd4:	d00a      	beq.n	8004cec <HAL_COMP_Stop+0x124>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	491e      	ldr	r1, [pc, #120]	; (8004d54 <HAL_COMP_Stop+0x18c>)
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	d102      	bne.n	8004ce6 <HAL_COMP_Stop+0x11e>
 8004ce0:	f06f 0301 	mvn.w	r3, #1
 8004ce4:	e010      	b.n	8004d08 <HAL_COMP_Stop+0x140>
 8004ce6:	f06f 0302 	mvn.w	r3, #2
 8004cea:	e00d      	b.n	8004d08 <HAL_COMP_Stop+0x140>
 8004cec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004cf0:	e00a      	b.n	8004d08 <HAL_COMP_Stop+0x140>
 8004cf2:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004cf6:	e007      	b.n	8004d08 <HAL_COMP_Stop+0x140>
 8004cf8:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004cfc:	e004      	b.n	8004d08 <HAL_COMP_Stop+0x140>
 8004cfe:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004d02:	e001      	b.n	8004d08 <HAL_COMP_Stop+0x140>
 8004d04:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004d08:	4911      	ldr	r1, [pc, #68]	; (8004d50 <HAL_COMP_Stop+0x188>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	604b      	str	r3, [r1, #4]

      /* Disable the selected comparator */
      __HAL_COMP_DISABLE(hcomp);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004d26:	e001      	b.n	8004d2c <HAL_COMP_Stop+0x164>
    }
    else
    {
      status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	4001001c 	.word	0x4001001c
 8004d40:	40010020 	.word	0x40010020
 8004d44:	40010024 	.word	0x40010024
 8004d48:	40010028 	.word	0x40010028
 8004d4c:	4001002c 	.word	0x4001002c
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40010030 	.word	0x40010030

08004d58 <HAL_COMP_Start_IT>:
  * @brief  Start the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_COMP_Start_IT+0x26>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_COMP_Start_IT+0x2c>
  {
    status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
 8004d82:	e0c8      	b.n	8004f16 <HAL_COMP_Start_IT+0x1be>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	f040 80c0 	bne.w	8004f12 <HAL_COMP_Start_IT+0x1ba>
    {
      /* Configure the EXTI event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_IT_RISING | COMP_TRIGGERMODE_IT_FALLING)) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 80b6 	beq.w	8004f0c <HAL_COMP_Start_IT+0x1b4>
      {
        /* Get the EXTI Line output configuration */
        extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5f      	ldr	r2, [pc, #380]	; (8004f24 <HAL_COMP_Start_IT+0x1cc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d028      	beq.n	8004dfc <HAL_COMP_Start_IT+0xa4>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a5e      	ldr	r2, [pc, #376]	; (8004f28 <HAL_COMP_Start_IT+0x1d0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d020      	beq.n	8004df6 <HAL_COMP_Start_IT+0x9e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a5c      	ldr	r2, [pc, #368]	; (8004f2c <HAL_COMP_Start_IT+0x1d4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d018      	beq.n	8004df0 <HAL_COMP_Start_IT+0x98>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a5b      	ldr	r2, [pc, #364]	; (8004f30 <HAL_COMP_Start_IT+0x1d8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d010      	beq.n	8004dea <HAL_COMP_Start_IT+0x92>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a59      	ldr	r2, [pc, #356]	; (8004f34 <HAL_COMP_Start_IT+0x1dc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d008      	beq.n	8004de4 <HAL_COMP_Start_IT+0x8c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a58      	ldr	r2, [pc, #352]	; (8004f38 <HAL_COMP_Start_IT+0x1e0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d101      	bne.n	8004de0 <HAL_COMP_Start_IT+0x88>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e00f      	b.n	8004e00 <HAL_COMP_Start_IT+0xa8>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e00d      	b.n	8004e00 <HAL_COMP_Start_IT+0xa8>
 8004de4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004de8:	e00a      	b.n	8004e00 <HAL_COMP_Start_IT+0xa8>
 8004dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dee:	e007      	b.n	8004e00 <HAL_COMP_Start_IT+0xa8>
 8004df0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004df4:	e004      	b.n	8004e00 <HAL_COMP_Start_IT+0xa8>
 8004df6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004dfa:	e001      	b.n	8004e00 <HAL_COMP_Start_IT+0xa8>
 8004dfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e00:	60bb      	str	r3, [r7, #8]

        /* Configure the trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d012      	beq.n	8004e34 <HAL_COMP_Start_IT+0xdc>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d006      	beq.n	8004e26 <HAL_COMP_Start_IT+0xce>
 8004e18:	4b48      	ldr	r3, [pc, #288]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e1c:	4947      	ldr	r1, [pc, #284]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	628b      	str	r3, [r1, #40]	; 0x28
 8004e24:	e01a      	b.n	8004e5c <HAL_COMP_Start_IT+0x104>
 8004e26:	4b45      	ldr	r3, [pc, #276]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	4944      	ldr	r1, [pc, #272]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	608b      	str	r3, [r1, #8]
 8004e32:	e013      	b.n	8004e5c <HAL_COMP_Start_IT+0x104>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <HAL_COMP_Start_IT+0xf6>
 8004e3e:	4b3f      	ldr	r3, [pc, #252]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	493d      	ldr	r1, [pc, #244]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	628b      	str	r3, [r1, #40]	; 0x28
 8004e4c:	e006      	b.n	8004e5c <HAL_COMP_Start_IT+0x104>
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	4939      	ldr	r1, [pc, #228]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]
        }
        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <HAL_COMP_Start_IT+0x136>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d006      	beq.n	8004e80 <HAL_COMP_Start_IT+0x128>
 8004e72:	4b32      	ldr	r3, [pc, #200]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	4931      	ldr	r1, [pc, #196]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004e7e:	e01a      	b.n	8004eb6 <HAL_COMP_Start_IT+0x15e>
 8004e80:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	492d      	ldr	r1, [pc, #180]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60cb      	str	r3, [r1, #12]
 8004e8c:	e013      	b.n	8004eb6 <HAL_COMP_Start_IT+0x15e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_COMP_Start_IT+0x150>
 8004e98:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	4926      	ldr	r1, [pc, #152]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004ea6:	e006      	b.n	8004eb6 <HAL_COMP_Start_IT+0x15e>
 8004ea8:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	4922      	ldr	r1, [pc, #136]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	60cb      	str	r3, [r1, #12]
        }

        /* Clear COMP EXTI pending bit if any */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_COMP_Start_IT+0x170>
 8004ec0:	4a1e      	ldr	r2, [pc, #120]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6353      	str	r3, [r2, #52]	; 0x34
 8004ec6:	e002      	b.n	8004ece <HAL_COMP_Start_IT+0x176>
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6153      	str	r3, [r2, #20]

        /* Enable EXTI interrupt mode */
        COMP_EXTI_ENABLE_IT(extiline);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <HAL_COMP_Start_IT+0x18e>
 8004ed8:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004eda:	6a1a      	ldr	r2, [r3, #32]
 8004edc:	4917      	ldr	r1, [pc, #92]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	620b      	str	r3, [r1, #32]
 8004ee4:	e005      	b.n	8004ef2 <HAL_COMP_Start_IT+0x19a>
 8004ee6:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4914      	ldr	r1, [pc, #80]	; (8004f3c <HAL_COMP_Start_IT+0x1e4>)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]

        /* Enable the selected comparator */
        __HAL_COMP_ENABLE(hcomp);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]

        hcomp->State = HAL_COMP_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004f0a:	e004      	b.n	8004f16 <HAL_COMP_Start_IT+0x1be>
      }
      else
      {
        status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
 8004f10:	e001      	b.n	8004f16 <HAL_COMP_Start_IT+0x1be>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	4001001c 	.word	0x4001001c
 8004f28:	40010020 	.word	0x40010020
 8004f2c:	40010024 	.word	0x40010024
 8004f30:	40010028 	.word	0x40010028
 8004f34:	4001002c 	.word	0x4001002c
 8004f38:	40010030 	.word	0x40010030
 8004f3c:	40010400 	.word	0x40010400

08004f40 <HAL_COMP_Stop_IT>:
  * @brief  Stop the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]

  /* Disable the EXTI Line interrupt mode */
  COMP_EXTI_DISABLE_IT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a47      	ldr	r2, [pc, #284]	; (8005070 <HAL_COMP_Stop_IT+0x130>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d04b      	beq.n	8004fee <HAL_COMP_Stop_IT+0xae>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a46      	ldr	r2, [pc, #280]	; (8005074 <HAL_COMP_Stop_IT+0x134>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d046      	beq.n	8004fee <HAL_COMP_Stop_IT+0xae>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a44      	ldr	r2, [pc, #272]	; (8005078 <HAL_COMP_Stop_IT+0x138>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d041      	beq.n	8004fee <HAL_COMP_Stop_IT+0xae>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a43      	ldr	r2, [pc, #268]	; (800507c <HAL_COMP_Stop_IT+0x13c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d03c      	beq.n	8004fee <HAL_COMP_Stop_IT+0xae>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a41      	ldr	r2, [pc, #260]	; (8005080 <HAL_COMP_Stop_IT+0x140>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d037      	beq.n	8004fee <HAL_COMP_Stop_IT+0xae>
 8004f7e:	4b41      	ldr	r3, [pc, #260]	; (8005084 <HAL_COMP_Stop_IT+0x144>)
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	493a      	ldr	r1, [pc, #232]	; (8005070 <HAL_COMP_Stop_IT+0x130>)
 8004f88:	428b      	cmp	r3, r1
 8004f8a:	d02a      	beq.n	8004fe2 <HAL_COMP_Stop_IT+0xa2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4938      	ldr	r1, [pc, #224]	; (8005074 <HAL_COMP_Stop_IT+0x134>)
 8004f92:	428b      	cmp	r3, r1
 8004f94:	d022      	beq.n	8004fdc <HAL_COMP_Stop_IT+0x9c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4937      	ldr	r1, [pc, #220]	; (8005078 <HAL_COMP_Stop_IT+0x138>)
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	d01a      	beq.n	8004fd6 <HAL_COMP_Stop_IT+0x96>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4935      	ldr	r1, [pc, #212]	; (800507c <HAL_COMP_Stop_IT+0x13c>)
 8004fa6:	428b      	cmp	r3, r1
 8004fa8:	d012      	beq.n	8004fd0 <HAL_COMP_Stop_IT+0x90>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4934      	ldr	r1, [pc, #208]	; (8005080 <HAL_COMP_Stop_IT+0x140>)
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	d00a      	beq.n	8004fca <HAL_COMP_Stop_IT+0x8a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4933      	ldr	r1, [pc, #204]	; (8005088 <HAL_COMP_Stop_IT+0x148>)
 8004fba:	428b      	cmp	r3, r1
 8004fbc:	d102      	bne.n	8004fc4 <HAL_COMP_Stop_IT+0x84>
 8004fbe:	f06f 0301 	mvn.w	r3, #1
 8004fc2:	e010      	b.n	8004fe6 <HAL_COMP_Stop_IT+0xa6>
 8004fc4:	f06f 0302 	mvn.w	r3, #2
 8004fc8:	e00d      	b.n	8004fe6 <HAL_COMP_Stop_IT+0xa6>
 8004fca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004fce:	e00a      	b.n	8004fe6 <HAL_COMP_Stop_IT+0xa6>
 8004fd0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004fd4:	e007      	b.n	8004fe6 <HAL_COMP_Stop_IT+0xa6>
 8004fd6:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004fda:	e004      	b.n	8004fe6 <HAL_COMP_Stop_IT+0xa6>
 8004fdc:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004fe0:	e001      	b.n	8004fe6 <HAL_COMP_Stop_IT+0xa6>
 8004fe2:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004fe6:	4927      	ldr	r1, [pc, #156]	; (8005084 <HAL_COMP_Stop_IT+0x144>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	620b      	str	r3, [r1, #32]
 8004fec:	e036      	b.n	800505c <HAL_COMP_Stop_IT+0x11c>
 8004fee:	4b25      	ldr	r3, [pc, #148]	; (8005084 <HAL_COMP_Stop_IT+0x144>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	491e      	ldr	r1, [pc, #120]	; (8005070 <HAL_COMP_Stop_IT+0x130>)
 8004ff8:	428b      	cmp	r3, r1
 8004ffa:	d02a      	beq.n	8005052 <HAL_COMP_Stop_IT+0x112>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	491c      	ldr	r1, [pc, #112]	; (8005074 <HAL_COMP_Stop_IT+0x134>)
 8005002:	428b      	cmp	r3, r1
 8005004:	d022      	beq.n	800504c <HAL_COMP_Stop_IT+0x10c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	491b      	ldr	r1, [pc, #108]	; (8005078 <HAL_COMP_Stop_IT+0x138>)
 800500c:	428b      	cmp	r3, r1
 800500e:	d01a      	beq.n	8005046 <HAL_COMP_Stop_IT+0x106>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4919      	ldr	r1, [pc, #100]	; (800507c <HAL_COMP_Stop_IT+0x13c>)
 8005016:	428b      	cmp	r3, r1
 8005018:	d012      	beq.n	8005040 <HAL_COMP_Stop_IT+0x100>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4918      	ldr	r1, [pc, #96]	; (8005080 <HAL_COMP_Stop_IT+0x140>)
 8005020:	428b      	cmp	r3, r1
 8005022:	d00a      	beq.n	800503a <HAL_COMP_Stop_IT+0xfa>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4917      	ldr	r1, [pc, #92]	; (8005088 <HAL_COMP_Stop_IT+0x148>)
 800502a:	428b      	cmp	r3, r1
 800502c:	d102      	bne.n	8005034 <HAL_COMP_Stop_IT+0xf4>
 800502e:	f06f 0301 	mvn.w	r3, #1
 8005032:	e010      	b.n	8005056 <HAL_COMP_Stop_IT+0x116>
 8005034:	f06f 0302 	mvn.w	r3, #2
 8005038:	e00d      	b.n	8005056 <HAL_COMP_Stop_IT+0x116>
 800503a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800503e:	e00a      	b.n	8005056 <HAL_COMP_Stop_IT+0x116>
 8005040:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8005044:	e007      	b.n	8005056 <HAL_COMP_Stop_IT+0x116>
 8005046:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 800504a:	e004      	b.n	8005056 <HAL_COMP_Stop_IT+0x116>
 800504c:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8005050:	e001      	b.n	8005056 <HAL_COMP_Stop_IT+0x116>
 8005052:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8005056:	490b      	ldr	r1, [pc, #44]	; (8005084 <HAL_COMP_Stop_IT+0x144>)
 8005058:	4013      	ands	r3, r2
 800505a:	600b      	str	r3, [r1, #0]

  status = HAL_COMP_Stop(hcomp);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fdb3 	bl	8004bc8 <HAL_COMP_Stop>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]

  return status;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	4001001c 	.word	0x4001001c
 8005074:	40010020 	.word	0x40010020
 8005078:	40010024 	.word	0x40010024
 800507c:	40010028 	.word	0x40010028
 8005080:	4001002c 	.word	0x4001002c
 8005084:	40010400 	.word	0x40010400
 8005088:	40010030 	.word	0x40010030

0800508c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2d      	ldr	r2, [pc, #180]	; (8005150 <HAL_COMP_IRQHandler+0xc4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d028      	beq.n	80050f0 <HAL_COMP_IRQHandler+0x64>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2c      	ldr	r2, [pc, #176]	; (8005154 <HAL_COMP_IRQHandler+0xc8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d020      	beq.n	80050ea <HAL_COMP_IRQHandler+0x5e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2a      	ldr	r2, [pc, #168]	; (8005158 <HAL_COMP_IRQHandler+0xcc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_COMP_IRQHandler+0x58>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a29      	ldr	r2, [pc, #164]	; (800515c <HAL_COMP_IRQHandler+0xd0>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d010      	beq.n	80050de <HAL_COMP_IRQHandler+0x52>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a27      	ldr	r2, [pc, #156]	; (8005160 <HAL_COMP_IRQHandler+0xd4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d008      	beq.n	80050d8 <HAL_COMP_IRQHandler+0x4c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a26      	ldr	r2, [pc, #152]	; (8005164 <HAL_COMP_IRQHandler+0xd8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <HAL_COMP_IRQHandler+0x48>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e00f      	b.n	80050f4 <HAL_COMP_IRQHandler+0x68>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e00d      	b.n	80050f4 <HAL_COMP_IRQHandler+0x68>
 80050d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050dc:	e00a      	b.n	80050f4 <HAL_COMP_IRQHandler+0x68>
 80050de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050e2:	e007      	b.n	80050f4 <HAL_COMP_IRQHandler+0x68>
 80050e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80050e8:	e004      	b.n	80050f4 <HAL_COMP_IRQHandler+0x68>
 80050ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050ee:	e001      	b.n	80050f4 <HAL_COMP_IRQHandler+0x68>
 80050f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if (COMP_EXTI_GET_FLAG(extiline) != RESET)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d009      	beq.n	8005114 <HAL_COMP_IRQHandler+0x88>
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_COMP_IRQHandler+0xdc>)
 8005102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e008      	b.n	8005126 <HAL_COMP_IRQHandler+0x9a>
 8005114:	4b14      	ldr	r3, [pc, #80]	; (8005168 <HAL_COMP_IRQHandler+0xdc>)
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00e      	beq.n	8005148 <HAL_COMP_IRQHandler+0xbc>
  {
    /* Clear COMP EXTI pending bit */
    COMP_EXTI_CLEAR_FLAG(extiline);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_COMP_IRQHandler+0xb0>
 8005134:	4a0c      	ldr	r2, [pc, #48]	; (8005168 <HAL_COMP_IRQHandler+0xdc>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6353      	str	r3, [r2, #52]	; 0x34
 800513a:	e002      	b.n	8005142 <HAL_COMP_IRQHandler+0xb6>
 800513c:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <HAL_COMP_IRQHandler+0xdc>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6153      	str	r3, [r2, #20]

    /* COMP trigger callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fd fc78 	bl	8002a38 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8005148:	bf00      	nop
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	4001001c 	.word	0x4001001c
 8005154:	40010020 	.word	0x40010020
 8005158:	40010024 	.word	0x40010024
 800515c:	40010028 	.word	0x40010028
 8005160:	4001002c 	.word	0x4001002c
 8005164:	40010030 	.word	0x40010030
 8005168:	40010400 	.word	0x40010400

0800516c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <__NVIC_SetPriorityGrouping+0x44>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005188:	4013      	ands	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800519e:	4a04      	ldr	r2, [pc, #16]	; (80051b0 <__NVIC_SetPriorityGrouping+0x44>)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	60d3      	str	r3, [r2, #12]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051b8:	4b04      	ldr	r3, [pc, #16]	; (80051cc <__NVIC_GetPriorityGrouping+0x18>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	f003 0307 	and.w	r3, r3, #7
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	e000ed00 	.word	0xe000ed00

080051d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	db0b      	blt.n	80051fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	f003 021f 	and.w	r2, r3, #31
 80051e8:	4907      	ldr	r1, [pc, #28]	; (8005208 <__NVIC_EnableIRQ+0x38>)
 80051ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	2001      	movs	r0, #1
 80051f2:	fa00 f202 	lsl.w	r2, r0, r2
 80051f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	e000e100 	.word	0xe000e100

0800520c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	6039      	str	r1, [r7, #0]
 8005216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521c:	2b00      	cmp	r3, #0
 800521e:	db0a      	blt.n	8005236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	b2da      	uxtb	r2, r3
 8005224:	490c      	ldr	r1, [pc, #48]	; (8005258 <__NVIC_SetPriority+0x4c>)
 8005226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522a:	0112      	lsls	r2, r2, #4
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	440b      	add	r3, r1
 8005230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005234:	e00a      	b.n	800524c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	4908      	ldr	r1, [pc, #32]	; (800525c <__NVIC_SetPriority+0x50>)
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	3b04      	subs	r3, #4
 8005244:	0112      	lsls	r2, r2, #4
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	440b      	add	r3, r1
 800524a:	761a      	strb	r2, [r3, #24]
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000e100 	.word	0xe000e100
 800525c:	e000ed00 	.word	0xe000ed00

08005260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f1c3 0307 	rsb	r3, r3, #7
 800527a:	2b04      	cmp	r3, #4
 800527c:	bf28      	it	cs
 800527e:	2304      	movcs	r3, #4
 8005280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3304      	adds	r3, #4
 8005286:	2b06      	cmp	r3, #6
 8005288:	d902      	bls.n	8005290 <NVIC_EncodePriority+0x30>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3b03      	subs	r3, #3
 800528e:	e000      	b.n	8005292 <NVIC_EncodePriority+0x32>
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005294:	f04f 32ff 	mov.w	r2, #4294967295
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	401a      	ands	r2, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052a8:	f04f 31ff 	mov.w	r1, #4294967295
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	fa01 f303 	lsl.w	r3, r1, r3
 80052b2:	43d9      	mvns	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b8:	4313      	orrs	r3, r2
         );
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3724      	adds	r7, #36	; 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052d8:	d301      	bcc.n	80052de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052da:	2301      	movs	r3, #1
 80052dc:	e00f      	b.n	80052fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052de:	4a0a      	ldr	r2, [pc, #40]	; (8005308 <SysTick_Config+0x40>)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052e6:	210f      	movs	r1, #15
 80052e8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ec:	f7ff ff8e 	bl	800520c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <SysTick_Config+0x40>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052f6:	4b04      	ldr	r3, [pc, #16]	; (8005308 <SysTick_Config+0x40>)
 80052f8:	2207      	movs	r2, #7
 80052fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	e000e010 	.word	0xe000e010

0800530c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff ff29 	bl	800516c <__NVIC_SetPriorityGrouping>
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	4603      	mov	r3, r0
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005334:	f7ff ff3e 	bl	80051b4 <__NVIC_GetPriorityGrouping>
 8005338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	6978      	ldr	r0, [r7, #20]
 8005340:	f7ff ff8e 	bl	8005260 <NVIC_EncodePriority>
 8005344:	4602      	mov	r2, r0
 8005346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800534a:	4611      	mov	r1, r2
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ff5d 	bl	800520c <__NVIC_SetPriority>
}
 8005352:	bf00      	nop
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	4603      	mov	r3, r0
 8005362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ff31 	bl	80051d0 <__NVIC_EnableIRQ>
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff ffa2 	bl	80052c8 <SysTick_Config>
 8005384:	4603      	mov	r3, r0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e014      	b.n	80053ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	791b      	ldrb	r3, [r3, #4]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7fd fe99 	bl	80030e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80053e6:	b480      	push	{r7}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4413      	add	r3, r2
 800540a:	3308      	adds	r3, #8
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	e004      	b.n	800541a <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	3314      	adds	r3, #20
 8005418:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	461a      	mov	r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	795b      	ldrb	r3, [r3, #5]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_DAC_Start+0x16>
 8005442:	2302      	movs	r3, #2
 8005444:	e039      	b.n	80054ba <HAL_DAC_Start+0x8a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6819      	ldr	r1, [r3, #0]
 8005458:	2201      	movs	r2, #1
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	409a      	lsls	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10f      	bne.n	800548c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005476:	2b3c      	cmp	r3, #60	; 0x3c
 8005478:	d118      	bne.n	80054ac <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0201 	orr.w	r2, r2, #1
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e00f      	b.n	80054ac <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005496:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800549a:	d107      	bne.n	80054ac <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0202 	orr.w	r2, r2, #2
 80054aa:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054dc:	d120      	bne.n	8005520 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ec:	d118      	bne.n	8005520 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f043 0201 	orr.w	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005508:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005518:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff ff59 	bl	80053d2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552e:	d120      	bne.n	8005572 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800553e:	d118      	bne.n	8005572 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2204      	movs	r2, #4
 8005544:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f043 0202 	orr.w	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800555a:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800556a:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f851 	bl	8005614 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	795b      	ldrb	r3, [r3, #5]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <HAL_DAC_ConfigChannel+0x20>
 8005596:	2302      	movs	r3, #2
 8005598:	e036      	b.n	8005608 <HAL_DAC_ConfigChannel+0x8e>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2202      	movs	r2, #2
 80055a4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80055ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4013      	ands	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6819      	ldr	r1, [r3, #0]
 80055e8:	22c0      	movs	r2, #192	; 0xc0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43da      	mvns	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	400a      	ands	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e037      	b.n	80056ae <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005654:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005658:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005662:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800567a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f9b7 	bl	8005a04 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}  
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_DMA_Start_IT+0x20>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e04a      	b.n	800576c <HAL_DMA_Start_IT+0xb6>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d13a      	bne.n	800575e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f94b 	bl	80059a8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 020e 	orr.w	r2, r2, #14
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e00f      	b.n	800574c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 020a 	orr.w	r2, r2, #10
 800573a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0204 	bic.w	r2, r2, #4
 800574a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e005      	b.n	800576a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005766:	2302      	movs	r3, #2
 8005768:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800576a:	7dfb      	ldrb	r3, [r7, #23]
} 
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005782:	2b02      	cmp	r3, #2
 8005784:	d008      	beq.n	8005798 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2204      	movs	r2, #4
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e020      	b.n	80057da <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 020e 	bic.w	r2, r2, #14
 80057a6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c0:	2101      	movs	r1, #1
 80057c2:	fa01 f202 	lsl.w	r2, r1, r2
 80057c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d005      	beq.n	8005808 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2204      	movs	r2, #4
 8005800:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
 8005806:	e027      	b.n	8005858 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 020e 	bic.w	r2, r2, #14
 8005816:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0201 	bic.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005830:	2101      	movs	r1, #1
 8005832:	fa01 f202 	lsl.w	r2, r1, r2
 8005836:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	4798      	blx	r3
    } 
  }
  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	2204      	movs	r2, #4
 8005880:	409a      	lsls	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d024      	beq.n	80058d4 <HAL_DMA_IRQHandler+0x72>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01f      	beq.n	80058d4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0204 	bic.w	r2, r2, #4
 80058b0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	2104      	movs	r1, #4
 80058bc:	fa01 f202 	lsl.w	r2, r1, r2
 80058c0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d06a      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80058d2:	e065      	b.n	80059a0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	2202      	movs	r2, #2
 80058da:	409a      	lsls	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02c      	beq.n	800593e <HAL_DMA_IRQHandler+0xdc>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d027      	beq.n	800593e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 020a 	bic.w	r2, r2, #10
 800590a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	2102      	movs	r1, #2
 800591e:	fa01 f202 	lsl.w	r2, r1, r2
 8005922:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	2b00      	cmp	r3, #0
 8005932:	d035      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800593c:	e030      	b.n	80059a0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2208      	movs	r2, #8
 8005944:	409a      	lsls	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d028      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x13e>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d023      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 020e 	bic.w	r2, r2, #14
 8005966:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	2101      	movs	r1, #1
 8005972:	fa01 f202 	lsl.w	r2, r1, r2
 8005976:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	4798      	blx	r3
    }
  }
}  
 800599e:	e7ff      	b.n	80059a0 <HAL_DMA_IRQHandler+0x13e>
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	2101      	movs	r1, #1
 80059c0:	fa01 f202 	lsl.w	r2, r1, r2
 80059c4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d108      	bne.n	80059e8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059e6:	e007      	b.n	80059f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	60da      	str	r2, [r3, #12]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b14      	ldr	r3, [pc, #80]	; (8005a64 <DMA_CalcBaseAndBitshift+0x60>)
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d80f      	bhi.n	8005a38 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <DMA_CalcBaseAndBitshift+0x64>)
 8005a20:	4413      	add	r3, r2
 8005a22:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <DMA_CalcBaseAndBitshift+0x68>)
 8005a24:	fba2 2303 	umull	r2, r3, r2, r3
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	009a      	lsls	r2, r3, #2
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a0f      	ldr	r2, [pc, #60]	; (8005a70 <DMA_CalcBaseAndBitshift+0x6c>)
 8005a34:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005a36:	e00e      	b.n	8005a56 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <DMA_CalcBaseAndBitshift+0x70>)
 8005a40:	4413      	add	r3, r2
 8005a42:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <DMA_CalcBaseAndBitshift+0x68>)
 8005a44:	fba2 2303 	umull	r2, r3, r2, r3
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	009a      	lsls	r2, r3, #2
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <DMA_CalcBaseAndBitshift+0x74>)
 8005a54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40020407 	.word	0x40020407
 8005a68:	bffdfff8 	.word	0xbffdfff8
 8005a6c:	cccccccd 	.word	0xcccccccd
 8005a70:	40020000 	.word	0x40020000
 8005a74:	bffdfbf8 	.word	0xbffdfbf8
 8005a78:	40020400 	.word	0x40020400

08005a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a8a:	e154      	b.n	8005d36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	2101      	movs	r1, #1
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	fa01 f303 	lsl.w	r3, r1, r3
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8146 	beq.w	8005d30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d003      	beq.n	8005ab4 <HAL_GPIO_Init+0x38>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b12      	cmp	r3, #18
 8005ab2:	d123      	bne.n	8005afc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	08da      	lsrs	r2, r3, #3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3208      	adds	r2, #8
 8005abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	220f      	movs	r2, #15
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	08da      	lsrs	r2, r3, #3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3208      	adds	r2, #8
 8005af6:	6939      	ldr	r1, [r7, #16]
 8005af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	2203      	movs	r2, #3
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4013      	ands	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 0203 	and.w	r2, r3, #3
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d00b      	beq.n	8005b50 <HAL_GPIO_Init+0xd4>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d007      	beq.n	8005b50 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b44:	2b11      	cmp	r3, #17
 8005b46:	d003      	beq.n	8005b50 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b12      	cmp	r3, #18
 8005b4e:	d130      	bne.n	8005bb2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	43db      	mvns	r3, r3
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4013      	ands	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b86:	2201      	movs	r2, #1
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4013      	ands	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	091b      	lsrs	r3, r3, #4
 8005b9c:	f003 0201 	and.w	r2, r3, #1
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 80a0 	beq.w	8005d30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf0:	4b58      	ldr	r3, [pc, #352]	; (8005d54 <HAL_GPIO_Init+0x2d8>)
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	4a57      	ldr	r2, [pc, #348]	; (8005d54 <HAL_GPIO_Init+0x2d8>)
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	6193      	str	r3, [r2, #24]
 8005bfc:	4b55      	ldr	r3, [pc, #340]	; (8005d54 <HAL_GPIO_Init+0x2d8>)
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c08:	4a53      	ldr	r2, [pc, #332]	; (8005d58 <HAL_GPIO_Init+0x2dc>)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	089b      	lsrs	r3, r3, #2
 8005c0e:	3302      	adds	r3, #2
 8005c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	220f      	movs	r2, #15
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	43db      	mvns	r3, r3
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c32:	d019      	beq.n	8005c68 <HAL_GPIO_Init+0x1ec>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a49      	ldr	r2, [pc, #292]	; (8005d5c <HAL_GPIO_Init+0x2e0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <HAL_GPIO_Init+0x1e8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a48      	ldr	r2, [pc, #288]	; (8005d60 <HAL_GPIO_Init+0x2e4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00d      	beq.n	8005c60 <HAL_GPIO_Init+0x1e4>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a47      	ldr	r2, [pc, #284]	; (8005d64 <HAL_GPIO_Init+0x2e8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d007      	beq.n	8005c5c <HAL_GPIO_Init+0x1e0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a46      	ldr	r2, [pc, #280]	; (8005d68 <HAL_GPIO_Init+0x2ec>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <HAL_GPIO_Init+0x1dc>
 8005c54:	2304      	movs	r3, #4
 8005c56:	e008      	b.n	8005c6a <HAL_GPIO_Init+0x1ee>
 8005c58:	2305      	movs	r3, #5
 8005c5a:	e006      	b.n	8005c6a <HAL_GPIO_Init+0x1ee>
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e004      	b.n	8005c6a <HAL_GPIO_Init+0x1ee>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e002      	b.n	8005c6a <HAL_GPIO_Init+0x1ee>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <HAL_GPIO_Init+0x1ee>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	f002 0203 	and.w	r2, r2, #3
 8005c70:	0092      	lsls	r2, r2, #2
 8005c72:	4093      	lsls	r3, r2
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005c7a:	4937      	ldr	r1, [pc, #220]	; (8005d58 <HAL_GPIO_Init+0x2dc>)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	089b      	lsrs	r3, r3, #2
 8005c80:	3302      	adds	r3, #2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c88:	4b38      	ldr	r3, [pc, #224]	; (8005d6c <HAL_GPIO_Init+0x2f0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	43db      	mvns	r3, r3
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4013      	ands	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005cac:	4a2f      	ldr	r2, [pc, #188]	; (8005d6c <HAL_GPIO_Init+0x2f0>)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cb2:	4b2e      	ldr	r3, [pc, #184]	; (8005d6c <HAL_GPIO_Init+0x2f0>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005cd6:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <HAL_GPIO_Init+0x2f0>)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cdc:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <HAL_GPIO_Init+0x2f0>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005d00:	4a1a      	ldr	r2, [pc, #104]	; (8005d6c <HAL_GPIO_Init+0x2f0>)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d06:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <HAL_GPIO_Init+0x2f0>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d2a:	4a10      	ldr	r2, [pc, #64]	; (8005d6c <HAL_GPIO_Init+0x2f0>)
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	3301      	adds	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f47f aea3 	bne.w	8005a8c <HAL_GPIO_Init+0x10>
  }
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40021000 	.word	0x40021000
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	48000400 	.word	0x48000400
 8005d60:	48000800 	.word	0x48000800
 8005d64:	48000c00 	.word	0x48000c00
 8005d68:	48001000 	.word	0x48001000
 8005d6c:	40010400 	.word	0x40010400

08005d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	887b      	ldrh	r3, [r7, #2]
 8005d82:	4013      	ands	r3, r2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
 8005d8c:	e001      	b.n	8005d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
 8005dac:	4613      	mov	r3, r2
 8005dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005db0:	787b      	ldrb	r3, [r7, #1]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005db6:	887a      	ldrh	r2, [r7, #2]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005dbc:	e002      	b.n	8005dc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	887b      	ldrh	r3, [r7, #2]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	041a      	lsls	r2, r3, #16
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005df0:	e002      	b.n	8005df8 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005df2:	887a      	ldrh	r2, [r7, #2]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	619a      	str	r2, [r3, #24]
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	1d3b      	adds	r3, r7, #4
 8005e0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f000 bef4 	b.w	8006c06 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1e:	1d3b      	adds	r3, r7, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 816a 	beq.w	8006102 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005e2e:	4bb3      	ldr	r3, [pc, #716]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f003 030c 	and.w	r3, r3, #12
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d00c      	beq.n	8005e54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e3a:	4bb0      	ldr	r3, [pc, #704]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
 8005e42:	2b08      	cmp	r3, #8
 8005e44:	d159      	bne.n	8005efa <HAL_RCC_OscConfig+0xf6>
 8005e46:	4bad      	ldr	r3, [pc, #692]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e52:	d152      	bne.n	8005efa <HAL_RCC_OscConfig+0xf6>
 8005e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005e60:	fa93 f3a3 	rbit	r3, r3
 8005e64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	fab3 f383 	clz	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d102      	bne.n	8005e86 <HAL_RCC_OscConfig+0x82>
 8005e80:	4b9e      	ldr	r3, [pc, #632]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	e015      	b.n	8005eb2 <HAL_RCC_OscConfig+0xae>
 8005e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005e92:	fa93 f3a3 	rbit	r3, r3
 8005e96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005ea2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005ea6:	fa93 f3a3 	rbit	r3, r3
 8005eaa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005eae:	4b93      	ldr	r3, [pc, #588]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005eb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005eba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005ebe:	fa92 f2a2 	rbit	r2, r2
 8005ec2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005ec6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005eca:	fab2 f282 	clz	r2, r2
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	f042 0220 	orr.w	r2, r2, #32
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	f002 021f 	and.w	r2, r2, #31
 8005eda:	2101      	movs	r1, #1
 8005edc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 810c 	beq.w	8006100 <HAL_RCC_OscConfig+0x2fc>
 8005ee8:	1d3b      	adds	r3, r7, #4
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 8106 	bne.w	8006100 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f000 be86 	b.w	8006c06 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efa:	1d3b      	adds	r3, r7, #4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f04:	d106      	bne.n	8005f14 <HAL_RCC_OscConfig+0x110>
 8005f06:	4b7d      	ldr	r3, [pc, #500]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a7c      	ldr	r2, [pc, #496]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e030      	b.n	8005f76 <HAL_RCC_OscConfig+0x172>
 8005f14:	1d3b      	adds	r3, r7, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x134>
 8005f1e:	4b77      	ldr	r3, [pc, #476]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a76      	ldr	r2, [pc, #472]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	4b74      	ldr	r3, [pc, #464]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a73      	ldr	r2, [pc, #460]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e01e      	b.n	8005f76 <HAL_RCC_OscConfig+0x172>
 8005f38:	1d3b      	adds	r3, r7, #4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f42:	d10c      	bne.n	8005f5e <HAL_RCC_OscConfig+0x15a>
 8005f44:	4b6d      	ldr	r3, [pc, #436]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a6c      	ldr	r2, [pc, #432]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	4b6a      	ldr	r3, [pc, #424]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a69      	ldr	r2, [pc, #420]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	e00b      	b.n	8005f76 <HAL_RCC_OscConfig+0x172>
 8005f5e:	4b67      	ldr	r3, [pc, #412]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a66      	ldr	r2, [pc, #408]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	4b64      	ldr	r3, [pc, #400]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a63      	ldr	r2, [pc, #396]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f74:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f76:	4b61      	ldr	r3, [pc, #388]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	f023 020f 	bic.w	r2, r3, #15
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	495d      	ldr	r1, [pc, #372]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f8a:	1d3b      	adds	r3, r7, #4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d059      	beq.n	8006048 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f94:	f7fd fc4e 	bl	8003834 <HAL_GetTick>
 8005f98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9c:	e00a      	b.n	8005fb4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f9e:	f7fd fc49 	bl	8003834 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b64      	cmp	r3, #100	; 0x64
 8005fac:	d902      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	f000 be29 	b.w	8006c06 <HAL_RCC_OscConfig+0xe02>
 8005fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fb8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005fc0:	fa93 f3a3 	rbit	r3, r3
 8005fc4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005fc8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fcc:	fab3 f383 	clz	r3, r3
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d102      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x1e2>
 8005fe0:	4b46      	ldr	r3, [pc, #280]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	e015      	b.n	8006012 <HAL_RCC_OscConfig+0x20e>
 8005fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005ff2:	fa93 f3a3 	rbit	r3, r3
 8005ff6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ffe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006002:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006006:	fa93 f3a3 	rbit	r3, r3
 800600a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800600e:	4b3b      	ldr	r3, [pc, #236]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006016:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800601a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800601e:	fa92 f2a2 	rbit	r2, r2
 8006022:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006026:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800602a:	fab2 f282 	clz	r2, r2
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	f042 0220 	orr.w	r2, r2, #32
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	f002 021f 	and.w	r2, r2, #31
 800603a:	2101      	movs	r1, #1
 800603c:	fa01 f202 	lsl.w	r2, r1, r2
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0ab      	beq.n	8005f9e <HAL_RCC_OscConfig+0x19a>
 8006046:	e05c      	b.n	8006102 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fd fbf4 	bl	8003834 <HAL_GetTick>
 800604c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006050:	e00a      	b.n	8006068 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006052:	f7fd fbef 	bl	8003834 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b64      	cmp	r3, #100	; 0x64
 8006060:	d902      	bls.n	8006068 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	f000 bdcf 	b.w	8006c06 <HAL_RCC_OscConfig+0xe02>
 8006068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800606c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006070:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006074:	fa93 f3a3 	rbit	r3, r3
 8006078:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800607c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006080:	fab3 f383 	clz	r3, r3
 8006084:	b2db      	uxtb	r3, r3
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	b2db      	uxtb	r3, r3
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	d102      	bne.n	800609a <HAL_RCC_OscConfig+0x296>
 8006094:	4b19      	ldr	r3, [pc, #100]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	e015      	b.n	80060c6 <HAL_RCC_OscConfig+0x2c2>
 800609a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800609e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80060a6:	fa93 f3a3 	rbit	r3, r3
 80060aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80060ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80060b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80060ba:	fa93 f3a3 	rbit	r3, r3
 80060be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80060c2:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <HAL_RCC_OscConfig+0x2f8>)
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80060ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80060d2:	fa92 f2a2 	rbit	r2, r2
 80060d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80060da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80060de:	fab2 f282 	clz	r2, r2
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	f042 0220 	orr.w	r2, r2, #32
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	f002 021f 	and.w	r2, r2, #31
 80060ee:	2101      	movs	r1, #1
 80060f0:	fa01 f202 	lsl.w	r2, r1, r2
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1ab      	bne.n	8006052 <HAL_RCC_OscConfig+0x24e>
 80060fa:	e002      	b.n	8006102 <HAL_RCC_OscConfig+0x2fe>
 80060fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006102:	1d3b      	adds	r3, r7, #4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 816f 	beq.w	80063f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006112:	4bd0      	ldr	r3, [pc, #832]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800611e:	4bcd      	ldr	r3, [pc, #820]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	2b08      	cmp	r3, #8
 8006128:	d16c      	bne.n	8006204 <HAL_RCC_OscConfig+0x400>
 800612a:	4bca      	ldr	r3, [pc, #808]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d166      	bne.n	8006204 <HAL_RCC_OscConfig+0x400>
 8006136:	2302      	movs	r3, #2
 8006138:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006140:	fa93 f3a3 	rbit	r3, r3
 8006144:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006148:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614c:	fab3 f383 	clz	r3, r3
 8006150:	b2db      	uxtb	r3, r3
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f043 0301 	orr.w	r3, r3, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	d102      	bne.n	8006166 <HAL_RCC_OscConfig+0x362>
 8006160:	4bbc      	ldr	r3, [pc, #752]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	e013      	b.n	800618e <HAL_RCC_OscConfig+0x38a>
 8006166:	2302      	movs	r3, #2
 8006168:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006170:	fa93 f3a3 	rbit	r3, r3
 8006174:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006178:	2302      	movs	r3, #2
 800617a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800617e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006182:	fa93 f3a3 	rbit	r3, r3
 8006186:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800618a:	4bb2      	ldr	r3, [pc, #712]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2202      	movs	r2, #2
 8006190:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006194:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006198:	fa92 f2a2 	rbit	r2, r2
 800619c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80061a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80061a4:	fab2 f282 	clz	r2, r2
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	f042 0220 	orr.w	r2, r2, #32
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	f002 021f 	and.w	r2, r2, #31
 80061b4:	2101      	movs	r1, #1
 80061b6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <HAL_RCC_OscConfig+0x3cc>
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d002      	beq.n	80061d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f000 bd1b 	b.w	8006c06 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d0:	4ba0      	ldr	r3, [pc, #640]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061d8:	1d3b      	adds	r3, r7, #4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	21f8      	movs	r1, #248	; 0xf8
 80061e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80061e8:	fa91 f1a1 	rbit	r1, r1
 80061ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80061f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80061f4:	fab1 f181 	clz	r1, r1
 80061f8:	b2c9      	uxtb	r1, r1
 80061fa:	408b      	lsls	r3, r1
 80061fc:	4995      	ldr	r1, [pc, #596]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006202:	e0f5      	b.n	80063f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006204:	1d3b      	adds	r3, r7, #4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8085 	beq.w	800631a <HAL_RCC_OscConfig+0x516>
 8006210:	2301      	movs	r3, #1
 8006212:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006216:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800621a:	fa93 f3a3 	rbit	r3, r3
 800621e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006222:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006226:	fab3 f383 	clz	r3, r3
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	461a      	mov	r2, r3
 8006238:	2301      	movs	r3, #1
 800623a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fd fafa 	bl	8003834 <HAL_GetTick>
 8006240:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006244:	e00a      	b.n	800625c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006246:	f7fd faf5 	bl	8003834 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d902      	bls.n	800625c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	f000 bcd5 	b.w	8006c06 <HAL_RCC_OscConfig+0xe02>
 800625c:	2302      	movs	r3, #2
 800625e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006262:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006266:	fa93 f3a3 	rbit	r3, r3
 800626a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800626e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006272:	fab3 f383 	clz	r3, r3
 8006276:	b2db      	uxtb	r3, r3
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d102      	bne.n	800628c <HAL_RCC_OscConfig+0x488>
 8006286:	4b73      	ldr	r3, [pc, #460]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	e013      	b.n	80062b4 <HAL_RCC_OscConfig+0x4b0>
 800628c:	2302      	movs	r3, #2
 800628e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006292:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006296:	fa93 f3a3 	rbit	r3, r3
 800629a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800629e:	2302      	movs	r3, #2
 80062a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80062a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80062a8:	fa93 f3a3 	rbit	r3, r3
 80062ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80062b0:	4b68      	ldr	r3, [pc, #416]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	2202      	movs	r2, #2
 80062b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80062ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80062be:	fa92 f2a2 	rbit	r2, r2
 80062c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80062c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80062ca:	fab2 f282 	clz	r2, r2
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	f042 0220 	orr.w	r2, r2, #32
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	f002 021f 	and.w	r2, r2, #31
 80062da:	2101      	movs	r1, #1
 80062dc:	fa01 f202 	lsl.w	r2, r1, r2
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0af      	beq.n	8006246 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e6:	4b5b      	ldr	r3, [pc, #364]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	21f8      	movs	r1, #248	; 0xf8
 80062f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80062fe:	fa91 f1a1 	rbit	r1, r1
 8006302:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006306:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800630a:	fab1 f181 	clz	r1, r1
 800630e:	b2c9      	uxtb	r1, r1
 8006310:	408b      	lsls	r3, r1
 8006312:	4950      	ldr	r1, [pc, #320]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 8006314:	4313      	orrs	r3, r2
 8006316:	600b      	str	r3, [r1, #0]
 8006318:	e06a      	b.n	80063f0 <HAL_RCC_OscConfig+0x5ec>
 800631a:	2301      	movs	r3, #1
 800631c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006320:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006324:	fa93 f3a3 	rbit	r3, r3
 8006328:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800632c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006330:	fab3 f383 	clz	r3, r3
 8006334:	b2db      	uxtb	r3, r3
 8006336:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800633a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	461a      	mov	r2, r3
 8006342:	2300      	movs	r3, #0
 8006344:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006346:	f7fd fa75 	bl	8003834 <HAL_GetTick>
 800634a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800634e:	e00a      	b.n	8006366 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006350:	f7fd fa70 	bl	8003834 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d902      	bls.n	8006366 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	f000 bc50 	b.w	8006c06 <HAL_RCC_OscConfig+0xe02>
 8006366:	2302      	movs	r3, #2
 8006368:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006370:	fa93 f3a3 	rbit	r3, r3
 8006374:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637c:	fab3 f383 	clz	r3, r3
 8006380:	b2db      	uxtb	r3, r3
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	b2db      	uxtb	r3, r3
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d102      	bne.n	8006396 <HAL_RCC_OscConfig+0x592>
 8006390:	4b30      	ldr	r3, [pc, #192]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	e013      	b.n	80063be <HAL_RCC_OscConfig+0x5ba>
 8006396:	2302      	movs	r3, #2
 8006398:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063a0:	fa93 f3a3 	rbit	r3, r3
 80063a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80063a8:	2302      	movs	r3, #2
 80063aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80063b2:	fa93 f3a3 	rbit	r3, r3
 80063b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80063ba:	4b26      	ldr	r3, [pc, #152]	; (8006454 <HAL_RCC_OscConfig+0x650>)
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2202      	movs	r2, #2
 80063c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80063c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80063c8:	fa92 f2a2 	rbit	r2, r2
 80063cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80063d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80063d4:	fab2 f282 	clz	r2, r2
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	f042 0220 	orr.w	r2, r2, #32
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	f002 021f 	and.w	r2, r2, #31
 80063e4:	2101      	movs	r1, #1
 80063e6:	fa01 f202 	lsl.w	r2, r1, r2
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1af      	bne.n	8006350 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80da 	beq.w	80065b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006400:	1d3b      	adds	r3, r7, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d069      	beq.n	80064de <HAL_RCC_OscConfig+0x6da>
 800640a:	2301      	movs	r3, #1
 800640c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006410:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006414:	fa93 f3a3 	rbit	r3, r3
 8006418:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800641c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006420:	fab3 f383 	clz	r3, r3
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	4b0b      	ldr	r3, [pc, #44]	; (8006458 <HAL_RCC_OscConfig+0x654>)
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	461a      	mov	r2, r3
 8006430:	2301      	movs	r3, #1
 8006432:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006434:	f7fd f9fe 	bl	8003834 <HAL_GetTick>
 8006438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800643c:	e00e      	b.n	800645c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800643e:	f7fd f9f9 	bl	8003834 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d906      	bls.n	800645c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e3d9      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
 8006452:	bf00      	nop
 8006454:	40021000 	.word	0x40021000
 8006458:	10908120 	.word	0x10908120
 800645c:	2302      	movs	r3, #2
 800645e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006462:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006466:	fa93 f3a3 	rbit	r3, r3
 800646a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800646e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006472:	2202      	movs	r2, #2
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	fa93 f2a3 	rbit	r2, r3
 8006480:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800648a:	2202      	movs	r2, #2
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	fa93 f2a3 	rbit	r2, r3
 8006498:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800649c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800649e:	4ba5      	ldr	r3, [pc, #660]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 80064a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80064a6:	2102      	movs	r1, #2
 80064a8:	6019      	str	r1, [r3, #0]
 80064aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	fa93 f1a3 	rbit	r1, r3
 80064b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80064b8:	6019      	str	r1, [r3, #0]
  return result;
 80064ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	fab3 f383 	clz	r3, r3
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 031f 	and.w	r3, r3, #31
 80064d0:	2101      	movs	r1, #1
 80064d2:	fa01 f303 	lsl.w	r3, r1, r3
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0b0      	beq.n	800643e <HAL_RCC_OscConfig+0x63a>
 80064dc:	e06a      	b.n	80065b4 <HAL_RCC_OscConfig+0x7b0>
 80064de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	fa93 f2a3 	rbit	r2, r3
 80064f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064f4:	601a      	str	r2, [r3, #0]
  return result;
 80064f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064fc:	fab3 f383 	clz	r3, r3
 8006500:	b2db      	uxtb	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	4b8c      	ldr	r3, [pc, #560]	; (8006738 <HAL_RCC_OscConfig+0x934>)
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	461a      	mov	r2, r3
 800650c:	2300      	movs	r3, #0
 800650e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006510:	f7fd f990 	bl	8003834 <HAL_GetTick>
 8006514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006518:	e009      	b.n	800652e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800651a:	f7fd f98b 	bl	8003834 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e36b      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
 800652e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006532:	2202      	movs	r2, #2
 8006534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006536:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	fa93 f2a3 	rbit	r2, r3
 8006540:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800654a:	2202      	movs	r2, #2
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	fa93 f2a3 	rbit	r2, r3
 8006558:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006562:	2202      	movs	r2, #2
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	fa93 f2a3 	rbit	r2, r3
 8006570:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006574:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006576:	4b6f      	ldr	r3, [pc, #444]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 8006578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800657a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800657e:	2102      	movs	r1, #2
 8006580:	6019      	str	r1, [r3, #0]
 8006582:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	fa93 f1a3 	rbit	r1, r3
 800658c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006590:	6019      	str	r1, [r3, #0]
  return result;
 8006592:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	fab3 f383 	clz	r3, r3
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	f003 031f 	and.w	r3, r3, #31
 80065a8:	2101      	movs	r1, #1
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1b2      	bne.n	800651a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8158 	beq.w	8006874 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c4:	2300      	movs	r3, #0
 80065c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ca:	4b5a      	ldr	r3, [pc, #360]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d112      	bne.n	80065fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065d6:	4b57      	ldr	r3, [pc, #348]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	4a56      	ldr	r2, [pc, #344]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 80065dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e0:	61d3      	str	r3, [r2, #28]
 80065e2:	4b54      	ldr	r3, [pc, #336]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80065ea:	f107 0308 	add.w	r3, r7, #8
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f107 0308 	add.w	r3, r7, #8
 80065f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fc:	4b4f      	ldr	r3, [pc, #316]	; (800673c <HAL_RCC_OscConfig+0x938>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d11a      	bne.n	800663e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006608:	4b4c      	ldr	r3, [pc, #304]	; (800673c <HAL_RCC_OscConfig+0x938>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a4b      	ldr	r2, [pc, #300]	; (800673c <HAL_RCC_OscConfig+0x938>)
 800660e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006612:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006614:	f7fd f90e 	bl	8003834 <HAL_GetTick>
 8006618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661c:	e009      	b.n	8006632 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661e:	f7fd f909 	bl	8003834 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b64      	cmp	r3, #100	; 0x64
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e2e9      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006632:	4b42      	ldr	r3, [pc, #264]	; (800673c <HAL_RCC_OscConfig+0x938>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0ef      	beq.n	800661e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663e:	1d3b      	adds	r3, r7, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d106      	bne.n	8006656 <HAL_RCC_OscConfig+0x852>
 8006648:	4b3a      	ldr	r3, [pc, #232]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	4a39      	ldr	r2, [pc, #228]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 800664e:	f043 0301 	orr.w	r3, r3, #1
 8006652:	6213      	str	r3, [r2, #32]
 8006654:	e02f      	b.n	80066b6 <HAL_RCC_OscConfig+0x8b2>
 8006656:	1d3b      	adds	r3, r7, #4
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10c      	bne.n	800667a <HAL_RCC_OscConfig+0x876>
 8006660:	4b34      	ldr	r3, [pc, #208]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	4a33      	ldr	r2, [pc, #204]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	6213      	str	r3, [r2, #32]
 800666c:	4b31      	ldr	r3, [pc, #196]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	4a30      	ldr	r2, [pc, #192]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 8006672:	f023 0304 	bic.w	r3, r3, #4
 8006676:	6213      	str	r3, [r2, #32]
 8006678:	e01d      	b.n	80066b6 <HAL_RCC_OscConfig+0x8b2>
 800667a:	1d3b      	adds	r3, r7, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	2b05      	cmp	r3, #5
 8006682:	d10c      	bne.n	800669e <HAL_RCC_OscConfig+0x89a>
 8006684:	4b2b      	ldr	r3, [pc, #172]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	4a2a      	ldr	r2, [pc, #168]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 800668a:	f043 0304 	orr.w	r3, r3, #4
 800668e:	6213      	str	r3, [r2, #32]
 8006690:	4b28      	ldr	r3, [pc, #160]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	4a27      	ldr	r2, [pc, #156]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	6213      	str	r3, [r2, #32]
 800669c:	e00b      	b.n	80066b6 <HAL_RCC_OscConfig+0x8b2>
 800669e:	4b25      	ldr	r3, [pc, #148]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	4a24      	ldr	r2, [pc, #144]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	6213      	str	r3, [r2, #32]
 80066aa:	4b22      	ldr	r3, [pc, #136]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	4a21      	ldr	r2, [pc, #132]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 80066b0:	f023 0304 	bic.w	r3, r3, #4
 80066b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066b6:	1d3b      	adds	r3, r7, #4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d06b      	beq.n	8006798 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c0:	f7fd f8b8 	bl	8003834 <HAL_GetTick>
 80066c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c8:	e00b      	b.n	80066e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ca:	f7fd f8b3 	bl	8003834 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e291      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
 80066e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80066e6:	2202      	movs	r2, #2
 80066e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	fa93 f2a3 	rbit	r2, r3
 80066f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80066fe:	2202      	movs	r2, #2
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	fa93 f2a3 	rbit	r2, r3
 800670c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006710:	601a      	str	r2, [r3, #0]
  return result;
 8006712:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006716:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006718:	fab3 f383 	clz	r3, r3
 800671c:	b2db      	uxtb	r3, r3
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f043 0302 	orr.w	r3, r3, #2
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d109      	bne.n	8006740 <HAL_RCC_OscConfig+0x93c>
 800672c:	4b01      	ldr	r3, [pc, #4]	; (8006734 <HAL_RCC_OscConfig+0x930>)
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	e014      	b.n	800675c <HAL_RCC_OscConfig+0x958>
 8006732:	bf00      	nop
 8006734:	40021000 	.word	0x40021000
 8006738:	10908120 	.word	0x10908120
 800673c:	40007000 	.word	0x40007000
 8006740:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006744:	2202      	movs	r2, #2
 8006746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006748:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	fa93 f2a3 	rbit	r2, r3
 8006752:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	4bbb      	ldr	r3, [pc, #748]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006760:	2102      	movs	r1, #2
 8006762:	6011      	str	r1, [r2, #0]
 8006764:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	fa92 f1a2 	rbit	r1, r2
 800676e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006772:	6011      	str	r1, [r2, #0]
  return result;
 8006774:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	fab2 f282 	clz	r2, r2
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	f002 021f 	and.w	r2, r2, #31
 800678a:	2101      	movs	r1, #1
 800678c:	fa01 f202 	lsl.w	r2, r1, r2
 8006790:	4013      	ands	r3, r2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d099      	beq.n	80066ca <HAL_RCC_OscConfig+0x8c6>
 8006796:	e063      	b.n	8006860 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006798:	f7fd f84c 	bl	8003834 <HAL_GetTick>
 800679c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a0:	e00b      	b.n	80067ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067a2:	f7fd f847 	bl	8003834 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e225      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
 80067ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80067be:	2202      	movs	r2, #2
 80067c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	fa93 f2a3 	rbit	r2, r3
 80067cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80067d6:	2202      	movs	r2, #2
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	fa93 f2a3 	rbit	r2, r3
 80067e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80067e8:	601a      	str	r2, [r3, #0]
  return result;
 80067ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80067ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067f0:	fab3 f383 	clz	r3, r3
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f043 0302 	orr.w	r3, r3, #2
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d102      	bne.n	800680a <HAL_RCC_OscConfig+0xa06>
 8006804:	4b90      	ldr	r3, [pc, #576]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	e00d      	b.n	8006826 <HAL_RCC_OscConfig+0xa22>
 800680a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800680e:	2202      	movs	r2, #2
 8006810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006812:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	fa93 f2a3 	rbit	r2, r3
 800681c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	4b89      	ldr	r3, [pc, #548]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800682a:	2102      	movs	r1, #2
 800682c:	6011      	str	r1, [r2, #0]
 800682e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006832:	6812      	ldr	r2, [r2, #0]
 8006834:	fa92 f1a2 	rbit	r1, r2
 8006838:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800683c:	6011      	str	r1, [r2, #0]
  return result;
 800683e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006842:	6812      	ldr	r2, [r2, #0]
 8006844:	fab2 f282 	clz	r2, r2
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	f002 021f 	and.w	r2, r2, #31
 8006854:	2101      	movs	r1, #1
 8006856:	fa01 f202 	lsl.w	r2, r1, r2
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1a0      	bne.n	80067a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006860:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006864:	2b01      	cmp	r3, #1
 8006866:	d105      	bne.n	8006874 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006868:	4b77      	ldr	r3, [pc, #476]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	4a76      	ldr	r2, [pc, #472]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 800686e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006872:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006874:	1d3b      	adds	r3, r7, #4
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 81c2 	beq.w	8006c04 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006880:	4b71      	ldr	r3, [pc, #452]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b08      	cmp	r3, #8
 800688a:	f000 819c 	beq.w	8006bc6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800688e:	1d3b      	adds	r3, r7, #4
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	2b02      	cmp	r3, #2
 8006896:	f040 8114 	bne.w	8006ac2 <HAL_RCC_OscConfig+0xcbe>
 800689a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800689e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	fa93 f2a3 	rbit	r2, r3
 80068ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80068b2:	601a      	str	r2, [r3, #0]
  return result;
 80068b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80068b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ba:	fab3 f383 	clz	r3, r3
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80068c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	461a      	mov	r2, r3
 80068cc:	2300      	movs	r3, #0
 80068ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d0:	f7fc ffb0 	bl	8003834 <HAL_GetTick>
 80068d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068d8:	e009      	b.n	80068ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068da:	f7fc ffab 	bl	8003834 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e18b      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
 80068ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80068f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	fa93 f2a3 	rbit	r2, r3
 8006902:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006906:	601a      	str	r2, [r3, #0]
  return result;
 8006908:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800690c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800690e:	fab3 f383 	clz	r3, r3
 8006912:	b2db      	uxtb	r3, r3
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b01      	cmp	r3, #1
 8006920:	d102      	bne.n	8006928 <HAL_RCC_OscConfig+0xb24>
 8006922:	4b49      	ldr	r3, [pc, #292]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	e01b      	b.n	8006960 <HAL_RCC_OscConfig+0xb5c>
 8006928:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800692c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006932:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	fa93 f2a3 	rbit	r2, r3
 800693c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	fa93 f2a3 	rbit	r2, r3
 8006956:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	4b3a      	ldr	r3, [pc, #232]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006964:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006968:	6011      	str	r1, [r2, #0]
 800696a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	fa92 f1a2 	rbit	r1, r2
 8006974:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006978:	6011      	str	r1, [r2, #0]
  return result;
 800697a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	fab2 f282 	clz	r2, r2
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	f042 0220 	orr.w	r2, r2, #32
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	f002 021f 	and.w	r2, r2, #31
 8006990:	2101      	movs	r1, #1
 8006992:	fa01 f202 	lsl.w	r2, r1, r2
 8006996:	4013      	ands	r3, r2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d19e      	bne.n	80068da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800699c:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80069a4:	1d3b      	adds	r3, r7, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80069aa:	1d3b      	adds	r3, r7, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	430b      	orrs	r3, r1
 80069b2:	4925      	ldr	r1, [pc, #148]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	604b      	str	r3, [r1, #4]
 80069b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80069bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	fa93 f2a3 	rbit	r2, r3
 80069cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80069d0:	601a      	str	r2, [r3, #0]
  return result;
 80069d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80069d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069d8:	fab3 f383 	clz	r3, r3
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80069e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	461a      	mov	r2, r3
 80069ea:	2301      	movs	r3, #1
 80069ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ee:	f7fc ff21 	bl	8003834 <HAL_GetTick>
 80069f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80069f6:	e009      	b.n	8006a0c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fc ff1c 	bl	8003834 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e0fc      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
 8006a0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	fa93 f2a3 	rbit	r2, r3
 8006a20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a24:	601a      	str	r2, [r3, #0]
  return result;
 8006a26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a2c:	fab3 f383 	clz	r3, r3
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d105      	bne.n	8006a4c <HAL_RCC_OscConfig+0xc48>
 8006a40:	4b01      	ldr	r3, [pc, #4]	; (8006a48 <HAL_RCC_OscConfig+0xc44>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	e01e      	b.n	8006a84 <HAL_RCC_OscConfig+0xc80>
 8006a46:	bf00      	nop
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	fa93 f2a3 	rbit	r2, r3
 8006a60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	fa93 f2a3 	rbit	r2, r3
 8006a7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	4b63      	ldr	r3, [pc, #396]	; (8006c10 <HAL_RCC_OscConfig+0xe0c>)
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006a8c:	6011      	str	r1, [r2, #0]
 8006a8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	fa92 f1a2 	rbit	r1, r2
 8006a98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006a9c:	6011      	str	r1, [r2, #0]
  return result;
 8006a9e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006aa2:	6812      	ldr	r2, [r2, #0]
 8006aa4:	fab2 f282 	clz	r2, r2
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	f042 0220 	orr.w	r2, r2, #32
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	f002 021f 	and.w	r2, r2, #31
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d09b      	beq.n	80069f8 <HAL_RCC_OscConfig+0xbf4>
 8006ac0:	e0a0      	b.n	8006c04 <HAL_RCC_OscConfig+0xe00>
 8006ac2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	fa93 f2a3 	rbit	r2, r3
 8006ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ada:	601a      	str	r2, [r3, #0]
  return result;
 8006adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ae0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ae2:	fab3 f383 	clz	r3, r3
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	461a      	mov	r2, r3
 8006af4:	2300      	movs	r3, #0
 8006af6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af8:	f7fc fe9c 	bl	8003834 <HAL_GetTick>
 8006afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b00:	e009      	b.n	8006b16 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b02:	f7fc fe97 	bl	8003834 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e077      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
 8006b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	fa93 f2a3 	rbit	r2, r3
 8006b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b2e:	601a      	str	r2, [r3, #0]
  return result;
 8006b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b36:	fab3 f383 	clz	r3, r3
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f043 0301 	orr.w	r3, r3, #1
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d102      	bne.n	8006b50 <HAL_RCC_OscConfig+0xd4c>
 8006b4a:	4b31      	ldr	r3, [pc, #196]	; (8006c10 <HAL_RCC_OscConfig+0xe0c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	e01b      	b.n	8006b88 <HAL_RCC_OscConfig+0xd84>
 8006b50:	f107 0320 	add.w	r3, r7, #32
 8006b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5a:	f107 0320 	add.w	r3, r7, #32
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	fa93 f2a3 	rbit	r2, r3
 8006b64:	f107 031c 	add.w	r3, r7, #28
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	f107 0318 	add.w	r3, r7, #24
 8006b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	f107 0318 	add.w	r3, r7, #24
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	fa93 f2a3 	rbit	r2, r3
 8006b7e:	f107 0314 	add.w	r3, r7, #20
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	4b22      	ldr	r3, [pc, #136]	; (8006c10 <HAL_RCC_OscConfig+0xe0c>)
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	f107 0210 	add.w	r2, r7, #16
 8006b8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b90:	6011      	str	r1, [r2, #0]
 8006b92:	f107 0210 	add.w	r2, r7, #16
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	fa92 f1a2 	rbit	r1, r2
 8006b9c:	f107 020c 	add.w	r2, r7, #12
 8006ba0:	6011      	str	r1, [r2, #0]
  return result;
 8006ba2:	f107 020c 	add.w	r2, r7, #12
 8006ba6:	6812      	ldr	r2, [r2, #0]
 8006ba8:	fab2 f282 	clz	r2, r2
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	f042 0220 	orr.w	r2, r2, #32
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	f002 021f 	and.w	r2, r2, #31
 8006bb8:	2101      	movs	r1, #1
 8006bba:	fa01 f202 	lsl.w	r2, r1, r2
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d19e      	bne.n	8006b02 <HAL_RCC_OscConfig+0xcfe>
 8006bc4:	e01e      	b.n	8006c04 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bc6:	1d3b      	adds	r3, r7, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e018      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <HAL_RCC_OscConfig+0xe0c>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006bdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006be4:	1d3b      	adds	r3, r7, #4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d108      	bne.n	8006c00 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006bee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006bf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d001      	beq.n	8006c04 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40021000 	.word	0x40021000

08006c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b09e      	sub	sp, #120	; 0x78
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e162      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c2c:	4b90      	ldr	r3, [pc, #576]	; (8006e70 <HAL_RCC_ClockConfig+0x25c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d910      	bls.n	8006c5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3a:	4b8d      	ldr	r3, [pc, #564]	; (8006e70 <HAL_RCC_ClockConfig+0x25c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f023 0207 	bic.w	r2, r3, #7
 8006c42:	498b      	ldr	r1, [pc, #556]	; (8006e70 <HAL_RCC_ClockConfig+0x25c>)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4a:	4b89      	ldr	r3, [pc, #548]	; (8006e70 <HAL_RCC_ClockConfig+0x25c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d001      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e14a      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c68:	4b82      	ldr	r3, [pc, #520]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	497f      	ldr	r1, [pc, #508]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80dc 	beq.w	8006e40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d13c      	bne.n	8006d0a <HAL_RCC_ClockConfig+0xf6>
 8006c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c98:	fa93 f3a3 	rbit	r3, r3
 8006c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca0:	fab3 f383 	clz	r3, r3
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d102      	bne.n	8006cba <HAL_RCC_ClockConfig+0xa6>
 8006cb4:	4b6f      	ldr	r3, [pc, #444]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	e00f      	b.n	8006cda <HAL_RCC_ClockConfig+0xc6>
 8006cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cc2:	fa93 f3a3 	rbit	r3, r3
 8006cc6:	667b      	str	r3, [r7, #100]	; 0x64
 8006cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8006cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cd0:	fa93 f3a3 	rbit	r3, r3
 8006cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cd6:	4b67      	ldr	r3, [pc, #412]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006cde:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ce2:	fa92 f2a2 	rbit	r2, r2
 8006ce6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006ce8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cea:	fab2 f282 	clz	r2, r2
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	f042 0220 	orr.w	r2, r2, #32
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	f002 021f 	and.w	r2, r2, #31
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8006d00:	4013      	ands	r3, r2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d17b      	bne.n	8006dfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e0f3      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d13c      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x178>
 8006d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1a:	fa93 f3a3 	rbit	r3, r3
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d22:	fab3 f383 	clz	r3, r3
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d102      	bne.n	8006d3c <HAL_RCC_ClockConfig+0x128>
 8006d36:	4b4f      	ldr	r3, [pc, #316]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	e00f      	b.n	8006d5c <HAL_RCC_ClockConfig+0x148>
 8006d3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d44:	fa93 f3a3 	rbit	r3, r3
 8006d48:	647b      	str	r3, [r7, #68]	; 0x44
 8006d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d52:	fa93 f3a3 	rbit	r3, r3
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d58:	4b46      	ldr	r3, [pc, #280]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d60:	63ba      	str	r2, [r7, #56]	; 0x38
 8006d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d64:	fa92 f2a2 	rbit	r2, r2
 8006d68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d6c:	fab2 f282 	clz	r2, r2
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	f042 0220 	orr.w	r2, r2, #32
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	f002 021f 	and.w	r2, r2, #31
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13a      	bne.n	8006dfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0b2      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x2de>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	fa93 f3a3 	rbit	r3, r3
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d9a:	fab3 f383 	clz	r3, r3
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d102      	bne.n	8006db4 <HAL_RCC_ClockConfig+0x1a0>
 8006dae:	4b31      	ldr	r3, [pc, #196]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	e00d      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x1bc>
 8006db4:	2302      	movs	r3, #2
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	fa93 f3a3 	rbit	r3, r3
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	623b      	str	r3, [r7, #32]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	fa93 f3a3 	rbit	r3, r3
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	61ba      	str	r2, [r7, #24]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	fa92 f2a2 	rbit	r2, r2
 8006dda:	617a      	str	r2, [r7, #20]
  return result;
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	fab2 f282 	clz	r2, r2
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	f042 0220 	orr.w	r2, r2, #32
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	f002 021f 	and.w	r2, r2, #31
 8006dee:	2101      	movs	r1, #1
 8006df0:	fa01 f202 	lsl.w	r2, r1, r2
 8006df4:	4013      	ands	r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e079      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dfe:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f023 0203 	bic.w	r2, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	491a      	ldr	r1, [pc, #104]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e10:	f7fc fd10 	bl	8003834 <HAL_GetTick>
 8006e14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e16:	e00a      	b.n	8006e2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e18:	f7fc fd0c 	bl	8003834 <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e061      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <HAL_RCC_ClockConfig+0x260>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f003 020c 	and.w	r2, r3, #12
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d1eb      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <HAL_RCC_ClockConfig+0x25c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d214      	bcs.n	8006e78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e4e:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <HAL_RCC_ClockConfig+0x25c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f023 0207 	bic.w	r2, r3, #7
 8006e56:	4906      	ldr	r1, [pc, #24]	; (8006e70 <HAL_RCC_ClockConfig+0x25c>)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5e:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <HAL_RCC_ClockConfig+0x25c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0307 	and.w	r3, r3, #7
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d005      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e040      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x2de>
 8006e70:	40022000 	.word	0x40022000
 8006e74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e84:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <HAL_RCC_ClockConfig+0x2e8>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	491a      	ldr	r1, [pc, #104]	; (8006efc <HAL_RCC_ClockConfig+0x2e8>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d009      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ea2:	4b16      	ldr	r3, [pc, #88]	; (8006efc <HAL_RCC_ClockConfig+0x2e8>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4912      	ldr	r1, [pc, #72]	; (8006efc <HAL_RCC_ClockConfig+0x2e8>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006eb6:	f000 f829 	bl	8006f0c <HAL_RCC_GetSysClockFreq>
 8006eba:	4601      	mov	r1, r0
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <HAL_RCC_ClockConfig+0x2e8>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ec4:	22f0      	movs	r2, #240	; 0xf0
 8006ec6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	fa92 f2a2 	rbit	r2, r2
 8006ece:	60fa      	str	r2, [r7, #12]
  return result;
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	fab2 f282 	clz	r2, r2
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	40d3      	lsrs	r3, r2
 8006eda:	4a09      	ldr	r2, [pc, #36]	; (8006f00 <HAL_RCC_ClockConfig+0x2ec>)
 8006edc:	5cd3      	ldrb	r3, [r2, r3]
 8006ede:	fa21 f303 	lsr.w	r3, r1, r3
 8006ee2:	4a08      	ldr	r2, [pc, #32]	; (8006f04 <HAL_RCC_ClockConfig+0x2f0>)
 8006ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <HAL_RCC_ClockConfig+0x2f4>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fc fc5e 	bl	80037ac <HAL_InitTick>
  
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3778      	adds	r7, #120	; 0x78
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40021000 	.word	0x40021000
 8006f00:	0800d770 	.word	0x0800d770
 8006f04:	2000001c 	.word	0x2000001c
 8006f08:	20000020 	.word	0x20000020

08006f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b08b      	sub	sp, #44	; 0x2c
 8006f10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006f26:	4b29      	ldr	r3, [pc, #164]	; (8006fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f003 030c 	and.w	r3, r3, #12
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d002      	beq.n	8006f3c <HAL_RCC_GetSysClockFreq+0x30>
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	d003      	beq.n	8006f42 <HAL_RCC_GetSysClockFreq+0x36>
 8006f3a:	e03c      	b.n	8006fb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f3c:	4b24      	ldr	r3, [pc, #144]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006f3e:	623b      	str	r3, [r7, #32]
      break;
 8006f40:	e03c      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006f48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006f4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	fa92 f2a2 	rbit	r2, r2
 8006f54:	607a      	str	r2, [r7, #4]
  return result;
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	fab2 f282 	clz	r2, r2
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	40d3      	lsrs	r3, r2
 8006f60:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006f62:	5cd3      	ldrb	r3, [r2, r3]
 8006f64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006f66:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	220f      	movs	r2, #15
 8006f70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	fa92 f2a2 	rbit	r2, r2
 8006f78:	60fa      	str	r2, [r7, #12]
  return result;
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	fab2 f282 	clz	r2, r2
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	40d3      	lsrs	r3, r2
 8006f84:	4a14      	ldr	r2, [pc, #80]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f86:	5cd3      	ldrb	r3, [r2, r3]
 8006f88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006f94:	4a0e      	ldr	r2, [pc, #56]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	fb02 f303 	mul.w	r3, r2, r3
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa4:	e004      	b.n	8006fb0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	4a0c      	ldr	r2, [pc, #48]	; (8006fdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	623b      	str	r3, [r7, #32]
      break;
 8006fb4:	e002      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006fb6:	4b0a      	ldr	r3, [pc, #40]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006fb8:	623b      	str	r3, [r7, #32]
      break;
 8006fba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	372c      	adds	r7, #44	; 0x2c
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	00f42400 	.word	0x00f42400
 8006fd4:	0800d788 	.word	0x0800d788
 8006fd8:	0800d798 	.word	0x0800d798
 8006fdc:	003d0900 	.word	0x003d0900
 8006fe0:	007a1200 	.word	0x007a1200

08006fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fe8:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fea:	681b      	ldr	r3, [r3, #0]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	2000001c 	.word	0x2000001c

08006ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007002:	f7ff ffef 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 8007006:	4601      	mov	r1, r0
 8007008:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007010:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007014:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	fa92 f2a2 	rbit	r2, r2
 800701c:	603a      	str	r2, [r7, #0]
  return result;
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	fab2 f282 	clz	r2, r2
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	40d3      	lsrs	r3, r2
 8007028:	4a04      	ldr	r2, [pc, #16]	; (800703c <HAL_RCC_GetPCLK1Freq+0x40>)
 800702a:	5cd3      	ldrb	r3, [r2, r3]
 800702c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40021000 	.word	0x40021000
 800703c:	0800d780 	.word	0x0800d780

08007040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007046:	f7ff ffcd 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 800704a:	4601      	mov	r1, r0
 800704c:	4b0b      	ldr	r3, [pc, #44]	; (800707c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007054:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007058:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	fa92 f2a2 	rbit	r2, r2
 8007060:	603a      	str	r2, [r7, #0]
  return result;
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	fab2 f282 	clz	r2, r2
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	40d3      	lsrs	r3, r2
 800706c:	4a04      	ldr	r2, [pc, #16]	; (8007080 <HAL_RCC_GetPCLK2Freq+0x40>)
 800706e:	5cd3      	ldrb	r3, [r2, r3]
 8007070:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	40021000 	.word	0x40021000
 8007080:	0800d780 	.word	0x0800d780

08007084 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b092      	sub	sp, #72	; 0x48
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80d7 	beq.w	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80070a2:	2300      	movs	r3, #0
 80070a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070a8:	4b4e      	ldr	r3, [pc, #312]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10e      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070b4:	4b4b      	ldr	r3, [pc, #300]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	4a4a      	ldr	r2, [pc, #296]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070be:	61d3      	str	r3, [r2, #28]
 80070c0:	4b48      	ldr	r3, [pc, #288]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c8:	60bb      	str	r3, [r7, #8]
 80070ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d2:	4b45      	ldr	r3, [pc, #276]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d118      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070de:	4b42      	ldr	r3, [pc, #264]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a41      	ldr	r2, [pc, #260]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070ea:	f7fc fba3 	bl	8003834 <HAL_GetTick>
 80070ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f0:	e008      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070f2:	f7fc fb9f 	bl	8003834 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b64      	cmp	r3, #100	; 0x64
 80070fe:	d901      	bls.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e169      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007104:	4b38      	ldr	r3, [pc, #224]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0f0      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007110:	4b34      	ldr	r3, [pc, #208]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800711a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8084 	beq.w	800722a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800712c:	429a      	cmp	r2, r3
 800712e:	d07c      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007130:	4b2c      	ldr	r3, [pc, #176]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800713e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	fa93 f3a3 	rbit	r3, r3
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800714a:	fab3 f383 	clz	r3, r3
 800714e:	b2db      	uxtb	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	4b26      	ldr	r3, [pc, #152]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	461a      	mov	r2, r3
 800715a:	2301      	movs	r3, #1
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007162:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	fa93 f3a3 	rbit	r3, r3
 800716a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800716e:	fab3 f383 	clz	r3, r3
 8007172:	b2db      	uxtb	r3, r3
 8007174:	461a      	mov	r2, r3
 8007176:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	461a      	mov	r2, r3
 800717e:	2300      	movs	r3, #0
 8007180:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007182:	4a18      	ldr	r2, [pc, #96]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007186:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d04b      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007192:	f7fc fb4f 	bl	8003834 <HAL_GetTick>
 8007196:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007198:	e00a      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800719a:	f7fc fb4b 	bl	8003834 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e113      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80071b0:	2302      	movs	r3, #2
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	fa93 f3a3 	rbit	r3, r3
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
 80071bc:	2302      	movs	r3, #2
 80071be:	623b      	str	r3, [r7, #32]
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	fa93 f3a3 	rbit	r3, r3
 80071c6:	61fb      	str	r3, [r7, #28]
  return result;
 80071c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ca:	fab3 f383 	clz	r3, r3
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d108      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80071de:	4b01      	ldr	r3, [pc, #4]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	e00d      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80071e4:	40021000 	.word	0x40021000
 80071e8:	40007000 	.word	0x40007000
 80071ec:	10908100 	.word	0x10908100
 80071f0:	2302      	movs	r3, #2
 80071f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	fa93 f3a3 	rbit	r3, r3
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	4b78      	ldr	r3, [pc, #480]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	2202      	movs	r2, #2
 8007202:	613a      	str	r2, [r7, #16]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	fa92 f2a2 	rbit	r2, r2
 800720a:	60fa      	str	r2, [r7, #12]
  return result;
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	fab2 f282 	clz	r2, r2
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	f002 021f 	and.w	r2, r2, #31
 800721e:	2101      	movs	r1, #1
 8007220:	fa01 f202 	lsl.w	r2, r1, r2
 8007224:	4013      	ands	r3, r2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0b7      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800722a:	4b6d      	ldr	r3, [pc, #436]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	496a      	ldr	r1, [pc, #424]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007238:	4313      	orrs	r3, r2
 800723a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800723c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007240:	2b01      	cmp	r3, #1
 8007242:	d105      	bne.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007244:	4b66      	ldr	r3, [pc, #408]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	4a65      	ldr	r2, [pc, #404]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800724a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800724e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d008      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800725c:	4b60      	ldr	r3, [pc, #384]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	f023 0203 	bic.w	r2, r3, #3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	495d      	ldr	r1, [pc, #372]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800726a:	4313      	orrs	r3, r2
 800726c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800727a:	4b59      	ldr	r3, [pc, #356]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	4956      	ldr	r1, [pc, #344]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007288:	4313      	orrs	r3, r2
 800728a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d008      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007298:	4b51      	ldr	r3, [pc, #324]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	494e      	ldr	r1, [pc, #312]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0320 	and.w	r3, r3, #32
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d008      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072b6:	4b4a      	ldr	r3, [pc, #296]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	f023 0210 	bic.w	r2, r3, #16
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	4947      	ldr	r1, [pc, #284]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80072d4:	4b42      	ldr	r3, [pc, #264]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	493f      	ldr	r1, [pc, #252]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d008      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072f2:	4b3b      	ldr	r3, [pc, #236]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	f023 0220 	bic.w	r2, r3, #32
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	4938      	ldr	r1, [pc, #224]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007300:	4313      	orrs	r3, r2
 8007302:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d008      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007310:	4b33      	ldr	r3, [pc, #204]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	4930      	ldr	r1, [pc, #192]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800731e:	4313      	orrs	r3, r2
 8007320:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0310 	and.w	r3, r3, #16
 800732a:	2b00      	cmp	r3, #0
 800732c:	d008      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800732e:	4b2c      	ldr	r3, [pc, #176]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	4929      	ldr	r1, [pc, #164]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800733c:	4313      	orrs	r3, r2
 800733e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800734c:	4b24      	ldr	r3, [pc, #144]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	4921      	ldr	r1, [pc, #132]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800735a:	4313      	orrs	r3, r2
 800735c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800736a:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	491a      	ldr	r1, [pc, #104]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007378:	4313      	orrs	r3, r2
 800737a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	4912      	ldr	r1, [pc, #72]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007396:	4313      	orrs	r3, r2
 8007398:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80073a6:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	490b      	ldr	r1, [pc, #44]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80073c4:	4b06      	ldr	r3, [pc, #24]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	4903      	ldr	r1, [pc, #12]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3748      	adds	r7, #72	; 0x48
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	40021000 	.word	0x40021000

080073e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e01d      	b.n	8007432 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fb fee8 	bl	80031e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3304      	adds	r3, #4
 8007420:	4619      	mov	r1, r3
 8007422:	4610      	mov	r0, r2
 8007424:	f000 fe48 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	4b0e      	ldr	r3, [pc, #56]	; (800748c <HAL_TIM_Base_Start+0x50>)
 8007454:	4013      	ands	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b06      	cmp	r3, #6
 800745c:	d00b      	beq.n	8007476 <HAL_TIM_Base_Start+0x3a>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007464:	d007      	beq.n	8007476 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0201 	orr.w	r2, r2, #1
 8007474:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	00010007 	.word	0x00010007

08007490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <HAL_TIM_Base_Start_IT+0x50>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b06      	cmp	r3, #6
 80074b8:	d00b      	beq.n	80074d2 <HAL_TIM_Base_Start_IT+0x42>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c0:	d007      	beq.n	80074d2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 0201 	orr.w	r2, r2, #1
 80074d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	00010007 	.word	0x00010007

080074e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e01d      	b.n	8007532 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fb ff10 	bl	8003330 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3304      	adds	r3, #4
 8007520:	4619      	mov	r1, r3
 8007522:	4610      	mov	r0, r2
 8007524:	f000 fdc8 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e01d      	b.n	8007588 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d106      	bne.n	8007566 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7fb fe07 	bl	8003174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3304      	adds	r3, #4
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f000 fd9d 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2201      	movs	r2, #1
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 faa6 	bl	8008af4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1e      	ldr	r2, [pc, #120]	; (8007628 <HAL_TIM_PWM_Start+0x98>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <HAL_TIM_PWM_Start+0x4a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a1d      	ldr	r2, [pc, #116]	; (800762c <HAL_TIM_PWM_Start+0x9c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <HAL_TIM_PWM_Start+0x4a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1b      	ldr	r2, [pc, #108]	; (8007630 <HAL_TIM_PWM_Start+0xa0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <HAL_TIM_PWM_Start+0x4a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <HAL_TIM_PWM_Start+0xa4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <HAL_TIM_PWM_Start+0x4a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a18      	ldr	r2, [pc, #96]	; (8007638 <HAL_TIM_PWM_Start+0xa8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d101      	bne.n	80075de <HAL_TIM_PWM_Start+0x4e>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <HAL_TIM_PWM_Start+0x50>
 80075de:	2300      	movs	r3, #0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	4b10      	ldr	r3, [pc, #64]	; (800763c <HAL_TIM_PWM_Start+0xac>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b06      	cmp	r3, #6
 8007604:	d00b      	beq.n	800761e <HAL_TIM_PWM_Start+0x8e>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760c:	d007      	beq.n	800761e <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0201 	orr.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40012c00 	.word	0x40012c00
 800762c:	40013400 	.word	0x40013400
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400
 8007638:	40014800 	.word	0x40014800
 800763c:	00010007 	.word	0x00010007

08007640 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2200      	movs	r2, #0
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fa4e 	bl	8008af4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a2a      	ldr	r2, [pc, #168]	; (8007708 <HAL_TIM_PWM_Stop+0xc8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d013      	beq.n	800768a <HAL_TIM_PWM_Stop+0x4a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a29      	ldr	r2, [pc, #164]	; (800770c <HAL_TIM_PWM_Stop+0xcc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00e      	beq.n	800768a <HAL_TIM_PWM_Stop+0x4a>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a27      	ldr	r2, [pc, #156]	; (8007710 <HAL_TIM_PWM_Stop+0xd0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d009      	beq.n	800768a <HAL_TIM_PWM_Stop+0x4a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a26      	ldr	r2, [pc, #152]	; (8007714 <HAL_TIM_PWM_Stop+0xd4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d004      	beq.n	800768a <HAL_TIM_PWM_Stop+0x4a>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a24      	ldr	r2, [pc, #144]	; (8007718 <HAL_TIM_PWM_Stop+0xd8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d101      	bne.n	800768e <HAL_TIM_PWM_Stop+0x4e>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <HAL_TIM_PWM_Stop+0x50>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d017      	beq.n	80076c4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6a1a      	ldr	r2, [r3, #32]
 800769a:	f241 1311 	movw	r3, #4369	; 0x1111
 800769e:	4013      	ands	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10f      	bne.n	80076c4 <HAL_TIM_PWM_Stop+0x84>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6a1a      	ldr	r2, [r3, #32]
 80076aa:	f240 4344 	movw	r3, #1092	; 0x444
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d107      	bne.n	80076c4 <HAL_TIM_PWM_Stop+0x84>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6a1a      	ldr	r2, [r3, #32]
 80076ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80076ce:	4013      	ands	r3, r2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10f      	bne.n	80076f4 <HAL_TIM_PWM_Stop+0xb4>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6a1a      	ldr	r2, [r3, #32]
 80076da:	f240 4344 	movw	r3, #1092	; 0x444
 80076de:	4013      	ands	r3, r2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d107      	bne.n	80076f4 <HAL_TIM_PWM_Stop+0xb4>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0201 	bic.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40013400 	.word	0x40013400
 8007710:	40014000 	.word	0x40014000
 8007714:	40014400 	.word	0x40014400
 8007718:	40014800 	.word	0x40014800

0800771c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e01d      	b.n	800776a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f815 	bl	8007772 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3304      	adds	r3, #4
 8007758:	4619      	mov	r1, r3
 800775a:	4610      	mov	r0, r2
 800775c:	f000 fcac 	bl	80080b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b0c      	cmp	r3, #12
 8007796:	d841      	bhi.n	800781c <HAL_TIM_IC_Start_IT+0x94>
 8007798:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <HAL_TIM_IC_Start_IT+0x18>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	080077d5 	.word	0x080077d5
 80077a4:	0800781d 	.word	0x0800781d
 80077a8:	0800781d 	.word	0x0800781d
 80077ac:	0800781d 	.word	0x0800781d
 80077b0:	080077e7 	.word	0x080077e7
 80077b4:	0800781d 	.word	0x0800781d
 80077b8:	0800781d 	.word	0x0800781d
 80077bc:	0800781d 	.word	0x0800781d
 80077c0:	080077f9 	.word	0x080077f9
 80077c4:	0800781d 	.word	0x0800781d
 80077c8:	0800781d 	.word	0x0800781d
 80077cc:	0800781d 	.word	0x0800781d
 80077d0:	0800780b 	.word	0x0800780b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0202 	orr.w	r2, r2, #2
 80077e2:	60da      	str	r2, [r3, #12]
      break;
 80077e4:	e01b      	b.n	800781e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f042 0204 	orr.w	r2, r2, #4
 80077f4:	60da      	str	r2, [r3, #12]
      break;
 80077f6:	e012      	b.n	800781e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0208 	orr.w	r2, r2, #8
 8007806:	60da      	str	r2, [r3, #12]
      break;
 8007808:	e009      	b.n	800781e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0210 	orr.w	r2, r2, #16
 8007818:	60da      	str	r2, [r3, #12]
      break;
 800781a:	e000      	b.n	800781e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800781c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2201      	movs	r2, #1
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f001 f964 	bl	8008af4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <HAL_TIM_IC_Start_IT+0xd8>)
 8007834:	4013      	ands	r3, r2
 8007836:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b06      	cmp	r3, #6
 800783c:	d00b      	beq.n	8007856 <HAL_TIM_IC_Start_IT+0xce>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007844:	d007      	beq.n	8007856 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0201 	orr.w	r2, r2, #1
 8007854:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	00010007 	.word	0x00010007

08007864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b02      	cmp	r3, #2
 8007878:	d122      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b02      	cmp	r3, #2
 8007886:	d11b      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0202 	mvn.w	r2, #2
 8007890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fa fec4 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 80078ac:	e005      	b.n	80078ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fbe3 	bl	800807a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fbea 	bl	800808e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d122      	bne.n	8007914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d11b      	bne.n	8007914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0204 	mvn.w	r2, #4
 80078e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fa fe9a 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 8007900:	e005      	b.n	800790e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fbb9 	bl	800807a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fbc0 	bl	800808e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b08      	cmp	r3, #8
 8007920:	d122      	bne.n	8007968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b08      	cmp	r3, #8
 800792e:	d11b      	bne.n	8007968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f06f 0208 	mvn.w	r2, #8
 8007938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2204      	movs	r2, #4
 800793e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7fa fe70 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 8007954:	e005      	b.n	8007962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb8f 	bl	800807a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fb96 	bl	800808e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b10      	cmp	r3, #16
 8007974:	d122      	bne.n	80079bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f003 0310 	and.w	r3, r3, #16
 8007980:	2b10      	cmp	r3, #16
 8007982:	d11b      	bne.n	80079bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f06f 0210 	mvn.w	r2, #16
 800798c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2208      	movs	r2, #8
 8007992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fa fe46 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 80079a8:	e005      	b.n	80079b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fb65 	bl	800807a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fb6c 	bl	800808e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10e      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d107      	bne.n	80079e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f06f 0201 	mvn.w	r2, #1
 80079e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fa ff30 	bl	8002848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d10e      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a00:	2b80      	cmp	r3, #128	; 0x80
 8007a02:	d107      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 f99e 	bl	8008d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a22:	d10e      	bne.n	8007a42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2e:	2b80      	cmp	r3, #128	; 0x80
 8007a30:	d107      	bne.n	8007a42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 f991 	bl	8008d64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	d10e      	bne.n	8007a6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5a:	2b40      	cmp	r3, #64	; 0x40
 8007a5c:	d107      	bne.n	8007a6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fb1a 	bl	80080a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d10e      	bne.n	8007a9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d107      	bne.n	8007a9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f06f 0220 	mvn.w	r2, #32
 8007a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 f951 	bl	8008d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_TIM_OC_ConfigChannel+0x1a>
 8007aba:	2302      	movs	r3, #2
 8007abc:	e06c      	b.n	8007b98 <HAL_TIM_OC_ConfigChannel+0xf4>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b14      	cmp	r3, #20
 8007ad2:	d857      	bhi.n	8007b84 <HAL_TIM_OC_ConfigChannel+0xe0>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <HAL_TIM_OC_ConfigChannel+0x38>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007b31 	.word	0x08007b31
 8007ae0:	08007b85 	.word	0x08007b85
 8007ae4:	08007b85 	.word	0x08007b85
 8007ae8:	08007b85 	.word	0x08007b85
 8007aec:	08007b3f 	.word	0x08007b3f
 8007af0:	08007b85 	.word	0x08007b85
 8007af4:	08007b85 	.word	0x08007b85
 8007af8:	08007b85 	.word	0x08007b85
 8007afc:	08007b4d 	.word	0x08007b4d
 8007b00:	08007b85 	.word	0x08007b85
 8007b04:	08007b85 	.word	0x08007b85
 8007b08:	08007b85 	.word	0x08007b85
 8007b0c:	08007b5b 	.word	0x08007b5b
 8007b10:	08007b85 	.word	0x08007b85
 8007b14:	08007b85 	.word	0x08007b85
 8007b18:	08007b85 	.word	0x08007b85
 8007b1c:	08007b69 	.word	0x08007b69
 8007b20:	08007b85 	.word	0x08007b85
 8007b24:	08007b85 	.word	0x08007b85
 8007b28:	08007b85 	.word	0x08007b85
 8007b2c:	08007b77 	.word	0x08007b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fb4e 	bl	80081d8 <TIM_OC1_SetConfig>
      break;
 8007b3c:	e023      	b.n	8007b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fbd7 	bl	80082f8 <TIM_OC2_SetConfig>
      break;
 8007b4a:	e01c      	b.n	8007b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fc5a 	bl	800840c <TIM_OC3_SetConfig>
      break;
 8007b58:	e015      	b.n	8007b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fcdb 	bl	800851c <TIM_OC4_SetConfig>
      break;
 8007b66:	e00e      	b.n	8007b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fd3e 	bl	80085f0 <TIM_OC5_SetConfig>
      break;
 8007b74:	e007      	b.n	8007b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fd9b 	bl	80086b8 <TIM_OC6_SetConfig>
      break;
 8007b82:	e000      	b.n	8007b86 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8007b84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_TIM_IC_ConfigChannel+0x1a>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e08a      	b.n	8007cd0 <HAL_TIM_IC_ConfigChannel+0x130>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d11b      	bne.n	8007c08 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	6819      	ldr	r1, [r3, #0]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f000 fdd0 	bl	8008784 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 020c 	bic.w	r2, r2, #12
 8007bf2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6999      	ldr	r1, [r3, #24]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	619a      	str	r2, [r3, #24]
 8007c06:	e05a      	b.n	8007cbe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d11c      	bne.n	8007c48 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	6819      	ldr	r1, [r3, #0]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f000 fe48 	bl	80088b2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699a      	ldr	r2, [r3, #24]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6999      	ldr	r1, [r3, #24]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	021a      	lsls	r2, r3, #8
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	619a      	str	r2, [r3, #24]
 8007c46:	e03a      	b.n	8007cbe <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	d11b      	bne.n	8007c86 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	6819      	ldr	r1, [r3, #0]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f000 fe95 	bl	800898c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69da      	ldr	r2, [r3, #28]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 020c 	bic.w	r2, r2, #12
 8007c70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69d9      	ldr	r1, [r3, #28]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	61da      	str	r2, [r3, #28]
 8007c84:	e01b      	b.n	8007cbe <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f000 feb5 	bl	8008a04 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ca8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69d9      	ldr	r1, [r3, #28]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	021a      	lsls	r2, r3, #8
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e105      	b.n	8007efe <HAL_TIM_PWM_ConfigChannel+0x226>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b14      	cmp	r3, #20
 8007d06:	f200 80f0 	bhi.w	8007eea <HAL_TIM_PWM_ConfigChannel+0x212>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d65 	.word	0x08007d65
 8007d14:	08007eeb 	.word	0x08007eeb
 8007d18:	08007eeb 	.word	0x08007eeb
 8007d1c:	08007eeb 	.word	0x08007eeb
 8007d20:	08007da5 	.word	0x08007da5
 8007d24:	08007eeb 	.word	0x08007eeb
 8007d28:	08007eeb 	.word	0x08007eeb
 8007d2c:	08007eeb 	.word	0x08007eeb
 8007d30:	08007de7 	.word	0x08007de7
 8007d34:	08007eeb 	.word	0x08007eeb
 8007d38:	08007eeb 	.word	0x08007eeb
 8007d3c:	08007eeb 	.word	0x08007eeb
 8007d40:	08007e27 	.word	0x08007e27
 8007d44:	08007eeb 	.word	0x08007eeb
 8007d48:	08007eeb 	.word	0x08007eeb
 8007d4c:	08007eeb 	.word	0x08007eeb
 8007d50:	08007e69 	.word	0x08007e69
 8007d54:	08007eeb 	.word	0x08007eeb
 8007d58:	08007eeb 	.word	0x08007eeb
 8007d5c:	08007eeb 	.word	0x08007eeb
 8007d60:	08007ea9 	.word	0x08007ea9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 fa34 	bl	80081d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699a      	ldr	r2, [r3, #24]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0208 	orr.w	r2, r2, #8
 8007d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0204 	bic.w	r2, r2, #4
 8007d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6999      	ldr	r1, [r3, #24]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	691a      	ldr	r2, [r3, #16]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	619a      	str	r2, [r3, #24]
      break;
 8007da2:	e0a3      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 faa4 	bl	80082f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6999      	ldr	r1, [r3, #24]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	021a      	lsls	r2, r3, #8
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	619a      	str	r2, [r3, #24]
      break;
 8007de4:	e082      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 fb0d 	bl	800840c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69da      	ldr	r2, [r3, #28]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f042 0208 	orr.w	r2, r2, #8
 8007e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69da      	ldr	r2, [r3, #28]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0204 	bic.w	r2, r2, #4
 8007e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69d9      	ldr	r1, [r3, #28]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	61da      	str	r2, [r3, #28]
      break;
 8007e24:	e062      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fb75 	bl	800851c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69da      	ldr	r2, [r3, #28]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69da      	ldr	r2, [r3, #28]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69d9      	ldr	r1, [r3, #28]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	021a      	lsls	r2, r3, #8
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	61da      	str	r2, [r3, #28]
      break;
 8007e66:	e041      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fbbe 	bl	80085f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0208 	orr.w	r2, r2, #8
 8007e82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0204 	bic.w	r2, r2, #4
 8007e92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ea6:	e021      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fc02 	bl	80086b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ec2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	021a      	lsls	r2, r3, #8
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ee8:	e000      	b.n	8007eec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8007eea:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop

08007f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <HAL_TIM_ConfigClockSource+0x18>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e0a8      	b.n	8008072 <HAL_TIM_ConfigClockSource+0x16a>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b40      	cmp	r3, #64	; 0x40
 8007f5a:	d067      	beq.n	800802c <HAL_TIM_ConfigClockSource+0x124>
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d80b      	bhi.n	8007f78 <HAL_TIM_ConfigClockSource+0x70>
 8007f60:	2b10      	cmp	r3, #16
 8007f62:	d073      	beq.n	800804c <HAL_TIM_ConfigClockSource+0x144>
 8007f64:	2b10      	cmp	r3, #16
 8007f66:	d802      	bhi.n	8007f6e <HAL_TIM_ConfigClockSource+0x66>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d06f      	beq.n	800804c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f6c:	e078      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007f6e:	2b20      	cmp	r3, #32
 8007f70:	d06c      	beq.n	800804c <HAL_TIM_ConfigClockSource+0x144>
 8007f72:	2b30      	cmp	r3, #48	; 0x30
 8007f74:	d06a      	beq.n	800804c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007f76:	e073      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007f78:	2b70      	cmp	r3, #112	; 0x70
 8007f7a:	d00d      	beq.n	8007f98 <HAL_TIM_ConfigClockSource+0x90>
 8007f7c:	2b70      	cmp	r3, #112	; 0x70
 8007f7e:	d804      	bhi.n	8007f8a <HAL_TIM_ConfigClockSource+0x82>
 8007f80:	2b50      	cmp	r3, #80	; 0x50
 8007f82:	d033      	beq.n	8007fec <HAL_TIM_ConfigClockSource+0xe4>
 8007f84:	2b60      	cmp	r3, #96	; 0x60
 8007f86:	d041      	beq.n	800800c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007f88:	e06a      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8e:	d066      	beq.n	800805e <HAL_TIM_ConfigClockSource+0x156>
 8007f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f94:	d017      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007f96:	e063      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	6899      	ldr	r1, [r3, #8]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f000 fd84 	bl	8008ab4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007fba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	609a      	str	r2, [r3, #8]
      break;
 8007fc4:	e04c      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	6899      	ldr	r1, [r3, #8]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f000 fd6d 	bl	8008ab4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fe8:	609a      	str	r2, [r3, #8]
      break;
 8007fea:	e039      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	6859      	ldr	r1, [r3, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f000 fc2b 	bl	8008854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2150      	movs	r1, #80	; 0x50
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fd3a 	bl	8008a7e <TIM_ITRx_SetConfig>
      break;
 800800a:	e029      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	6859      	ldr	r1, [r3, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	461a      	mov	r2, r3
 800801a:	f000 fc87 	bl	800892c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2160      	movs	r1, #96	; 0x60
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fd2a 	bl	8008a7e <TIM_ITRx_SetConfig>
      break;
 800802a:	e019      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	6859      	ldr	r1, [r3, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	461a      	mov	r2, r3
 800803a:	f000 fc0b 	bl	8008854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2140      	movs	r1, #64	; 0x40
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fd1a 	bl	8008a7e <TIM_ITRx_SetConfig>
      break;
 800804a:	e009      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f000 fd11 	bl	8008a7e <TIM_ITRx_SetConfig>
      break;
 800805c:	e000      	b.n	8008060 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800805e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
	...

080080b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a3c      	ldr	r2, [pc, #240]	; (80081bc <TIM_Base_SetConfig+0x104>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d00f      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d6:	d00b      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a39      	ldr	r2, [pc, #228]	; (80081c0 <TIM_Base_SetConfig+0x108>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d007      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a38      	ldr	r2, [pc, #224]	; (80081c4 <TIM_Base_SetConfig+0x10c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_Base_SetConfig+0x38>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a37      	ldr	r2, [pc, #220]	; (80081c8 <TIM_Base_SetConfig+0x110>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d108      	bne.n	8008102 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a2d      	ldr	r2, [pc, #180]	; (80081bc <TIM_Base_SetConfig+0x104>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d01b      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008110:	d017      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <TIM_Base_SetConfig+0x108>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d013      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a29      	ldr	r2, [pc, #164]	; (80081c4 <TIM_Base_SetConfig+0x10c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00f      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a28      	ldr	r2, [pc, #160]	; (80081c8 <TIM_Base_SetConfig+0x110>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00b      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a27      	ldr	r2, [pc, #156]	; (80081cc <TIM_Base_SetConfig+0x114>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d007      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a26      	ldr	r2, [pc, #152]	; (80081d0 <TIM_Base_SetConfig+0x118>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_Base_SetConfig+0x8a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a25      	ldr	r2, [pc, #148]	; (80081d4 <TIM_Base_SetConfig+0x11c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d108      	bne.n	8008154 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4313      	orrs	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a10      	ldr	r2, [pc, #64]	; (80081bc <TIM_Base_SetConfig+0x104>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00f      	beq.n	80081a0 <TIM_Base_SetConfig+0xe8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a11      	ldr	r2, [pc, #68]	; (80081c8 <TIM_Base_SetConfig+0x110>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00b      	beq.n	80081a0 <TIM_Base_SetConfig+0xe8>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a10      	ldr	r2, [pc, #64]	; (80081cc <TIM_Base_SetConfig+0x114>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d007      	beq.n	80081a0 <TIM_Base_SetConfig+0xe8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a0f      	ldr	r2, [pc, #60]	; (80081d0 <TIM_Base_SetConfig+0x118>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_Base_SetConfig+0xe8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a0e      	ldr	r2, [pc, #56]	; (80081d4 <TIM_Base_SetConfig+0x11c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d103      	bne.n	80081a8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	615a      	str	r2, [r3, #20]
}
 80081ae:	bf00      	nop
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	40012c00 	.word	0x40012c00
 80081c0:	40000400 	.word	0x40000400
 80081c4:	40000800 	.word	0x40000800
 80081c8:	40013400 	.word	0x40013400
 80081cc:	40014000 	.word	0x40014000
 80081d0:	40014400 	.word	0x40014400
 80081d4:	40014800 	.word	0x40014800

080081d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	f023 0201 	bic.w	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800820a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f023 0302 	bic.w	r3, r3, #2
 8008224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a2c      	ldr	r2, [pc, #176]	; (80082e4 <TIM_OC1_SetConfig+0x10c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00f      	beq.n	8008258 <TIM_OC1_SetConfig+0x80>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a2b      	ldr	r2, [pc, #172]	; (80082e8 <TIM_OC1_SetConfig+0x110>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00b      	beq.n	8008258 <TIM_OC1_SetConfig+0x80>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a2a      	ldr	r2, [pc, #168]	; (80082ec <TIM_OC1_SetConfig+0x114>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d007      	beq.n	8008258 <TIM_OC1_SetConfig+0x80>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a29      	ldr	r2, [pc, #164]	; (80082f0 <TIM_OC1_SetConfig+0x118>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d003      	beq.n	8008258 <TIM_OC1_SetConfig+0x80>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a28      	ldr	r2, [pc, #160]	; (80082f4 <TIM_OC1_SetConfig+0x11c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d10c      	bne.n	8008272 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f023 0308 	bic.w	r3, r3, #8
 800825e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	4313      	orrs	r3, r2
 8008268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f023 0304 	bic.w	r3, r3, #4
 8008270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1b      	ldr	r2, [pc, #108]	; (80082e4 <TIM_OC1_SetConfig+0x10c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00f      	beq.n	800829a <TIM_OC1_SetConfig+0xc2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <TIM_OC1_SetConfig+0x110>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00b      	beq.n	800829a <TIM_OC1_SetConfig+0xc2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a19      	ldr	r2, [pc, #100]	; (80082ec <TIM_OC1_SetConfig+0x114>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d007      	beq.n	800829a <TIM_OC1_SetConfig+0xc2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a18      	ldr	r2, [pc, #96]	; (80082f0 <TIM_OC1_SetConfig+0x118>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d003      	beq.n	800829a <TIM_OC1_SetConfig+0xc2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a17      	ldr	r2, [pc, #92]	; (80082f4 <TIM_OC1_SetConfig+0x11c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d111      	bne.n	80082be <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	621a      	str	r2, [r3, #32]
}
 80082d8:	bf00      	nop
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	40012c00 	.word	0x40012c00
 80082e8:	40013400 	.word	0x40013400
 80082ec:	40014000 	.word	0x40014000
 80082f0:	40014400 	.word	0x40014400
 80082f4:	40014800 	.word	0x40014800

080082f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f023 0210 	bic.w	r2, r3, #16
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800832a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f023 0320 	bic.w	r3, r3, #32
 8008346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a28      	ldr	r2, [pc, #160]	; (80083f8 <TIM_OC2_SetConfig+0x100>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d003      	beq.n	8008364 <TIM_OC2_SetConfig+0x6c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a27      	ldr	r2, [pc, #156]	; (80083fc <TIM_OC2_SetConfig+0x104>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d10d      	bne.n	8008380 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800836a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a1d      	ldr	r2, [pc, #116]	; (80083f8 <TIM_OC2_SetConfig+0x100>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00f      	beq.n	80083a8 <TIM_OC2_SetConfig+0xb0>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a1c      	ldr	r2, [pc, #112]	; (80083fc <TIM_OC2_SetConfig+0x104>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00b      	beq.n	80083a8 <TIM_OC2_SetConfig+0xb0>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a1b      	ldr	r2, [pc, #108]	; (8008400 <TIM_OC2_SetConfig+0x108>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d007      	beq.n	80083a8 <TIM_OC2_SetConfig+0xb0>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a1a      	ldr	r2, [pc, #104]	; (8008404 <TIM_OC2_SetConfig+0x10c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d003      	beq.n	80083a8 <TIM_OC2_SetConfig+0xb0>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a19      	ldr	r2, [pc, #100]	; (8008408 <TIM_OC2_SetConfig+0x110>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d113      	bne.n	80083d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083b6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	621a      	str	r2, [r3, #32]
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	40013400 	.word	0x40013400
 8008400:	40014000 	.word	0x40014000
 8008404:	40014400 	.word	0x40014400
 8008408:	40014800 	.word	0x40014800

0800840c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800843a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0303 	bic.w	r3, r3, #3
 8008446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	4313      	orrs	r3, r2
 8008464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a27      	ldr	r2, [pc, #156]	; (8008508 <TIM_OC3_SetConfig+0xfc>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d003      	beq.n	8008476 <TIM_OC3_SetConfig+0x6a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a26      	ldr	r2, [pc, #152]	; (800850c <TIM_OC3_SetConfig+0x100>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d10d      	bne.n	8008492 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800847c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	021b      	lsls	r3, r3, #8
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008490:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a1c      	ldr	r2, [pc, #112]	; (8008508 <TIM_OC3_SetConfig+0xfc>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d00f      	beq.n	80084ba <TIM_OC3_SetConfig+0xae>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a1b      	ldr	r2, [pc, #108]	; (800850c <TIM_OC3_SetConfig+0x100>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d00b      	beq.n	80084ba <TIM_OC3_SetConfig+0xae>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a1a      	ldr	r2, [pc, #104]	; (8008510 <TIM_OC3_SetConfig+0x104>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d007      	beq.n	80084ba <TIM_OC3_SetConfig+0xae>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a19      	ldr	r2, [pc, #100]	; (8008514 <TIM_OC3_SetConfig+0x108>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d003      	beq.n	80084ba <TIM_OC3_SetConfig+0xae>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a18      	ldr	r2, [pc, #96]	; (8008518 <TIM_OC3_SetConfig+0x10c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d113      	bne.n	80084e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	011b      	lsls	r3, r3, #4
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4313      	orrs	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	621a      	str	r2, [r3, #32]
}
 80084fc:	bf00      	nop
 80084fe:	371c      	adds	r7, #28
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	40012c00 	.word	0x40012c00
 800850c:	40013400 	.word	0x40013400
 8008510:	40014000 	.word	0x40014000
 8008514:	40014400 	.word	0x40014400
 8008518:	40014800 	.word	0x40014800

0800851c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800854a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	021b      	lsls	r3, r3, #8
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	4313      	orrs	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800856a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	031b      	lsls	r3, r3, #12
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a18      	ldr	r2, [pc, #96]	; (80085dc <TIM_OC4_SetConfig+0xc0>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00f      	beq.n	80085a0 <TIM_OC4_SetConfig+0x84>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a17      	ldr	r2, [pc, #92]	; (80085e0 <TIM_OC4_SetConfig+0xc4>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00b      	beq.n	80085a0 <TIM_OC4_SetConfig+0x84>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a16      	ldr	r2, [pc, #88]	; (80085e4 <TIM_OC4_SetConfig+0xc8>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d007      	beq.n	80085a0 <TIM_OC4_SetConfig+0x84>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a15      	ldr	r2, [pc, #84]	; (80085e8 <TIM_OC4_SetConfig+0xcc>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_OC4_SetConfig+0x84>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a14      	ldr	r2, [pc, #80]	; (80085ec <TIM_OC4_SetConfig+0xd0>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d109      	bne.n	80085b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	019b      	lsls	r3, r3, #6
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	621a      	str	r2, [r3, #32]
}
 80085ce:	bf00      	nop
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	40012c00 	.word	0x40012c00
 80085e0:	40013400 	.word	0x40013400
 80085e4:	40014000 	.word	0x40014000
 80085e8:	40014400 	.word	0x40014400
 80085ec:	40014800 	.word	0x40014800

080085f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800861e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008634:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	041b      	lsls	r3, r3, #16
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a17      	ldr	r2, [pc, #92]	; (80086a4 <TIM_OC5_SetConfig+0xb4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00f      	beq.n	800866a <TIM_OC5_SetConfig+0x7a>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a16      	ldr	r2, [pc, #88]	; (80086a8 <TIM_OC5_SetConfig+0xb8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00b      	beq.n	800866a <TIM_OC5_SetConfig+0x7a>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a15      	ldr	r2, [pc, #84]	; (80086ac <TIM_OC5_SetConfig+0xbc>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d007      	beq.n	800866a <TIM_OC5_SetConfig+0x7a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <TIM_OC5_SetConfig+0xc0>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d003      	beq.n	800866a <TIM_OC5_SetConfig+0x7a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a13      	ldr	r2, [pc, #76]	; (80086b4 <TIM_OC5_SetConfig+0xc4>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d109      	bne.n	800867e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	621a      	str	r2, [r3, #32]
}
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40012c00 	.word	0x40012c00
 80086a8:	40013400 	.word	0x40013400
 80086ac:	40014000 	.word	0x40014000
 80086b0:	40014400 	.word	0x40014400
 80086b4:	40014800 	.word	0x40014800

080086b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	051b      	lsls	r3, r3, #20
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a18      	ldr	r2, [pc, #96]	; (8008770 <TIM_OC6_SetConfig+0xb8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00f      	beq.n	8008734 <TIM_OC6_SetConfig+0x7c>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a17      	ldr	r2, [pc, #92]	; (8008774 <TIM_OC6_SetConfig+0xbc>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d00b      	beq.n	8008734 <TIM_OC6_SetConfig+0x7c>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a16      	ldr	r2, [pc, #88]	; (8008778 <TIM_OC6_SetConfig+0xc0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d007      	beq.n	8008734 <TIM_OC6_SetConfig+0x7c>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a15      	ldr	r2, [pc, #84]	; (800877c <TIM_OC6_SetConfig+0xc4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d003      	beq.n	8008734 <TIM_OC6_SetConfig+0x7c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a14      	ldr	r2, [pc, #80]	; (8008780 <TIM_OC6_SetConfig+0xc8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d109      	bne.n	8008748 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800873a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	029b      	lsls	r3, r3, #10
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	621a      	str	r2, [r3, #32]
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	40012c00 	.word	0x40012c00
 8008774:	40013400 	.word	0x40013400
 8008778:	40014000 	.word	0x40014000
 800877c:	40014400 	.word	0x40014400
 8008780:	40014800 	.word	0x40014800

08008784 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f023 0201 	bic.w	r2, r3, #1
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	4a24      	ldr	r2, [pc, #144]	; (8008840 <TIM_TI1_SetConfig+0xbc>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <TIM_TI1_SetConfig+0x56>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b8:	d00f      	beq.n	80087da <TIM_TI1_SetConfig+0x56>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4a21      	ldr	r2, [pc, #132]	; (8008844 <TIM_TI1_SetConfig+0xc0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00b      	beq.n	80087da <TIM_TI1_SetConfig+0x56>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4a20      	ldr	r2, [pc, #128]	; (8008848 <TIM_TI1_SetConfig+0xc4>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d007      	beq.n	80087da <TIM_TI1_SetConfig+0x56>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	4a1f      	ldr	r2, [pc, #124]	; (800884c <TIM_TI1_SetConfig+0xc8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d003      	beq.n	80087da <TIM_TI1_SetConfig+0x56>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4a1e      	ldr	r2, [pc, #120]	; (8008850 <TIM_TI1_SetConfig+0xcc>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d101      	bne.n	80087de <TIM_TI1_SetConfig+0x5a>
 80087da:	2301      	movs	r3, #1
 80087dc:	e000      	b.n	80087e0 <TIM_TI1_SetConfig+0x5c>
 80087de:	2300      	movs	r3, #0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d008      	beq.n	80087f6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f023 0303 	bic.w	r3, r3, #3
 80087ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	e003      	b.n	80087fe <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	b2db      	uxtb	r3, r3
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f023 030a 	bic.w	r3, r3, #10
 8008818:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f003 030a 	and.w	r3, r3, #10
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	621a      	str	r2, [r3, #32]
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40012c00 	.word	0x40012c00
 8008844:	40000400 	.word	0x40000400
 8008848:	40000800 	.word	0x40000800
 800884c:	40013400 	.word	0x40013400
 8008850:	40014000 	.word	0x40014000

08008854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	f023 0201 	bic.w	r2, r3, #1
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800887e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	011b      	lsls	r3, r3, #4
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f023 030a 	bic.w	r3, r3, #10
 8008890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4313      	orrs	r3, r2
 8008898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	621a      	str	r2, [r3, #32]
}
 80088a6:	bf00      	nop
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b087      	sub	sp, #28
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	f023 0210 	bic.w	r2, r3, #16
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	021b      	lsls	r3, r3, #8
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	031b      	lsls	r3, r3, #12
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008904:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	4313      	orrs	r3, r2
 8008912:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	621a      	str	r2, [r3, #32]
}
 8008920:	bf00      	nop
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	f023 0210 	bic.w	r2, r3, #16
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008956:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	031b      	lsls	r3, r3, #12
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008968:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	621a      	str	r2, [r3, #32]
}
 8008980:	bf00      	nop
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800898c:	b480      	push	{r7}
 800898e:	b087      	sub	sp, #28
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
 8008998:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 0303 	bic.w	r3, r3, #3
 80089b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4313      	orrs	r3, r2
 80089c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80089dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	021b      	lsls	r3, r3, #8
 80089e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	621a      	str	r2, [r3, #32]
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	031b      	lsls	r3, r3, #12
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008a56:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	031b      	lsls	r3, r3, #12
 8008a5c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b085      	sub	sp, #20
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	f043 0307 	orr.w	r3, r3, #7
 8008aa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	609a      	str	r2, [r3, #8]
}
 8008aa8:	bf00      	nop
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	021a      	lsls	r2, r3, #8
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	609a      	str	r2, [r3, #8]
}
 8008ae8:	bf00      	nop
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f003 031f 	and.w	r3, r3, #31
 8008b06:	2201      	movs	r2, #1
 8008b08:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a1a      	ldr	r2, [r3, #32]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	43db      	mvns	r3, r3
 8008b16:	401a      	ands	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a1a      	ldr	r2, [r3, #32]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f003 031f 	and.w	r3, r3, #31
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	621a      	str	r2, [r3, #32]
}
 8008b32:	bf00      	nop
 8008b34:	371c      	adds	r7, #28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
	...

08008b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d101      	bne.n	8008b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b54:	2302      	movs	r3, #2
 8008b56:	e063      	b.n	8008c20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a2b      	ldr	r2, [pc, #172]	; (8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d004      	beq.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a2a      	ldr	r2, [pc, #168]	; (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d108      	bne.n	8008b9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a1b      	ldr	r2, [pc, #108]	; (8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d018      	beq.n	8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bca:	d013      	beq.n	8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a18      	ldr	r2, [pc, #96]	; (8008c34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d00e      	beq.n	8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a17      	ldr	r2, [pc, #92]	; (8008c38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d009      	beq.n	8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a12      	ldr	r2, [pc, #72]	; (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d004      	beq.n	8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a13      	ldr	r2, [pc, #76]	; (8008c3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d10c      	bne.n	8008c0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	40012c00 	.word	0x40012c00
 8008c30:	40013400 	.word	0x40013400
 8008c34:	40000400 	.word	0x40000400
 8008c38:	40000800 	.word	0x40000800
 8008c3c:	40014000 	.word	0x40014000

08008c40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e065      	b.n	8008d28 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	041b      	lsls	r3, r3, #16
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a16      	ldr	r2, [pc, #88]	; (8008d34 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d004      	beq.n	8008cea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a14      	ldr	r2, [pc, #80]	; (8008d38 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d115      	bne.n	8008d16 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	051b      	lsls	r3, r3, #20
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	6a1b      	ldr	r3, [r3, #32]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	40012c00 	.word	0x40012c00
 8008d38:	40013400 	.word	0x40013400

08008d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e040      	b.n	8008e0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d106      	bne.n	8008da0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7fa fb26 	bl	80033ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2224      	movs	r2, #36	; 0x24
 8008da4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0201 	bic.w	r2, r2, #1
 8008db4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fb04 	bl	80093c4 <UART_SetConfig>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e022      	b.n	8008e0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fd12 	bl	80097f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689a      	ldr	r2, [r3, #8]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008df2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0201 	orr.w	r2, r2, #1
 8008e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fd99 	bl	800993c <UART_CheckIdleState>
 8008e0a:	4603      	mov	r3, r0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	; 0x28
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	4613      	mov	r3, r2
 8008e22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e28:	2b20      	cmp	r3, #32
 8008e2a:	f040 8081 	bne.w	8008f30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <HAL_UART_Transmit+0x26>
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e079      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_UART_Transmit+0x38>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e072      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2221      	movs	r2, #33	; 0x21
 8008e5e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008e60:	f7fa fce8 	bl	8003834 <HAL_GetTick>
 8008e64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	88fa      	ldrh	r2, [r7, #6]
 8008e6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	88fa      	ldrh	r2, [r7, #6]
 8008e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e7e:	d108      	bne.n	8008e92 <HAL_UART_Transmit+0x7e>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d104      	bne.n	8008e92 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	61bb      	str	r3, [r7, #24]
 8008e90:	e003      	b.n	8008e9a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e9a:	e02d      	b.n	8008ef8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2180      	movs	r1, #128	; 0x80
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 fd8d 	bl	80099c6 <UART_WaitOnFlagUntilTimeout>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e03d      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10b      	bne.n	8008ed4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	881a      	ldrh	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ec8:	b292      	uxth	r2, r2
 8008eca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	3302      	adds	r3, #2
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	e008      	b.n	8008ee6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	781a      	ldrb	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	b292      	uxth	r2, r2
 8008ede:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1cb      	bne.n	8008e9c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2140      	movs	r1, #64	; 0x40
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 fd59 	bl	80099c6 <UART_WaitOnFlagUntilTimeout>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e009      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e000      	b.n	8008f32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008f30:	2302      	movs	r3, #2
  }
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	d144      	bne.n	8008fdc <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <HAL_UART_Transmit_IT+0x22>
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e03d      	b.n	8008fde <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <HAL_UART_Transmit_IT+0x34>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e036      	b.n	8008fde <HAL_UART_Transmit_IT+0xa2>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	88fa      	ldrh	r2, [r7, #6]
 8008f82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	88fa      	ldrh	r2, [r7, #6]
 8008f8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2221      	movs	r2, #33	; 0x21
 8008f9e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa8:	d107      	bne.n	8008fba <HAL_UART_Transmit_IT+0x7e>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d103      	bne.n	8008fba <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4a0d      	ldr	r2, [pc, #52]	; (8008fec <HAL_UART_Transmit_IT+0xb0>)
 8008fb6:	665a      	str	r2, [r3, #100]	; 0x64
 8008fb8:	e002      	b.n	8008fc0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	4a0c      	ldr	r2, [pc, #48]	; (8008ff0 <HAL_UART_Transmit_IT+0xb4>)
 8008fbe:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008fd6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e000      	b.n	8008fde <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8008fdc:	2302      	movs	r3, #2
  }
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	08009cbd 	.word	0x08009cbd
 8008ff0:	08009c49 	.word	0x08009c49

08008ff4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	4613      	mov	r3, r2
 8009000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009006:	2b20      	cmp	r3, #32
 8009008:	d16c      	bne.n	80090e4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <HAL_UART_Receive_DMA+0x22>
 8009010:	88fb      	ldrh	r3, [r7, #6]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e065      	b.n	80090e6 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009020:	2b01      	cmp	r3, #1
 8009022:	d101      	bne.n	8009028 <HAL_UART_Receive_DMA+0x34>
 8009024:	2302      	movs	r3, #2
 8009026:	e05e      	b.n	80090e6 <HAL_UART_Receive_DMA+0xf2>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	88fa      	ldrh	r2, [r7, #6]
 800903a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2222      	movs	r2, #34	; 0x22
 8009048:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d02a      	beq.n	80090a8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009056:	4a26      	ldr	r2, [pc, #152]	; (80090f0 <HAL_UART_Receive_DMA+0xfc>)
 8009058:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800905e:	4a25      	ldr	r2, [pc, #148]	; (80090f4 <HAL_UART_Receive_DMA+0x100>)
 8009060:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009066:	4a24      	ldr	r2, [pc, #144]	; (80090f8 <HAL_UART_Receive_DMA+0x104>)
 8009068:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800906e:	2200      	movs	r2, #0
 8009070:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3324      	adds	r3, #36	; 0x24
 800907c:	4619      	mov	r1, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009082:	461a      	mov	r2, r3
 8009084:	88fb      	ldrh	r3, [r7, #6]
 8009086:	f7fc fb16 	bl	80056b6 <HAL_DMA_Start_IT>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2210      	movs	r2, #16
 8009094:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e01e      	b.n	80090e6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090be:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0201 	orr.w	r2, r2, #1
 80090ce:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689a      	ldr	r2, [r3, #8]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090de:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	e000      	b.n	80090e6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80090e4:	2302      	movs	r3, #2
  }
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	08009b27 	.word	0x08009b27
 80090f4:	08009b89 	.word	0x08009b89
 80090f8:	08009ba5 	.word	0x08009ba5

080090fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800911c:	69fa      	ldr	r2, [r7, #28]
 800911e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009122:	4013      	ands	r3, r2
 8009124:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d113      	bne.n	8009154 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	f003 0320 	and.w	r3, r3, #32
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00e      	beq.n	8009154 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	f003 0320 	and.w	r3, r3, #32
 800913c:	2b00      	cmp	r3, #0
 800913e:	d009      	beq.n	8009154 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 8114 	beq.w	8009372 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	4798      	blx	r3
      }
      return;
 8009152:	e10e      	b.n	8009372 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 80d6 	beq.w	8009308 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 80cb 	beq.w	8009308 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00e      	beq.n	800919a <HAL_UART_IRQHandler+0x9e>
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009182:	2b00      	cmp	r3, #0
 8009184:	d009      	beq.n	800919a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2201      	movs	r2, #1
 800918c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009192:	f043 0201 	orr.w	r2, r3, #1
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00e      	beq.n	80091c2 <HAL_UART_IRQHandler+0xc6>
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d009      	beq.n	80091c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2202      	movs	r2, #2
 80091b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ba:	f043 0204 	orr.w	r2, r3, #4
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00e      	beq.n	80091ea <HAL_UART_IRQHandler+0xee>
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2204      	movs	r2, #4
 80091dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091e2:	f043 0202 	orr.w	r2, r3, #2
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	f003 0308 	and.w	r3, r3, #8
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d013      	beq.n	800921c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	f003 0320 	and.w	r3, r3, #32
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d104      	bne.n	8009208 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009204:	2b00      	cmp	r3, #0
 8009206:	d009      	beq.n	800921c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2208      	movs	r2, #8
 800920e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009214:	f043 0208 	orr.w	r2, r3, #8
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00f      	beq.n	8009246 <HAL_UART_IRQHandler+0x14a>
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00a      	beq.n	8009246 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800923e:	f043 0220 	orr.w	r2, r3, #32
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 8093 	beq.w	8009376 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00c      	beq.n	8009274 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b00      	cmp	r3, #0
 8009262:	d007      	beq.n	8009274 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009278:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009284:	2b40      	cmp	r3, #64	; 0x40
 8009286:	d004      	beq.n	8009292 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800928e:	2b00      	cmp	r3, #0
 8009290:	d031      	beq.n	80092f6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fc27 	bl	8009ae6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a2:	2b40      	cmp	r3, #64	; 0x40
 80092a4:	d123      	bne.n	80092ee <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689a      	ldr	r2, [r3, #8]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092b4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d013      	beq.n	80092e6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c2:	4a30      	ldr	r2, [pc, #192]	; (8009384 <HAL_UART_IRQHandler+0x288>)
 80092c4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fc fa8b 	bl	80057e6 <HAL_DMA_Abort_IT>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d016      	beq.n	8009304 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e4:	e00e      	b.n	8009304 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f862 	bl	80093b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ec:	e00a      	b.n	8009304 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f85e 	bl	80093b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f4:	e006      	b.n	8009304 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f85a 	bl	80093b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009302:	e038      	b.n	8009376 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009304:	bf00      	nop
    return;
 8009306:	e036      	b.n	8009376 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00d      	beq.n	800932e <HAL_UART_IRQHandler+0x232>
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d008      	beq.n	800932e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fd1f 	bl	8009d6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800932c:	e026      	b.n	800937c <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00d      	beq.n	8009354 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800933e:	2b00      	cmp	r3, #0
 8009340:	d008      	beq.n	8009354 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009346:	2b00      	cmp	r3, #0
 8009348:	d017      	beq.n	800937a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
    }
    return;
 8009352:	e012      	b.n	800937a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00e      	beq.n	800937c <HAL_UART_IRQHandler+0x280>
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d009      	beq.n	800937c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fce5 	bl	8009d38 <UART_EndTransmit_IT>
    return;
 800936e:	bf00      	nop
 8009370:	e004      	b.n	800937c <HAL_UART_IRQHandler+0x280>
      return;
 8009372:	bf00      	nop
 8009374:	e002      	b.n	800937c <HAL_UART_IRQHandler+0x280>
    return;
 8009376:	bf00      	nop
 8009378:	e000      	b.n	800937c <HAL_UART_IRQHandler+0x280>
    return;
 800937a:	bf00      	nop
  }

}
 800937c:	3720      	adds	r7, #32
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	08009c1d 	.word	0x08009c1d

08009388 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	431a      	orrs	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	431a      	orrs	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80093f6:	f023 030c 	bic.w	r3, r3, #12
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6812      	ldr	r2, [r2, #0]
 80093fe:	6939      	ldr	r1, [r7, #16]
 8009400:	430b      	orrs	r3, r1
 8009402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	4313      	orrs	r3, r2
 8009428:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	430a      	orrs	r2, r1
 800943c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4aa9      	ldr	r2, [pc, #676]	; (80096e8 <UART_SetConfig+0x324>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d121      	bne.n	800948c <UART_SetConfig+0xc8>
 8009448:	4ba8      	ldr	r3, [pc, #672]	; (80096ec <UART_SetConfig+0x328>)
 800944a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944c:	f003 0303 	and.w	r3, r3, #3
 8009450:	2b03      	cmp	r3, #3
 8009452:	d817      	bhi.n	8009484 <UART_SetConfig+0xc0>
 8009454:	a201      	add	r2, pc, #4	; (adr r2, 800945c <UART_SetConfig+0x98>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	0800946d 	.word	0x0800946d
 8009460:	08009479 	.word	0x08009479
 8009464:	0800947f 	.word	0x0800947f
 8009468:	08009473 	.word	0x08009473
 800946c:	2301      	movs	r3, #1
 800946e:	77fb      	strb	r3, [r7, #31]
 8009470:	e0b2      	b.n	80095d8 <UART_SetConfig+0x214>
 8009472:	2302      	movs	r3, #2
 8009474:	77fb      	strb	r3, [r7, #31]
 8009476:	e0af      	b.n	80095d8 <UART_SetConfig+0x214>
 8009478:	2304      	movs	r3, #4
 800947a:	77fb      	strb	r3, [r7, #31]
 800947c:	e0ac      	b.n	80095d8 <UART_SetConfig+0x214>
 800947e:	2308      	movs	r3, #8
 8009480:	77fb      	strb	r3, [r7, #31]
 8009482:	e0a9      	b.n	80095d8 <UART_SetConfig+0x214>
 8009484:	2310      	movs	r3, #16
 8009486:	77fb      	strb	r3, [r7, #31]
 8009488:	bf00      	nop
 800948a:	e0a5      	b.n	80095d8 <UART_SetConfig+0x214>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a97      	ldr	r2, [pc, #604]	; (80096f0 <UART_SetConfig+0x32c>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d123      	bne.n	80094de <UART_SetConfig+0x11a>
 8009496:	4b95      	ldr	r3, [pc, #596]	; (80096ec <UART_SetConfig+0x328>)
 8009498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800949e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a2:	d012      	beq.n	80094ca <UART_SetConfig+0x106>
 80094a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a8:	d802      	bhi.n	80094b0 <UART_SetConfig+0xec>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <UART_SetConfig+0xfa>
 80094ae:	e012      	b.n	80094d6 <UART_SetConfig+0x112>
 80094b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094b4:	d00c      	beq.n	80094d0 <UART_SetConfig+0x10c>
 80094b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094ba:	d003      	beq.n	80094c4 <UART_SetConfig+0x100>
 80094bc:	e00b      	b.n	80094d6 <UART_SetConfig+0x112>
 80094be:	2300      	movs	r3, #0
 80094c0:	77fb      	strb	r3, [r7, #31]
 80094c2:	e089      	b.n	80095d8 <UART_SetConfig+0x214>
 80094c4:	2302      	movs	r3, #2
 80094c6:	77fb      	strb	r3, [r7, #31]
 80094c8:	e086      	b.n	80095d8 <UART_SetConfig+0x214>
 80094ca:	2304      	movs	r3, #4
 80094cc:	77fb      	strb	r3, [r7, #31]
 80094ce:	e083      	b.n	80095d8 <UART_SetConfig+0x214>
 80094d0:	2308      	movs	r3, #8
 80094d2:	77fb      	strb	r3, [r7, #31]
 80094d4:	e080      	b.n	80095d8 <UART_SetConfig+0x214>
 80094d6:	2310      	movs	r3, #16
 80094d8:	77fb      	strb	r3, [r7, #31]
 80094da:	bf00      	nop
 80094dc:	e07c      	b.n	80095d8 <UART_SetConfig+0x214>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a84      	ldr	r2, [pc, #528]	; (80096f4 <UART_SetConfig+0x330>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d123      	bne.n	8009530 <UART_SetConfig+0x16c>
 80094e8:	4b80      	ldr	r3, [pc, #512]	; (80096ec <UART_SetConfig+0x328>)
 80094ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80094f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094f4:	d012      	beq.n	800951c <UART_SetConfig+0x158>
 80094f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094fa:	d802      	bhi.n	8009502 <UART_SetConfig+0x13e>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d007      	beq.n	8009510 <UART_SetConfig+0x14c>
 8009500:	e012      	b.n	8009528 <UART_SetConfig+0x164>
 8009502:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009506:	d00c      	beq.n	8009522 <UART_SetConfig+0x15e>
 8009508:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800950c:	d003      	beq.n	8009516 <UART_SetConfig+0x152>
 800950e:	e00b      	b.n	8009528 <UART_SetConfig+0x164>
 8009510:	2300      	movs	r3, #0
 8009512:	77fb      	strb	r3, [r7, #31]
 8009514:	e060      	b.n	80095d8 <UART_SetConfig+0x214>
 8009516:	2302      	movs	r3, #2
 8009518:	77fb      	strb	r3, [r7, #31]
 800951a:	e05d      	b.n	80095d8 <UART_SetConfig+0x214>
 800951c:	2304      	movs	r3, #4
 800951e:	77fb      	strb	r3, [r7, #31]
 8009520:	e05a      	b.n	80095d8 <UART_SetConfig+0x214>
 8009522:	2308      	movs	r3, #8
 8009524:	77fb      	strb	r3, [r7, #31]
 8009526:	e057      	b.n	80095d8 <UART_SetConfig+0x214>
 8009528:	2310      	movs	r3, #16
 800952a:	77fb      	strb	r3, [r7, #31]
 800952c:	bf00      	nop
 800952e:	e053      	b.n	80095d8 <UART_SetConfig+0x214>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a70      	ldr	r2, [pc, #448]	; (80096f8 <UART_SetConfig+0x334>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d123      	bne.n	8009582 <UART_SetConfig+0x1be>
 800953a:	4b6c      	ldr	r3, [pc, #432]	; (80096ec <UART_SetConfig+0x328>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009546:	d012      	beq.n	800956e <UART_SetConfig+0x1aa>
 8009548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800954c:	d802      	bhi.n	8009554 <UART_SetConfig+0x190>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d007      	beq.n	8009562 <UART_SetConfig+0x19e>
 8009552:	e012      	b.n	800957a <UART_SetConfig+0x1b6>
 8009554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009558:	d00c      	beq.n	8009574 <UART_SetConfig+0x1b0>
 800955a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800955e:	d003      	beq.n	8009568 <UART_SetConfig+0x1a4>
 8009560:	e00b      	b.n	800957a <UART_SetConfig+0x1b6>
 8009562:	2300      	movs	r3, #0
 8009564:	77fb      	strb	r3, [r7, #31]
 8009566:	e037      	b.n	80095d8 <UART_SetConfig+0x214>
 8009568:	2302      	movs	r3, #2
 800956a:	77fb      	strb	r3, [r7, #31]
 800956c:	e034      	b.n	80095d8 <UART_SetConfig+0x214>
 800956e:	2304      	movs	r3, #4
 8009570:	77fb      	strb	r3, [r7, #31]
 8009572:	e031      	b.n	80095d8 <UART_SetConfig+0x214>
 8009574:	2308      	movs	r3, #8
 8009576:	77fb      	strb	r3, [r7, #31]
 8009578:	e02e      	b.n	80095d8 <UART_SetConfig+0x214>
 800957a:	2310      	movs	r3, #16
 800957c:	77fb      	strb	r3, [r7, #31]
 800957e:	bf00      	nop
 8009580:	e02a      	b.n	80095d8 <UART_SetConfig+0x214>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a5d      	ldr	r2, [pc, #372]	; (80096fc <UART_SetConfig+0x338>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d123      	bne.n	80095d4 <UART_SetConfig+0x210>
 800958c:	4b57      	ldr	r3, [pc, #348]	; (80096ec <UART_SetConfig+0x328>)
 800958e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009590:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009598:	d012      	beq.n	80095c0 <UART_SetConfig+0x1fc>
 800959a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800959e:	d802      	bhi.n	80095a6 <UART_SetConfig+0x1e2>
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d007      	beq.n	80095b4 <UART_SetConfig+0x1f0>
 80095a4:	e012      	b.n	80095cc <UART_SetConfig+0x208>
 80095a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095aa:	d00c      	beq.n	80095c6 <UART_SetConfig+0x202>
 80095ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80095b0:	d003      	beq.n	80095ba <UART_SetConfig+0x1f6>
 80095b2:	e00b      	b.n	80095cc <UART_SetConfig+0x208>
 80095b4:	2300      	movs	r3, #0
 80095b6:	77fb      	strb	r3, [r7, #31]
 80095b8:	e00e      	b.n	80095d8 <UART_SetConfig+0x214>
 80095ba:	2302      	movs	r3, #2
 80095bc:	77fb      	strb	r3, [r7, #31]
 80095be:	e00b      	b.n	80095d8 <UART_SetConfig+0x214>
 80095c0:	2304      	movs	r3, #4
 80095c2:	77fb      	strb	r3, [r7, #31]
 80095c4:	e008      	b.n	80095d8 <UART_SetConfig+0x214>
 80095c6:	2308      	movs	r3, #8
 80095c8:	77fb      	strb	r3, [r7, #31]
 80095ca:	e005      	b.n	80095d8 <UART_SetConfig+0x214>
 80095cc:	2310      	movs	r3, #16
 80095ce:	77fb      	strb	r3, [r7, #31]
 80095d0:	bf00      	nop
 80095d2:	e001      	b.n	80095d8 <UART_SetConfig+0x214>
 80095d4:	2310      	movs	r3, #16
 80095d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095e0:	f040 808e 	bne.w	8009700 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80095e4:	7ffb      	ldrb	r3, [r7, #31]
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	d85e      	bhi.n	80096a8 <UART_SetConfig+0x2e4>
 80095ea:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <UART_SetConfig+0x22c>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	08009615 	.word	0x08009615
 80095f4:	08009635 	.word	0x08009635
 80095f8:	08009655 	.word	0x08009655
 80095fc:	080096a9 	.word	0x080096a9
 8009600:	08009671 	.word	0x08009671
 8009604:	080096a9 	.word	0x080096a9
 8009608:	080096a9 	.word	0x080096a9
 800960c:	080096a9 	.word	0x080096a9
 8009610:	08009691 	.word	0x08009691
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009614:	f7fd fcf2 	bl	8006ffc <HAL_RCC_GetPCLK1Freq>
 8009618:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	005a      	lsls	r2, r3, #1
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	085b      	lsrs	r3, r3, #1
 8009624:	441a      	add	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	fbb2 f3f3 	udiv	r3, r2, r3
 800962e:	b29b      	uxth	r3, r3
 8009630:	61bb      	str	r3, [r7, #24]
        break;
 8009632:	e03c      	b.n	80096ae <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009634:	f7fd fd04 	bl	8007040 <HAL_RCC_GetPCLK2Freq>
 8009638:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	005a      	lsls	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	085b      	lsrs	r3, r3, #1
 8009644:	441a      	add	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	fbb2 f3f3 	udiv	r3, r2, r3
 800964e:	b29b      	uxth	r3, r3
 8009650:	61bb      	str	r3, [r7, #24]
        break;
 8009652:	e02c      	b.n	80096ae <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	085b      	lsrs	r3, r3, #1
 800965a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800965e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	6852      	ldr	r2, [r2, #4]
 8009666:	fbb3 f3f2 	udiv	r3, r3, r2
 800966a:	b29b      	uxth	r3, r3
 800966c:	61bb      	str	r3, [r7, #24]
        break;
 800966e:	e01e      	b.n	80096ae <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009670:	f7fd fc4c 	bl	8006f0c <HAL_RCC_GetSysClockFreq>
 8009674:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	005a      	lsls	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	085b      	lsrs	r3, r3, #1
 8009680:	441a      	add	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	fbb2 f3f3 	udiv	r3, r2, r3
 800968a:	b29b      	uxth	r3, r3
 800968c:	61bb      	str	r3, [r7, #24]
        break;
 800968e:	e00e      	b.n	80096ae <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	085b      	lsrs	r3, r3, #1
 8009696:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	61bb      	str	r3, [r7, #24]
        break;
 80096a6:	e002      	b.n	80096ae <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	75fb      	strb	r3, [r7, #23]
        break;
 80096ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	2b0f      	cmp	r3, #15
 80096b2:	d916      	bls.n	80096e2 <UART_SetConfig+0x31e>
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ba:	d212      	bcs.n	80096e2 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	f023 030f 	bic.w	r3, r3, #15
 80096c4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	085b      	lsrs	r3, r3, #1
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	f003 0307 	and.w	r3, r3, #7
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	897b      	ldrh	r3, [r7, #10]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	897a      	ldrh	r2, [r7, #10]
 80096de:	60da      	str	r2, [r3, #12]
 80096e0:	e07e      	b.n	80097e0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	75fb      	strb	r3, [r7, #23]
 80096e6:	e07b      	b.n	80097e0 <UART_SetConfig+0x41c>
 80096e8:	40013800 	.word	0x40013800
 80096ec:	40021000 	.word	0x40021000
 80096f0:	40004400 	.word	0x40004400
 80096f4:	40004800 	.word	0x40004800
 80096f8:	40004c00 	.word	0x40004c00
 80096fc:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8009700:	7ffb      	ldrb	r3, [r7, #31]
 8009702:	2b08      	cmp	r3, #8
 8009704:	d85b      	bhi.n	80097be <UART_SetConfig+0x3fa>
 8009706:	a201      	add	r2, pc, #4	; (adr r2, 800970c <UART_SetConfig+0x348>)
 8009708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970c:	08009731 	.word	0x08009731
 8009710:	0800974f 	.word	0x0800974f
 8009714:	0800976d 	.word	0x0800976d
 8009718:	080097bf 	.word	0x080097bf
 800971c:	08009789 	.word	0x08009789
 8009720:	080097bf 	.word	0x080097bf
 8009724:	080097bf 	.word	0x080097bf
 8009728:	080097bf 	.word	0x080097bf
 800972c:	080097a7 	.word	0x080097a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009730:	f7fd fc64 	bl	8006ffc <HAL_RCC_GetPCLK1Freq>
 8009734:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	085a      	lsrs	r2, r3, #1
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	441a      	add	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	fbb2 f3f3 	udiv	r3, r2, r3
 8009748:	b29b      	uxth	r3, r3
 800974a:	61bb      	str	r3, [r7, #24]
        break;
 800974c:	e03a      	b.n	80097c4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800974e:	f7fd fc77 	bl	8007040 <HAL_RCC_GetPCLK2Freq>
 8009752:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	085a      	lsrs	r2, r3, #1
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	441a      	add	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	fbb2 f3f3 	udiv	r3, r2, r3
 8009766:	b29b      	uxth	r3, r3
 8009768:	61bb      	str	r3, [r7, #24]
        break;
 800976a:	e02b      	b.n	80097c4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	085b      	lsrs	r3, r3, #1
 8009772:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8009776:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	6852      	ldr	r2, [r2, #4]
 800977e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009782:	b29b      	uxth	r3, r3
 8009784:	61bb      	str	r3, [r7, #24]
        break;
 8009786:	e01d      	b.n	80097c4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009788:	f7fd fbc0 	bl	8006f0c <HAL_RCC_GetSysClockFreq>
 800978c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	085a      	lsrs	r2, r3, #1
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	441a      	add	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	61bb      	str	r3, [r7, #24]
        break;
 80097a4:	e00e      	b.n	80097c4 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	085b      	lsrs	r3, r3, #1
 80097ac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	61bb      	str	r3, [r7, #24]
        break;
 80097bc:	e002      	b.n	80097c4 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	75fb      	strb	r3, [r7, #23]
        break;
 80097c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b0f      	cmp	r3, #15
 80097c8:	d908      	bls.n	80097dc <UART_SetConfig+0x418>
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097d0:	d204      	bcs.n	80097dc <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	60da      	str	r2, [r3, #12]
 80097da:	e001      	b.n	80097e0 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3720      	adds	r7, #32
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop

080097f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	f003 0308 	and.w	r3, r3, #8
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01a      	beq.n	800990e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098f6:	d10a      	bne.n	800990e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	430a      	orrs	r2, r1
 800992e:	605a      	str	r2, [r3, #4]
  }
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af02      	add	r7, sp, #8
 8009942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800994a:	f7f9 ff73 	bl	8003834 <HAL_GetTick>
 800994e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0308 	and.w	r3, r3, #8
 800995a:	2b08      	cmp	r3, #8
 800995c:	d10e      	bne.n	800997c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800995e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f82a 	bl	80099c6 <UART_WaitOnFlagUntilTimeout>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009978:	2303      	movs	r3, #3
 800997a:	e020      	b.n	80099be <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0304 	and.w	r3, r3, #4
 8009986:	2b04      	cmp	r3, #4
 8009988:	d10e      	bne.n	80099a8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800998a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f814 	bl	80099c6 <UART_WaitOnFlagUntilTimeout>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e00a      	b.n	80099be <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2220      	movs	r2, #32
 80099ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2220      	movs	r2, #32
 80099b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b084      	sub	sp, #16
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	603b      	str	r3, [r7, #0]
 80099d2:	4613      	mov	r3, r2
 80099d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099d6:	e05d      	b.n	8009a94 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099de:	d059      	beq.n	8009a94 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099e0:	f7f9 ff28 	bl	8003834 <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d302      	bcc.n	80099f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d11b      	bne.n	8009a2e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0201 	bic.w	r2, r2, #1
 8009a14:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e042      	b.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d02b      	beq.n	8009a94 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a4a:	d123      	bne.n	8009a94 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a54:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0201 	bic.w	r2, r2, #1
 8009a74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2220      	movs	r2, #32
 8009a7a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2220      	movs	r2, #32
 8009a86:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009a90:	2303      	movs	r3, #3
 8009a92:	e00f      	b.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	69da      	ldr	r2, [r3, #28]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	bf0c      	ite	eq
 8009aa4:	2301      	moveq	r3, #1
 8009aa6:	2300      	movne	r3, #0
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	461a      	mov	r2, r3
 8009aac:	79fb      	ldrb	r3, [r7, #7]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d092      	beq.n	80099d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009ad2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009ada:	bf00      	nop
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009afc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689a      	ldr	r2, [r3, #8]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0201 	bic.w	r2, r2, #1
 8009b0c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2220      	movs	r2, #32
 8009b12:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	2b20      	cmp	r3, #32
 8009b3a:	d01e      	beq.n	8009b7a <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b52:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0201 	bic.w	r2, r2, #1
 8009b62:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689a      	ldr	r2, [r3, #8]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b72:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2220      	movs	r2, #32
 8009b78:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f7f8 fcf2 	bl	8002564 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff fc00 	bl	800939c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bb6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bbc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc8:	2b80      	cmp	r3, #128	; 0x80
 8009bca:	d109      	bne.n	8009be0 <UART_DMAError+0x3c>
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2b21      	cmp	r3, #33	; 0x21
 8009bd0:	d106      	bne.n	8009be0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009bda:	6978      	ldr	r0, [r7, #20]
 8009bdc:	f7ff ff6e 	bl	8009abc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bea:	2b40      	cmp	r3, #64	; 0x40
 8009bec:	d109      	bne.n	8009c02 <UART_DMAError+0x5e>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b22      	cmp	r3, #34	; 0x22
 8009bf2:	d106      	bne.n	8009c02 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009bfc:	6978      	ldr	r0, [r7, #20]
 8009bfe:	f7ff ff72 	bl	8009ae6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c06:	f043 0210 	orr.w	r2, r3, #16
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c0e:	6978      	ldr	r0, [r7, #20]
 8009c10:	f7ff fbce 	bl	80093b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c14:	bf00      	nop
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7ff fbb8 	bl	80093b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c40:	bf00      	nop
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c54:	2b21      	cmp	r3, #33	; 0x21
 8009c56:	d12b      	bne.n	8009cb0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d110      	bne.n	8009c86 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c72:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c82:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009c84:	e014      	b.n	8009cb0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c8a:	781a      	ldrb	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	b292      	uxth	r2, r2
 8009c92:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cc8:	2b21      	cmp	r3, #33	; 0x21
 8009cca:	d12f      	bne.n	8009d2c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d110      	bne.n	8009cfa <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ce6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cf6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009cf8:	e018      	b.n	8009d2c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	881a      	ldrh	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d0c:	b292      	uxth	r2, r2
 8009d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d14:	1c9a      	adds	r2, r3, #2
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009d2c:	bf00      	nop
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d4e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2220      	movs	r2, #32
 8009d54:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff fb13 	bl	8009388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d72:	bf00      	nop
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <atoi>:
 8009d7e:	220a      	movs	r2, #10
 8009d80:	2100      	movs	r1, #0
 8009d82:	f001 bba1 	b.w	800b4c8 <strtol>
	...

08009d88 <__errno>:
 8009d88:	4b01      	ldr	r3, [pc, #4]	; (8009d90 <__errno+0x8>)
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	20000028 	.word	0x20000028

08009d94 <__libc_init_array>:
 8009d94:	b570      	push	{r4, r5, r6, lr}
 8009d96:	4e0d      	ldr	r6, [pc, #52]	; (8009dcc <__libc_init_array+0x38>)
 8009d98:	4c0d      	ldr	r4, [pc, #52]	; (8009dd0 <__libc_init_array+0x3c>)
 8009d9a:	1ba4      	subs	r4, r4, r6
 8009d9c:	10a4      	asrs	r4, r4, #2
 8009d9e:	2500      	movs	r5, #0
 8009da0:	42a5      	cmp	r5, r4
 8009da2:	d109      	bne.n	8009db8 <__libc_init_array+0x24>
 8009da4:	4e0b      	ldr	r6, [pc, #44]	; (8009dd4 <__libc_init_array+0x40>)
 8009da6:	4c0c      	ldr	r4, [pc, #48]	; (8009dd8 <__libc_init_array+0x44>)
 8009da8:	f003 fc5e 	bl	800d668 <_init>
 8009dac:	1ba4      	subs	r4, r4, r6
 8009dae:	10a4      	asrs	r4, r4, #2
 8009db0:	2500      	movs	r5, #0
 8009db2:	42a5      	cmp	r5, r4
 8009db4:	d105      	bne.n	8009dc2 <__libc_init_array+0x2e>
 8009db6:	bd70      	pop	{r4, r5, r6, pc}
 8009db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009dbc:	4798      	blx	r3
 8009dbe:	3501      	adds	r5, #1
 8009dc0:	e7ee      	b.n	8009da0 <__libc_init_array+0xc>
 8009dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009dc6:	4798      	blx	r3
 8009dc8:	3501      	adds	r5, #1
 8009dca:	e7f2      	b.n	8009db2 <__libc_init_array+0x1e>
 8009dcc:	0800da60 	.word	0x0800da60
 8009dd0:	0800da60 	.word	0x0800da60
 8009dd4:	0800da60 	.word	0x0800da60
 8009dd8:	0800da64 	.word	0x0800da64

08009ddc <memcmp>:
 8009ddc:	b530      	push	{r4, r5, lr}
 8009dde:	2400      	movs	r4, #0
 8009de0:	42a2      	cmp	r2, r4
 8009de2:	d101      	bne.n	8009de8 <memcmp+0xc>
 8009de4:	2000      	movs	r0, #0
 8009de6:	e007      	b.n	8009df8 <memcmp+0x1c>
 8009de8:	5d03      	ldrb	r3, [r0, r4]
 8009dea:	3401      	adds	r4, #1
 8009dec:	190d      	adds	r5, r1, r4
 8009dee:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009df2:	42ab      	cmp	r3, r5
 8009df4:	d0f4      	beq.n	8009de0 <memcmp+0x4>
 8009df6:	1b58      	subs	r0, r3, r5
 8009df8:	bd30      	pop	{r4, r5, pc}

08009dfa <memset>:
 8009dfa:	4402      	add	r2, r0
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d100      	bne.n	8009e04 <memset+0xa>
 8009e02:	4770      	bx	lr
 8009e04:	f803 1b01 	strb.w	r1, [r3], #1
 8009e08:	e7f9      	b.n	8009dfe <memset+0x4>

08009e0a <__cvt>:
 8009e0a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e0e:	ec55 4b10 	vmov	r4, r5, d0
 8009e12:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009e14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e18:	2d00      	cmp	r5, #0
 8009e1a:	460e      	mov	r6, r1
 8009e1c:	4691      	mov	r9, r2
 8009e1e:	4619      	mov	r1, r3
 8009e20:	bfb8      	it	lt
 8009e22:	4622      	movlt	r2, r4
 8009e24:	462b      	mov	r3, r5
 8009e26:	f027 0720 	bic.w	r7, r7, #32
 8009e2a:	bfbb      	ittet	lt
 8009e2c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e30:	461d      	movlt	r5, r3
 8009e32:	2300      	movge	r3, #0
 8009e34:	232d      	movlt	r3, #45	; 0x2d
 8009e36:	bfb8      	it	lt
 8009e38:	4614      	movlt	r4, r2
 8009e3a:	2f46      	cmp	r7, #70	; 0x46
 8009e3c:	700b      	strb	r3, [r1, #0]
 8009e3e:	d004      	beq.n	8009e4a <__cvt+0x40>
 8009e40:	2f45      	cmp	r7, #69	; 0x45
 8009e42:	d100      	bne.n	8009e46 <__cvt+0x3c>
 8009e44:	3601      	adds	r6, #1
 8009e46:	2102      	movs	r1, #2
 8009e48:	e000      	b.n	8009e4c <__cvt+0x42>
 8009e4a:	2103      	movs	r1, #3
 8009e4c:	ab03      	add	r3, sp, #12
 8009e4e:	9301      	str	r3, [sp, #4]
 8009e50:	ab02      	add	r3, sp, #8
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	4632      	mov	r2, r6
 8009e56:	4653      	mov	r3, sl
 8009e58:	ec45 4b10 	vmov	d0, r4, r5
 8009e5c:	f001 fc68 	bl	800b730 <_dtoa_r>
 8009e60:	2f47      	cmp	r7, #71	; 0x47
 8009e62:	4680      	mov	r8, r0
 8009e64:	d102      	bne.n	8009e6c <__cvt+0x62>
 8009e66:	f019 0f01 	tst.w	r9, #1
 8009e6a:	d026      	beq.n	8009eba <__cvt+0xb0>
 8009e6c:	2f46      	cmp	r7, #70	; 0x46
 8009e6e:	eb08 0906 	add.w	r9, r8, r6
 8009e72:	d111      	bne.n	8009e98 <__cvt+0x8e>
 8009e74:	f898 3000 	ldrb.w	r3, [r8]
 8009e78:	2b30      	cmp	r3, #48	; 0x30
 8009e7a:	d10a      	bne.n	8009e92 <__cvt+0x88>
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2300      	movs	r3, #0
 8009e80:	4620      	mov	r0, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	f7f6 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e88:	b918      	cbnz	r0, 8009e92 <__cvt+0x88>
 8009e8a:	f1c6 0601 	rsb	r6, r6, #1
 8009e8e:	f8ca 6000 	str.w	r6, [sl]
 8009e92:	f8da 3000 	ldr.w	r3, [sl]
 8009e96:	4499      	add	r9, r3
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	f7f6 fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ea4:	b938      	cbnz	r0, 8009eb6 <__cvt+0xac>
 8009ea6:	2230      	movs	r2, #48	; 0x30
 8009ea8:	9b03      	ldr	r3, [sp, #12]
 8009eaa:	454b      	cmp	r3, r9
 8009eac:	d205      	bcs.n	8009eba <__cvt+0xb0>
 8009eae:	1c59      	adds	r1, r3, #1
 8009eb0:	9103      	str	r1, [sp, #12]
 8009eb2:	701a      	strb	r2, [r3, #0]
 8009eb4:	e7f8      	b.n	8009ea8 <__cvt+0x9e>
 8009eb6:	f8cd 900c 	str.w	r9, [sp, #12]
 8009eba:	9b03      	ldr	r3, [sp, #12]
 8009ebc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ebe:	eba3 0308 	sub.w	r3, r3, r8
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	6013      	str	r3, [r2, #0]
 8009ec6:	b004      	add	sp, #16
 8009ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009ecc <__exponent>:
 8009ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ece:	2900      	cmp	r1, #0
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	bfba      	itte	lt
 8009ed4:	4249      	neglt	r1, r1
 8009ed6:	232d      	movlt	r3, #45	; 0x2d
 8009ed8:	232b      	movge	r3, #43	; 0x2b
 8009eda:	2909      	cmp	r1, #9
 8009edc:	f804 2b02 	strb.w	r2, [r4], #2
 8009ee0:	7043      	strb	r3, [r0, #1]
 8009ee2:	dd20      	ble.n	8009f26 <__exponent+0x5a>
 8009ee4:	f10d 0307 	add.w	r3, sp, #7
 8009ee8:	461f      	mov	r7, r3
 8009eea:	260a      	movs	r6, #10
 8009eec:	fb91 f5f6 	sdiv	r5, r1, r6
 8009ef0:	fb06 1115 	mls	r1, r6, r5, r1
 8009ef4:	3130      	adds	r1, #48	; 0x30
 8009ef6:	2d09      	cmp	r5, #9
 8009ef8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009efc:	f103 32ff 	add.w	r2, r3, #4294967295
 8009f00:	4629      	mov	r1, r5
 8009f02:	dc09      	bgt.n	8009f18 <__exponent+0x4c>
 8009f04:	3130      	adds	r1, #48	; 0x30
 8009f06:	3b02      	subs	r3, #2
 8009f08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f0c:	42bb      	cmp	r3, r7
 8009f0e:	4622      	mov	r2, r4
 8009f10:	d304      	bcc.n	8009f1c <__exponent+0x50>
 8009f12:	1a10      	subs	r0, r2, r0
 8009f14:	b003      	add	sp, #12
 8009f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f18:	4613      	mov	r3, r2
 8009f1a:	e7e7      	b.n	8009eec <__exponent+0x20>
 8009f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f20:	f804 2b01 	strb.w	r2, [r4], #1
 8009f24:	e7f2      	b.n	8009f0c <__exponent+0x40>
 8009f26:	2330      	movs	r3, #48	; 0x30
 8009f28:	4419      	add	r1, r3
 8009f2a:	7083      	strb	r3, [r0, #2]
 8009f2c:	1d02      	adds	r2, r0, #4
 8009f2e:	70c1      	strb	r1, [r0, #3]
 8009f30:	e7ef      	b.n	8009f12 <__exponent+0x46>
	...

08009f34 <_printf_float>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	b08d      	sub	sp, #52	; 0x34
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009f40:	4616      	mov	r6, r2
 8009f42:	461f      	mov	r7, r3
 8009f44:	4605      	mov	r5, r0
 8009f46:	f002 fcd7 	bl	800c8f8 <_localeconv_r>
 8009f4a:	6803      	ldr	r3, [r0, #0]
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7f6 f93e 	bl	80001d0 <strlen>
 8009f54:	2300      	movs	r3, #0
 8009f56:	930a      	str	r3, [sp, #40]	; 0x28
 8009f58:	f8d8 3000 	ldr.w	r3, [r8]
 8009f5c:	9005      	str	r0, [sp, #20]
 8009f5e:	3307      	adds	r3, #7
 8009f60:	f023 0307 	bic.w	r3, r3, #7
 8009f64:	f103 0208 	add.w	r2, r3, #8
 8009f68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f6c:	f8d4 b000 	ldr.w	fp, [r4]
 8009f70:	f8c8 2000 	str.w	r2, [r8]
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f7c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009f80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f84:	9307      	str	r3, [sp, #28]
 8009f86:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8e:	4ba7      	ldr	r3, [pc, #668]	; (800a22c <_printf_float+0x2f8>)
 8009f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f94:	f7f6 fdca 	bl	8000b2c <__aeabi_dcmpun>
 8009f98:	bb70      	cbnz	r0, 8009ff8 <_printf_float+0xc4>
 8009f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f9e:	4ba3      	ldr	r3, [pc, #652]	; (800a22c <_printf_float+0x2f8>)
 8009fa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fa4:	f7f6 fda4 	bl	8000af0 <__aeabi_dcmple>
 8009fa8:	bb30      	cbnz	r0, 8009ff8 <_printf_float+0xc4>
 8009faa:	2200      	movs	r2, #0
 8009fac:	2300      	movs	r3, #0
 8009fae:	4640      	mov	r0, r8
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	f7f6 fd93 	bl	8000adc <__aeabi_dcmplt>
 8009fb6:	b110      	cbz	r0, 8009fbe <_printf_float+0x8a>
 8009fb8:	232d      	movs	r3, #45	; 0x2d
 8009fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fbe:	4a9c      	ldr	r2, [pc, #624]	; (800a230 <_printf_float+0x2fc>)
 8009fc0:	4b9c      	ldr	r3, [pc, #624]	; (800a234 <_printf_float+0x300>)
 8009fc2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009fc6:	bf8c      	ite	hi
 8009fc8:	4690      	movhi	r8, r2
 8009fca:	4698      	movls	r8, r3
 8009fcc:	2303      	movs	r3, #3
 8009fce:	f02b 0204 	bic.w	r2, fp, #4
 8009fd2:	6123      	str	r3, [r4, #16]
 8009fd4:	6022      	str	r2, [r4, #0]
 8009fd6:	f04f 0900 	mov.w	r9, #0
 8009fda:	9700      	str	r7, [sp, #0]
 8009fdc:	4633      	mov	r3, r6
 8009fde:	aa0b      	add	r2, sp, #44	; 0x2c
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f000 f9e6 	bl	800a3b4 <_printf_common>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	f040 808d 	bne.w	800a108 <_printf_float+0x1d4>
 8009fee:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff2:	b00d      	add	sp, #52	; 0x34
 8009ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	464b      	mov	r3, r9
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	4649      	mov	r1, r9
 800a000:	f7f6 fd94 	bl	8000b2c <__aeabi_dcmpun>
 800a004:	b110      	cbz	r0, 800a00c <_printf_float+0xd8>
 800a006:	4a8c      	ldr	r2, [pc, #560]	; (800a238 <_printf_float+0x304>)
 800a008:	4b8c      	ldr	r3, [pc, #560]	; (800a23c <_printf_float+0x308>)
 800a00a:	e7da      	b.n	8009fc2 <_printf_float+0x8e>
 800a00c:	6861      	ldr	r1, [r4, #4]
 800a00e:	1c4b      	adds	r3, r1, #1
 800a010:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a014:	a80a      	add	r0, sp, #40	; 0x28
 800a016:	d13e      	bne.n	800a096 <_printf_float+0x162>
 800a018:	2306      	movs	r3, #6
 800a01a:	6063      	str	r3, [r4, #4]
 800a01c:	2300      	movs	r3, #0
 800a01e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a022:	ab09      	add	r3, sp, #36	; 0x24
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	ec49 8b10 	vmov	d0, r8, r9
 800a02a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a02e:	6022      	str	r2, [r4, #0]
 800a030:	f8cd a004 	str.w	sl, [sp, #4]
 800a034:	6861      	ldr	r1, [r4, #4]
 800a036:	4628      	mov	r0, r5
 800a038:	f7ff fee7 	bl	8009e0a <__cvt>
 800a03c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a040:	2b47      	cmp	r3, #71	; 0x47
 800a042:	4680      	mov	r8, r0
 800a044:	d109      	bne.n	800a05a <_printf_float+0x126>
 800a046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a048:	1cd8      	adds	r0, r3, #3
 800a04a:	db02      	blt.n	800a052 <_printf_float+0x11e>
 800a04c:	6862      	ldr	r2, [r4, #4]
 800a04e:	4293      	cmp	r3, r2
 800a050:	dd47      	ble.n	800a0e2 <_printf_float+0x1ae>
 800a052:	f1aa 0a02 	sub.w	sl, sl, #2
 800a056:	fa5f fa8a 	uxtb.w	sl, sl
 800a05a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a05e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a060:	d824      	bhi.n	800a0ac <_printf_float+0x178>
 800a062:	3901      	subs	r1, #1
 800a064:	4652      	mov	r2, sl
 800a066:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a06a:	9109      	str	r1, [sp, #36]	; 0x24
 800a06c:	f7ff ff2e 	bl	8009ecc <__exponent>
 800a070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a072:	1813      	adds	r3, r2, r0
 800a074:	2a01      	cmp	r2, #1
 800a076:	4681      	mov	r9, r0
 800a078:	6123      	str	r3, [r4, #16]
 800a07a:	dc02      	bgt.n	800a082 <_printf_float+0x14e>
 800a07c:	6822      	ldr	r2, [r4, #0]
 800a07e:	07d1      	lsls	r1, r2, #31
 800a080:	d501      	bpl.n	800a086 <_printf_float+0x152>
 800a082:	3301      	adds	r3, #1
 800a084:	6123      	str	r3, [r4, #16]
 800a086:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0a5      	beq.n	8009fda <_printf_float+0xa6>
 800a08e:	232d      	movs	r3, #45	; 0x2d
 800a090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a094:	e7a1      	b.n	8009fda <_printf_float+0xa6>
 800a096:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a09a:	f000 8177 	beq.w	800a38c <_printf_float+0x458>
 800a09e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a0a2:	d1bb      	bne.n	800a01c <_printf_float+0xe8>
 800a0a4:	2900      	cmp	r1, #0
 800a0a6:	d1b9      	bne.n	800a01c <_printf_float+0xe8>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e7b6      	b.n	800a01a <_printf_float+0xe6>
 800a0ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a0b0:	d119      	bne.n	800a0e6 <_printf_float+0x1b2>
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	6863      	ldr	r3, [r4, #4]
 800a0b6:	dd0c      	ble.n	800a0d2 <_printf_float+0x19e>
 800a0b8:	6121      	str	r1, [r4, #16]
 800a0ba:	b913      	cbnz	r3, 800a0c2 <_printf_float+0x18e>
 800a0bc:	6822      	ldr	r2, [r4, #0]
 800a0be:	07d2      	lsls	r2, r2, #31
 800a0c0:	d502      	bpl.n	800a0c8 <_printf_float+0x194>
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	440b      	add	r3, r1
 800a0c6:	6123      	str	r3, [r4, #16]
 800a0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ca:	65a3      	str	r3, [r4, #88]	; 0x58
 800a0cc:	f04f 0900 	mov.w	r9, #0
 800a0d0:	e7d9      	b.n	800a086 <_printf_float+0x152>
 800a0d2:	b913      	cbnz	r3, 800a0da <_printf_float+0x1a6>
 800a0d4:	6822      	ldr	r2, [r4, #0]
 800a0d6:	07d0      	lsls	r0, r2, #31
 800a0d8:	d501      	bpl.n	800a0de <_printf_float+0x1aa>
 800a0da:	3302      	adds	r3, #2
 800a0dc:	e7f3      	b.n	800a0c6 <_printf_float+0x192>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e7f1      	b.n	800a0c6 <_printf_float+0x192>
 800a0e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a0e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	db05      	blt.n	800a0fa <_printf_float+0x1c6>
 800a0ee:	6822      	ldr	r2, [r4, #0]
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	07d1      	lsls	r1, r2, #31
 800a0f4:	d5e8      	bpl.n	800a0c8 <_printf_float+0x194>
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	e7e5      	b.n	800a0c6 <_printf_float+0x192>
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bfd4      	ite	le
 800a0fe:	f1c3 0302 	rsble	r3, r3, #2
 800a102:	2301      	movgt	r3, #1
 800a104:	4413      	add	r3, r2
 800a106:	e7de      	b.n	800a0c6 <_printf_float+0x192>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	055a      	lsls	r2, r3, #21
 800a10c:	d407      	bmi.n	800a11e <_printf_float+0x1ea>
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	4642      	mov	r2, r8
 800a112:	4631      	mov	r1, r6
 800a114:	4628      	mov	r0, r5
 800a116:	47b8      	blx	r7
 800a118:	3001      	adds	r0, #1
 800a11a:	d12b      	bne.n	800a174 <_printf_float+0x240>
 800a11c:	e767      	b.n	8009fee <_printf_float+0xba>
 800a11e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a122:	f240 80dc 	bls.w	800a2de <_printf_float+0x3aa>
 800a126:	2200      	movs	r2, #0
 800a128:	2300      	movs	r3, #0
 800a12a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a12e:	f7f6 fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a132:	2800      	cmp	r0, #0
 800a134:	d033      	beq.n	800a19e <_printf_float+0x26a>
 800a136:	2301      	movs	r3, #1
 800a138:	4a41      	ldr	r2, [pc, #260]	; (800a240 <_printf_float+0x30c>)
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	f43f af54 	beq.w	8009fee <_printf_float+0xba>
 800a146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a14a:	429a      	cmp	r2, r3
 800a14c:	db02      	blt.n	800a154 <_printf_float+0x220>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	07d8      	lsls	r0, r3, #31
 800a152:	d50f      	bpl.n	800a174 <_printf_float+0x240>
 800a154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a158:	4631      	mov	r1, r6
 800a15a:	4628      	mov	r0, r5
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f af45 	beq.w	8009fee <_printf_float+0xba>
 800a164:	f04f 0800 	mov.w	r8, #0
 800a168:	f104 091a 	add.w	r9, r4, #26
 800a16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a16e:	3b01      	subs	r3, #1
 800a170:	4543      	cmp	r3, r8
 800a172:	dc09      	bgt.n	800a188 <_printf_float+0x254>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	079b      	lsls	r3, r3, #30
 800a178:	f100 8103 	bmi.w	800a382 <_printf_float+0x44e>
 800a17c:	68e0      	ldr	r0, [r4, #12]
 800a17e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a180:	4298      	cmp	r0, r3
 800a182:	bfb8      	it	lt
 800a184:	4618      	movlt	r0, r3
 800a186:	e734      	b.n	8009ff2 <_printf_float+0xbe>
 800a188:	2301      	movs	r3, #1
 800a18a:	464a      	mov	r2, r9
 800a18c:	4631      	mov	r1, r6
 800a18e:	4628      	mov	r0, r5
 800a190:	47b8      	blx	r7
 800a192:	3001      	adds	r0, #1
 800a194:	f43f af2b 	beq.w	8009fee <_printf_float+0xba>
 800a198:	f108 0801 	add.w	r8, r8, #1
 800a19c:	e7e6      	b.n	800a16c <_printf_float+0x238>
 800a19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	dc2b      	bgt.n	800a1fc <_printf_float+0x2c8>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	4a26      	ldr	r2, [pc, #152]	; (800a240 <_printf_float+0x30c>)
 800a1a8:	4631      	mov	r1, r6
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	f43f af1d 	beq.w	8009fee <_printf_float+0xba>
 800a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b6:	b923      	cbnz	r3, 800a1c2 <_printf_float+0x28e>
 800a1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ba:	b913      	cbnz	r3, 800a1c2 <_printf_float+0x28e>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	07d9      	lsls	r1, r3, #31
 800a1c0:	d5d8      	bpl.n	800a174 <_printf_float+0x240>
 800a1c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1c6:	4631      	mov	r1, r6
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	47b8      	blx	r7
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	f43f af0e 	beq.w	8009fee <_printf_float+0xba>
 800a1d2:	f04f 0900 	mov.w	r9, #0
 800a1d6:	f104 0a1a 	add.w	sl, r4, #26
 800a1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1dc:	425b      	negs	r3, r3
 800a1de:	454b      	cmp	r3, r9
 800a1e0:	dc01      	bgt.n	800a1e6 <_printf_float+0x2b2>
 800a1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e4:	e794      	b.n	800a110 <_printf_float+0x1dc>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4652      	mov	r2, sl
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	47b8      	blx	r7
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	f43f aefc 	beq.w	8009fee <_printf_float+0xba>
 800a1f6:	f109 0901 	add.w	r9, r9, #1
 800a1fa:	e7ee      	b.n	800a1da <_printf_float+0x2a6>
 800a1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a200:	429a      	cmp	r2, r3
 800a202:	bfa8      	it	ge
 800a204:	461a      	movge	r2, r3
 800a206:	2a00      	cmp	r2, #0
 800a208:	4691      	mov	r9, r2
 800a20a:	dd07      	ble.n	800a21c <_printf_float+0x2e8>
 800a20c:	4613      	mov	r3, r2
 800a20e:	4631      	mov	r1, r6
 800a210:	4642      	mov	r2, r8
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	f43f aee9 	beq.w	8009fee <_printf_float+0xba>
 800a21c:	f104 031a 	add.w	r3, r4, #26
 800a220:	f04f 0b00 	mov.w	fp, #0
 800a224:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a228:	9306      	str	r3, [sp, #24]
 800a22a:	e015      	b.n	800a258 <_printf_float+0x324>
 800a22c:	7fefffff 	.word	0x7fefffff
 800a230:	0800d7ac 	.word	0x0800d7ac
 800a234:	0800d7a8 	.word	0x0800d7a8
 800a238:	0800d7b4 	.word	0x0800d7b4
 800a23c:	0800d7b0 	.word	0x0800d7b0
 800a240:	0800d7b8 	.word	0x0800d7b8
 800a244:	2301      	movs	r3, #1
 800a246:	9a06      	ldr	r2, [sp, #24]
 800a248:	4631      	mov	r1, r6
 800a24a:	4628      	mov	r0, r5
 800a24c:	47b8      	blx	r7
 800a24e:	3001      	adds	r0, #1
 800a250:	f43f aecd 	beq.w	8009fee <_printf_float+0xba>
 800a254:	f10b 0b01 	add.w	fp, fp, #1
 800a258:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a25c:	ebaa 0309 	sub.w	r3, sl, r9
 800a260:	455b      	cmp	r3, fp
 800a262:	dcef      	bgt.n	800a244 <_printf_float+0x310>
 800a264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a268:	429a      	cmp	r2, r3
 800a26a:	44d0      	add	r8, sl
 800a26c:	db15      	blt.n	800a29a <_printf_float+0x366>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	07da      	lsls	r2, r3, #31
 800a272:	d412      	bmi.n	800a29a <_printf_float+0x366>
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a278:	eba3 020a 	sub.w	r2, r3, sl
 800a27c:	eba3 0a01 	sub.w	sl, r3, r1
 800a280:	4592      	cmp	sl, r2
 800a282:	bfa8      	it	ge
 800a284:	4692      	movge	sl, r2
 800a286:	f1ba 0f00 	cmp.w	sl, #0
 800a28a:	dc0e      	bgt.n	800a2aa <_printf_float+0x376>
 800a28c:	f04f 0800 	mov.w	r8, #0
 800a290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a294:	f104 091a 	add.w	r9, r4, #26
 800a298:	e019      	b.n	800a2ce <_printf_float+0x39a>
 800a29a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a29e:	4631      	mov	r1, r6
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	47b8      	blx	r7
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d1e5      	bne.n	800a274 <_printf_float+0x340>
 800a2a8:	e6a1      	b.n	8009fee <_printf_float+0xba>
 800a2aa:	4653      	mov	r3, sl
 800a2ac:	4642      	mov	r2, r8
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	47b8      	blx	r7
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d1e9      	bne.n	800a28c <_printf_float+0x358>
 800a2b8:	e699      	b.n	8009fee <_printf_float+0xba>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	464a      	mov	r2, r9
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	47b8      	blx	r7
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	f43f ae92 	beq.w	8009fee <_printf_float+0xba>
 800a2ca:	f108 0801 	add.w	r8, r8, #1
 800a2ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2d2:	1a9b      	subs	r3, r3, r2
 800a2d4:	eba3 030a 	sub.w	r3, r3, sl
 800a2d8:	4543      	cmp	r3, r8
 800a2da:	dcee      	bgt.n	800a2ba <_printf_float+0x386>
 800a2dc:	e74a      	b.n	800a174 <_printf_float+0x240>
 800a2de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2e0:	2a01      	cmp	r2, #1
 800a2e2:	dc01      	bgt.n	800a2e8 <_printf_float+0x3b4>
 800a2e4:	07db      	lsls	r3, r3, #31
 800a2e6:	d53a      	bpl.n	800a35e <_printf_float+0x42a>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4642      	mov	r2, r8
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b8      	blx	r7
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	f43f ae7b 	beq.w	8009fee <_printf_float+0xba>
 800a2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b8      	blx	r7
 800a302:	3001      	adds	r0, #1
 800a304:	f108 0801 	add.w	r8, r8, #1
 800a308:	f43f ae71 	beq.w	8009fee <_printf_float+0xba>
 800a30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a30e:	2200      	movs	r2, #0
 800a310:	f103 3aff 	add.w	sl, r3, #4294967295
 800a314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a318:	2300      	movs	r3, #0
 800a31a:	f7f6 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a31e:	b9c8      	cbnz	r0, 800a354 <_printf_float+0x420>
 800a320:	4653      	mov	r3, sl
 800a322:	4642      	mov	r2, r8
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	d10e      	bne.n	800a34c <_printf_float+0x418>
 800a32e:	e65e      	b.n	8009fee <_printf_float+0xba>
 800a330:	2301      	movs	r3, #1
 800a332:	4652      	mov	r2, sl
 800a334:	4631      	mov	r1, r6
 800a336:	4628      	mov	r0, r5
 800a338:	47b8      	blx	r7
 800a33a:	3001      	adds	r0, #1
 800a33c:	f43f ae57 	beq.w	8009fee <_printf_float+0xba>
 800a340:	f108 0801 	add.w	r8, r8, #1
 800a344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a346:	3b01      	subs	r3, #1
 800a348:	4543      	cmp	r3, r8
 800a34a:	dcf1      	bgt.n	800a330 <_printf_float+0x3fc>
 800a34c:	464b      	mov	r3, r9
 800a34e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a352:	e6de      	b.n	800a112 <_printf_float+0x1de>
 800a354:	f04f 0800 	mov.w	r8, #0
 800a358:	f104 0a1a 	add.w	sl, r4, #26
 800a35c:	e7f2      	b.n	800a344 <_printf_float+0x410>
 800a35e:	2301      	movs	r3, #1
 800a360:	e7df      	b.n	800a322 <_printf_float+0x3ee>
 800a362:	2301      	movs	r3, #1
 800a364:	464a      	mov	r2, r9
 800a366:	4631      	mov	r1, r6
 800a368:	4628      	mov	r0, r5
 800a36a:	47b8      	blx	r7
 800a36c:	3001      	adds	r0, #1
 800a36e:	f43f ae3e 	beq.w	8009fee <_printf_float+0xba>
 800a372:	f108 0801 	add.w	r8, r8, #1
 800a376:	68e3      	ldr	r3, [r4, #12]
 800a378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a37a:	1a9b      	subs	r3, r3, r2
 800a37c:	4543      	cmp	r3, r8
 800a37e:	dcf0      	bgt.n	800a362 <_printf_float+0x42e>
 800a380:	e6fc      	b.n	800a17c <_printf_float+0x248>
 800a382:	f04f 0800 	mov.w	r8, #0
 800a386:	f104 0919 	add.w	r9, r4, #25
 800a38a:	e7f4      	b.n	800a376 <_printf_float+0x442>
 800a38c:	2900      	cmp	r1, #0
 800a38e:	f43f ae8b 	beq.w	800a0a8 <_printf_float+0x174>
 800a392:	2300      	movs	r3, #0
 800a394:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a398:	ab09      	add	r3, sp, #36	; 0x24
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	ec49 8b10 	vmov	d0, r8, r9
 800a3a0:	6022      	str	r2, [r4, #0]
 800a3a2:	f8cd a004 	str.w	sl, [sp, #4]
 800a3a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f7ff fd2d 	bl	8009e0a <__cvt>
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	e648      	b.n	800a046 <_printf_float+0x112>

0800a3b4 <_printf_common>:
 800a3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b8:	4691      	mov	r9, r2
 800a3ba:	461f      	mov	r7, r3
 800a3bc:	688a      	ldr	r2, [r1, #8]
 800a3be:	690b      	ldr	r3, [r1, #16]
 800a3c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	bfb8      	it	lt
 800a3c8:	4613      	movlt	r3, r2
 800a3ca:	f8c9 3000 	str.w	r3, [r9]
 800a3ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	b112      	cbz	r2, 800a3de <_printf_common+0x2a>
 800a3d8:	3301      	adds	r3, #1
 800a3da:	f8c9 3000 	str.w	r3, [r9]
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	0699      	lsls	r1, r3, #26
 800a3e2:	bf42      	ittt	mi
 800a3e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a3e8:	3302      	addmi	r3, #2
 800a3ea:	f8c9 3000 	strmi.w	r3, [r9]
 800a3ee:	6825      	ldr	r5, [r4, #0]
 800a3f0:	f015 0506 	ands.w	r5, r5, #6
 800a3f4:	d107      	bne.n	800a406 <_printf_common+0x52>
 800a3f6:	f104 0a19 	add.w	sl, r4, #25
 800a3fa:	68e3      	ldr	r3, [r4, #12]
 800a3fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	42ab      	cmp	r3, r5
 800a404:	dc28      	bgt.n	800a458 <_printf_common+0xa4>
 800a406:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	3300      	adds	r3, #0
 800a40e:	bf18      	it	ne
 800a410:	2301      	movne	r3, #1
 800a412:	0692      	lsls	r2, r2, #26
 800a414:	d42d      	bmi.n	800a472 <_printf_common+0xbe>
 800a416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a41a:	4639      	mov	r1, r7
 800a41c:	4630      	mov	r0, r6
 800a41e:	47c0      	blx	r8
 800a420:	3001      	adds	r0, #1
 800a422:	d020      	beq.n	800a466 <_printf_common+0xb2>
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	68e5      	ldr	r5, [r4, #12]
 800a428:	f8d9 2000 	ldr.w	r2, [r9]
 800a42c:	f003 0306 	and.w	r3, r3, #6
 800a430:	2b04      	cmp	r3, #4
 800a432:	bf08      	it	eq
 800a434:	1aad      	subeq	r5, r5, r2
 800a436:	68a3      	ldr	r3, [r4, #8]
 800a438:	6922      	ldr	r2, [r4, #16]
 800a43a:	bf0c      	ite	eq
 800a43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a440:	2500      	movne	r5, #0
 800a442:	4293      	cmp	r3, r2
 800a444:	bfc4      	itt	gt
 800a446:	1a9b      	subgt	r3, r3, r2
 800a448:	18ed      	addgt	r5, r5, r3
 800a44a:	f04f 0900 	mov.w	r9, #0
 800a44e:	341a      	adds	r4, #26
 800a450:	454d      	cmp	r5, r9
 800a452:	d11a      	bne.n	800a48a <_printf_common+0xd6>
 800a454:	2000      	movs	r0, #0
 800a456:	e008      	b.n	800a46a <_printf_common+0xb6>
 800a458:	2301      	movs	r3, #1
 800a45a:	4652      	mov	r2, sl
 800a45c:	4639      	mov	r1, r7
 800a45e:	4630      	mov	r0, r6
 800a460:	47c0      	blx	r8
 800a462:	3001      	adds	r0, #1
 800a464:	d103      	bne.n	800a46e <_printf_common+0xba>
 800a466:	f04f 30ff 	mov.w	r0, #4294967295
 800a46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a46e:	3501      	adds	r5, #1
 800a470:	e7c3      	b.n	800a3fa <_printf_common+0x46>
 800a472:	18e1      	adds	r1, r4, r3
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	2030      	movs	r0, #48	; 0x30
 800a478:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a47c:	4422      	add	r2, r4
 800a47e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a482:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a486:	3302      	adds	r3, #2
 800a488:	e7c5      	b.n	800a416 <_printf_common+0x62>
 800a48a:	2301      	movs	r3, #1
 800a48c:	4622      	mov	r2, r4
 800a48e:	4639      	mov	r1, r7
 800a490:	4630      	mov	r0, r6
 800a492:	47c0      	blx	r8
 800a494:	3001      	adds	r0, #1
 800a496:	d0e6      	beq.n	800a466 <_printf_common+0xb2>
 800a498:	f109 0901 	add.w	r9, r9, #1
 800a49c:	e7d8      	b.n	800a450 <_printf_common+0x9c>
	...

0800a4a0 <_printf_i>:
 800a4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	7e09      	ldrb	r1, [r1, #24]
 800a4ac:	b085      	sub	sp, #20
 800a4ae:	296e      	cmp	r1, #110	; 0x6e
 800a4b0:	4617      	mov	r7, r2
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	4698      	mov	r8, r3
 800a4b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4b8:	f000 80b3 	beq.w	800a622 <_printf_i+0x182>
 800a4bc:	d822      	bhi.n	800a504 <_printf_i+0x64>
 800a4be:	2963      	cmp	r1, #99	; 0x63
 800a4c0:	d036      	beq.n	800a530 <_printf_i+0x90>
 800a4c2:	d80a      	bhi.n	800a4da <_printf_i+0x3a>
 800a4c4:	2900      	cmp	r1, #0
 800a4c6:	f000 80b9 	beq.w	800a63c <_printf_i+0x19c>
 800a4ca:	2958      	cmp	r1, #88	; 0x58
 800a4cc:	f000 8083 	beq.w	800a5d6 <_printf_i+0x136>
 800a4d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a4d8:	e032      	b.n	800a540 <_printf_i+0xa0>
 800a4da:	2964      	cmp	r1, #100	; 0x64
 800a4dc:	d001      	beq.n	800a4e2 <_printf_i+0x42>
 800a4de:	2969      	cmp	r1, #105	; 0x69
 800a4e0:	d1f6      	bne.n	800a4d0 <_printf_i+0x30>
 800a4e2:	6820      	ldr	r0, [r4, #0]
 800a4e4:	6813      	ldr	r3, [r2, #0]
 800a4e6:	0605      	lsls	r5, r0, #24
 800a4e8:	f103 0104 	add.w	r1, r3, #4
 800a4ec:	d52a      	bpl.n	800a544 <_printf_i+0xa4>
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6011      	str	r1, [r2, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	da03      	bge.n	800a4fe <_printf_i+0x5e>
 800a4f6:	222d      	movs	r2, #45	; 0x2d
 800a4f8:	425b      	negs	r3, r3
 800a4fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a4fe:	486f      	ldr	r0, [pc, #444]	; (800a6bc <_printf_i+0x21c>)
 800a500:	220a      	movs	r2, #10
 800a502:	e039      	b.n	800a578 <_printf_i+0xd8>
 800a504:	2973      	cmp	r1, #115	; 0x73
 800a506:	f000 809d 	beq.w	800a644 <_printf_i+0x1a4>
 800a50a:	d808      	bhi.n	800a51e <_printf_i+0x7e>
 800a50c:	296f      	cmp	r1, #111	; 0x6f
 800a50e:	d020      	beq.n	800a552 <_printf_i+0xb2>
 800a510:	2970      	cmp	r1, #112	; 0x70
 800a512:	d1dd      	bne.n	800a4d0 <_printf_i+0x30>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	f043 0320 	orr.w	r3, r3, #32
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	e003      	b.n	800a526 <_printf_i+0x86>
 800a51e:	2975      	cmp	r1, #117	; 0x75
 800a520:	d017      	beq.n	800a552 <_printf_i+0xb2>
 800a522:	2978      	cmp	r1, #120	; 0x78
 800a524:	d1d4      	bne.n	800a4d0 <_printf_i+0x30>
 800a526:	2378      	movs	r3, #120	; 0x78
 800a528:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a52c:	4864      	ldr	r0, [pc, #400]	; (800a6c0 <_printf_i+0x220>)
 800a52e:	e055      	b.n	800a5dc <_printf_i+0x13c>
 800a530:	6813      	ldr	r3, [r2, #0]
 800a532:	1d19      	adds	r1, r3, #4
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6011      	str	r1, [r2, #0]
 800a538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a53c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a540:	2301      	movs	r3, #1
 800a542:	e08c      	b.n	800a65e <_printf_i+0x1be>
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6011      	str	r1, [r2, #0]
 800a548:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a54c:	bf18      	it	ne
 800a54e:	b21b      	sxthne	r3, r3
 800a550:	e7cf      	b.n	800a4f2 <_printf_i+0x52>
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	6825      	ldr	r5, [r4, #0]
 800a556:	1d18      	adds	r0, r3, #4
 800a558:	6010      	str	r0, [r2, #0]
 800a55a:	0628      	lsls	r0, r5, #24
 800a55c:	d501      	bpl.n	800a562 <_printf_i+0xc2>
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	e002      	b.n	800a568 <_printf_i+0xc8>
 800a562:	0668      	lsls	r0, r5, #25
 800a564:	d5fb      	bpl.n	800a55e <_printf_i+0xbe>
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	4854      	ldr	r0, [pc, #336]	; (800a6bc <_printf_i+0x21c>)
 800a56a:	296f      	cmp	r1, #111	; 0x6f
 800a56c:	bf14      	ite	ne
 800a56e:	220a      	movne	r2, #10
 800a570:	2208      	moveq	r2, #8
 800a572:	2100      	movs	r1, #0
 800a574:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a578:	6865      	ldr	r5, [r4, #4]
 800a57a:	60a5      	str	r5, [r4, #8]
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	f2c0 8095 	blt.w	800a6ac <_printf_i+0x20c>
 800a582:	6821      	ldr	r1, [r4, #0]
 800a584:	f021 0104 	bic.w	r1, r1, #4
 800a588:	6021      	str	r1, [r4, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d13d      	bne.n	800a60a <_printf_i+0x16a>
 800a58e:	2d00      	cmp	r5, #0
 800a590:	f040 808e 	bne.w	800a6b0 <_printf_i+0x210>
 800a594:	4665      	mov	r5, ip
 800a596:	2a08      	cmp	r2, #8
 800a598:	d10b      	bne.n	800a5b2 <_printf_i+0x112>
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	07db      	lsls	r3, r3, #31
 800a59e:	d508      	bpl.n	800a5b2 <_printf_i+0x112>
 800a5a0:	6923      	ldr	r3, [r4, #16]
 800a5a2:	6862      	ldr	r2, [r4, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	bfde      	ittt	le
 800a5a8:	2330      	movle	r3, #48	; 0x30
 800a5aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5b2:	ebac 0305 	sub.w	r3, ip, r5
 800a5b6:	6123      	str	r3, [r4, #16]
 800a5b8:	f8cd 8000 	str.w	r8, [sp]
 800a5bc:	463b      	mov	r3, r7
 800a5be:	aa03      	add	r2, sp, #12
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f7ff fef6 	bl	800a3b4 <_printf_common>
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d14d      	bne.n	800a668 <_printf_i+0x1c8>
 800a5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d0:	b005      	add	sp, #20
 800a5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5d6:	4839      	ldr	r0, [pc, #228]	; (800a6bc <_printf_i+0x21c>)
 800a5d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a5dc:	6813      	ldr	r3, [r2, #0]
 800a5de:	6821      	ldr	r1, [r4, #0]
 800a5e0:	1d1d      	adds	r5, r3, #4
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6015      	str	r5, [r2, #0]
 800a5e6:	060a      	lsls	r2, r1, #24
 800a5e8:	d50b      	bpl.n	800a602 <_printf_i+0x162>
 800a5ea:	07ca      	lsls	r2, r1, #31
 800a5ec:	bf44      	itt	mi
 800a5ee:	f041 0120 	orrmi.w	r1, r1, #32
 800a5f2:	6021      	strmi	r1, [r4, #0]
 800a5f4:	b91b      	cbnz	r3, 800a5fe <_printf_i+0x15e>
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	f022 0220 	bic.w	r2, r2, #32
 800a5fc:	6022      	str	r2, [r4, #0]
 800a5fe:	2210      	movs	r2, #16
 800a600:	e7b7      	b.n	800a572 <_printf_i+0xd2>
 800a602:	064d      	lsls	r5, r1, #25
 800a604:	bf48      	it	mi
 800a606:	b29b      	uxthmi	r3, r3
 800a608:	e7ef      	b.n	800a5ea <_printf_i+0x14a>
 800a60a:	4665      	mov	r5, ip
 800a60c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a610:	fb02 3311 	mls	r3, r2, r1, r3
 800a614:	5cc3      	ldrb	r3, [r0, r3]
 800a616:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a61a:	460b      	mov	r3, r1
 800a61c:	2900      	cmp	r1, #0
 800a61e:	d1f5      	bne.n	800a60c <_printf_i+0x16c>
 800a620:	e7b9      	b.n	800a596 <_printf_i+0xf6>
 800a622:	6813      	ldr	r3, [r2, #0]
 800a624:	6825      	ldr	r5, [r4, #0]
 800a626:	6961      	ldr	r1, [r4, #20]
 800a628:	1d18      	adds	r0, r3, #4
 800a62a:	6010      	str	r0, [r2, #0]
 800a62c:	0628      	lsls	r0, r5, #24
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	d501      	bpl.n	800a636 <_printf_i+0x196>
 800a632:	6019      	str	r1, [r3, #0]
 800a634:	e002      	b.n	800a63c <_printf_i+0x19c>
 800a636:	066a      	lsls	r2, r5, #25
 800a638:	d5fb      	bpl.n	800a632 <_printf_i+0x192>
 800a63a:	8019      	strh	r1, [r3, #0]
 800a63c:	2300      	movs	r3, #0
 800a63e:	6123      	str	r3, [r4, #16]
 800a640:	4665      	mov	r5, ip
 800a642:	e7b9      	b.n	800a5b8 <_printf_i+0x118>
 800a644:	6813      	ldr	r3, [r2, #0]
 800a646:	1d19      	adds	r1, r3, #4
 800a648:	6011      	str	r1, [r2, #0]
 800a64a:	681d      	ldr	r5, [r3, #0]
 800a64c:	6862      	ldr	r2, [r4, #4]
 800a64e:	2100      	movs	r1, #0
 800a650:	4628      	mov	r0, r5
 800a652:	f7f5 fdc5 	bl	80001e0 <memchr>
 800a656:	b108      	cbz	r0, 800a65c <_printf_i+0x1bc>
 800a658:	1b40      	subs	r0, r0, r5
 800a65a:	6060      	str	r0, [r4, #4]
 800a65c:	6863      	ldr	r3, [r4, #4]
 800a65e:	6123      	str	r3, [r4, #16]
 800a660:	2300      	movs	r3, #0
 800a662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a666:	e7a7      	b.n	800a5b8 <_printf_i+0x118>
 800a668:	6923      	ldr	r3, [r4, #16]
 800a66a:	462a      	mov	r2, r5
 800a66c:	4639      	mov	r1, r7
 800a66e:	4630      	mov	r0, r6
 800a670:	47c0      	blx	r8
 800a672:	3001      	adds	r0, #1
 800a674:	d0aa      	beq.n	800a5cc <_printf_i+0x12c>
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	079b      	lsls	r3, r3, #30
 800a67a:	d413      	bmi.n	800a6a4 <_printf_i+0x204>
 800a67c:	68e0      	ldr	r0, [r4, #12]
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	4298      	cmp	r0, r3
 800a682:	bfb8      	it	lt
 800a684:	4618      	movlt	r0, r3
 800a686:	e7a3      	b.n	800a5d0 <_printf_i+0x130>
 800a688:	2301      	movs	r3, #1
 800a68a:	464a      	mov	r2, r9
 800a68c:	4639      	mov	r1, r7
 800a68e:	4630      	mov	r0, r6
 800a690:	47c0      	blx	r8
 800a692:	3001      	adds	r0, #1
 800a694:	d09a      	beq.n	800a5cc <_printf_i+0x12c>
 800a696:	3501      	adds	r5, #1
 800a698:	68e3      	ldr	r3, [r4, #12]
 800a69a:	9a03      	ldr	r2, [sp, #12]
 800a69c:	1a9b      	subs	r3, r3, r2
 800a69e:	42ab      	cmp	r3, r5
 800a6a0:	dcf2      	bgt.n	800a688 <_printf_i+0x1e8>
 800a6a2:	e7eb      	b.n	800a67c <_printf_i+0x1dc>
 800a6a4:	2500      	movs	r5, #0
 800a6a6:	f104 0919 	add.w	r9, r4, #25
 800a6aa:	e7f5      	b.n	800a698 <_printf_i+0x1f8>
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1ac      	bne.n	800a60a <_printf_i+0x16a>
 800a6b0:	7803      	ldrb	r3, [r0, #0]
 800a6b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6ba:	e76c      	b.n	800a596 <_printf_i+0xf6>
 800a6bc:	0800d7ba 	.word	0x0800d7ba
 800a6c0:	0800d7cb 	.word	0x0800d7cb

0800a6c4 <siprintf>:
 800a6c4:	b40e      	push	{r1, r2, r3}
 800a6c6:	b500      	push	{lr}
 800a6c8:	b09c      	sub	sp, #112	; 0x70
 800a6ca:	ab1d      	add	r3, sp, #116	; 0x74
 800a6cc:	9002      	str	r0, [sp, #8]
 800a6ce:	9006      	str	r0, [sp, #24]
 800a6d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6d4:	4809      	ldr	r0, [pc, #36]	; (800a6fc <siprintf+0x38>)
 800a6d6:	9107      	str	r1, [sp, #28]
 800a6d8:	9104      	str	r1, [sp, #16]
 800a6da:	4909      	ldr	r1, [pc, #36]	; (800a700 <siprintf+0x3c>)
 800a6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e0:	9105      	str	r1, [sp, #20]
 800a6e2:	6800      	ldr	r0, [r0, #0]
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	a902      	add	r1, sp, #8
 800a6e8:	f002 fe48 	bl	800d37c <_svfiprintf_r>
 800a6ec:	9b02      	ldr	r3, [sp, #8]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]
 800a6f2:	b01c      	add	sp, #112	; 0x70
 800a6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6f8:	b003      	add	sp, #12
 800a6fa:	4770      	bx	lr
 800a6fc:	20000028 	.word	0x20000028
 800a700:	ffff0208 	.word	0xffff0208

0800a704 <sulp>:
 800a704:	b570      	push	{r4, r5, r6, lr}
 800a706:	4604      	mov	r4, r0
 800a708:	460d      	mov	r5, r1
 800a70a:	ec45 4b10 	vmov	d0, r4, r5
 800a70e:	4616      	mov	r6, r2
 800a710:	f002 fbf0 	bl	800cef4 <__ulp>
 800a714:	ec51 0b10 	vmov	r0, r1, d0
 800a718:	b17e      	cbz	r6, 800a73a <sulp+0x36>
 800a71a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a71e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a722:	2b00      	cmp	r3, #0
 800a724:	dd09      	ble.n	800a73a <sulp+0x36>
 800a726:	051b      	lsls	r3, r3, #20
 800a728:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a72c:	2400      	movs	r4, #0
 800a72e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a732:	4622      	mov	r2, r4
 800a734:	462b      	mov	r3, r5
 800a736:	f7f5 ff5f 	bl	80005f8 <__aeabi_dmul>
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
 800a73c:	0000      	movs	r0, r0
	...

0800a740 <_strtod_l>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	461f      	mov	r7, r3
 800a746:	b0a1      	sub	sp, #132	; 0x84
 800a748:	2300      	movs	r3, #0
 800a74a:	4681      	mov	r9, r0
 800a74c:	4638      	mov	r0, r7
 800a74e:	460e      	mov	r6, r1
 800a750:	9217      	str	r2, [sp, #92]	; 0x5c
 800a752:	931c      	str	r3, [sp, #112]	; 0x70
 800a754:	f002 f8cd 	bl	800c8f2 <__localeconv_l>
 800a758:	4680      	mov	r8, r0
 800a75a:	6800      	ldr	r0, [r0, #0]
 800a75c:	f7f5 fd38 	bl	80001d0 <strlen>
 800a760:	f04f 0a00 	mov.w	sl, #0
 800a764:	4604      	mov	r4, r0
 800a766:	f04f 0b00 	mov.w	fp, #0
 800a76a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a76c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a76e:	781a      	ldrb	r2, [r3, #0]
 800a770:	2a0d      	cmp	r2, #13
 800a772:	d832      	bhi.n	800a7da <_strtod_l+0x9a>
 800a774:	2a09      	cmp	r2, #9
 800a776:	d236      	bcs.n	800a7e6 <_strtod_l+0xa6>
 800a778:	2a00      	cmp	r2, #0
 800a77a:	d03e      	beq.n	800a7fa <_strtod_l+0xba>
 800a77c:	2300      	movs	r3, #0
 800a77e:	930d      	str	r3, [sp, #52]	; 0x34
 800a780:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a782:	782b      	ldrb	r3, [r5, #0]
 800a784:	2b30      	cmp	r3, #48	; 0x30
 800a786:	f040 80ac 	bne.w	800a8e2 <_strtod_l+0x1a2>
 800a78a:	786b      	ldrb	r3, [r5, #1]
 800a78c:	2b58      	cmp	r3, #88	; 0x58
 800a78e:	d001      	beq.n	800a794 <_strtod_l+0x54>
 800a790:	2b78      	cmp	r3, #120	; 0x78
 800a792:	d167      	bne.n	800a864 <_strtod_l+0x124>
 800a794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	ab1c      	add	r3, sp, #112	; 0x70
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	9702      	str	r7, [sp, #8]
 800a79e:	ab1d      	add	r3, sp, #116	; 0x74
 800a7a0:	4a88      	ldr	r2, [pc, #544]	; (800a9c4 <_strtod_l+0x284>)
 800a7a2:	a91b      	add	r1, sp, #108	; 0x6c
 800a7a4:	4648      	mov	r0, r9
 800a7a6:	f001 fdca 	bl	800c33e <__gethex>
 800a7aa:	f010 0407 	ands.w	r4, r0, #7
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	d005      	beq.n	800a7be <_strtod_l+0x7e>
 800a7b2:	2c06      	cmp	r4, #6
 800a7b4:	d12b      	bne.n	800a80e <_strtod_l+0xce>
 800a7b6:	3501      	adds	r5, #1
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	951b      	str	r5, [sp, #108]	; 0x6c
 800a7bc:	930d      	str	r3, [sp, #52]	; 0x34
 800a7be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f040 859a 	bne.w	800b2fa <_strtod_l+0xbba>
 800a7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7c8:	b1e3      	cbz	r3, 800a804 <_strtod_l+0xc4>
 800a7ca:	4652      	mov	r2, sl
 800a7cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a7d0:	ec43 2b10 	vmov	d0, r2, r3
 800a7d4:	b021      	add	sp, #132	; 0x84
 800a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7da:	2a2b      	cmp	r2, #43	; 0x2b
 800a7dc:	d015      	beq.n	800a80a <_strtod_l+0xca>
 800a7de:	2a2d      	cmp	r2, #45	; 0x2d
 800a7e0:	d004      	beq.n	800a7ec <_strtod_l+0xac>
 800a7e2:	2a20      	cmp	r2, #32
 800a7e4:	d1ca      	bne.n	800a77c <_strtod_l+0x3c>
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a7ea:	e7bf      	b.n	800a76c <_strtod_l+0x2c>
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	920d      	str	r2, [sp, #52]	; 0x34
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1c2      	bne.n	800a780 <_strtod_l+0x40>
 800a7fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7fc:	961b      	str	r6, [sp, #108]	; 0x6c
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f040 8579 	bne.w	800b2f6 <_strtod_l+0xbb6>
 800a804:	4652      	mov	r2, sl
 800a806:	465b      	mov	r3, fp
 800a808:	e7e2      	b.n	800a7d0 <_strtod_l+0x90>
 800a80a:	2200      	movs	r2, #0
 800a80c:	e7ef      	b.n	800a7ee <_strtod_l+0xae>
 800a80e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a810:	b13a      	cbz	r2, 800a822 <_strtod_l+0xe2>
 800a812:	2135      	movs	r1, #53	; 0x35
 800a814:	a81e      	add	r0, sp, #120	; 0x78
 800a816:	f002 fc65 	bl	800d0e4 <__copybits>
 800a81a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a81c:	4648      	mov	r0, r9
 800a81e:	f002 f8d2 	bl	800c9c6 <_Bfree>
 800a822:	3c01      	subs	r4, #1
 800a824:	2c04      	cmp	r4, #4
 800a826:	d806      	bhi.n	800a836 <_strtod_l+0xf6>
 800a828:	e8df f004 	tbb	[pc, r4]
 800a82c:	1714030a 	.word	0x1714030a
 800a830:	0a          	.byte	0x0a
 800a831:	00          	.byte	0x00
 800a832:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a836:	0730      	lsls	r0, r6, #28
 800a838:	d5c1      	bpl.n	800a7be <_strtod_l+0x7e>
 800a83a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a83e:	e7be      	b.n	800a7be <_strtod_l+0x7e>
 800a840:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a844:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a846:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a84a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a84e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a852:	e7f0      	b.n	800a836 <_strtod_l+0xf6>
 800a854:	f8df b170 	ldr.w	fp, [pc, #368]	; 800a9c8 <_strtod_l+0x288>
 800a858:	e7ed      	b.n	800a836 <_strtod_l+0xf6>
 800a85a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a85e:	f04f 3aff 	mov.w	sl, #4294967295
 800a862:	e7e8      	b.n	800a836 <_strtod_l+0xf6>
 800a864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	921b      	str	r2, [sp, #108]	; 0x6c
 800a86a:	785b      	ldrb	r3, [r3, #1]
 800a86c:	2b30      	cmp	r3, #48	; 0x30
 800a86e:	d0f9      	beq.n	800a864 <_strtod_l+0x124>
 800a870:	2b00      	cmp	r3, #0
 800a872:	d0a4      	beq.n	800a7be <_strtod_l+0x7e>
 800a874:	2301      	movs	r3, #1
 800a876:	2500      	movs	r5, #0
 800a878:	9306      	str	r3, [sp, #24]
 800a87a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a87c:	9308      	str	r3, [sp, #32]
 800a87e:	9507      	str	r5, [sp, #28]
 800a880:	9505      	str	r5, [sp, #20]
 800a882:	220a      	movs	r2, #10
 800a884:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a886:	7807      	ldrb	r7, [r0, #0]
 800a888:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a88c:	b2d9      	uxtb	r1, r3
 800a88e:	2909      	cmp	r1, #9
 800a890:	d929      	bls.n	800a8e6 <_strtod_l+0x1a6>
 800a892:	4622      	mov	r2, r4
 800a894:	f8d8 1000 	ldr.w	r1, [r8]
 800a898:	f002 fe7e 	bl	800d598 <strncmp>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d031      	beq.n	800a904 <_strtod_l+0x1c4>
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	9c05      	ldr	r4, [sp, #20]
 800a8a4:	9004      	str	r0, [sp, #16]
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	2b65      	cmp	r3, #101	; 0x65
 800a8ac:	d001      	beq.n	800a8b2 <_strtod_l+0x172>
 800a8ae:	2b45      	cmp	r3, #69	; 0x45
 800a8b0:	d114      	bne.n	800a8dc <_strtod_l+0x19c>
 800a8b2:	b924      	cbnz	r4, 800a8be <_strtod_l+0x17e>
 800a8b4:	b910      	cbnz	r0, 800a8bc <_strtod_l+0x17c>
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d09e      	beq.n	800a7fa <_strtod_l+0xba>
 800a8bc:	2400      	movs	r4, #0
 800a8be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a8c0:	1c73      	adds	r3, r6, #1
 800a8c2:	931b      	str	r3, [sp, #108]	; 0x6c
 800a8c4:	7873      	ldrb	r3, [r6, #1]
 800a8c6:	2b2b      	cmp	r3, #43	; 0x2b
 800a8c8:	d078      	beq.n	800a9bc <_strtod_l+0x27c>
 800a8ca:	2b2d      	cmp	r3, #45	; 0x2d
 800a8cc:	d070      	beq.n	800a9b0 <_strtod_l+0x270>
 800a8ce:	f04f 0c00 	mov.w	ip, #0
 800a8d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a8d6:	2f09      	cmp	r7, #9
 800a8d8:	d97c      	bls.n	800a9d4 <_strtod_l+0x294>
 800a8da:	961b      	str	r6, [sp, #108]	; 0x6c
 800a8dc:	f04f 0e00 	mov.w	lr, #0
 800a8e0:	e09a      	b.n	800aa18 <_strtod_l+0x2d8>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e7c7      	b.n	800a876 <_strtod_l+0x136>
 800a8e6:	9905      	ldr	r1, [sp, #20]
 800a8e8:	2908      	cmp	r1, #8
 800a8ea:	bfdd      	ittte	le
 800a8ec:	9907      	ldrle	r1, [sp, #28]
 800a8ee:	fb02 3301 	mlale	r3, r2, r1, r3
 800a8f2:	9307      	strle	r3, [sp, #28]
 800a8f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a8f8:	9b05      	ldr	r3, [sp, #20]
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	9305      	str	r3, [sp, #20]
 800a900:	901b      	str	r0, [sp, #108]	; 0x6c
 800a902:	e7bf      	b.n	800a884 <_strtod_l+0x144>
 800a904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a906:	191a      	adds	r2, r3, r4
 800a908:	921b      	str	r2, [sp, #108]	; 0x6c
 800a90a:	9a05      	ldr	r2, [sp, #20]
 800a90c:	5d1b      	ldrb	r3, [r3, r4]
 800a90e:	2a00      	cmp	r2, #0
 800a910:	d037      	beq.n	800a982 <_strtod_l+0x242>
 800a912:	9c05      	ldr	r4, [sp, #20]
 800a914:	4602      	mov	r2, r0
 800a916:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a91a:	2909      	cmp	r1, #9
 800a91c:	d913      	bls.n	800a946 <_strtod_l+0x206>
 800a91e:	2101      	movs	r1, #1
 800a920:	9104      	str	r1, [sp, #16]
 800a922:	e7c2      	b.n	800a8aa <_strtod_l+0x16a>
 800a924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	921b      	str	r2, [sp, #108]	; 0x6c
 800a92a:	785b      	ldrb	r3, [r3, #1]
 800a92c:	3001      	adds	r0, #1
 800a92e:	2b30      	cmp	r3, #48	; 0x30
 800a930:	d0f8      	beq.n	800a924 <_strtod_l+0x1e4>
 800a932:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a936:	2a08      	cmp	r2, #8
 800a938:	f200 84e4 	bhi.w	800b304 <_strtod_l+0xbc4>
 800a93c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a93e:	9208      	str	r2, [sp, #32]
 800a940:	4602      	mov	r2, r0
 800a942:	2000      	movs	r0, #0
 800a944:	4604      	mov	r4, r0
 800a946:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a94a:	f100 0101 	add.w	r1, r0, #1
 800a94e:	d012      	beq.n	800a976 <_strtod_l+0x236>
 800a950:	440a      	add	r2, r1
 800a952:	eb00 0c04 	add.w	ip, r0, r4
 800a956:	4621      	mov	r1, r4
 800a958:	270a      	movs	r7, #10
 800a95a:	458c      	cmp	ip, r1
 800a95c:	d113      	bne.n	800a986 <_strtod_l+0x246>
 800a95e:	1821      	adds	r1, r4, r0
 800a960:	2908      	cmp	r1, #8
 800a962:	f104 0401 	add.w	r4, r4, #1
 800a966:	4404      	add	r4, r0
 800a968:	dc19      	bgt.n	800a99e <_strtod_l+0x25e>
 800a96a:	9b07      	ldr	r3, [sp, #28]
 800a96c:	210a      	movs	r1, #10
 800a96e:	fb01 e303 	mla	r3, r1, r3, lr
 800a972:	9307      	str	r3, [sp, #28]
 800a974:	2100      	movs	r1, #0
 800a976:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a978:	1c58      	adds	r0, r3, #1
 800a97a:	901b      	str	r0, [sp, #108]	; 0x6c
 800a97c:	785b      	ldrb	r3, [r3, #1]
 800a97e:	4608      	mov	r0, r1
 800a980:	e7c9      	b.n	800a916 <_strtod_l+0x1d6>
 800a982:	9805      	ldr	r0, [sp, #20]
 800a984:	e7d3      	b.n	800a92e <_strtod_l+0x1ee>
 800a986:	2908      	cmp	r1, #8
 800a988:	f101 0101 	add.w	r1, r1, #1
 800a98c:	dc03      	bgt.n	800a996 <_strtod_l+0x256>
 800a98e:	9b07      	ldr	r3, [sp, #28]
 800a990:	437b      	muls	r3, r7
 800a992:	9307      	str	r3, [sp, #28]
 800a994:	e7e1      	b.n	800a95a <_strtod_l+0x21a>
 800a996:	2910      	cmp	r1, #16
 800a998:	bfd8      	it	le
 800a99a:	437d      	mulle	r5, r7
 800a99c:	e7dd      	b.n	800a95a <_strtod_l+0x21a>
 800a99e:	2c10      	cmp	r4, #16
 800a9a0:	bfdc      	itt	le
 800a9a2:	210a      	movle	r1, #10
 800a9a4:	fb01 e505 	mlale	r5, r1, r5, lr
 800a9a8:	e7e4      	b.n	800a974 <_strtod_l+0x234>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	9304      	str	r3, [sp, #16]
 800a9ae:	e781      	b.n	800a8b4 <_strtod_l+0x174>
 800a9b0:	f04f 0c01 	mov.w	ip, #1
 800a9b4:	1cb3      	adds	r3, r6, #2
 800a9b6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a9b8:	78b3      	ldrb	r3, [r6, #2]
 800a9ba:	e78a      	b.n	800a8d2 <_strtod_l+0x192>
 800a9bc:	f04f 0c00 	mov.w	ip, #0
 800a9c0:	e7f8      	b.n	800a9b4 <_strtod_l+0x274>
 800a9c2:	bf00      	nop
 800a9c4:	0800d7dc 	.word	0x0800d7dc
 800a9c8:	7ff00000 	.word	0x7ff00000
 800a9cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9ce:	1c5f      	adds	r7, r3, #1
 800a9d0:	971b      	str	r7, [sp, #108]	; 0x6c
 800a9d2:	785b      	ldrb	r3, [r3, #1]
 800a9d4:	2b30      	cmp	r3, #48	; 0x30
 800a9d6:	d0f9      	beq.n	800a9cc <_strtod_l+0x28c>
 800a9d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a9dc:	2f08      	cmp	r7, #8
 800a9de:	f63f af7d 	bhi.w	800a8dc <_strtod_l+0x19c>
 800a9e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a9e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9e8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9ec:	1c5f      	adds	r7, r3, #1
 800a9ee:	971b      	str	r7, [sp, #108]	; 0x6c
 800a9f0:	785b      	ldrb	r3, [r3, #1]
 800a9f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a9f6:	f1b8 0f09 	cmp.w	r8, #9
 800a9fa:	d937      	bls.n	800aa6c <_strtod_l+0x32c>
 800a9fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9fe:	1a7f      	subs	r7, r7, r1
 800aa00:	2f08      	cmp	r7, #8
 800aa02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800aa06:	dc37      	bgt.n	800aa78 <_strtod_l+0x338>
 800aa08:	45be      	cmp	lr, r7
 800aa0a:	bfa8      	it	ge
 800aa0c:	46be      	movge	lr, r7
 800aa0e:	f1bc 0f00 	cmp.w	ip, #0
 800aa12:	d001      	beq.n	800aa18 <_strtod_l+0x2d8>
 800aa14:	f1ce 0e00 	rsb	lr, lr, #0
 800aa18:	2c00      	cmp	r4, #0
 800aa1a:	d151      	bne.n	800aac0 <_strtod_l+0x380>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f47f aece 	bne.w	800a7be <_strtod_l+0x7e>
 800aa22:	9a06      	ldr	r2, [sp, #24]
 800aa24:	2a00      	cmp	r2, #0
 800aa26:	f47f aeca 	bne.w	800a7be <_strtod_l+0x7e>
 800aa2a:	9a04      	ldr	r2, [sp, #16]
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	f47f aee4 	bne.w	800a7fa <_strtod_l+0xba>
 800aa32:	2b4e      	cmp	r3, #78	; 0x4e
 800aa34:	d027      	beq.n	800aa86 <_strtod_l+0x346>
 800aa36:	dc21      	bgt.n	800aa7c <_strtod_l+0x33c>
 800aa38:	2b49      	cmp	r3, #73	; 0x49
 800aa3a:	f47f aede 	bne.w	800a7fa <_strtod_l+0xba>
 800aa3e:	49a0      	ldr	r1, [pc, #640]	; (800acc0 <_strtod_l+0x580>)
 800aa40:	a81b      	add	r0, sp, #108	; 0x6c
 800aa42:	f001 feaf 	bl	800c7a4 <__match>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f43f aed7 	beq.w	800a7fa <_strtod_l+0xba>
 800aa4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa4e:	499d      	ldr	r1, [pc, #628]	; (800acc4 <_strtod_l+0x584>)
 800aa50:	3b01      	subs	r3, #1
 800aa52:	a81b      	add	r0, sp, #108	; 0x6c
 800aa54:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa56:	f001 fea5 	bl	800c7a4 <__match>
 800aa5a:	b910      	cbnz	r0, 800aa62 <_strtod_l+0x322>
 800aa5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa5e:	3301      	adds	r3, #1
 800aa60:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa62:	f8df b274 	ldr.w	fp, [pc, #628]	; 800acd8 <_strtod_l+0x598>
 800aa66:	f04f 0a00 	mov.w	sl, #0
 800aa6a:	e6a8      	b.n	800a7be <_strtod_l+0x7e>
 800aa6c:	210a      	movs	r1, #10
 800aa6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800aa72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800aa76:	e7b8      	b.n	800a9ea <_strtod_l+0x2aa>
 800aa78:	46be      	mov	lr, r7
 800aa7a:	e7c8      	b.n	800aa0e <_strtod_l+0x2ce>
 800aa7c:	2b69      	cmp	r3, #105	; 0x69
 800aa7e:	d0de      	beq.n	800aa3e <_strtod_l+0x2fe>
 800aa80:	2b6e      	cmp	r3, #110	; 0x6e
 800aa82:	f47f aeba 	bne.w	800a7fa <_strtod_l+0xba>
 800aa86:	4990      	ldr	r1, [pc, #576]	; (800acc8 <_strtod_l+0x588>)
 800aa88:	a81b      	add	r0, sp, #108	; 0x6c
 800aa8a:	f001 fe8b 	bl	800c7a4 <__match>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	f43f aeb3 	beq.w	800a7fa <_strtod_l+0xba>
 800aa94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	2b28      	cmp	r3, #40	; 0x28
 800aa9a:	d10e      	bne.n	800aaba <_strtod_l+0x37a>
 800aa9c:	aa1e      	add	r2, sp, #120	; 0x78
 800aa9e:	498b      	ldr	r1, [pc, #556]	; (800accc <_strtod_l+0x58c>)
 800aaa0:	a81b      	add	r0, sp, #108	; 0x6c
 800aaa2:	f001 fe93 	bl	800c7cc <__hexnan>
 800aaa6:	2805      	cmp	r0, #5
 800aaa8:	d107      	bne.n	800aaba <_strtod_l+0x37a>
 800aaaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aaac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800aab0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aab4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aab8:	e681      	b.n	800a7be <_strtod_l+0x7e>
 800aaba:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ace0 <_strtod_l+0x5a0>
 800aabe:	e7d2      	b.n	800aa66 <_strtod_l+0x326>
 800aac0:	ebae 0302 	sub.w	r3, lr, r2
 800aac4:	9306      	str	r3, [sp, #24]
 800aac6:	9b05      	ldr	r3, [sp, #20]
 800aac8:	9807      	ldr	r0, [sp, #28]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	bf08      	it	eq
 800aace:	4623      	moveq	r3, r4
 800aad0:	2c10      	cmp	r4, #16
 800aad2:	9305      	str	r3, [sp, #20]
 800aad4:	46a0      	mov	r8, r4
 800aad6:	bfa8      	it	ge
 800aad8:	f04f 0810 	movge.w	r8, #16
 800aadc:	f7f5 fd12 	bl	8000504 <__aeabi_ui2d>
 800aae0:	2c09      	cmp	r4, #9
 800aae2:	4682      	mov	sl, r0
 800aae4:	468b      	mov	fp, r1
 800aae6:	dc13      	bgt.n	800ab10 <_strtod_l+0x3d0>
 800aae8:	9b06      	ldr	r3, [sp, #24]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f43f ae67 	beq.w	800a7be <_strtod_l+0x7e>
 800aaf0:	9b06      	ldr	r3, [sp, #24]
 800aaf2:	dd7a      	ble.n	800abea <_strtod_l+0x4aa>
 800aaf4:	2b16      	cmp	r3, #22
 800aaf6:	dc61      	bgt.n	800abbc <_strtod_l+0x47c>
 800aaf8:	4a75      	ldr	r2, [pc, #468]	; (800acd0 <_strtod_l+0x590>)
 800aafa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800aafe:	e9de 0100 	ldrd	r0, r1, [lr]
 800ab02:	4652      	mov	r2, sl
 800ab04:	465b      	mov	r3, fp
 800ab06:	f7f5 fd77 	bl	80005f8 <__aeabi_dmul>
 800ab0a:	4682      	mov	sl, r0
 800ab0c:	468b      	mov	fp, r1
 800ab0e:	e656      	b.n	800a7be <_strtod_l+0x7e>
 800ab10:	4b6f      	ldr	r3, [pc, #444]	; (800acd0 <_strtod_l+0x590>)
 800ab12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ab16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab1a:	f7f5 fd6d 	bl	80005f8 <__aeabi_dmul>
 800ab1e:	4606      	mov	r6, r0
 800ab20:	4628      	mov	r0, r5
 800ab22:	460f      	mov	r7, r1
 800ab24:	f7f5 fcee 	bl	8000504 <__aeabi_ui2d>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4639      	mov	r1, r7
 800ab30:	f7f5 fbac 	bl	800028c <__adddf3>
 800ab34:	2c0f      	cmp	r4, #15
 800ab36:	4682      	mov	sl, r0
 800ab38:	468b      	mov	fp, r1
 800ab3a:	ddd5      	ble.n	800aae8 <_strtod_l+0x3a8>
 800ab3c:	9b06      	ldr	r3, [sp, #24]
 800ab3e:	eba4 0808 	sub.w	r8, r4, r8
 800ab42:	4498      	add	r8, r3
 800ab44:	f1b8 0f00 	cmp.w	r8, #0
 800ab48:	f340 8096 	ble.w	800ac78 <_strtod_l+0x538>
 800ab4c:	f018 030f 	ands.w	r3, r8, #15
 800ab50:	d00a      	beq.n	800ab68 <_strtod_l+0x428>
 800ab52:	495f      	ldr	r1, [pc, #380]	; (800acd0 <_strtod_l+0x590>)
 800ab54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab58:	4652      	mov	r2, sl
 800ab5a:	465b      	mov	r3, fp
 800ab5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab60:	f7f5 fd4a 	bl	80005f8 <__aeabi_dmul>
 800ab64:	4682      	mov	sl, r0
 800ab66:	468b      	mov	fp, r1
 800ab68:	f038 080f 	bics.w	r8, r8, #15
 800ab6c:	d073      	beq.n	800ac56 <_strtod_l+0x516>
 800ab6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ab72:	dd47      	ble.n	800ac04 <_strtod_l+0x4c4>
 800ab74:	2400      	movs	r4, #0
 800ab76:	46a0      	mov	r8, r4
 800ab78:	9407      	str	r4, [sp, #28]
 800ab7a:	9405      	str	r4, [sp, #20]
 800ab7c:	2322      	movs	r3, #34	; 0x22
 800ab7e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800acd8 <_strtod_l+0x598>
 800ab82:	f8c9 3000 	str.w	r3, [r9]
 800ab86:	f04f 0a00 	mov.w	sl, #0
 800ab8a:	9b07      	ldr	r3, [sp, #28]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f43f ae16 	beq.w	800a7be <_strtod_l+0x7e>
 800ab92:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab94:	4648      	mov	r0, r9
 800ab96:	f001 ff16 	bl	800c9c6 <_Bfree>
 800ab9a:	9905      	ldr	r1, [sp, #20]
 800ab9c:	4648      	mov	r0, r9
 800ab9e:	f001 ff12 	bl	800c9c6 <_Bfree>
 800aba2:	4641      	mov	r1, r8
 800aba4:	4648      	mov	r0, r9
 800aba6:	f001 ff0e 	bl	800c9c6 <_Bfree>
 800abaa:	9907      	ldr	r1, [sp, #28]
 800abac:	4648      	mov	r0, r9
 800abae:	f001 ff0a 	bl	800c9c6 <_Bfree>
 800abb2:	4621      	mov	r1, r4
 800abb4:	4648      	mov	r0, r9
 800abb6:	f001 ff06 	bl	800c9c6 <_Bfree>
 800abba:	e600      	b.n	800a7be <_strtod_l+0x7e>
 800abbc:	9a06      	ldr	r2, [sp, #24]
 800abbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800abc2:	4293      	cmp	r3, r2
 800abc4:	dbba      	blt.n	800ab3c <_strtod_l+0x3fc>
 800abc6:	4d42      	ldr	r5, [pc, #264]	; (800acd0 <_strtod_l+0x590>)
 800abc8:	f1c4 040f 	rsb	r4, r4, #15
 800abcc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800abd0:	4652      	mov	r2, sl
 800abd2:	465b      	mov	r3, fp
 800abd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abd8:	f7f5 fd0e 	bl	80005f8 <__aeabi_dmul>
 800abdc:	9b06      	ldr	r3, [sp, #24]
 800abde:	1b1c      	subs	r4, r3, r4
 800abe0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800abe4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abe8:	e78d      	b.n	800ab06 <_strtod_l+0x3c6>
 800abea:	f113 0f16 	cmn.w	r3, #22
 800abee:	dba5      	blt.n	800ab3c <_strtod_l+0x3fc>
 800abf0:	4a37      	ldr	r2, [pc, #220]	; (800acd0 <_strtod_l+0x590>)
 800abf2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800abf6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800abfa:	4650      	mov	r0, sl
 800abfc:	4659      	mov	r1, fp
 800abfe:	f7f5 fe25 	bl	800084c <__aeabi_ddiv>
 800ac02:	e782      	b.n	800ab0a <_strtod_l+0x3ca>
 800ac04:	2300      	movs	r3, #0
 800ac06:	4e33      	ldr	r6, [pc, #204]	; (800acd4 <_strtod_l+0x594>)
 800ac08:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ac0c:	4650      	mov	r0, sl
 800ac0e:	4659      	mov	r1, fp
 800ac10:	461d      	mov	r5, r3
 800ac12:	f1b8 0f01 	cmp.w	r8, #1
 800ac16:	dc21      	bgt.n	800ac5c <_strtod_l+0x51c>
 800ac18:	b10b      	cbz	r3, 800ac1e <_strtod_l+0x4de>
 800ac1a:	4682      	mov	sl, r0
 800ac1c:	468b      	mov	fp, r1
 800ac1e:	4b2d      	ldr	r3, [pc, #180]	; (800acd4 <_strtod_l+0x594>)
 800ac20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ac24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ac28:	4652      	mov	r2, sl
 800ac2a:	465b      	mov	r3, fp
 800ac2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ac30:	f7f5 fce2 	bl	80005f8 <__aeabi_dmul>
 800ac34:	4b28      	ldr	r3, [pc, #160]	; (800acd8 <_strtod_l+0x598>)
 800ac36:	460a      	mov	r2, r1
 800ac38:	400b      	ands	r3, r1
 800ac3a:	4928      	ldr	r1, [pc, #160]	; (800acdc <_strtod_l+0x59c>)
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	4682      	mov	sl, r0
 800ac40:	d898      	bhi.n	800ab74 <_strtod_l+0x434>
 800ac42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ac46:	428b      	cmp	r3, r1
 800ac48:	bf86      	itte	hi
 800ac4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ace4 <_strtod_l+0x5a4>
 800ac4e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ac52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ac56:	2300      	movs	r3, #0
 800ac58:	9304      	str	r3, [sp, #16]
 800ac5a:	e077      	b.n	800ad4c <_strtod_l+0x60c>
 800ac5c:	f018 0f01 	tst.w	r8, #1
 800ac60:	d006      	beq.n	800ac70 <_strtod_l+0x530>
 800ac62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	f7f5 fcc5 	bl	80005f8 <__aeabi_dmul>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	3501      	adds	r5, #1
 800ac72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac76:	e7cc      	b.n	800ac12 <_strtod_l+0x4d2>
 800ac78:	d0ed      	beq.n	800ac56 <_strtod_l+0x516>
 800ac7a:	f1c8 0800 	rsb	r8, r8, #0
 800ac7e:	f018 020f 	ands.w	r2, r8, #15
 800ac82:	d00a      	beq.n	800ac9a <_strtod_l+0x55a>
 800ac84:	4b12      	ldr	r3, [pc, #72]	; (800acd0 <_strtod_l+0x590>)
 800ac86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	4659      	mov	r1, fp
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f7f5 fddb 	bl	800084c <__aeabi_ddiv>
 800ac96:	4682      	mov	sl, r0
 800ac98:	468b      	mov	fp, r1
 800ac9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ac9e:	d0da      	beq.n	800ac56 <_strtod_l+0x516>
 800aca0:	f1b8 0f1f 	cmp.w	r8, #31
 800aca4:	dd20      	ble.n	800ace8 <_strtod_l+0x5a8>
 800aca6:	2400      	movs	r4, #0
 800aca8:	46a0      	mov	r8, r4
 800acaa:	9407      	str	r4, [sp, #28]
 800acac:	9405      	str	r4, [sp, #20]
 800acae:	2322      	movs	r3, #34	; 0x22
 800acb0:	f04f 0a00 	mov.w	sl, #0
 800acb4:	f04f 0b00 	mov.w	fp, #0
 800acb8:	f8c9 3000 	str.w	r3, [r9]
 800acbc:	e765      	b.n	800ab8a <_strtod_l+0x44a>
 800acbe:	bf00      	nop
 800acc0:	0800d7ad 	.word	0x0800d7ad
 800acc4:	0800d833 	.word	0x0800d833
 800acc8:	0800d7b5 	.word	0x0800d7b5
 800accc:	0800d7f0 	.word	0x0800d7f0
 800acd0:	0800d870 	.word	0x0800d870
 800acd4:	0800d848 	.word	0x0800d848
 800acd8:	7ff00000 	.word	0x7ff00000
 800acdc:	7ca00000 	.word	0x7ca00000
 800ace0:	fff80000 	.word	0xfff80000
 800ace4:	7fefffff 	.word	0x7fefffff
 800ace8:	f018 0310 	ands.w	r3, r8, #16
 800acec:	bf18      	it	ne
 800acee:	236a      	movne	r3, #106	; 0x6a
 800acf0:	4da0      	ldr	r5, [pc, #640]	; (800af74 <_strtod_l+0x834>)
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	4650      	mov	r0, sl
 800acf6:	4659      	mov	r1, fp
 800acf8:	2300      	movs	r3, #0
 800acfa:	f1b8 0f00 	cmp.w	r8, #0
 800acfe:	f300 810a 	bgt.w	800af16 <_strtod_l+0x7d6>
 800ad02:	b10b      	cbz	r3, 800ad08 <_strtod_l+0x5c8>
 800ad04:	4682      	mov	sl, r0
 800ad06:	468b      	mov	fp, r1
 800ad08:	9b04      	ldr	r3, [sp, #16]
 800ad0a:	b1bb      	cbz	r3, 800ad3c <_strtod_l+0x5fc>
 800ad0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ad10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	4659      	mov	r1, fp
 800ad18:	dd10      	ble.n	800ad3c <_strtod_l+0x5fc>
 800ad1a:	2b1f      	cmp	r3, #31
 800ad1c:	f340 8107 	ble.w	800af2e <_strtod_l+0x7ee>
 800ad20:	2b34      	cmp	r3, #52	; 0x34
 800ad22:	bfde      	ittt	le
 800ad24:	3b20      	suble	r3, #32
 800ad26:	f04f 32ff 	movle.w	r2, #4294967295
 800ad2a:	fa02 f303 	lslle.w	r3, r2, r3
 800ad2e:	f04f 0a00 	mov.w	sl, #0
 800ad32:	bfcc      	ite	gt
 800ad34:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ad38:	ea03 0b01 	andle.w	fp, r3, r1
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2300      	movs	r3, #0
 800ad40:	4650      	mov	r0, sl
 800ad42:	4659      	mov	r1, fp
 800ad44:	f7f5 fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d1ac      	bne.n	800aca6 <_strtod_l+0x566>
 800ad4c:	9b07      	ldr	r3, [sp, #28]
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	9a05      	ldr	r2, [sp, #20]
 800ad52:	9908      	ldr	r1, [sp, #32]
 800ad54:	4623      	mov	r3, r4
 800ad56:	4648      	mov	r0, r9
 800ad58:	f001 fe87 	bl	800ca6a <__s2b>
 800ad5c:	9007      	str	r0, [sp, #28]
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f43f af08 	beq.w	800ab74 <_strtod_l+0x434>
 800ad64:	9a06      	ldr	r2, [sp, #24]
 800ad66:	9b06      	ldr	r3, [sp, #24]
 800ad68:	2a00      	cmp	r2, #0
 800ad6a:	f1c3 0300 	rsb	r3, r3, #0
 800ad6e:	bfa8      	it	ge
 800ad70:	2300      	movge	r3, #0
 800ad72:	930e      	str	r3, [sp, #56]	; 0x38
 800ad74:	2400      	movs	r4, #0
 800ad76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ad7a:	9316      	str	r3, [sp, #88]	; 0x58
 800ad7c:	46a0      	mov	r8, r4
 800ad7e:	9b07      	ldr	r3, [sp, #28]
 800ad80:	4648      	mov	r0, r9
 800ad82:	6859      	ldr	r1, [r3, #4]
 800ad84:	f001 fdeb 	bl	800c95e <_Balloc>
 800ad88:	9005      	str	r0, [sp, #20]
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	f43f aef6 	beq.w	800ab7c <_strtod_l+0x43c>
 800ad90:	9b07      	ldr	r3, [sp, #28]
 800ad92:	691a      	ldr	r2, [r3, #16]
 800ad94:	3202      	adds	r2, #2
 800ad96:	f103 010c 	add.w	r1, r3, #12
 800ad9a:	0092      	lsls	r2, r2, #2
 800ad9c:	300c      	adds	r0, #12
 800ad9e:	f001 fdd3 	bl	800c948 <memcpy>
 800ada2:	aa1e      	add	r2, sp, #120	; 0x78
 800ada4:	a91d      	add	r1, sp, #116	; 0x74
 800ada6:	ec4b ab10 	vmov	d0, sl, fp
 800adaa:	4648      	mov	r0, r9
 800adac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800adb0:	f002 f916 	bl	800cfe0 <__d2b>
 800adb4:	901c      	str	r0, [sp, #112]	; 0x70
 800adb6:	2800      	cmp	r0, #0
 800adb8:	f43f aee0 	beq.w	800ab7c <_strtod_l+0x43c>
 800adbc:	2101      	movs	r1, #1
 800adbe:	4648      	mov	r0, r9
 800adc0:	f001 fedf 	bl	800cb82 <__i2b>
 800adc4:	4680      	mov	r8, r0
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f43f aed8 	beq.w	800ab7c <_strtod_l+0x43c>
 800adcc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800adce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800add0:	2e00      	cmp	r6, #0
 800add2:	bfab      	itete	ge
 800add4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800add6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800add8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800adda:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800addc:	bfac      	ite	ge
 800adde:	18f7      	addge	r7, r6, r3
 800ade0:	1b9d      	sublt	r5, r3, r6
 800ade2:	9b04      	ldr	r3, [sp, #16]
 800ade4:	1af6      	subs	r6, r6, r3
 800ade6:	4416      	add	r6, r2
 800ade8:	4b63      	ldr	r3, [pc, #396]	; (800af78 <_strtod_l+0x838>)
 800adea:	3e01      	subs	r6, #1
 800adec:	429e      	cmp	r6, r3
 800adee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800adf2:	f280 80af 	bge.w	800af54 <_strtod_l+0x814>
 800adf6:	1b9b      	subs	r3, r3, r6
 800adf8:	2b1f      	cmp	r3, #31
 800adfa:	eba2 0203 	sub.w	r2, r2, r3
 800adfe:	f04f 0101 	mov.w	r1, #1
 800ae02:	f300 809b 	bgt.w	800af3c <_strtod_l+0x7fc>
 800ae06:	fa01 f303 	lsl.w	r3, r1, r3
 800ae0a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae10:	18be      	adds	r6, r7, r2
 800ae12:	9b04      	ldr	r3, [sp, #16]
 800ae14:	42b7      	cmp	r7, r6
 800ae16:	4415      	add	r5, r2
 800ae18:	441d      	add	r5, r3
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	bfa8      	it	ge
 800ae1e:	4633      	movge	r3, r6
 800ae20:	42ab      	cmp	r3, r5
 800ae22:	bfa8      	it	ge
 800ae24:	462b      	movge	r3, r5
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfc2      	ittt	gt
 800ae2a:	1af6      	subgt	r6, r6, r3
 800ae2c:	1aed      	subgt	r5, r5, r3
 800ae2e:	1aff      	subgt	r7, r7, r3
 800ae30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae32:	b1bb      	cbz	r3, 800ae64 <_strtod_l+0x724>
 800ae34:	4641      	mov	r1, r8
 800ae36:	461a      	mov	r2, r3
 800ae38:	4648      	mov	r0, r9
 800ae3a:	f001 ff41 	bl	800ccc0 <__pow5mult>
 800ae3e:	4680      	mov	r8, r0
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f43f ae9b 	beq.w	800ab7c <_strtod_l+0x43c>
 800ae46:	4601      	mov	r1, r0
 800ae48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ae4a:	4648      	mov	r0, r9
 800ae4c:	f001 fea2 	bl	800cb94 <__multiply>
 800ae50:	900c      	str	r0, [sp, #48]	; 0x30
 800ae52:	2800      	cmp	r0, #0
 800ae54:	f43f ae92 	beq.w	800ab7c <_strtod_l+0x43c>
 800ae58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae5a:	4648      	mov	r0, r9
 800ae5c:	f001 fdb3 	bl	800c9c6 <_Bfree>
 800ae60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae62:	931c      	str	r3, [sp, #112]	; 0x70
 800ae64:	2e00      	cmp	r6, #0
 800ae66:	dc7a      	bgt.n	800af5e <_strtod_l+0x81e>
 800ae68:	9b06      	ldr	r3, [sp, #24]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	dd08      	ble.n	800ae80 <_strtod_l+0x740>
 800ae6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae70:	9905      	ldr	r1, [sp, #20]
 800ae72:	4648      	mov	r0, r9
 800ae74:	f001 ff24 	bl	800ccc0 <__pow5mult>
 800ae78:	9005      	str	r0, [sp, #20]
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	f43f ae7e 	beq.w	800ab7c <_strtod_l+0x43c>
 800ae80:	2d00      	cmp	r5, #0
 800ae82:	dd08      	ble.n	800ae96 <_strtod_l+0x756>
 800ae84:	462a      	mov	r2, r5
 800ae86:	9905      	ldr	r1, [sp, #20]
 800ae88:	4648      	mov	r0, r9
 800ae8a:	f001 ff67 	bl	800cd5c <__lshift>
 800ae8e:	9005      	str	r0, [sp, #20]
 800ae90:	2800      	cmp	r0, #0
 800ae92:	f43f ae73 	beq.w	800ab7c <_strtod_l+0x43c>
 800ae96:	2f00      	cmp	r7, #0
 800ae98:	dd08      	ble.n	800aeac <_strtod_l+0x76c>
 800ae9a:	4641      	mov	r1, r8
 800ae9c:	463a      	mov	r2, r7
 800ae9e:	4648      	mov	r0, r9
 800aea0:	f001 ff5c 	bl	800cd5c <__lshift>
 800aea4:	4680      	mov	r8, r0
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f43f ae68 	beq.w	800ab7c <_strtod_l+0x43c>
 800aeac:	9a05      	ldr	r2, [sp, #20]
 800aeae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aeb0:	4648      	mov	r0, r9
 800aeb2:	f001 ffc1 	bl	800ce38 <__mdiff>
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	f43f ae5f 	beq.w	800ab7c <_strtod_l+0x43c>
 800aebe:	68c3      	ldr	r3, [r0, #12]
 800aec0:	930c      	str	r3, [sp, #48]	; 0x30
 800aec2:	2300      	movs	r3, #0
 800aec4:	60c3      	str	r3, [r0, #12]
 800aec6:	4641      	mov	r1, r8
 800aec8:	f001 ff9c 	bl	800ce04 <__mcmp>
 800aecc:	2800      	cmp	r0, #0
 800aece:	da55      	bge.n	800af7c <_strtod_l+0x83c>
 800aed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aed2:	b9e3      	cbnz	r3, 800af0e <_strtod_l+0x7ce>
 800aed4:	f1ba 0f00 	cmp.w	sl, #0
 800aed8:	d119      	bne.n	800af0e <_strtod_l+0x7ce>
 800aeda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aede:	b9b3      	cbnz	r3, 800af0e <_strtod_l+0x7ce>
 800aee0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aee4:	0d1b      	lsrs	r3, r3, #20
 800aee6:	051b      	lsls	r3, r3, #20
 800aee8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aeec:	d90f      	bls.n	800af0e <_strtod_l+0x7ce>
 800aeee:	6963      	ldr	r3, [r4, #20]
 800aef0:	b913      	cbnz	r3, 800aef8 <_strtod_l+0x7b8>
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	dd0a      	ble.n	800af0e <_strtod_l+0x7ce>
 800aef8:	4621      	mov	r1, r4
 800aefa:	2201      	movs	r2, #1
 800aefc:	4648      	mov	r0, r9
 800aefe:	f001 ff2d 	bl	800cd5c <__lshift>
 800af02:	4641      	mov	r1, r8
 800af04:	4604      	mov	r4, r0
 800af06:	f001 ff7d 	bl	800ce04 <__mcmp>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	dc67      	bgt.n	800afde <_strtod_l+0x89e>
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d171      	bne.n	800aff8 <_strtod_l+0x8b8>
 800af14:	e63d      	b.n	800ab92 <_strtod_l+0x452>
 800af16:	f018 0f01 	tst.w	r8, #1
 800af1a:	d004      	beq.n	800af26 <_strtod_l+0x7e6>
 800af1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af20:	f7f5 fb6a 	bl	80005f8 <__aeabi_dmul>
 800af24:	2301      	movs	r3, #1
 800af26:	ea4f 0868 	mov.w	r8, r8, asr #1
 800af2a:	3508      	adds	r5, #8
 800af2c:	e6e5      	b.n	800acfa <_strtod_l+0x5ba>
 800af2e:	f04f 32ff 	mov.w	r2, #4294967295
 800af32:	fa02 f303 	lsl.w	r3, r2, r3
 800af36:	ea03 0a0a 	and.w	sl, r3, sl
 800af3a:	e6ff      	b.n	800ad3c <_strtod_l+0x5fc>
 800af3c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800af40:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800af44:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800af48:	36e2      	adds	r6, #226	; 0xe2
 800af4a:	fa01 f306 	lsl.w	r3, r1, r6
 800af4e:	930a      	str	r3, [sp, #40]	; 0x28
 800af50:	910f      	str	r1, [sp, #60]	; 0x3c
 800af52:	e75d      	b.n	800ae10 <_strtod_l+0x6d0>
 800af54:	2300      	movs	r3, #0
 800af56:	930a      	str	r3, [sp, #40]	; 0x28
 800af58:	2301      	movs	r3, #1
 800af5a:	930f      	str	r3, [sp, #60]	; 0x3c
 800af5c:	e758      	b.n	800ae10 <_strtod_l+0x6d0>
 800af5e:	4632      	mov	r2, r6
 800af60:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af62:	4648      	mov	r0, r9
 800af64:	f001 fefa 	bl	800cd5c <__lshift>
 800af68:	901c      	str	r0, [sp, #112]	; 0x70
 800af6a:	2800      	cmp	r0, #0
 800af6c:	f47f af7c 	bne.w	800ae68 <_strtod_l+0x728>
 800af70:	e604      	b.n	800ab7c <_strtod_l+0x43c>
 800af72:	bf00      	nop
 800af74:	0800d808 	.word	0x0800d808
 800af78:	fffffc02 	.word	0xfffffc02
 800af7c:	465d      	mov	r5, fp
 800af7e:	f040 8086 	bne.w	800b08e <_strtod_l+0x94e>
 800af82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af88:	b32a      	cbz	r2, 800afd6 <_strtod_l+0x896>
 800af8a:	4aaf      	ldr	r2, [pc, #700]	; (800b248 <_strtod_l+0xb08>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d153      	bne.n	800b038 <_strtod_l+0x8f8>
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	4650      	mov	r0, sl
 800af94:	b1d3      	cbz	r3, 800afcc <_strtod_l+0x88c>
 800af96:	4aad      	ldr	r2, [pc, #692]	; (800b24c <_strtod_l+0xb0c>)
 800af98:	402a      	ands	r2, r5
 800af9a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800af9e:	f04f 31ff 	mov.w	r1, #4294967295
 800afa2:	d816      	bhi.n	800afd2 <_strtod_l+0x892>
 800afa4:	0d12      	lsrs	r2, r2, #20
 800afa6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800afaa:	fa01 f303 	lsl.w	r3, r1, r3
 800afae:	4298      	cmp	r0, r3
 800afb0:	d142      	bne.n	800b038 <_strtod_l+0x8f8>
 800afb2:	4ba7      	ldr	r3, [pc, #668]	; (800b250 <_strtod_l+0xb10>)
 800afb4:	429d      	cmp	r5, r3
 800afb6:	d102      	bne.n	800afbe <_strtod_l+0x87e>
 800afb8:	3001      	adds	r0, #1
 800afba:	f43f addf 	beq.w	800ab7c <_strtod_l+0x43c>
 800afbe:	4ba3      	ldr	r3, [pc, #652]	; (800b24c <_strtod_l+0xb0c>)
 800afc0:	402b      	ands	r3, r5
 800afc2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800afc6:	f04f 0a00 	mov.w	sl, #0
 800afca:	e7a0      	b.n	800af0e <_strtod_l+0x7ce>
 800afcc:	f04f 33ff 	mov.w	r3, #4294967295
 800afd0:	e7ed      	b.n	800afae <_strtod_l+0x86e>
 800afd2:	460b      	mov	r3, r1
 800afd4:	e7eb      	b.n	800afae <_strtod_l+0x86e>
 800afd6:	bb7b      	cbnz	r3, 800b038 <_strtod_l+0x8f8>
 800afd8:	f1ba 0f00 	cmp.w	sl, #0
 800afdc:	d12c      	bne.n	800b038 <_strtod_l+0x8f8>
 800afde:	9904      	ldr	r1, [sp, #16]
 800afe0:	4a9a      	ldr	r2, [pc, #616]	; (800b24c <_strtod_l+0xb0c>)
 800afe2:	465b      	mov	r3, fp
 800afe4:	b1f1      	cbz	r1, 800b024 <_strtod_l+0x8e4>
 800afe6:	ea02 010b 	and.w	r1, r2, fp
 800afea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800afee:	dc19      	bgt.n	800b024 <_strtod_l+0x8e4>
 800aff0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aff4:	f77f ae5b 	ble.w	800acae <_strtod_l+0x56e>
 800aff8:	4a96      	ldr	r2, [pc, #600]	; (800b254 <_strtod_l+0xb14>)
 800affa:	2300      	movs	r3, #0
 800affc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b000:	4650      	mov	r0, sl
 800b002:	4659      	mov	r1, fp
 800b004:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b008:	f7f5 faf6 	bl	80005f8 <__aeabi_dmul>
 800b00c:	4682      	mov	sl, r0
 800b00e:	468b      	mov	fp, r1
 800b010:	2900      	cmp	r1, #0
 800b012:	f47f adbe 	bne.w	800ab92 <_strtod_l+0x452>
 800b016:	2800      	cmp	r0, #0
 800b018:	f47f adbb 	bne.w	800ab92 <_strtod_l+0x452>
 800b01c:	2322      	movs	r3, #34	; 0x22
 800b01e:	f8c9 3000 	str.w	r3, [r9]
 800b022:	e5b6      	b.n	800ab92 <_strtod_l+0x452>
 800b024:	4013      	ands	r3, r2
 800b026:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b02a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b02e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b032:	f04f 3aff 	mov.w	sl, #4294967295
 800b036:	e76a      	b.n	800af0e <_strtod_l+0x7ce>
 800b038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b03a:	b193      	cbz	r3, 800b062 <_strtod_l+0x922>
 800b03c:	422b      	tst	r3, r5
 800b03e:	f43f af66 	beq.w	800af0e <_strtod_l+0x7ce>
 800b042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b044:	9a04      	ldr	r2, [sp, #16]
 800b046:	4650      	mov	r0, sl
 800b048:	4659      	mov	r1, fp
 800b04a:	b173      	cbz	r3, 800b06a <_strtod_l+0x92a>
 800b04c:	f7ff fb5a 	bl	800a704 <sulp>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b058:	f7f5 f918 	bl	800028c <__adddf3>
 800b05c:	4682      	mov	sl, r0
 800b05e:	468b      	mov	fp, r1
 800b060:	e755      	b.n	800af0e <_strtod_l+0x7ce>
 800b062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b064:	ea13 0f0a 	tst.w	r3, sl
 800b068:	e7e9      	b.n	800b03e <_strtod_l+0x8fe>
 800b06a:	f7ff fb4b 	bl	800a704 <sulp>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b076:	f7f5 f907 	bl	8000288 <__aeabi_dsub>
 800b07a:	2200      	movs	r2, #0
 800b07c:	2300      	movs	r3, #0
 800b07e:	4682      	mov	sl, r0
 800b080:	468b      	mov	fp, r1
 800b082:	f7f5 fd21 	bl	8000ac8 <__aeabi_dcmpeq>
 800b086:	2800      	cmp	r0, #0
 800b088:	f47f ae11 	bne.w	800acae <_strtod_l+0x56e>
 800b08c:	e73f      	b.n	800af0e <_strtod_l+0x7ce>
 800b08e:	4641      	mov	r1, r8
 800b090:	4620      	mov	r0, r4
 800b092:	f001 fff4 	bl	800d07e <__ratio>
 800b096:	ec57 6b10 	vmov	r6, r7, d0
 800b09a:	2200      	movs	r2, #0
 800b09c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0a0:	ee10 0a10 	vmov	r0, s0
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	f7f5 fd23 	bl	8000af0 <__aeabi_dcmple>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d077      	beq.n	800b19e <_strtod_l+0xa5e>
 800b0ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d04a      	beq.n	800b14a <_strtod_l+0xa0a>
 800b0b4:	4b68      	ldr	r3, [pc, #416]	; (800b258 <_strtod_l+0xb18>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b0bc:	4f66      	ldr	r7, [pc, #408]	; (800b258 <_strtod_l+0xb18>)
 800b0be:	2600      	movs	r6, #0
 800b0c0:	4b62      	ldr	r3, [pc, #392]	; (800b24c <_strtod_l+0xb0c>)
 800b0c2:	402b      	ands	r3, r5
 800b0c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0c8:	4b64      	ldr	r3, [pc, #400]	; (800b25c <_strtod_l+0xb1c>)
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	f040 80ce 	bne.w	800b26c <_strtod_l+0xb2c>
 800b0d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b0d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b0dc:	ec4b ab10 	vmov	d0, sl, fp
 800b0e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b0e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b0e8:	f001 ff04 	bl	800cef4 <__ulp>
 800b0ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b0f0:	ec53 2b10 	vmov	r2, r3, d0
 800b0f4:	f7f5 fa80 	bl	80005f8 <__aeabi_dmul>
 800b0f8:	4652      	mov	r2, sl
 800b0fa:	465b      	mov	r3, fp
 800b0fc:	f7f5 f8c6 	bl	800028c <__adddf3>
 800b100:	460b      	mov	r3, r1
 800b102:	4952      	ldr	r1, [pc, #328]	; (800b24c <_strtod_l+0xb0c>)
 800b104:	4a56      	ldr	r2, [pc, #344]	; (800b260 <_strtod_l+0xb20>)
 800b106:	4019      	ands	r1, r3
 800b108:	4291      	cmp	r1, r2
 800b10a:	4682      	mov	sl, r0
 800b10c:	d95b      	bls.n	800b1c6 <_strtod_l+0xa86>
 800b10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b110:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b114:	4293      	cmp	r3, r2
 800b116:	d103      	bne.n	800b120 <_strtod_l+0x9e0>
 800b118:	9b08      	ldr	r3, [sp, #32]
 800b11a:	3301      	adds	r3, #1
 800b11c:	f43f ad2e 	beq.w	800ab7c <_strtod_l+0x43c>
 800b120:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b250 <_strtod_l+0xb10>
 800b124:	f04f 3aff 	mov.w	sl, #4294967295
 800b128:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b12a:	4648      	mov	r0, r9
 800b12c:	f001 fc4b 	bl	800c9c6 <_Bfree>
 800b130:	9905      	ldr	r1, [sp, #20]
 800b132:	4648      	mov	r0, r9
 800b134:	f001 fc47 	bl	800c9c6 <_Bfree>
 800b138:	4641      	mov	r1, r8
 800b13a:	4648      	mov	r0, r9
 800b13c:	f001 fc43 	bl	800c9c6 <_Bfree>
 800b140:	4621      	mov	r1, r4
 800b142:	4648      	mov	r0, r9
 800b144:	f001 fc3f 	bl	800c9c6 <_Bfree>
 800b148:	e619      	b.n	800ad7e <_strtod_l+0x63e>
 800b14a:	f1ba 0f00 	cmp.w	sl, #0
 800b14e:	d11a      	bne.n	800b186 <_strtod_l+0xa46>
 800b150:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b154:	b9eb      	cbnz	r3, 800b192 <_strtod_l+0xa52>
 800b156:	2200      	movs	r2, #0
 800b158:	4b3f      	ldr	r3, [pc, #252]	; (800b258 <_strtod_l+0xb18>)
 800b15a:	4630      	mov	r0, r6
 800b15c:	4639      	mov	r1, r7
 800b15e:	f7f5 fcbd 	bl	8000adc <__aeabi_dcmplt>
 800b162:	b9c8      	cbnz	r0, 800b198 <_strtod_l+0xa58>
 800b164:	4630      	mov	r0, r6
 800b166:	4639      	mov	r1, r7
 800b168:	2200      	movs	r2, #0
 800b16a:	4b3e      	ldr	r3, [pc, #248]	; (800b264 <_strtod_l+0xb24>)
 800b16c:	f7f5 fa44 	bl	80005f8 <__aeabi_dmul>
 800b170:	4606      	mov	r6, r0
 800b172:	460f      	mov	r7, r1
 800b174:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b178:	9618      	str	r6, [sp, #96]	; 0x60
 800b17a:	9319      	str	r3, [sp, #100]	; 0x64
 800b17c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b180:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b184:	e79c      	b.n	800b0c0 <_strtod_l+0x980>
 800b186:	f1ba 0f01 	cmp.w	sl, #1
 800b18a:	d102      	bne.n	800b192 <_strtod_l+0xa52>
 800b18c:	2d00      	cmp	r5, #0
 800b18e:	f43f ad8e 	beq.w	800acae <_strtod_l+0x56e>
 800b192:	2200      	movs	r2, #0
 800b194:	4b34      	ldr	r3, [pc, #208]	; (800b268 <_strtod_l+0xb28>)
 800b196:	e78f      	b.n	800b0b8 <_strtod_l+0x978>
 800b198:	2600      	movs	r6, #0
 800b19a:	4f32      	ldr	r7, [pc, #200]	; (800b264 <_strtod_l+0xb24>)
 800b19c:	e7ea      	b.n	800b174 <_strtod_l+0xa34>
 800b19e:	4b31      	ldr	r3, [pc, #196]	; (800b264 <_strtod_l+0xb24>)
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f7f5 fa27 	bl	80005f8 <__aeabi_dmul>
 800b1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1ac:	4606      	mov	r6, r0
 800b1ae:	460f      	mov	r7, r1
 800b1b0:	b933      	cbnz	r3, 800b1c0 <_strtod_l+0xa80>
 800b1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1b6:	9010      	str	r0, [sp, #64]	; 0x40
 800b1b8:	9311      	str	r3, [sp, #68]	; 0x44
 800b1ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1be:	e7df      	b.n	800b180 <_strtod_l+0xa40>
 800b1c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b1c4:	e7f9      	b.n	800b1ba <_strtod_l+0xa7a>
 800b1c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b1ca:	9b04      	ldr	r3, [sp, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1ab      	bne.n	800b128 <_strtod_l+0x9e8>
 800b1d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b1d4:	0d1b      	lsrs	r3, r3, #20
 800b1d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1d8:	051b      	lsls	r3, r3, #20
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	465d      	mov	r5, fp
 800b1de:	d1a3      	bne.n	800b128 <_strtod_l+0x9e8>
 800b1e0:	4639      	mov	r1, r7
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	f7f5 fcb8 	bl	8000b58 <__aeabi_d2iz>
 800b1e8:	f7f5 f99c 	bl	8000524 <__aeabi_i2d>
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	f7f5 f848 	bl	8000288 <__aeabi_dsub>
 800b1f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	460f      	mov	r7, r1
 800b1fe:	b933      	cbnz	r3, 800b20e <_strtod_l+0xace>
 800b200:	f1ba 0f00 	cmp.w	sl, #0
 800b204:	d103      	bne.n	800b20e <_strtod_l+0xace>
 800b206:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b20a:	2d00      	cmp	r5, #0
 800b20c:	d06d      	beq.n	800b2ea <_strtod_l+0xbaa>
 800b20e:	a30a      	add	r3, pc, #40	; (adr r3, 800b238 <_strtod_l+0xaf8>)
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	4630      	mov	r0, r6
 800b216:	4639      	mov	r1, r7
 800b218:	f7f5 fc60 	bl	8000adc <__aeabi_dcmplt>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	f47f acb8 	bne.w	800ab92 <_strtod_l+0x452>
 800b222:	a307      	add	r3, pc, #28	; (adr r3, 800b240 <_strtod_l+0xb00>)
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	4630      	mov	r0, r6
 800b22a:	4639      	mov	r1, r7
 800b22c:	f7f5 fc74 	bl	8000b18 <__aeabi_dcmpgt>
 800b230:	2800      	cmp	r0, #0
 800b232:	f43f af79 	beq.w	800b128 <_strtod_l+0x9e8>
 800b236:	e4ac      	b.n	800ab92 <_strtod_l+0x452>
 800b238:	94a03595 	.word	0x94a03595
 800b23c:	3fdfffff 	.word	0x3fdfffff
 800b240:	35afe535 	.word	0x35afe535
 800b244:	3fe00000 	.word	0x3fe00000
 800b248:	000fffff 	.word	0x000fffff
 800b24c:	7ff00000 	.word	0x7ff00000
 800b250:	7fefffff 	.word	0x7fefffff
 800b254:	39500000 	.word	0x39500000
 800b258:	3ff00000 	.word	0x3ff00000
 800b25c:	7fe00000 	.word	0x7fe00000
 800b260:	7c9fffff 	.word	0x7c9fffff
 800b264:	3fe00000 	.word	0x3fe00000
 800b268:	bff00000 	.word	0xbff00000
 800b26c:	9b04      	ldr	r3, [sp, #16]
 800b26e:	b333      	cbz	r3, 800b2be <_strtod_l+0xb7e>
 800b270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b272:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b276:	d822      	bhi.n	800b2be <_strtod_l+0xb7e>
 800b278:	a327      	add	r3, pc, #156	; (adr r3, 800b318 <_strtod_l+0xbd8>)
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	4630      	mov	r0, r6
 800b280:	4639      	mov	r1, r7
 800b282:	f7f5 fc35 	bl	8000af0 <__aeabi_dcmple>
 800b286:	b1a0      	cbz	r0, 800b2b2 <_strtod_l+0xb72>
 800b288:	4639      	mov	r1, r7
 800b28a:	4630      	mov	r0, r6
 800b28c:	f7f5 fc8c 	bl	8000ba8 <__aeabi_d2uiz>
 800b290:	2800      	cmp	r0, #0
 800b292:	bf08      	it	eq
 800b294:	2001      	moveq	r0, #1
 800b296:	f7f5 f935 	bl	8000504 <__aeabi_ui2d>
 800b29a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b29c:	4606      	mov	r6, r0
 800b29e:	460f      	mov	r7, r1
 800b2a0:	bb03      	cbnz	r3, 800b2e4 <_strtod_l+0xba4>
 800b2a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2a6:	9012      	str	r0, [sp, #72]	; 0x48
 800b2a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b2aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b2ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b2ba:	1a9b      	subs	r3, r3, r2
 800b2bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2be:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b2c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b2c6:	f001 fe15 	bl	800cef4 <__ulp>
 800b2ca:	4650      	mov	r0, sl
 800b2cc:	ec53 2b10 	vmov	r2, r3, d0
 800b2d0:	4659      	mov	r1, fp
 800b2d2:	f7f5 f991 	bl	80005f8 <__aeabi_dmul>
 800b2d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2da:	f7f4 ffd7 	bl	800028c <__adddf3>
 800b2de:	4682      	mov	sl, r0
 800b2e0:	468b      	mov	fp, r1
 800b2e2:	e772      	b.n	800b1ca <_strtod_l+0xa8a>
 800b2e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b2e8:	e7df      	b.n	800b2aa <_strtod_l+0xb6a>
 800b2ea:	a30d      	add	r3, pc, #52	; (adr r3, 800b320 <_strtod_l+0xbe0>)
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f0:	f7f5 fbf4 	bl	8000adc <__aeabi_dcmplt>
 800b2f4:	e79c      	b.n	800b230 <_strtod_l+0xaf0>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	930d      	str	r3, [sp, #52]	; 0x34
 800b2fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2fe:	6013      	str	r3, [r2, #0]
 800b300:	f7ff ba61 	b.w	800a7c6 <_strtod_l+0x86>
 800b304:	2b65      	cmp	r3, #101	; 0x65
 800b306:	f04f 0200 	mov.w	r2, #0
 800b30a:	f43f ab4e 	beq.w	800a9aa <_strtod_l+0x26a>
 800b30e:	2101      	movs	r1, #1
 800b310:	4614      	mov	r4, r2
 800b312:	9104      	str	r1, [sp, #16]
 800b314:	f7ff bacb 	b.w	800a8ae <_strtod_l+0x16e>
 800b318:	ffc00000 	.word	0xffc00000
 800b31c:	41dfffff 	.word	0x41dfffff
 800b320:	94a03595 	.word	0x94a03595
 800b324:	3fcfffff 	.word	0x3fcfffff

0800b328 <strtof>:
 800b328:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800b32c:	4e24      	ldr	r6, [pc, #144]	; (800b3c0 <strtof+0x98>)
 800b32e:	4a25      	ldr	r2, [pc, #148]	; (800b3c4 <strtof+0x9c>)
 800b330:	6834      	ldr	r4, [r6, #0]
 800b332:	6a23      	ldr	r3, [r4, #32]
 800b334:	ed2d 8b02 	vpush	{d8}
 800b338:	2b00      	cmp	r3, #0
 800b33a:	bf08      	it	eq
 800b33c:	4613      	moveq	r3, r2
 800b33e:	460a      	mov	r2, r1
 800b340:	4601      	mov	r1, r0
 800b342:	4620      	mov	r0, r4
 800b344:	f7ff f9fc 	bl	800a740 <_strtod_l>
 800b348:	ec55 4b10 	vmov	r4, r5, d0
 800b34c:	ee10 2a10 	vmov	r2, s0
 800b350:	462b      	mov	r3, r5
 800b352:	ee10 0a10 	vmov	r0, s0
 800b356:	4629      	mov	r1, r5
 800b358:	f7f5 fbe8 	bl	8000b2c <__aeabi_dcmpun>
 800b35c:	b130      	cbz	r0, 800b36c <strtof+0x44>
 800b35e:	ecbd 8b02 	vpop	{d8}
 800b362:	2000      	movs	r0, #0
 800b364:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800b368:	f002 b910 	b.w	800d58c <nanf>
 800b36c:	4620      	mov	r0, r4
 800b36e:	4629      	mov	r1, r5
 800b370:	f7f5 fc3a 	bl	8000be8 <__aeabi_d2f>
 800b374:	ee08 0a10 	vmov	s16, r0
 800b378:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b3c8 <strtof+0xa0>
 800b37c:	eeb0 7ac8 	vabs.f32	s14, s16
 800b380:	eeb4 7a67 	vcmp.f32	s14, s15
 800b384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b388:	dd14      	ble.n	800b3b4 <strtof+0x8c>
 800b38a:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800b38e:	f04f 32ff 	mov.w	r2, #4294967295
 800b392:	4b0e      	ldr	r3, [pc, #56]	; (800b3cc <strtof+0xa4>)
 800b394:	4620      	mov	r0, r4
 800b396:	4649      	mov	r1, r9
 800b398:	f7f5 fbc8 	bl	8000b2c <__aeabi_dcmpun>
 800b39c:	b938      	cbnz	r0, 800b3ae <strtof+0x86>
 800b39e:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a2:	4b0a      	ldr	r3, [pc, #40]	; (800b3cc <strtof+0xa4>)
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	f7f5 fba2 	bl	8000af0 <__aeabi_dcmple>
 800b3ac:	b110      	cbz	r0, 800b3b4 <strtof+0x8c>
 800b3ae:	6833      	ldr	r3, [r6, #0]
 800b3b0:	2222      	movs	r2, #34	; 0x22
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	eeb0 0a48 	vmov.f32	s0, s16
 800b3b8:	ecbd 8b02 	vpop	{d8}
 800b3bc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b3c0:	20000028 	.word	0x20000028
 800b3c4:	2000008c 	.word	0x2000008c
 800b3c8:	7f7fffff 	.word	0x7f7fffff
 800b3cc:	7fefffff 	.word	0x7fefffff

0800b3d0 <_strtol_l.isra.0>:
 800b3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d4:	4680      	mov	r8, r0
 800b3d6:	4689      	mov	r9, r1
 800b3d8:	4692      	mov	sl, r2
 800b3da:	461e      	mov	r6, r3
 800b3dc:	460f      	mov	r7, r1
 800b3de:	463d      	mov	r5, r7
 800b3e0:	9808      	ldr	r0, [sp, #32]
 800b3e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3e6:	f001 fa81 	bl	800c8ec <__locale_ctype_ptr_l>
 800b3ea:	4420      	add	r0, r4
 800b3ec:	7843      	ldrb	r3, [r0, #1]
 800b3ee:	f013 0308 	ands.w	r3, r3, #8
 800b3f2:	d132      	bne.n	800b45a <_strtol_l.isra.0+0x8a>
 800b3f4:	2c2d      	cmp	r4, #45	; 0x2d
 800b3f6:	d132      	bne.n	800b45e <_strtol_l.isra.0+0x8e>
 800b3f8:	787c      	ldrb	r4, [r7, #1]
 800b3fa:	1cbd      	adds	r5, r7, #2
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	2e00      	cmp	r6, #0
 800b400:	d05d      	beq.n	800b4be <_strtol_l.isra.0+0xee>
 800b402:	2e10      	cmp	r6, #16
 800b404:	d109      	bne.n	800b41a <_strtol_l.isra.0+0x4a>
 800b406:	2c30      	cmp	r4, #48	; 0x30
 800b408:	d107      	bne.n	800b41a <_strtol_l.isra.0+0x4a>
 800b40a:	782b      	ldrb	r3, [r5, #0]
 800b40c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b410:	2b58      	cmp	r3, #88	; 0x58
 800b412:	d14f      	bne.n	800b4b4 <_strtol_l.isra.0+0xe4>
 800b414:	786c      	ldrb	r4, [r5, #1]
 800b416:	2610      	movs	r6, #16
 800b418:	3502      	adds	r5, #2
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	bf14      	ite	ne
 800b41e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b422:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b426:	2700      	movs	r7, #0
 800b428:	fbb1 fcf6 	udiv	ip, r1, r6
 800b42c:	4638      	mov	r0, r7
 800b42e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b432:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b436:	2b09      	cmp	r3, #9
 800b438:	d817      	bhi.n	800b46a <_strtol_l.isra.0+0x9a>
 800b43a:	461c      	mov	r4, r3
 800b43c:	42a6      	cmp	r6, r4
 800b43e:	dd23      	ble.n	800b488 <_strtol_l.isra.0+0xb8>
 800b440:	1c7b      	adds	r3, r7, #1
 800b442:	d007      	beq.n	800b454 <_strtol_l.isra.0+0x84>
 800b444:	4584      	cmp	ip, r0
 800b446:	d31c      	bcc.n	800b482 <_strtol_l.isra.0+0xb2>
 800b448:	d101      	bne.n	800b44e <_strtol_l.isra.0+0x7e>
 800b44a:	45a6      	cmp	lr, r4
 800b44c:	db19      	blt.n	800b482 <_strtol_l.isra.0+0xb2>
 800b44e:	fb00 4006 	mla	r0, r0, r6, r4
 800b452:	2701      	movs	r7, #1
 800b454:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b458:	e7eb      	b.n	800b432 <_strtol_l.isra.0+0x62>
 800b45a:	462f      	mov	r7, r5
 800b45c:	e7bf      	b.n	800b3de <_strtol_l.isra.0+0xe>
 800b45e:	2c2b      	cmp	r4, #43	; 0x2b
 800b460:	bf04      	itt	eq
 800b462:	1cbd      	addeq	r5, r7, #2
 800b464:	787c      	ldrbeq	r4, [r7, #1]
 800b466:	461a      	mov	r2, r3
 800b468:	e7c9      	b.n	800b3fe <_strtol_l.isra.0+0x2e>
 800b46a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b46e:	2b19      	cmp	r3, #25
 800b470:	d801      	bhi.n	800b476 <_strtol_l.isra.0+0xa6>
 800b472:	3c37      	subs	r4, #55	; 0x37
 800b474:	e7e2      	b.n	800b43c <_strtol_l.isra.0+0x6c>
 800b476:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b47a:	2b19      	cmp	r3, #25
 800b47c:	d804      	bhi.n	800b488 <_strtol_l.isra.0+0xb8>
 800b47e:	3c57      	subs	r4, #87	; 0x57
 800b480:	e7dc      	b.n	800b43c <_strtol_l.isra.0+0x6c>
 800b482:	f04f 37ff 	mov.w	r7, #4294967295
 800b486:	e7e5      	b.n	800b454 <_strtol_l.isra.0+0x84>
 800b488:	1c7b      	adds	r3, r7, #1
 800b48a:	d108      	bne.n	800b49e <_strtol_l.isra.0+0xce>
 800b48c:	2322      	movs	r3, #34	; 0x22
 800b48e:	f8c8 3000 	str.w	r3, [r8]
 800b492:	4608      	mov	r0, r1
 800b494:	f1ba 0f00 	cmp.w	sl, #0
 800b498:	d107      	bne.n	800b4aa <_strtol_l.isra.0+0xda>
 800b49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49e:	b102      	cbz	r2, 800b4a2 <_strtol_l.isra.0+0xd2>
 800b4a0:	4240      	negs	r0, r0
 800b4a2:	f1ba 0f00 	cmp.w	sl, #0
 800b4a6:	d0f8      	beq.n	800b49a <_strtol_l.isra.0+0xca>
 800b4a8:	b10f      	cbz	r7, 800b4ae <_strtol_l.isra.0+0xde>
 800b4aa:	f105 39ff 	add.w	r9, r5, #4294967295
 800b4ae:	f8ca 9000 	str.w	r9, [sl]
 800b4b2:	e7f2      	b.n	800b49a <_strtol_l.isra.0+0xca>
 800b4b4:	2430      	movs	r4, #48	; 0x30
 800b4b6:	2e00      	cmp	r6, #0
 800b4b8:	d1af      	bne.n	800b41a <_strtol_l.isra.0+0x4a>
 800b4ba:	2608      	movs	r6, #8
 800b4bc:	e7ad      	b.n	800b41a <_strtol_l.isra.0+0x4a>
 800b4be:	2c30      	cmp	r4, #48	; 0x30
 800b4c0:	d0a3      	beq.n	800b40a <_strtol_l.isra.0+0x3a>
 800b4c2:	260a      	movs	r6, #10
 800b4c4:	e7a9      	b.n	800b41a <_strtol_l.isra.0+0x4a>
	...

0800b4c8 <strtol>:
 800b4c8:	4b08      	ldr	r3, [pc, #32]	; (800b4ec <strtol+0x24>)
 800b4ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4cc:	681c      	ldr	r4, [r3, #0]
 800b4ce:	4d08      	ldr	r5, [pc, #32]	; (800b4f0 <strtol+0x28>)
 800b4d0:	6a23      	ldr	r3, [r4, #32]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	bf08      	it	eq
 800b4d6:	462b      	moveq	r3, r5
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	460a      	mov	r2, r1
 800b4de:	4601      	mov	r1, r0
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f7ff ff75 	bl	800b3d0 <_strtol_l.isra.0>
 800b4e6:	b003      	add	sp, #12
 800b4e8:	bd30      	pop	{r4, r5, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000028 	.word	0x20000028
 800b4f0:	2000008c 	.word	0x2000008c

0800b4f4 <_strtoul_l.isra.0>:
 800b4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f8:	4680      	mov	r8, r0
 800b4fa:	4689      	mov	r9, r1
 800b4fc:	4692      	mov	sl, r2
 800b4fe:	461e      	mov	r6, r3
 800b500:	460f      	mov	r7, r1
 800b502:	463d      	mov	r5, r7
 800b504:	9808      	ldr	r0, [sp, #32]
 800b506:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b50a:	f001 f9ef 	bl	800c8ec <__locale_ctype_ptr_l>
 800b50e:	4420      	add	r0, r4
 800b510:	7843      	ldrb	r3, [r0, #1]
 800b512:	f013 0308 	ands.w	r3, r3, #8
 800b516:	d130      	bne.n	800b57a <_strtoul_l.isra.0+0x86>
 800b518:	2c2d      	cmp	r4, #45	; 0x2d
 800b51a:	d130      	bne.n	800b57e <_strtoul_l.isra.0+0x8a>
 800b51c:	787c      	ldrb	r4, [r7, #1]
 800b51e:	1cbd      	adds	r5, r7, #2
 800b520:	2101      	movs	r1, #1
 800b522:	2e00      	cmp	r6, #0
 800b524:	d05c      	beq.n	800b5e0 <_strtoul_l.isra.0+0xec>
 800b526:	2e10      	cmp	r6, #16
 800b528:	d109      	bne.n	800b53e <_strtoul_l.isra.0+0x4a>
 800b52a:	2c30      	cmp	r4, #48	; 0x30
 800b52c:	d107      	bne.n	800b53e <_strtoul_l.isra.0+0x4a>
 800b52e:	782b      	ldrb	r3, [r5, #0]
 800b530:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b534:	2b58      	cmp	r3, #88	; 0x58
 800b536:	d14e      	bne.n	800b5d6 <_strtoul_l.isra.0+0xe2>
 800b538:	786c      	ldrb	r4, [r5, #1]
 800b53a:	2610      	movs	r6, #16
 800b53c:	3502      	adds	r5, #2
 800b53e:	f04f 32ff 	mov.w	r2, #4294967295
 800b542:	2300      	movs	r3, #0
 800b544:	fbb2 f2f6 	udiv	r2, r2, r6
 800b548:	fb06 fc02 	mul.w	ip, r6, r2
 800b54c:	ea6f 0c0c 	mvn.w	ip, ip
 800b550:	4618      	mov	r0, r3
 800b552:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b556:	2f09      	cmp	r7, #9
 800b558:	d817      	bhi.n	800b58a <_strtoul_l.isra.0+0x96>
 800b55a:	463c      	mov	r4, r7
 800b55c:	42a6      	cmp	r6, r4
 800b55e:	dd23      	ble.n	800b5a8 <_strtoul_l.isra.0+0xb4>
 800b560:	2b00      	cmp	r3, #0
 800b562:	db1e      	blt.n	800b5a2 <_strtoul_l.isra.0+0xae>
 800b564:	4282      	cmp	r2, r0
 800b566:	d31c      	bcc.n	800b5a2 <_strtoul_l.isra.0+0xae>
 800b568:	d101      	bne.n	800b56e <_strtoul_l.isra.0+0x7a>
 800b56a:	45a4      	cmp	ip, r4
 800b56c:	db19      	blt.n	800b5a2 <_strtoul_l.isra.0+0xae>
 800b56e:	fb00 4006 	mla	r0, r0, r6, r4
 800b572:	2301      	movs	r3, #1
 800b574:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b578:	e7eb      	b.n	800b552 <_strtoul_l.isra.0+0x5e>
 800b57a:	462f      	mov	r7, r5
 800b57c:	e7c1      	b.n	800b502 <_strtoul_l.isra.0+0xe>
 800b57e:	2c2b      	cmp	r4, #43	; 0x2b
 800b580:	bf04      	itt	eq
 800b582:	1cbd      	addeq	r5, r7, #2
 800b584:	787c      	ldrbeq	r4, [r7, #1]
 800b586:	4619      	mov	r1, r3
 800b588:	e7cb      	b.n	800b522 <_strtoul_l.isra.0+0x2e>
 800b58a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b58e:	2f19      	cmp	r7, #25
 800b590:	d801      	bhi.n	800b596 <_strtoul_l.isra.0+0xa2>
 800b592:	3c37      	subs	r4, #55	; 0x37
 800b594:	e7e2      	b.n	800b55c <_strtoul_l.isra.0+0x68>
 800b596:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b59a:	2f19      	cmp	r7, #25
 800b59c:	d804      	bhi.n	800b5a8 <_strtoul_l.isra.0+0xb4>
 800b59e:	3c57      	subs	r4, #87	; 0x57
 800b5a0:	e7dc      	b.n	800b55c <_strtoul_l.isra.0+0x68>
 800b5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a6:	e7e5      	b.n	800b574 <_strtoul_l.isra.0+0x80>
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	da09      	bge.n	800b5c0 <_strtoul_l.isra.0+0xcc>
 800b5ac:	2322      	movs	r3, #34	; 0x22
 800b5ae:	f8c8 3000 	str.w	r3, [r8]
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b6:	f1ba 0f00 	cmp.w	sl, #0
 800b5ba:	d107      	bne.n	800b5cc <_strtoul_l.isra.0+0xd8>
 800b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c0:	b101      	cbz	r1, 800b5c4 <_strtoul_l.isra.0+0xd0>
 800b5c2:	4240      	negs	r0, r0
 800b5c4:	f1ba 0f00 	cmp.w	sl, #0
 800b5c8:	d0f8      	beq.n	800b5bc <_strtoul_l.isra.0+0xc8>
 800b5ca:	b10b      	cbz	r3, 800b5d0 <_strtoul_l.isra.0+0xdc>
 800b5cc:	f105 39ff 	add.w	r9, r5, #4294967295
 800b5d0:	f8ca 9000 	str.w	r9, [sl]
 800b5d4:	e7f2      	b.n	800b5bc <_strtoul_l.isra.0+0xc8>
 800b5d6:	2430      	movs	r4, #48	; 0x30
 800b5d8:	2e00      	cmp	r6, #0
 800b5da:	d1b0      	bne.n	800b53e <_strtoul_l.isra.0+0x4a>
 800b5dc:	2608      	movs	r6, #8
 800b5de:	e7ae      	b.n	800b53e <_strtoul_l.isra.0+0x4a>
 800b5e0:	2c30      	cmp	r4, #48	; 0x30
 800b5e2:	d0a4      	beq.n	800b52e <_strtoul_l.isra.0+0x3a>
 800b5e4:	260a      	movs	r6, #10
 800b5e6:	e7aa      	b.n	800b53e <_strtoul_l.isra.0+0x4a>

0800b5e8 <strtoul>:
 800b5e8:	4b08      	ldr	r3, [pc, #32]	; (800b60c <strtoul+0x24>)
 800b5ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5ec:	681c      	ldr	r4, [r3, #0]
 800b5ee:	4d08      	ldr	r5, [pc, #32]	; (800b610 <strtoul+0x28>)
 800b5f0:	6a23      	ldr	r3, [r4, #32]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	bf08      	it	eq
 800b5f6:	462b      	moveq	r3, r5
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	460a      	mov	r2, r1
 800b5fe:	4601      	mov	r1, r0
 800b600:	4620      	mov	r0, r4
 800b602:	f7ff ff77 	bl	800b4f4 <_strtoul_l.isra.0>
 800b606:	b003      	add	sp, #12
 800b608:	bd30      	pop	{r4, r5, pc}
 800b60a:	bf00      	nop
 800b60c:	20000028 	.word	0x20000028
 800b610:	2000008c 	.word	0x2000008c

0800b614 <quorem>:
 800b614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b618:	6903      	ldr	r3, [r0, #16]
 800b61a:	690c      	ldr	r4, [r1, #16]
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	4680      	mov	r8, r0
 800b620:	f2c0 8082 	blt.w	800b728 <quorem+0x114>
 800b624:	3c01      	subs	r4, #1
 800b626:	f101 0714 	add.w	r7, r1, #20
 800b62a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b62e:	f100 0614 	add.w	r6, r0, #20
 800b632:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b636:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b63a:	eb06 030c 	add.w	r3, r6, ip
 800b63e:	3501      	adds	r5, #1
 800b640:	eb07 090c 	add.w	r9, r7, ip
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	fbb0 f5f5 	udiv	r5, r0, r5
 800b64a:	b395      	cbz	r5, 800b6b2 <quorem+0x9e>
 800b64c:	f04f 0a00 	mov.w	sl, #0
 800b650:	4638      	mov	r0, r7
 800b652:	46b6      	mov	lr, r6
 800b654:	46d3      	mov	fp, sl
 800b656:	f850 2b04 	ldr.w	r2, [r0], #4
 800b65a:	b293      	uxth	r3, r2
 800b65c:	fb05 a303 	mla	r3, r5, r3, sl
 800b660:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b664:	b29b      	uxth	r3, r3
 800b666:	ebab 0303 	sub.w	r3, fp, r3
 800b66a:	0c12      	lsrs	r2, r2, #16
 800b66c:	f8de b000 	ldr.w	fp, [lr]
 800b670:	fb05 a202 	mla	r2, r5, r2, sl
 800b674:	fa13 f38b 	uxtah	r3, r3, fp
 800b678:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b67c:	fa1f fb82 	uxth.w	fp, r2
 800b680:	f8de 2000 	ldr.w	r2, [lr]
 800b684:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b688:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b692:	4581      	cmp	r9, r0
 800b694:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b698:	f84e 3b04 	str.w	r3, [lr], #4
 800b69c:	d2db      	bcs.n	800b656 <quorem+0x42>
 800b69e:	f856 300c 	ldr.w	r3, [r6, ip]
 800b6a2:	b933      	cbnz	r3, 800b6b2 <quorem+0x9e>
 800b6a4:	9b01      	ldr	r3, [sp, #4]
 800b6a6:	3b04      	subs	r3, #4
 800b6a8:	429e      	cmp	r6, r3
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	d330      	bcc.n	800b710 <quorem+0xfc>
 800b6ae:	f8c8 4010 	str.w	r4, [r8, #16]
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	f001 fba6 	bl	800ce04 <__mcmp>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	db25      	blt.n	800b708 <quorem+0xf4>
 800b6bc:	3501      	adds	r5, #1
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f04f 0c00 	mov.w	ip, #0
 800b6c4:	f857 2b04 	ldr.w	r2, [r7], #4
 800b6c8:	f8d0 e000 	ldr.w	lr, [r0]
 800b6cc:	b293      	uxth	r3, r2
 800b6ce:	ebac 0303 	sub.w	r3, ip, r3
 800b6d2:	0c12      	lsrs	r2, r2, #16
 800b6d4:	fa13 f38e 	uxtah	r3, r3, lr
 800b6d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b6dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6e6:	45b9      	cmp	r9, r7
 800b6e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b6ec:	f840 3b04 	str.w	r3, [r0], #4
 800b6f0:	d2e8      	bcs.n	800b6c4 <quorem+0xb0>
 800b6f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b6f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b6fa:	b92a      	cbnz	r2, 800b708 <quorem+0xf4>
 800b6fc:	3b04      	subs	r3, #4
 800b6fe:	429e      	cmp	r6, r3
 800b700:	461a      	mov	r2, r3
 800b702:	d30b      	bcc.n	800b71c <quorem+0x108>
 800b704:	f8c8 4010 	str.w	r4, [r8, #16]
 800b708:	4628      	mov	r0, r5
 800b70a:	b003      	add	sp, #12
 800b70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b710:	6812      	ldr	r2, [r2, #0]
 800b712:	3b04      	subs	r3, #4
 800b714:	2a00      	cmp	r2, #0
 800b716:	d1ca      	bne.n	800b6ae <quorem+0x9a>
 800b718:	3c01      	subs	r4, #1
 800b71a:	e7c5      	b.n	800b6a8 <quorem+0x94>
 800b71c:	6812      	ldr	r2, [r2, #0]
 800b71e:	3b04      	subs	r3, #4
 800b720:	2a00      	cmp	r2, #0
 800b722:	d1ef      	bne.n	800b704 <quorem+0xf0>
 800b724:	3c01      	subs	r4, #1
 800b726:	e7ea      	b.n	800b6fe <quorem+0xea>
 800b728:	2000      	movs	r0, #0
 800b72a:	e7ee      	b.n	800b70a <quorem+0xf6>
 800b72c:	0000      	movs	r0, r0
	...

0800b730 <_dtoa_r>:
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	ec57 6b10 	vmov	r6, r7, d0
 800b738:	b097      	sub	sp, #92	; 0x5c
 800b73a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b73c:	9106      	str	r1, [sp, #24]
 800b73e:	4604      	mov	r4, r0
 800b740:	920b      	str	r2, [sp, #44]	; 0x2c
 800b742:	9312      	str	r3, [sp, #72]	; 0x48
 800b744:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b748:	e9cd 6700 	strd	r6, r7, [sp]
 800b74c:	b93d      	cbnz	r5, 800b75e <_dtoa_r+0x2e>
 800b74e:	2010      	movs	r0, #16
 800b750:	f001 f8e0 	bl	800c914 <malloc>
 800b754:	6260      	str	r0, [r4, #36]	; 0x24
 800b756:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b75a:	6005      	str	r5, [r0, #0]
 800b75c:	60c5      	str	r5, [r0, #12]
 800b75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b760:	6819      	ldr	r1, [r3, #0]
 800b762:	b151      	cbz	r1, 800b77a <_dtoa_r+0x4a>
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	604a      	str	r2, [r1, #4]
 800b768:	2301      	movs	r3, #1
 800b76a:	4093      	lsls	r3, r2
 800b76c:	608b      	str	r3, [r1, #8]
 800b76e:	4620      	mov	r0, r4
 800b770:	f001 f929 	bl	800c9c6 <_Bfree>
 800b774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b776:	2200      	movs	r2, #0
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	1e3b      	subs	r3, r7, #0
 800b77c:	bfbb      	ittet	lt
 800b77e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b782:	9301      	strlt	r3, [sp, #4]
 800b784:	2300      	movge	r3, #0
 800b786:	2201      	movlt	r2, #1
 800b788:	bfac      	ite	ge
 800b78a:	f8c8 3000 	strge.w	r3, [r8]
 800b78e:	f8c8 2000 	strlt.w	r2, [r8]
 800b792:	4baf      	ldr	r3, [pc, #700]	; (800ba50 <_dtoa_r+0x320>)
 800b794:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b798:	ea33 0308 	bics.w	r3, r3, r8
 800b79c:	d114      	bne.n	800b7c8 <_dtoa_r+0x98>
 800b79e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	9b00      	ldr	r3, [sp, #0]
 800b7a8:	b923      	cbnz	r3, 800b7b4 <_dtoa_r+0x84>
 800b7aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f000 8542 	beq.w	800c238 <_dtoa_r+0xb08>
 800b7b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ba64 <_dtoa_r+0x334>
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 8544 	beq.w	800c248 <_dtoa_r+0xb18>
 800b7c0:	f10b 0303 	add.w	r3, fp, #3
 800b7c4:	f000 bd3e 	b.w	800c244 <_dtoa_r+0xb14>
 800b7c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	4639      	mov	r1, r7
 800b7d4:	f7f5 f978 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7d8:	4681      	mov	r9, r0
 800b7da:	b168      	cbz	r0, 800b7f8 <_dtoa_r+0xc8>
 800b7dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b7de:	2301      	movs	r3, #1
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f000 8524 	beq.w	800c232 <_dtoa_r+0xb02>
 800b7ea:	4b9a      	ldr	r3, [pc, #616]	; (800ba54 <_dtoa_r+0x324>)
 800b7ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7ee:	f103 3bff 	add.w	fp, r3, #4294967295
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	f000 bd28 	b.w	800c248 <_dtoa_r+0xb18>
 800b7f8:	aa14      	add	r2, sp, #80	; 0x50
 800b7fa:	a915      	add	r1, sp, #84	; 0x54
 800b7fc:	ec47 6b10 	vmov	d0, r6, r7
 800b800:	4620      	mov	r0, r4
 800b802:	f001 fbed 	bl	800cfe0 <__d2b>
 800b806:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b80a:	9004      	str	r0, [sp, #16]
 800b80c:	2d00      	cmp	r5, #0
 800b80e:	d07c      	beq.n	800b90a <_dtoa_r+0x1da>
 800b810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b814:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b818:	46b2      	mov	sl, r6
 800b81a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b81e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b822:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b826:	2200      	movs	r2, #0
 800b828:	4b8b      	ldr	r3, [pc, #556]	; (800ba58 <_dtoa_r+0x328>)
 800b82a:	4650      	mov	r0, sl
 800b82c:	4659      	mov	r1, fp
 800b82e:	f7f4 fd2b 	bl	8000288 <__aeabi_dsub>
 800b832:	a381      	add	r3, pc, #516	; (adr r3, 800ba38 <_dtoa_r+0x308>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fede 	bl	80005f8 <__aeabi_dmul>
 800b83c:	a380      	add	r3, pc, #512	; (adr r3, 800ba40 <_dtoa_r+0x310>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	f7f4 fd23 	bl	800028c <__adddf3>
 800b846:	4606      	mov	r6, r0
 800b848:	4628      	mov	r0, r5
 800b84a:	460f      	mov	r7, r1
 800b84c:	f7f4 fe6a 	bl	8000524 <__aeabi_i2d>
 800b850:	a37d      	add	r3, pc, #500	; (adr r3, 800ba48 <_dtoa_r+0x318>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fecf 	bl	80005f8 <__aeabi_dmul>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4630      	mov	r0, r6
 800b860:	4639      	mov	r1, r7
 800b862:	f7f4 fd13 	bl	800028c <__adddf3>
 800b866:	4606      	mov	r6, r0
 800b868:	460f      	mov	r7, r1
 800b86a:	f7f5 f975 	bl	8000b58 <__aeabi_d2iz>
 800b86e:	2200      	movs	r2, #0
 800b870:	4682      	mov	sl, r0
 800b872:	2300      	movs	r3, #0
 800b874:	4630      	mov	r0, r6
 800b876:	4639      	mov	r1, r7
 800b878:	f7f5 f930 	bl	8000adc <__aeabi_dcmplt>
 800b87c:	b148      	cbz	r0, 800b892 <_dtoa_r+0x162>
 800b87e:	4650      	mov	r0, sl
 800b880:	f7f4 fe50 	bl	8000524 <__aeabi_i2d>
 800b884:	4632      	mov	r2, r6
 800b886:	463b      	mov	r3, r7
 800b888:	f7f5 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b88c:	b908      	cbnz	r0, 800b892 <_dtoa_r+0x162>
 800b88e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b892:	f1ba 0f16 	cmp.w	sl, #22
 800b896:	d859      	bhi.n	800b94c <_dtoa_r+0x21c>
 800b898:	4970      	ldr	r1, [pc, #448]	; (800ba5c <_dtoa_r+0x32c>)
 800b89a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b89e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8a6:	f7f5 f937 	bl	8000b18 <__aeabi_dcmpgt>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d050      	beq.n	800b950 <_dtoa_r+0x220>
 800b8ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8b8:	1b5d      	subs	r5, r3, r5
 800b8ba:	f1b5 0801 	subs.w	r8, r5, #1
 800b8be:	bf49      	itett	mi
 800b8c0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b8c4:	2300      	movpl	r3, #0
 800b8c6:	9305      	strmi	r3, [sp, #20]
 800b8c8:	f04f 0800 	movmi.w	r8, #0
 800b8cc:	bf58      	it	pl
 800b8ce:	9305      	strpl	r3, [sp, #20]
 800b8d0:	f1ba 0f00 	cmp.w	sl, #0
 800b8d4:	db3e      	blt.n	800b954 <_dtoa_r+0x224>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	44d0      	add	r8, sl
 800b8da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b8de:	9307      	str	r3, [sp, #28]
 800b8e0:	9b06      	ldr	r3, [sp, #24]
 800b8e2:	2b09      	cmp	r3, #9
 800b8e4:	f200 8090 	bhi.w	800ba08 <_dtoa_r+0x2d8>
 800b8e8:	2b05      	cmp	r3, #5
 800b8ea:	bfc4      	itt	gt
 800b8ec:	3b04      	subgt	r3, #4
 800b8ee:	9306      	strgt	r3, [sp, #24]
 800b8f0:	9b06      	ldr	r3, [sp, #24]
 800b8f2:	f1a3 0302 	sub.w	r3, r3, #2
 800b8f6:	bfcc      	ite	gt
 800b8f8:	2500      	movgt	r5, #0
 800b8fa:	2501      	movle	r5, #1
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	f200 808f 	bhi.w	800ba20 <_dtoa_r+0x2f0>
 800b902:	e8df f003 	tbb	[pc, r3]
 800b906:	7f7d      	.short	0x7f7d
 800b908:	7131      	.short	0x7131
 800b90a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b90e:	441d      	add	r5, r3
 800b910:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b914:	2820      	cmp	r0, #32
 800b916:	dd13      	ble.n	800b940 <_dtoa_r+0x210>
 800b918:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b91c:	9b00      	ldr	r3, [sp, #0]
 800b91e:	fa08 f800 	lsl.w	r8, r8, r0
 800b922:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b926:	fa23 f000 	lsr.w	r0, r3, r0
 800b92a:	ea48 0000 	orr.w	r0, r8, r0
 800b92e:	f7f4 fde9 	bl	8000504 <__aeabi_ui2d>
 800b932:	2301      	movs	r3, #1
 800b934:	4682      	mov	sl, r0
 800b936:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b93a:	3d01      	subs	r5, #1
 800b93c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b93e:	e772      	b.n	800b826 <_dtoa_r+0xf6>
 800b940:	9b00      	ldr	r3, [sp, #0]
 800b942:	f1c0 0020 	rsb	r0, r0, #32
 800b946:	fa03 f000 	lsl.w	r0, r3, r0
 800b94a:	e7f0      	b.n	800b92e <_dtoa_r+0x1fe>
 800b94c:	2301      	movs	r3, #1
 800b94e:	e7b1      	b.n	800b8b4 <_dtoa_r+0x184>
 800b950:	900f      	str	r0, [sp, #60]	; 0x3c
 800b952:	e7b0      	b.n	800b8b6 <_dtoa_r+0x186>
 800b954:	9b05      	ldr	r3, [sp, #20]
 800b956:	eba3 030a 	sub.w	r3, r3, sl
 800b95a:	9305      	str	r3, [sp, #20]
 800b95c:	f1ca 0300 	rsb	r3, sl, #0
 800b960:	9307      	str	r3, [sp, #28]
 800b962:	2300      	movs	r3, #0
 800b964:	930e      	str	r3, [sp, #56]	; 0x38
 800b966:	e7bb      	b.n	800b8e0 <_dtoa_r+0x1b0>
 800b968:	2301      	movs	r3, #1
 800b96a:	930a      	str	r3, [sp, #40]	; 0x28
 800b96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	dd59      	ble.n	800ba26 <_dtoa_r+0x2f6>
 800b972:	9302      	str	r3, [sp, #8]
 800b974:	4699      	mov	r9, r3
 800b976:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b978:	2200      	movs	r2, #0
 800b97a:	6072      	str	r2, [r6, #4]
 800b97c:	2204      	movs	r2, #4
 800b97e:	f102 0014 	add.w	r0, r2, #20
 800b982:	4298      	cmp	r0, r3
 800b984:	6871      	ldr	r1, [r6, #4]
 800b986:	d953      	bls.n	800ba30 <_dtoa_r+0x300>
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 ffe8 	bl	800c95e <_Balloc>
 800b98e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b990:	6030      	str	r0, [r6, #0]
 800b992:	f1b9 0f0e 	cmp.w	r9, #14
 800b996:	f8d3 b000 	ldr.w	fp, [r3]
 800b99a:	f200 80e6 	bhi.w	800bb6a <_dtoa_r+0x43a>
 800b99e:	2d00      	cmp	r5, #0
 800b9a0:	f000 80e3 	beq.w	800bb6a <_dtoa_r+0x43a>
 800b9a4:	ed9d 7b00 	vldr	d7, [sp]
 800b9a8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b9b0:	dd74      	ble.n	800ba9c <_dtoa_r+0x36c>
 800b9b2:	4a2a      	ldr	r2, [pc, #168]	; (800ba5c <_dtoa_r+0x32c>)
 800b9b4:	f00a 030f 	and.w	r3, sl, #15
 800b9b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9bc:	ed93 7b00 	vldr	d7, [r3]
 800b9c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b9c4:	06f0      	lsls	r0, r6, #27
 800b9c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b9ca:	d565      	bpl.n	800ba98 <_dtoa_r+0x368>
 800b9cc:	4b24      	ldr	r3, [pc, #144]	; (800ba60 <_dtoa_r+0x330>)
 800b9ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9d6:	f7f4 ff39 	bl	800084c <__aeabi_ddiv>
 800b9da:	e9cd 0100 	strd	r0, r1, [sp]
 800b9de:	f006 060f 	and.w	r6, r6, #15
 800b9e2:	2503      	movs	r5, #3
 800b9e4:	4f1e      	ldr	r7, [pc, #120]	; (800ba60 <_dtoa_r+0x330>)
 800b9e6:	e04c      	b.n	800ba82 <_dtoa_r+0x352>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	930a      	str	r3, [sp, #40]	; 0x28
 800b9ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9ee:	4453      	add	r3, sl
 800b9f0:	f103 0901 	add.w	r9, r3, #1
 800b9f4:	9302      	str	r3, [sp, #8]
 800b9f6:	464b      	mov	r3, r9
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	bfb8      	it	lt
 800b9fc:	2301      	movlt	r3, #1
 800b9fe:	e7ba      	b.n	800b976 <_dtoa_r+0x246>
 800ba00:	2300      	movs	r3, #0
 800ba02:	e7b2      	b.n	800b96a <_dtoa_r+0x23a>
 800ba04:	2300      	movs	r3, #0
 800ba06:	e7f0      	b.n	800b9ea <_dtoa_r+0x2ba>
 800ba08:	2501      	movs	r5, #1
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	9306      	str	r3, [sp, #24]
 800ba0e:	950a      	str	r5, [sp, #40]	; 0x28
 800ba10:	f04f 33ff 	mov.w	r3, #4294967295
 800ba14:	9302      	str	r3, [sp, #8]
 800ba16:	4699      	mov	r9, r3
 800ba18:	2200      	movs	r2, #0
 800ba1a:	2312      	movs	r3, #18
 800ba1c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba1e:	e7aa      	b.n	800b976 <_dtoa_r+0x246>
 800ba20:	2301      	movs	r3, #1
 800ba22:	930a      	str	r3, [sp, #40]	; 0x28
 800ba24:	e7f4      	b.n	800ba10 <_dtoa_r+0x2e0>
 800ba26:	2301      	movs	r3, #1
 800ba28:	9302      	str	r3, [sp, #8]
 800ba2a:	4699      	mov	r9, r3
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	e7f5      	b.n	800ba1c <_dtoa_r+0x2ec>
 800ba30:	3101      	adds	r1, #1
 800ba32:	6071      	str	r1, [r6, #4]
 800ba34:	0052      	lsls	r2, r2, #1
 800ba36:	e7a2      	b.n	800b97e <_dtoa_r+0x24e>
 800ba38:	636f4361 	.word	0x636f4361
 800ba3c:	3fd287a7 	.word	0x3fd287a7
 800ba40:	8b60c8b3 	.word	0x8b60c8b3
 800ba44:	3fc68a28 	.word	0x3fc68a28
 800ba48:	509f79fb 	.word	0x509f79fb
 800ba4c:	3fd34413 	.word	0x3fd34413
 800ba50:	7ff00000 	.word	0x7ff00000
 800ba54:	0800d7b9 	.word	0x0800d7b9
 800ba58:	3ff80000 	.word	0x3ff80000
 800ba5c:	0800d870 	.word	0x0800d870
 800ba60:	0800d848 	.word	0x0800d848
 800ba64:	0800d839 	.word	0x0800d839
 800ba68:	07f1      	lsls	r1, r6, #31
 800ba6a:	d508      	bpl.n	800ba7e <_dtoa_r+0x34e>
 800ba6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba74:	f7f4 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ba78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba7c:	3501      	adds	r5, #1
 800ba7e:	1076      	asrs	r6, r6, #1
 800ba80:	3708      	adds	r7, #8
 800ba82:	2e00      	cmp	r6, #0
 800ba84:	d1f0      	bne.n	800ba68 <_dtoa_r+0x338>
 800ba86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba8e:	f7f4 fedd 	bl	800084c <__aeabi_ddiv>
 800ba92:	e9cd 0100 	strd	r0, r1, [sp]
 800ba96:	e01a      	b.n	800bace <_dtoa_r+0x39e>
 800ba98:	2502      	movs	r5, #2
 800ba9a:	e7a3      	b.n	800b9e4 <_dtoa_r+0x2b4>
 800ba9c:	f000 80a0 	beq.w	800bbe0 <_dtoa_r+0x4b0>
 800baa0:	f1ca 0600 	rsb	r6, sl, #0
 800baa4:	4b9f      	ldr	r3, [pc, #636]	; (800bd24 <_dtoa_r+0x5f4>)
 800baa6:	4fa0      	ldr	r7, [pc, #640]	; (800bd28 <_dtoa_r+0x5f8>)
 800baa8:	f006 020f 	and.w	r2, r6, #15
 800baac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bab8:	f7f4 fd9e 	bl	80005f8 <__aeabi_dmul>
 800babc:	e9cd 0100 	strd	r0, r1, [sp]
 800bac0:	1136      	asrs	r6, r6, #4
 800bac2:	2300      	movs	r3, #0
 800bac4:	2502      	movs	r5, #2
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	d17f      	bne.n	800bbca <_dtoa_r+0x49a>
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1e1      	bne.n	800ba92 <_dtoa_r+0x362>
 800bace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f000 8087 	beq.w	800bbe4 <_dtoa_r+0x4b4>
 800bad6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bada:	2200      	movs	r2, #0
 800badc:	4b93      	ldr	r3, [pc, #588]	; (800bd2c <_dtoa_r+0x5fc>)
 800bade:	4630      	mov	r0, r6
 800bae0:	4639      	mov	r1, r7
 800bae2:	f7f4 fffb 	bl	8000adc <__aeabi_dcmplt>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d07c      	beq.n	800bbe4 <_dtoa_r+0x4b4>
 800baea:	f1b9 0f00 	cmp.w	r9, #0
 800baee:	d079      	beq.n	800bbe4 <_dtoa_r+0x4b4>
 800baf0:	9b02      	ldr	r3, [sp, #8]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	dd35      	ble.n	800bb62 <_dtoa_r+0x432>
 800baf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bafa:	9308      	str	r3, [sp, #32]
 800bafc:	4639      	mov	r1, r7
 800bafe:	2200      	movs	r2, #0
 800bb00:	4b8b      	ldr	r3, [pc, #556]	; (800bd30 <_dtoa_r+0x600>)
 800bb02:	4630      	mov	r0, r6
 800bb04:	f7f4 fd78 	bl	80005f8 <__aeabi_dmul>
 800bb08:	e9cd 0100 	strd	r0, r1, [sp]
 800bb0c:	9f02      	ldr	r7, [sp, #8]
 800bb0e:	3501      	adds	r5, #1
 800bb10:	4628      	mov	r0, r5
 800bb12:	f7f4 fd07 	bl	8000524 <__aeabi_i2d>
 800bb16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb1a:	f7f4 fd6d 	bl	80005f8 <__aeabi_dmul>
 800bb1e:	2200      	movs	r2, #0
 800bb20:	4b84      	ldr	r3, [pc, #528]	; (800bd34 <_dtoa_r+0x604>)
 800bb22:	f7f4 fbb3 	bl	800028c <__adddf3>
 800bb26:	4605      	mov	r5, r0
 800bb28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bb2c:	2f00      	cmp	r7, #0
 800bb2e:	d15d      	bne.n	800bbec <_dtoa_r+0x4bc>
 800bb30:	2200      	movs	r2, #0
 800bb32:	4b81      	ldr	r3, [pc, #516]	; (800bd38 <_dtoa_r+0x608>)
 800bb34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb38:	f7f4 fba6 	bl	8000288 <__aeabi_dsub>
 800bb3c:	462a      	mov	r2, r5
 800bb3e:	4633      	mov	r3, r6
 800bb40:	e9cd 0100 	strd	r0, r1, [sp]
 800bb44:	f7f4 ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	f040 8288 	bne.w	800c05e <_dtoa_r+0x92e>
 800bb4e:	462a      	mov	r2, r5
 800bb50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bb54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb58:	f7f4 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f040 827c 	bne.w	800c05a <_dtoa_r+0x92a>
 800bb62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb66:	e9cd 2300 	strd	r2, r3, [sp]
 800bb6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f2c0 8150 	blt.w	800be12 <_dtoa_r+0x6e2>
 800bb72:	f1ba 0f0e 	cmp.w	sl, #14
 800bb76:	f300 814c 	bgt.w	800be12 <_dtoa_r+0x6e2>
 800bb7a:	4b6a      	ldr	r3, [pc, #424]	; (800bd24 <_dtoa_r+0x5f4>)
 800bb7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb80:	ed93 7b00 	vldr	d7, [r3]
 800bb84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb8c:	f280 80d8 	bge.w	800bd40 <_dtoa_r+0x610>
 800bb90:	f1b9 0f00 	cmp.w	r9, #0
 800bb94:	f300 80d4 	bgt.w	800bd40 <_dtoa_r+0x610>
 800bb98:	f040 825e 	bne.w	800c058 <_dtoa_r+0x928>
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	4b66      	ldr	r3, [pc, #408]	; (800bd38 <_dtoa_r+0x608>)
 800bba0:	ec51 0b17 	vmov	r0, r1, d7
 800bba4:	f7f4 fd28 	bl	80005f8 <__aeabi_dmul>
 800bba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbac:	f7f4 ffaa 	bl	8000b04 <__aeabi_dcmpge>
 800bbb0:	464f      	mov	r7, r9
 800bbb2:	464e      	mov	r6, r9
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	f040 8234 	bne.w	800c022 <_dtoa_r+0x8f2>
 800bbba:	2331      	movs	r3, #49	; 0x31
 800bbbc:	f10b 0501 	add.w	r5, fp, #1
 800bbc0:	f88b 3000 	strb.w	r3, [fp]
 800bbc4:	f10a 0a01 	add.w	sl, sl, #1
 800bbc8:	e22f      	b.n	800c02a <_dtoa_r+0x8fa>
 800bbca:	07f2      	lsls	r2, r6, #31
 800bbcc:	d505      	bpl.n	800bbda <_dtoa_r+0x4aa>
 800bbce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbd2:	f7f4 fd11 	bl	80005f8 <__aeabi_dmul>
 800bbd6:	3501      	adds	r5, #1
 800bbd8:	2301      	movs	r3, #1
 800bbda:	1076      	asrs	r6, r6, #1
 800bbdc:	3708      	adds	r7, #8
 800bbde:	e772      	b.n	800bac6 <_dtoa_r+0x396>
 800bbe0:	2502      	movs	r5, #2
 800bbe2:	e774      	b.n	800bace <_dtoa_r+0x39e>
 800bbe4:	f8cd a020 	str.w	sl, [sp, #32]
 800bbe8:	464f      	mov	r7, r9
 800bbea:	e791      	b.n	800bb10 <_dtoa_r+0x3e0>
 800bbec:	4b4d      	ldr	r3, [pc, #308]	; (800bd24 <_dtoa_r+0x5f4>)
 800bbee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbf2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d047      	beq.n	800bc8c <_dtoa_r+0x55c>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	2000      	movs	r0, #0
 800bc02:	494e      	ldr	r1, [pc, #312]	; (800bd3c <_dtoa_r+0x60c>)
 800bc04:	f7f4 fe22 	bl	800084c <__aeabi_ddiv>
 800bc08:	462a      	mov	r2, r5
 800bc0a:	4633      	mov	r3, r6
 800bc0c:	f7f4 fb3c 	bl	8000288 <__aeabi_dsub>
 800bc10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc14:	465d      	mov	r5, fp
 800bc16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc1a:	f7f4 ff9d 	bl	8000b58 <__aeabi_d2iz>
 800bc1e:	4606      	mov	r6, r0
 800bc20:	f7f4 fc80 	bl	8000524 <__aeabi_i2d>
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc2c:	f7f4 fb2c 	bl	8000288 <__aeabi_dsub>
 800bc30:	3630      	adds	r6, #48	; 0x30
 800bc32:	f805 6b01 	strb.w	r6, [r5], #1
 800bc36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc3a:	e9cd 0100 	strd	r0, r1, [sp]
 800bc3e:	f7f4 ff4d 	bl	8000adc <__aeabi_dcmplt>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d163      	bne.n	800bd0e <_dtoa_r+0x5de>
 800bc46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	4937      	ldr	r1, [pc, #220]	; (800bd2c <_dtoa_r+0x5fc>)
 800bc4e:	f7f4 fb1b 	bl	8000288 <__aeabi_dsub>
 800bc52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc56:	f7f4 ff41 	bl	8000adc <__aeabi_dcmplt>
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	f040 80b7 	bne.w	800bdce <_dtoa_r+0x69e>
 800bc60:	eba5 030b 	sub.w	r3, r5, fp
 800bc64:	429f      	cmp	r7, r3
 800bc66:	f77f af7c 	ble.w	800bb62 <_dtoa_r+0x432>
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	4b30      	ldr	r3, [pc, #192]	; (800bd30 <_dtoa_r+0x600>)
 800bc6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc72:	f7f4 fcc1 	bl	80005f8 <__aeabi_dmul>
 800bc76:	2200      	movs	r2, #0
 800bc78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc7c:	4b2c      	ldr	r3, [pc, #176]	; (800bd30 <_dtoa_r+0x600>)
 800bc7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc82:	f7f4 fcb9 	bl	80005f8 <__aeabi_dmul>
 800bc86:	e9cd 0100 	strd	r0, r1, [sp]
 800bc8a:	e7c4      	b.n	800bc16 <_dtoa_r+0x4e6>
 800bc8c:	462a      	mov	r2, r5
 800bc8e:	4633      	mov	r3, r6
 800bc90:	f7f4 fcb2 	bl	80005f8 <__aeabi_dmul>
 800bc94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc98:	eb0b 0507 	add.w	r5, fp, r7
 800bc9c:	465e      	mov	r6, fp
 800bc9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bca2:	f7f4 ff59 	bl	8000b58 <__aeabi_d2iz>
 800bca6:	4607      	mov	r7, r0
 800bca8:	f7f4 fc3c 	bl	8000524 <__aeabi_i2d>
 800bcac:	3730      	adds	r7, #48	; 0x30
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcb6:	f7f4 fae7 	bl	8000288 <__aeabi_dsub>
 800bcba:	f806 7b01 	strb.w	r7, [r6], #1
 800bcbe:	42ae      	cmp	r6, r5
 800bcc0:	e9cd 0100 	strd	r0, r1, [sp]
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	d126      	bne.n	800bd18 <_dtoa_r+0x5e8>
 800bcca:	4b1c      	ldr	r3, [pc, #112]	; (800bd3c <_dtoa_r+0x60c>)
 800bccc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bcd0:	f7f4 fadc 	bl	800028c <__adddf3>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcdc:	f7f4 ff1c 	bl	8000b18 <__aeabi_dcmpgt>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d174      	bne.n	800bdce <_dtoa_r+0x69e>
 800bce4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bce8:	2000      	movs	r0, #0
 800bcea:	4914      	ldr	r1, [pc, #80]	; (800bd3c <_dtoa_r+0x60c>)
 800bcec:	f7f4 facc 	bl	8000288 <__aeabi_dsub>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcf8:	f7f4 fef0 	bl	8000adc <__aeabi_dcmplt>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	f43f af30 	beq.w	800bb62 <_dtoa_r+0x432>
 800bd02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd06:	2b30      	cmp	r3, #48	; 0x30
 800bd08:	f105 32ff 	add.w	r2, r5, #4294967295
 800bd0c:	d002      	beq.n	800bd14 <_dtoa_r+0x5e4>
 800bd0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bd12:	e04a      	b.n	800bdaa <_dtoa_r+0x67a>
 800bd14:	4615      	mov	r5, r2
 800bd16:	e7f4      	b.n	800bd02 <_dtoa_r+0x5d2>
 800bd18:	4b05      	ldr	r3, [pc, #20]	; (800bd30 <_dtoa_r+0x600>)
 800bd1a:	f7f4 fc6d 	bl	80005f8 <__aeabi_dmul>
 800bd1e:	e9cd 0100 	strd	r0, r1, [sp]
 800bd22:	e7bc      	b.n	800bc9e <_dtoa_r+0x56e>
 800bd24:	0800d870 	.word	0x0800d870
 800bd28:	0800d848 	.word	0x0800d848
 800bd2c:	3ff00000 	.word	0x3ff00000
 800bd30:	40240000 	.word	0x40240000
 800bd34:	401c0000 	.word	0x401c0000
 800bd38:	40140000 	.word	0x40140000
 800bd3c:	3fe00000 	.word	0x3fe00000
 800bd40:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd44:	465d      	mov	r5, fp
 800bd46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	f7f4 fd7d 	bl	800084c <__aeabi_ddiv>
 800bd52:	f7f4 ff01 	bl	8000b58 <__aeabi_d2iz>
 800bd56:	4680      	mov	r8, r0
 800bd58:	f7f4 fbe4 	bl	8000524 <__aeabi_i2d>
 800bd5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd60:	f7f4 fc4a 	bl	80005f8 <__aeabi_dmul>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bd70:	f7f4 fa8a 	bl	8000288 <__aeabi_dsub>
 800bd74:	f805 6b01 	strb.w	r6, [r5], #1
 800bd78:	eba5 060b 	sub.w	r6, r5, fp
 800bd7c:	45b1      	cmp	r9, r6
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	d139      	bne.n	800bdf8 <_dtoa_r+0x6c8>
 800bd84:	f7f4 fa82 	bl	800028c <__adddf3>
 800bd88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	460f      	mov	r7, r1
 800bd90:	f7f4 fec2 	bl	8000b18 <__aeabi_dcmpgt>
 800bd94:	b9c8      	cbnz	r0, 800bdca <_dtoa_r+0x69a>
 800bd96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	4639      	mov	r1, r7
 800bd9e:	f7f4 fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 800bda2:	b110      	cbz	r0, 800bdaa <_dtoa_r+0x67a>
 800bda4:	f018 0f01 	tst.w	r8, #1
 800bda8:	d10f      	bne.n	800bdca <_dtoa_r+0x69a>
 800bdaa:	9904      	ldr	r1, [sp, #16]
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fe0a 	bl	800c9c6 <_Bfree>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdb6:	702b      	strb	r3, [r5, #0]
 800bdb8:	f10a 0301 	add.w	r3, sl, #1
 800bdbc:	6013      	str	r3, [r2, #0]
 800bdbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 8241 	beq.w	800c248 <_dtoa_r+0xb18>
 800bdc6:	601d      	str	r5, [r3, #0]
 800bdc8:	e23e      	b.n	800c248 <_dtoa_r+0xb18>
 800bdca:	f8cd a020 	str.w	sl, [sp, #32]
 800bdce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bdd2:	2a39      	cmp	r2, #57	; 0x39
 800bdd4:	f105 33ff 	add.w	r3, r5, #4294967295
 800bdd8:	d108      	bne.n	800bdec <_dtoa_r+0x6bc>
 800bdda:	459b      	cmp	fp, r3
 800bddc:	d10a      	bne.n	800bdf4 <_dtoa_r+0x6c4>
 800bdde:	9b08      	ldr	r3, [sp, #32]
 800bde0:	3301      	adds	r3, #1
 800bde2:	9308      	str	r3, [sp, #32]
 800bde4:	2330      	movs	r3, #48	; 0x30
 800bde6:	f88b 3000 	strb.w	r3, [fp]
 800bdea:	465b      	mov	r3, fp
 800bdec:	781a      	ldrb	r2, [r3, #0]
 800bdee:	3201      	adds	r2, #1
 800bdf0:	701a      	strb	r2, [r3, #0]
 800bdf2:	e78c      	b.n	800bd0e <_dtoa_r+0x5de>
 800bdf4:	461d      	mov	r5, r3
 800bdf6:	e7ea      	b.n	800bdce <_dtoa_r+0x69e>
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	4b9b      	ldr	r3, [pc, #620]	; (800c068 <_dtoa_r+0x938>)
 800bdfc:	f7f4 fbfc 	bl	80005f8 <__aeabi_dmul>
 800be00:	2200      	movs	r2, #0
 800be02:	2300      	movs	r3, #0
 800be04:	4606      	mov	r6, r0
 800be06:	460f      	mov	r7, r1
 800be08:	f7f4 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	d09a      	beq.n	800bd46 <_dtoa_r+0x616>
 800be10:	e7cb      	b.n	800bdaa <_dtoa_r+0x67a>
 800be12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be14:	2a00      	cmp	r2, #0
 800be16:	f000 808b 	beq.w	800bf30 <_dtoa_r+0x800>
 800be1a:	9a06      	ldr	r2, [sp, #24]
 800be1c:	2a01      	cmp	r2, #1
 800be1e:	dc6e      	bgt.n	800befe <_dtoa_r+0x7ce>
 800be20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be22:	2a00      	cmp	r2, #0
 800be24:	d067      	beq.n	800bef6 <_dtoa_r+0x7c6>
 800be26:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be2a:	9f07      	ldr	r7, [sp, #28]
 800be2c:	9d05      	ldr	r5, [sp, #20]
 800be2e:	9a05      	ldr	r2, [sp, #20]
 800be30:	2101      	movs	r1, #1
 800be32:	441a      	add	r2, r3
 800be34:	4620      	mov	r0, r4
 800be36:	9205      	str	r2, [sp, #20]
 800be38:	4498      	add	r8, r3
 800be3a:	f000 fea2 	bl	800cb82 <__i2b>
 800be3e:	4606      	mov	r6, r0
 800be40:	2d00      	cmp	r5, #0
 800be42:	dd0c      	ble.n	800be5e <_dtoa_r+0x72e>
 800be44:	f1b8 0f00 	cmp.w	r8, #0
 800be48:	dd09      	ble.n	800be5e <_dtoa_r+0x72e>
 800be4a:	4545      	cmp	r5, r8
 800be4c:	9a05      	ldr	r2, [sp, #20]
 800be4e:	462b      	mov	r3, r5
 800be50:	bfa8      	it	ge
 800be52:	4643      	movge	r3, r8
 800be54:	1ad2      	subs	r2, r2, r3
 800be56:	9205      	str	r2, [sp, #20]
 800be58:	1aed      	subs	r5, r5, r3
 800be5a:	eba8 0803 	sub.w	r8, r8, r3
 800be5e:	9b07      	ldr	r3, [sp, #28]
 800be60:	b1eb      	cbz	r3, 800be9e <_dtoa_r+0x76e>
 800be62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be64:	2b00      	cmp	r3, #0
 800be66:	d067      	beq.n	800bf38 <_dtoa_r+0x808>
 800be68:	b18f      	cbz	r7, 800be8e <_dtoa_r+0x75e>
 800be6a:	4631      	mov	r1, r6
 800be6c:	463a      	mov	r2, r7
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 ff26 	bl	800ccc0 <__pow5mult>
 800be74:	9a04      	ldr	r2, [sp, #16]
 800be76:	4601      	mov	r1, r0
 800be78:	4606      	mov	r6, r0
 800be7a:	4620      	mov	r0, r4
 800be7c:	f000 fe8a 	bl	800cb94 <__multiply>
 800be80:	9904      	ldr	r1, [sp, #16]
 800be82:	9008      	str	r0, [sp, #32]
 800be84:	4620      	mov	r0, r4
 800be86:	f000 fd9e 	bl	800c9c6 <_Bfree>
 800be8a:	9b08      	ldr	r3, [sp, #32]
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	9b07      	ldr	r3, [sp, #28]
 800be90:	1bda      	subs	r2, r3, r7
 800be92:	d004      	beq.n	800be9e <_dtoa_r+0x76e>
 800be94:	9904      	ldr	r1, [sp, #16]
 800be96:	4620      	mov	r0, r4
 800be98:	f000 ff12 	bl	800ccc0 <__pow5mult>
 800be9c:	9004      	str	r0, [sp, #16]
 800be9e:	2101      	movs	r1, #1
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 fe6e 	bl	800cb82 <__i2b>
 800bea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bea8:	4607      	mov	r7, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 81d0 	beq.w	800c250 <_dtoa_r+0xb20>
 800beb0:	461a      	mov	r2, r3
 800beb2:	4601      	mov	r1, r0
 800beb4:	4620      	mov	r0, r4
 800beb6:	f000 ff03 	bl	800ccc0 <__pow5mult>
 800beba:	9b06      	ldr	r3, [sp, #24]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	4607      	mov	r7, r0
 800bec0:	dc40      	bgt.n	800bf44 <_dtoa_r+0x814>
 800bec2:	9b00      	ldr	r3, [sp, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d139      	bne.n	800bf3c <_dtoa_r+0x80c>
 800bec8:	9b01      	ldr	r3, [sp, #4]
 800beca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d136      	bne.n	800bf40 <_dtoa_r+0x810>
 800bed2:	9b01      	ldr	r3, [sp, #4]
 800bed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bed8:	0d1b      	lsrs	r3, r3, #20
 800beda:	051b      	lsls	r3, r3, #20
 800bedc:	b12b      	cbz	r3, 800beea <_dtoa_r+0x7ba>
 800bede:	9b05      	ldr	r3, [sp, #20]
 800bee0:	3301      	adds	r3, #1
 800bee2:	9305      	str	r3, [sp, #20]
 800bee4:	f108 0801 	add.w	r8, r8, #1
 800bee8:	2301      	movs	r3, #1
 800beea:	9307      	str	r3, [sp, #28]
 800beec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d12a      	bne.n	800bf48 <_dtoa_r+0x818>
 800bef2:	2001      	movs	r0, #1
 800bef4:	e030      	b.n	800bf58 <_dtoa_r+0x828>
 800bef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bef8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800befc:	e795      	b.n	800be2a <_dtoa_r+0x6fa>
 800befe:	9b07      	ldr	r3, [sp, #28]
 800bf00:	f109 37ff 	add.w	r7, r9, #4294967295
 800bf04:	42bb      	cmp	r3, r7
 800bf06:	bfbf      	itttt	lt
 800bf08:	9b07      	ldrlt	r3, [sp, #28]
 800bf0a:	9707      	strlt	r7, [sp, #28]
 800bf0c:	1afa      	sublt	r2, r7, r3
 800bf0e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bf10:	bfbb      	ittet	lt
 800bf12:	189b      	addlt	r3, r3, r2
 800bf14:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bf16:	1bdf      	subge	r7, r3, r7
 800bf18:	2700      	movlt	r7, #0
 800bf1a:	f1b9 0f00 	cmp.w	r9, #0
 800bf1e:	bfb5      	itete	lt
 800bf20:	9b05      	ldrlt	r3, [sp, #20]
 800bf22:	9d05      	ldrge	r5, [sp, #20]
 800bf24:	eba3 0509 	sublt.w	r5, r3, r9
 800bf28:	464b      	movge	r3, r9
 800bf2a:	bfb8      	it	lt
 800bf2c:	2300      	movlt	r3, #0
 800bf2e:	e77e      	b.n	800be2e <_dtoa_r+0x6fe>
 800bf30:	9f07      	ldr	r7, [sp, #28]
 800bf32:	9d05      	ldr	r5, [sp, #20]
 800bf34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bf36:	e783      	b.n	800be40 <_dtoa_r+0x710>
 800bf38:	9a07      	ldr	r2, [sp, #28]
 800bf3a:	e7ab      	b.n	800be94 <_dtoa_r+0x764>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	e7d4      	b.n	800beea <_dtoa_r+0x7ba>
 800bf40:	9b00      	ldr	r3, [sp, #0]
 800bf42:	e7d2      	b.n	800beea <_dtoa_r+0x7ba>
 800bf44:	2300      	movs	r3, #0
 800bf46:	9307      	str	r3, [sp, #28]
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bf4e:	6918      	ldr	r0, [r3, #16]
 800bf50:	f000 fdc9 	bl	800cae6 <__hi0bits>
 800bf54:	f1c0 0020 	rsb	r0, r0, #32
 800bf58:	4440      	add	r0, r8
 800bf5a:	f010 001f 	ands.w	r0, r0, #31
 800bf5e:	d047      	beq.n	800bff0 <_dtoa_r+0x8c0>
 800bf60:	f1c0 0320 	rsb	r3, r0, #32
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	dd3b      	ble.n	800bfe0 <_dtoa_r+0x8b0>
 800bf68:	9b05      	ldr	r3, [sp, #20]
 800bf6a:	f1c0 001c 	rsb	r0, r0, #28
 800bf6e:	4403      	add	r3, r0
 800bf70:	9305      	str	r3, [sp, #20]
 800bf72:	4405      	add	r5, r0
 800bf74:	4480      	add	r8, r0
 800bf76:	9b05      	ldr	r3, [sp, #20]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	dd05      	ble.n	800bf88 <_dtoa_r+0x858>
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	9904      	ldr	r1, [sp, #16]
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 feeb 	bl	800cd5c <__lshift>
 800bf86:	9004      	str	r0, [sp, #16]
 800bf88:	f1b8 0f00 	cmp.w	r8, #0
 800bf8c:	dd05      	ble.n	800bf9a <_dtoa_r+0x86a>
 800bf8e:	4639      	mov	r1, r7
 800bf90:	4642      	mov	r2, r8
 800bf92:	4620      	mov	r0, r4
 800bf94:	f000 fee2 	bl	800cd5c <__lshift>
 800bf98:	4607      	mov	r7, r0
 800bf9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf9c:	b353      	cbz	r3, 800bff4 <_dtoa_r+0x8c4>
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	9804      	ldr	r0, [sp, #16]
 800bfa2:	f000 ff2f 	bl	800ce04 <__mcmp>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	da24      	bge.n	800bff4 <_dtoa_r+0x8c4>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	220a      	movs	r2, #10
 800bfae:	9904      	ldr	r1, [sp, #16]
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f000 fd1f 	bl	800c9f4 <__multadd>
 800bfb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfb8:	9004      	str	r0, [sp, #16]
 800bfba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f000 814d 	beq.w	800c25e <_dtoa_r+0xb2e>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	220a      	movs	r2, #10
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f000 fd12 	bl	800c9f4 <__multadd>
 800bfd0:	9b02      	ldr	r3, [sp, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	dc4f      	bgt.n	800c078 <_dtoa_r+0x948>
 800bfd8:	9b06      	ldr	r3, [sp, #24]
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	dd4c      	ble.n	800c078 <_dtoa_r+0x948>
 800bfde:	e011      	b.n	800c004 <_dtoa_r+0x8d4>
 800bfe0:	d0c9      	beq.n	800bf76 <_dtoa_r+0x846>
 800bfe2:	9a05      	ldr	r2, [sp, #20]
 800bfe4:	331c      	adds	r3, #28
 800bfe6:	441a      	add	r2, r3
 800bfe8:	9205      	str	r2, [sp, #20]
 800bfea:	441d      	add	r5, r3
 800bfec:	4498      	add	r8, r3
 800bfee:	e7c2      	b.n	800bf76 <_dtoa_r+0x846>
 800bff0:	4603      	mov	r3, r0
 800bff2:	e7f6      	b.n	800bfe2 <_dtoa_r+0x8b2>
 800bff4:	f1b9 0f00 	cmp.w	r9, #0
 800bff8:	dc38      	bgt.n	800c06c <_dtoa_r+0x93c>
 800bffa:	9b06      	ldr	r3, [sp, #24]
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	dd35      	ble.n	800c06c <_dtoa_r+0x93c>
 800c000:	f8cd 9008 	str.w	r9, [sp, #8]
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	b963      	cbnz	r3, 800c022 <_dtoa_r+0x8f2>
 800c008:	4639      	mov	r1, r7
 800c00a:	2205      	movs	r2, #5
 800c00c:	4620      	mov	r0, r4
 800c00e:	f000 fcf1 	bl	800c9f4 <__multadd>
 800c012:	4601      	mov	r1, r0
 800c014:	4607      	mov	r7, r0
 800c016:	9804      	ldr	r0, [sp, #16]
 800c018:	f000 fef4 	bl	800ce04 <__mcmp>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	f73f adcc 	bgt.w	800bbba <_dtoa_r+0x48a>
 800c022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c024:	465d      	mov	r5, fp
 800c026:	ea6f 0a03 	mvn.w	sl, r3
 800c02a:	f04f 0900 	mov.w	r9, #0
 800c02e:	4639      	mov	r1, r7
 800c030:	4620      	mov	r0, r4
 800c032:	f000 fcc8 	bl	800c9c6 <_Bfree>
 800c036:	2e00      	cmp	r6, #0
 800c038:	f43f aeb7 	beq.w	800bdaa <_dtoa_r+0x67a>
 800c03c:	f1b9 0f00 	cmp.w	r9, #0
 800c040:	d005      	beq.n	800c04e <_dtoa_r+0x91e>
 800c042:	45b1      	cmp	r9, r6
 800c044:	d003      	beq.n	800c04e <_dtoa_r+0x91e>
 800c046:	4649      	mov	r1, r9
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 fcbc 	bl	800c9c6 <_Bfree>
 800c04e:	4631      	mov	r1, r6
 800c050:	4620      	mov	r0, r4
 800c052:	f000 fcb8 	bl	800c9c6 <_Bfree>
 800c056:	e6a8      	b.n	800bdaa <_dtoa_r+0x67a>
 800c058:	2700      	movs	r7, #0
 800c05a:	463e      	mov	r6, r7
 800c05c:	e7e1      	b.n	800c022 <_dtoa_r+0x8f2>
 800c05e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c062:	463e      	mov	r6, r7
 800c064:	e5a9      	b.n	800bbba <_dtoa_r+0x48a>
 800c066:	bf00      	nop
 800c068:	40240000 	.word	0x40240000
 800c06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	f000 80fa 	beq.w	800c26c <_dtoa_r+0xb3c>
 800c078:	2d00      	cmp	r5, #0
 800c07a:	dd05      	ble.n	800c088 <_dtoa_r+0x958>
 800c07c:	4631      	mov	r1, r6
 800c07e:	462a      	mov	r2, r5
 800c080:	4620      	mov	r0, r4
 800c082:	f000 fe6b 	bl	800cd5c <__lshift>
 800c086:	4606      	mov	r6, r0
 800c088:	9b07      	ldr	r3, [sp, #28]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d04c      	beq.n	800c128 <_dtoa_r+0x9f8>
 800c08e:	6871      	ldr	r1, [r6, #4]
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fc64 	bl	800c95e <_Balloc>
 800c096:	6932      	ldr	r2, [r6, #16]
 800c098:	3202      	adds	r2, #2
 800c09a:	4605      	mov	r5, r0
 800c09c:	0092      	lsls	r2, r2, #2
 800c09e:	f106 010c 	add.w	r1, r6, #12
 800c0a2:	300c      	adds	r0, #12
 800c0a4:	f000 fc50 	bl	800c948 <memcpy>
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f000 fe55 	bl	800cd5c <__lshift>
 800c0b2:	9b00      	ldr	r3, [sp, #0]
 800c0b4:	f8cd b014 	str.w	fp, [sp, #20]
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	46b1      	mov	r9, r6
 800c0be:	9307      	str	r3, [sp, #28]
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	9804      	ldr	r0, [sp, #16]
 800c0c6:	f7ff faa5 	bl	800b614 <quorem>
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c0d2:	9804      	ldr	r0, [sp, #16]
 800c0d4:	f000 fe96 	bl	800ce04 <__mcmp>
 800c0d8:	4632      	mov	r2, r6
 800c0da:	9000      	str	r0, [sp, #0]
 800c0dc:	4639      	mov	r1, r7
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 feaa 	bl	800ce38 <__mdiff>
 800c0e4:	68c3      	ldr	r3, [r0, #12]
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	bb03      	cbnz	r3, 800c12c <_dtoa_r+0x9fc>
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	9008      	str	r0, [sp, #32]
 800c0ee:	9804      	ldr	r0, [sp, #16]
 800c0f0:	f000 fe88 	bl	800ce04 <__mcmp>
 800c0f4:	9a08      	ldr	r2, [sp, #32]
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	9308      	str	r3, [sp, #32]
 800c0fe:	f000 fc62 	bl	800c9c6 <_Bfree>
 800c102:	9b08      	ldr	r3, [sp, #32]
 800c104:	b9a3      	cbnz	r3, 800c130 <_dtoa_r+0xa00>
 800c106:	9a06      	ldr	r2, [sp, #24]
 800c108:	b992      	cbnz	r2, 800c130 <_dtoa_r+0xa00>
 800c10a:	9a07      	ldr	r2, [sp, #28]
 800c10c:	b982      	cbnz	r2, 800c130 <_dtoa_r+0xa00>
 800c10e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c112:	d029      	beq.n	800c168 <_dtoa_r+0xa38>
 800c114:	9b00      	ldr	r3, [sp, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	dd01      	ble.n	800c11e <_dtoa_r+0x9ee>
 800c11a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c11e:	9b05      	ldr	r3, [sp, #20]
 800c120:	1c5d      	adds	r5, r3, #1
 800c122:	f883 8000 	strb.w	r8, [r3]
 800c126:	e782      	b.n	800c02e <_dtoa_r+0x8fe>
 800c128:	4630      	mov	r0, r6
 800c12a:	e7c2      	b.n	800c0b2 <_dtoa_r+0x982>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e7e3      	b.n	800c0f8 <_dtoa_r+0x9c8>
 800c130:	9a00      	ldr	r2, [sp, #0]
 800c132:	2a00      	cmp	r2, #0
 800c134:	db04      	blt.n	800c140 <_dtoa_r+0xa10>
 800c136:	d125      	bne.n	800c184 <_dtoa_r+0xa54>
 800c138:	9a06      	ldr	r2, [sp, #24]
 800c13a:	bb1a      	cbnz	r2, 800c184 <_dtoa_r+0xa54>
 800c13c:	9a07      	ldr	r2, [sp, #28]
 800c13e:	bb0a      	cbnz	r2, 800c184 <_dtoa_r+0xa54>
 800c140:	2b00      	cmp	r3, #0
 800c142:	ddec      	ble.n	800c11e <_dtoa_r+0x9ee>
 800c144:	2201      	movs	r2, #1
 800c146:	9904      	ldr	r1, [sp, #16]
 800c148:	4620      	mov	r0, r4
 800c14a:	f000 fe07 	bl	800cd5c <__lshift>
 800c14e:	4639      	mov	r1, r7
 800c150:	9004      	str	r0, [sp, #16]
 800c152:	f000 fe57 	bl	800ce04 <__mcmp>
 800c156:	2800      	cmp	r0, #0
 800c158:	dc03      	bgt.n	800c162 <_dtoa_r+0xa32>
 800c15a:	d1e0      	bne.n	800c11e <_dtoa_r+0x9ee>
 800c15c:	f018 0f01 	tst.w	r8, #1
 800c160:	d0dd      	beq.n	800c11e <_dtoa_r+0x9ee>
 800c162:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c166:	d1d8      	bne.n	800c11a <_dtoa_r+0x9ea>
 800c168:	9b05      	ldr	r3, [sp, #20]
 800c16a:	9a05      	ldr	r2, [sp, #20]
 800c16c:	1c5d      	adds	r5, r3, #1
 800c16e:	2339      	movs	r3, #57	; 0x39
 800c170:	7013      	strb	r3, [r2, #0]
 800c172:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c176:	2b39      	cmp	r3, #57	; 0x39
 800c178:	f105 32ff 	add.w	r2, r5, #4294967295
 800c17c:	d04f      	beq.n	800c21e <_dtoa_r+0xaee>
 800c17e:	3301      	adds	r3, #1
 800c180:	7013      	strb	r3, [r2, #0]
 800c182:	e754      	b.n	800c02e <_dtoa_r+0x8fe>
 800c184:	9a05      	ldr	r2, [sp, #20]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f102 0501 	add.w	r5, r2, #1
 800c18c:	dd06      	ble.n	800c19c <_dtoa_r+0xa6c>
 800c18e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c192:	d0e9      	beq.n	800c168 <_dtoa_r+0xa38>
 800c194:	f108 0801 	add.w	r8, r8, #1
 800c198:	9b05      	ldr	r3, [sp, #20]
 800c19a:	e7c2      	b.n	800c122 <_dtoa_r+0x9f2>
 800c19c:	9a02      	ldr	r2, [sp, #8]
 800c19e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c1a2:	eba5 030b 	sub.w	r3, r5, fp
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d021      	beq.n	800c1ee <_dtoa_r+0xabe>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	220a      	movs	r2, #10
 800c1ae:	9904      	ldr	r1, [sp, #16]
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f000 fc1f 	bl	800c9f4 <__multadd>
 800c1b6:	45b1      	cmp	r9, r6
 800c1b8:	9004      	str	r0, [sp, #16]
 800c1ba:	f04f 0300 	mov.w	r3, #0
 800c1be:	f04f 020a 	mov.w	r2, #10
 800c1c2:	4649      	mov	r1, r9
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	d105      	bne.n	800c1d4 <_dtoa_r+0xaa4>
 800c1c8:	f000 fc14 	bl	800c9f4 <__multadd>
 800c1cc:	4681      	mov	r9, r0
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	9505      	str	r5, [sp, #20]
 800c1d2:	e776      	b.n	800c0c2 <_dtoa_r+0x992>
 800c1d4:	f000 fc0e 	bl	800c9f4 <__multadd>
 800c1d8:	4631      	mov	r1, r6
 800c1da:	4681      	mov	r9, r0
 800c1dc:	2300      	movs	r3, #0
 800c1de:	220a      	movs	r2, #10
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	f000 fc07 	bl	800c9f4 <__multadd>
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	e7f2      	b.n	800c1d0 <_dtoa_r+0xaa0>
 800c1ea:	f04f 0900 	mov.w	r9, #0
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	9904      	ldr	r1, [sp, #16]
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 fdb2 	bl	800cd5c <__lshift>
 800c1f8:	4639      	mov	r1, r7
 800c1fa:	9004      	str	r0, [sp, #16]
 800c1fc:	f000 fe02 	bl	800ce04 <__mcmp>
 800c200:	2800      	cmp	r0, #0
 800c202:	dcb6      	bgt.n	800c172 <_dtoa_r+0xa42>
 800c204:	d102      	bne.n	800c20c <_dtoa_r+0xadc>
 800c206:	f018 0f01 	tst.w	r8, #1
 800c20a:	d1b2      	bne.n	800c172 <_dtoa_r+0xa42>
 800c20c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c210:	2b30      	cmp	r3, #48	; 0x30
 800c212:	f105 32ff 	add.w	r2, r5, #4294967295
 800c216:	f47f af0a 	bne.w	800c02e <_dtoa_r+0x8fe>
 800c21a:	4615      	mov	r5, r2
 800c21c:	e7f6      	b.n	800c20c <_dtoa_r+0xadc>
 800c21e:	4593      	cmp	fp, r2
 800c220:	d105      	bne.n	800c22e <_dtoa_r+0xafe>
 800c222:	2331      	movs	r3, #49	; 0x31
 800c224:	f10a 0a01 	add.w	sl, sl, #1
 800c228:	f88b 3000 	strb.w	r3, [fp]
 800c22c:	e6ff      	b.n	800c02e <_dtoa_r+0x8fe>
 800c22e:	4615      	mov	r5, r2
 800c230:	e79f      	b.n	800c172 <_dtoa_r+0xa42>
 800c232:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c298 <_dtoa_r+0xb68>
 800c236:	e007      	b.n	800c248 <_dtoa_r+0xb18>
 800c238:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c23a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c29c <_dtoa_r+0xb6c>
 800c23e:	b11b      	cbz	r3, 800c248 <_dtoa_r+0xb18>
 800c240:	f10b 0308 	add.w	r3, fp, #8
 800c244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	4658      	mov	r0, fp
 800c24a:	b017      	add	sp, #92	; 0x5c
 800c24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c250:	9b06      	ldr	r3, [sp, #24]
 800c252:	2b01      	cmp	r3, #1
 800c254:	f77f ae35 	ble.w	800bec2 <_dtoa_r+0x792>
 800c258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c25a:	9307      	str	r3, [sp, #28]
 800c25c:	e649      	b.n	800bef2 <_dtoa_r+0x7c2>
 800c25e:	9b02      	ldr	r3, [sp, #8]
 800c260:	2b00      	cmp	r3, #0
 800c262:	dc03      	bgt.n	800c26c <_dtoa_r+0xb3c>
 800c264:	9b06      	ldr	r3, [sp, #24]
 800c266:	2b02      	cmp	r3, #2
 800c268:	f73f aecc 	bgt.w	800c004 <_dtoa_r+0x8d4>
 800c26c:	465d      	mov	r5, fp
 800c26e:	4639      	mov	r1, r7
 800c270:	9804      	ldr	r0, [sp, #16]
 800c272:	f7ff f9cf 	bl	800b614 <quorem>
 800c276:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c27a:	f805 8b01 	strb.w	r8, [r5], #1
 800c27e:	9a02      	ldr	r2, [sp, #8]
 800c280:	eba5 030b 	sub.w	r3, r5, fp
 800c284:	429a      	cmp	r2, r3
 800c286:	ddb0      	ble.n	800c1ea <_dtoa_r+0xaba>
 800c288:	2300      	movs	r3, #0
 800c28a:	220a      	movs	r2, #10
 800c28c:	9904      	ldr	r1, [sp, #16]
 800c28e:	4620      	mov	r0, r4
 800c290:	f000 fbb0 	bl	800c9f4 <__multadd>
 800c294:	9004      	str	r0, [sp, #16]
 800c296:	e7ea      	b.n	800c26e <_dtoa_r+0xb3e>
 800c298:	0800d7b8 	.word	0x0800d7b8
 800c29c:	0800d830 	.word	0x0800d830

0800c2a0 <rshift>:
 800c2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2a2:	6906      	ldr	r6, [r0, #16]
 800c2a4:	114b      	asrs	r3, r1, #5
 800c2a6:	429e      	cmp	r6, r3
 800c2a8:	f100 0414 	add.w	r4, r0, #20
 800c2ac:	dd30      	ble.n	800c310 <rshift+0x70>
 800c2ae:	f011 011f 	ands.w	r1, r1, #31
 800c2b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c2b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c2ba:	d108      	bne.n	800c2ce <rshift+0x2e>
 800c2bc:	4621      	mov	r1, r4
 800c2be:	42b2      	cmp	r2, r6
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	d211      	bcs.n	800c2e8 <rshift+0x48>
 800c2c4:	f852 3b04 	ldr.w	r3, [r2], #4
 800c2c8:	f841 3b04 	str.w	r3, [r1], #4
 800c2cc:	e7f7      	b.n	800c2be <rshift+0x1e>
 800c2ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c2d2:	f1c1 0c20 	rsb	ip, r1, #32
 800c2d6:	40cd      	lsrs	r5, r1
 800c2d8:	3204      	adds	r2, #4
 800c2da:	4623      	mov	r3, r4
 800c2dc:	42b2      	cmp	r2, r6
 800c2de:	4617      	mov	r7, r2
 800c2e0:	d30c      	bcc.n	800c2fc <rshift+0x5c>
 800c2e2:	601d      	str	r5, [r3, #0]
 800c2e4:	b105      	cbz	r5, 800c2e8 <rshift+0x48>
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	1b1a      	subs	r2, r3, r4
 800c2ea:	42a3      	cmp	r3, r4
 800c2ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2f0:	bf08      	it	eq
 800c2f2:	2300      	moveq	r3, #0
 800c2f4:	6102      	str	r2, [r0, #16]
 800c2f6:	bf08      	it	eq
 800c2f8:	6143      	streq	r3, [r0, #20]
 800c2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2fc:	683f      	ldr	r7, [r7, #0]
 800c2fe:	fa07 f70c 	lsl.w	r7, r7, ip
 800c302:	433d      	orrs	r5, r7
 800c304:	f843 5b04 	str.w	r5, [r3], #4
 800c308:	f852 5b04 	ldr.w	r5, [r2], #4
 800c30c:	40cd      	lsrs	r5, r1
 800c30e:	e7e5      	b.n	800c2dc <rshift+0x3c>
 800c310:	4623      	mov	r3, r4
 800c312:	e7e9      	b.n	800c2e8 <rshift+0x48>

0800c314 <__hexdig_fun>:
 800c314:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c318:	2b09      	cmp	r3, #9
 800c31a:	d802      	bhi.n	800c322 <__hexdig_fun+0xe>
 800c31c:	3820      	subs	r0, #32
 800c31e:	b2c0      	uxtb	r0, r0
 800c320:	4770      	bx	lr
 800c322:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c326:	2b05      	cmp	r3, #5
 800c328:	d801      	bhi.n	800c32e <__hexdig_fun+0x1a>
 800c32a:	3847      	subs	r0, #71	; 0x47
 800c32c:	e7f7      	b.n	800c31e <__hexdig_fun+0xa>
 800c32e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c332:	2b05      	cmp	r3, #5
 800c334:	d801      	bhi.n	800c33a <__hexdig_fun+0x26>
 800c336:	3827      	subs	r0, #39	; 0x27
 800c338:	e7f1      	b.n	800c31e <__hexdig_fun+0xa>
 800c33a:	2000      	movs	r0, #0
 800c33c:	4770      	bx	lr

0800c33e <__gethex>:
 800c33e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c342:	b08b      	sub	sp, #44	; 0x2c
 800c344:	468a      	mov	sl, r1
 800c346:	9002      	str	r0, [sp, #8]
 800c348:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c34a:	9306      	str	r3, [sp, #24]
 800c34c:	4690      	mov	r8, r2
 800c34e:	f000 fad0 	bl	800c8f2 <__localeconv_l>
 800c352:	6803      	ldr	r3, [r0, #0]
 800c354:	9303      	str	r3, [sp, #12]
 800c356:	4618      	mov	r0, r3
 800c358:	f7f3 ff3a 	bl	80001d0 <strlen>
 800c35c:	9b03      	ldr	r3, [sp, #12]
 800c35e:	9001      	str	r0, [sp, #4]
 800c360:	4403      	add	r3, r0
 800c362:	f04f 0b00 	mov.w	fp, #0
 800c366:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c36a:	9307      	str	r3, [sp, #28]
 800c36c:	f8da 3000 	ldr.w	r3, [sl]
 800c370:	3302      	adds	r3, #2
 800c372:	461f      	mov	r7, r3
 800c374:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c378:	2830      	cmp	r0, #48	; 0x30
 800c37a:	d06c      	beq.n	800c456 <__gethex+0x118>
 800c37c:	f7ff ffca 	bl	800c314 <__hexdig_fun>
 800c380:	4604      	mov	r4, r0
 800c382:	2800      	cmp	r0, #0
 800c384:	d16a      	bne.n	800c45c <__gethex+0x11e>
 800c386:	9a01      	ldr	r2, [sp, #4]
 800c388:	9903      	ldr	r1, [sp, #12]
 800c38a:	4638      	mov	r0, r7
 800c38c:	f001 f904 	bl	800d598 <strncmp>
 800c390:	2800      	cmp	r0, #0
 800c392:	d166      	bne.n	800c462 <__gethex+0x124>
 800c394:	9b01      	ldr	r3, [sp, #4]
 800c396:	5cf8      	ldrb	r0, [r7, r3]
 800c398:	18fe      	adds	r6, r7, r3
 800c39a:	f7ff ffbb 	bl	800c314 <__hexdig_fun>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d062      	beq.n	800c468 <__gethex+0x12a>
 800c3a2:	4633      	mov	r3, r6
 800c3a4:	7818      	ldrb	r0, [r3, #0]
 800c3a6:	2830      	cmp	r0, #48	; 0x30
 800c3a8:	461f      	mov	r7, r3
 800c3aa:	f103 0301 	add.w	r3, r3, #1
 800c3ae:	d0f9      	beq.n	800c3a4 <__gethex+0x66>
 800c3b0:	f7ff ffb0 	bl	800c314 <__hexdig_fun>
 800c3b4:	fab0 f580 	clz	r5, r0
 800c3b8:	096d      	lsrs	r5, r5, #5
 800c3ba:	4634      	mov	r4, r6
 800c3bc:	f04f 0b01 	mov.w	fp, #1
 800c3c0:	463a      	mov	r2, r7
 800c3c2:	4616      	mov	r6, r2
 800c3c4:	3201      	adds	r2, #1
 800c3c6:	7830      	ldrb	r0, [r6, #0]
 800c3c8:	f7ff ffa4 	bl	800c314 <__hexdig_fun>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d1f8      	bne.n	800c3c2 <__gethex+0x84>
 800c3d0:	9a01      	ldr	r2, [sp, #4]
 800c3d2:	9903      	ldr	r1, [sp, #12]
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f001 f8df 	bl	800d598 <strncmp>
 800c3da:	b950      	cbnz	r0, 800c3f2 <__gethex+0xb4>
 800c3dc:	b954      	cbnz	r4, 800c3f4 <__gethex+0xb6>
 800c3de:	9b01      	ldr	r3, [sp, #4]
 800c3e0:	18f4      	adds	r4, r6, r3
 800c3e2:	4622      	mov	r2, r4
 800c3e4:	4616      	mov	r6, r2
 800c3e6:	3201      	adds	r2, #1
 800c3e8:	7830      	ldrb	r0, [r6, #0]
 800c3ea:	f7ff ff93 	bl	800c314 <__hexdig_fun>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d1f8      	bne.n	800c3e4 <__gethex+0xa6>
 800c3f2:	b10c      	cbz	r4, 800c3f8 <__gethex+0xba>
 800c3f4:	1ba4      	subs	r4, r4, r6
 800c3f6:	00a4      	lsls	r4, r4, #2
 800c3f8:	7833      	ldrb	r3, [r6, #0]
 800c3fa:	2b50      	cmp	r3, #80	; 0x50
 800c3fc:	d001      	beq.n	800c402 <__gethex+0xc4>
 800c3fe:	2b70      	cmp	r3, #112	; 0x70
 800c400:	d140      	bne.n	800c484 <__gethex+0x146>
 800c402:	7873      	ldrb	r3, [r6, #1]
 800c404:	2b2b      	cmp	r3, #43	; 0x2b
 800c406:	d031      	beq.n	800c46c <__gethex+0x12e>
 800c408:	2b2d      	cmp	r3, #45	; 0x2d
 800c40a:	d033      	beq.n	800c474 <__gethex+0x136>
 800c40c:	1c71      	adds	r1, r6, #1
 800c40e:	f04f 0900 	mov.w	r9, #0
 800c412:	7808      	ldrb	r0, [r1, #0]
 800c414:	f7ff ff7e 	bl	800c314 <__hexdig_fun>
 800c418:	1e43      	subs	r3, r0, #1
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b18      	cmp	r3, #24
 800c41e:	d831      	bhi.n	800c484 <__gethex+0x146>
 800c420:	f1a0 0210 	sub.w	r2, r0, #16
 800c424:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c428:	f7ff ff74 	bl	800c314 <__hexdig_fun>
 800c42c:	1e43      	subs	r3, r0, #1
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	2b18      	cmp	r3, #24
 800c432:	d922      	bls.n	800c47a <__gethex+0x13c>
 800c434:	f1b9 0f00 	cmp.w	r9, #0
 800c438:	d000      	beq.n	800c43c <__gethex+0xfe>
 800c43a:	4252      	negs	r2, r2
 800c43c:	4414      	add	r4, r2
 800c43e:	f8ca 1000 	str.w	r1, [sl]
 800c442:	b30d      	cbz	r5, 800c488 <__gethex+0x14a>
 800c444:	f1bb 0f00 	cmp.w	fp, #0
 800c448:	bf0c      	ite	eq
 800c44a:	2706      	moveq	r7, #6
 800c44c:	2700      	movne	r7, #0
 800c44e:	4638      	mov	r0, r7
 800c450:	b00b      	add	sp, #44	; 0x2c
 800c452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c456:	f10b 0b01 	add.w	fp, fp, #1
 800c45a:	e78a      	b.n	800c372 <__gethex+0x34>
 800c45c:	2500      	movs	r5, #0
 800c45e:	462c      	mov	r4, r5
 800c460:	e7ae      	b.n	800c3c0 <__gethex+0x82>
 800c462:	463e      	mov	r6, r7
 800c464:	2501      	movs	r5, #1
 800c466:	e7c7      	b.n	800c3f8 <__gethex+0xba>
 800c468:	4604      	mov	r4, r0
 800c46a:	e7fb      	b.n	800c464 <__gethex+0x126>
 800c46c:	f04f 0900 	mov.w	r9, #0
 800c470:	1cb1      	adds	r1, r6, #2
 800c472:	e7ce      	b.n	800c412 <__gethex+0xd4>
 800c474:	f04f 0901 	mov.w	r9, #1
 800c478:	e7fa      	b.n	800c470 <__gethex+0x132>
 800c47a:	230a      	movs	r3, #10
 800c47c:	fb03 0202 	mla	r2, r3, r2, r0
 800c480:	3a10      	subs	r2, #16
 800c482:	e7cf      	b.n	800c424 <__gethex+0xe6>
 800c484:	4631      	mov	r1, r6
 800c486:	e7da      	b.n	800c43e <__gethex+0x100>
 800c488:	1bf3      	subs	r3, r6, r7
 800c48a:	3b01      	subs	r3, #1
 800c48c:	4629      	mov	r1, r5
 800c48e:	2b07      	cmp	r3, #7
 800c490:	dc49      	bgt.n	800c526 <__gethex+0x1e8>
 800c492:	9802      	ldr	r0, [sp, #8]
 800c494:	f000 fa63 	bl	800c95e <_Balloc>
 800c498:	9b01      	ldr	r3, [sp, #4]
 800c49a:	f100 0914 	add.w	r9, r0, #20
 800c49e:	f04f 0b00 	mov.w	fp, #0
 800c4a2:	f1c3 0301 	rsb	r3, r3, #1
 800c4a6:	4605      	mov	r5, r0
 800c4a8:	f8cd 9010 	str.w	r9, [sp, #16]
 800c4ac:	46da      	mov	sl, fp
 800c4ae:	9308      	str	r3, [sp, #32]
 800c4b0:	42b7      	cmp	r7, r6
 800c4b2:	d33b      	bcc.n	800c52c <__gethex+0x1ee>
 800c4b4:	9804      	ldr	r0, [sp, #16]
 800c4b6:	f840 ab04 	str.w	sl, [r0], #4
 800c4ba:	eba0 0009 	sub.w	r0, r0, r9
 800c4be:	1080      	asrs	r0, r0, #2
 800c4c0:	6128      	str	r0, [r5, #16]
 800c4c2:	0147      	lsls	r7, r0, #5
 800c4c4:	4650      	mov	r0, sl
 800c4c6:	f000 fb0e 	bl	800cae6 <__hi0bits>
 800c4ca:	f8d8 6000 	ldr.w	r6, [r8]
 800c4ce:	1a3f      	subs	r7, r7, r0
 800c4d0:	42b7      	cmp	r7, r6
 800c4d2:	dd64      	ble.n	800c59e <__gethex+0x260>
 800c4d4:	1bbf      	subs	r7, r7, r6
 800c4d6:	4639      	mov	r1, r7
 800c4d8:	4628      	mov	r0, r5
 800c4da:	f000 fe1d 	bl	800d118 <__any_on>
 800c4de:	4682      	mov	sl, r0
 800c4e0:	b178      	cbz	r0, 800c502 <__gethex+0x1c4>
 800c4e2:	1e7b      	subs	r3, r7, #1
 800c4e4:	1159      	asrs	r1, r3, #5
 800c4e6:	f003 021f 	and.w	r2, r3, #31
 800c4ea:	f04f 0a01 	mov.w	sl, #1
 800c4ee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c4f2:	fa0a f202 	lsl.w	r2, sl, r2
 800c4f6:	420a      	tst	r2, r1
 800c4f8:	d003      	beq.n	800c502 <__gethex+0x1c4>
 800c4fa:	4553      	cmp	r3, sl
 800c4fc:	dc46      	bgt.n	800c58c <__gethex+0x24e>
 800c4fe:	f04f 0a02 	mov.w	sl, #2
 800c502:	4639      	mov	r1, r7
 800c504:	4628      	mov	r0, r5
 800c506:	f7ff fecb 	bl	800c2a0 <rshift>
 800c50a:	443c      	add	r4, r7
 800c50c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c510:	42a3      	cmp	r3, r4
 800c512:	da52      	bge.n	800c5ba <__gethex+0x27c>
 800c514:	4629      	mov	r1, r5
 800c516:	9802      	ldr	r0, [sp, #8]
 800c518:	f000 fa55 	bl	800c9c6 <_Bfree>
 800c51c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c51e:	2300      	movs	r3, #0
 800c520:	6013      	str	r3, [r2, #0]
 800c522:	27a3      	movs	r7, #163	; 0xa3
 800c524:	e793      	b.n	800c44e <__gethex+0x110>
 800c526:	3101      	adds	r1, #1
 800c528:	105b      	asrs	r3, r3, #1
 800c52a:	e7b0      	b.n	800c48e <__gethex+0x150>
 800c52c:	1e73      	subs	r3, r6, #1
 800c52e:	9305      	str	r3, [sp, #20]
 800c530:	9a07      	ldr	r2, [sp, #28]
 800c532:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c536:	4293      	cmp	r3, r2
 800c538:	d018      	beq.n	800c56c <__gethex+0x22e>
 800c53a:	f1bb 0f20 	cmp.w	fp, #32
 800c53e:	d107      	bne.n	800c550 <__gethex+0x212>
 800c540:	9b04      	ldr	r3, [sp, #16]
 800c542:	f8c3 a000 	str.w	sl, [r3]
 800c546:	3304      	adds	r3, #4
 800c548:	f04f 0a00 	mov.w	sl, #0
 800c54c:	9304      	str	r3, [sp, #16]
 800c54e:	46d3      	mov	fp, sl
 800c550:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c554:	f7ff fede 	bl	800c314 <__hexdig_fun>
 800c558:	f000 000f 	and.w	r0, r0, #15
 800c55c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c560:	ea4a 0a00 	orr.w	sl, sl, r0
 800c564:	f10b 0b04 	add.w	fp, fp, #4
 800c568:	9b05      	ldr	r3, [sp, #20]
 800c56a:	e00d      	b.n	800c588 <__gethex+0x24a>
 800c56c:	9b05      	ldr	r3, [sp, #20]
 800c56e:	9a08      	ldr	r2, [sp, #32]
 800c570:	4413      	add	r3, r2
 800c572:	42bb      	cmp	r3, r7
 800c574:	d3e1      	bcc.n	800c53a <__gethex+0x1fc>
 800c576:	4618      	mov	r0, r3
 800c578:	9a01      	ldr	r2, [sp, #4]
 800c57a:	9903      	ldr	r1, [sp, #12]
 800c57c:	9309      	str	r3, [sp, #36]	; 0x24
 800c57e:	f001 f80b 	bl	800d598 <strncmp>
 800c582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c584:	2800      	cmp	r0, #0
 800c586:	d1d8      	bne.n	800c53a <__gethex+0x1fc>
 800c588:	461e      	mov	r6, r3
 800c58a:	e791      	b.n	800c4b0 <__gethex+0x172>
 800c58c:	1eb9      	subs	r1, r7, #2
 800c58e:	4628      	mov	r0, r5
 800c590:	f000 fdc2 	bl	800d118 <__any_on>
 800c594:	2800      	cmp	r0, #0
 800c596:	d0b2      	beq.n	800c4fe <__gethex+0x1c0>
 800c598:	f04f 0a03 	mov.w	sl, #3
 800c59c:	e7b1      	b.n	800c502 <__gethex+0x1c4>
 800c59e:	da09      	bge.n	800c5b4 <__gethex+0x276>
 800c5a0:	1bf7      	subs	r7, r6, r7
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	463a      	mov	r2, r7
 800c5a6:	9802      	ldr	r0, [sp, #8]
 800c5a8:	f000 fbd8 	bl	800cd5c <__lshift>
 800c5ac:	1be4      	subs	r4, r4, r7
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	f100 0914 	add.w	r9, r0, #20
 800c5b4:	f04f 0a00 	mov.w	sl, #0
 800c5b8:	e7a8      	b.n	800c50c <__gethex+0x1ce>
 800c5ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c5be:	42a0      	cmp	r0, r4
 800c5c0:	dd6a      	ble.n	800c698 <__gethex+0x35a>
 800c5c2:	1b04      	subs	r4, r0, r4
 800c5c4:	42a6      	cmp	r6, r4
 800c5c6:	dc2e      	bgt.n	800c626 <__gethex+0x2e8>
 800c5c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d022      	beq.n	800c616 <__gethex+0x2d8>
 800c5d0:	2b03      	cmp	r3, #3
 800c5d2:	d024      	beq.n	800c61e <__gethex+0x2e0>
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d115      	bne.n	800c604 <__gethex+0x2c6>
 800c5d8:	42a6      	cmp	r6, r4
 800c5da:	d113      	bne.n	800c604 <__gethex+0x2c6>
 800c5dc:	2e01      	cmp	r6, #1
 800c5de:	dc0b      	bgt.n	800c5f8 <__gethex+0x2ba>
 800c5e0:	9a06      	ldr	r2, [sp, #24]
 800c5e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5e6:	6013      	str	r3, [r2, #0]
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	612b      	str	r3, [r5, #16]
 800c5ec:	f8c9 3000 	str.w	r3, [r9]
 800c5f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5f2:	2762      	movs	r7, #98	; 0x62
 800c5f4:	601d      	str	r5, [r3, #0]
 800c5f6:	e72a      	b.n	800c44e <__gethex+0x110>
 800c5f8:	1e71      	subs	r1, r6, #1
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f000 fd8c 	bl	800d118 <__any_on>
 800c600:	2800      	cmp	r0, #0
 800c602:	d1ed      	bne.n	800c5e0 <__gethex+0x2a2>
 800c604:	4629      	mov	r1, r5
 800c606:	9802      	ldr	r0, [sp, #8]
 800c608:	f000 f9dd 	bl	800c9c6 <_Bfree>
 800c60c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c60e:	2300      	movs	r3, #0
 800c610:	6013      	str	r3, [r2, #0]
 800c612:	2750      	movs	r7, #80	; 0x50
 800c614:	e71b      	b.n	800c44e <__gethex+0x110>
 800c616:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0e1      	beq.n	800c5e0 <__gethex+0x2a2>
 800c61c:	e7f2      	b.n	800c604 <__gethex+0x2c6>
 800c61e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1dd      	bne.n	800c5e0 <__gethex+0x2a2>
 800c624:	e7ee      	b.n	800c604 <__gethex+0x2c6>
 800c626:	1e67      	subs	r7, r4, #1
 800c628:	f1ba 0f00 	cmp.w	sl, #0
 800c62c:	d131      	bne.n	800c692 <__gethex+0x354>
 800c62e:	b127      	cbz	r7, 800c63a <__gethex+0x2fc>
 800c630:	4639      	mov	r1, r7
 800c632:	4628      	mov	r0, r5
 800c634:	f000 fd70 	bl	800d118 <__any_on>
 800c638:	4682      	mov	sl, r0
 800c63a:	117a      	asrs	r2, r7, #5
 800c63c:	2301      	movs	r3, #1
 800c63e:	f007 071f 	and.w	r7, r7, #31
 800c642:	fa03 f707 	lsl.w	r7, r3, r7
 800c646:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c64a:	4621      	mov	r1, r4
 800c64c:	421f      	tst	r7, r3
 800c64e:	4628      	mov	r0, r5
 800c650:	bf18      	it	ne
 800c652:	f04a 0a02 	orrne.w	sl, sl, #2
 800c656:	1b36      	subs	r6, r6, r4
 800c658:	f7ff fe22 	bl	800c2a0 <rshift>
 800c65c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c660:	2702      	movs	r7, #2
 800c662:	f1ba 0f00 	cmp.w	sl, #0
 800c666:	d048      	beq.n	800c6fa <__gethex+0x3bc>
 800c668:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d015      	beq.n	800c69c <__gethex+0x35e>
 800c670:	2b03      	cmp	r3, #3
 800c672:	d017      	beq.n	800c6a4 <__gethex+0x366>
 800c674:	2b01      	cmp	r3, #1
 800c676:	d109      	bne.n	800c68c <__gethex+0x34e>
 800c678:	f01a 0f02 	tst.w	sl, #2
 800c67c:	d006      	beq.n	800c68c <__gethex+0x34e>
 800c67e:	f8d9 3000 	ldr.w	r3, [r9]
 800c682:	ea4a 0a03 	orr.w	sl, sl, r3
 800c686:	f01a 0f01 	tst.w	sl, #1
 800c68a:	d10e      	bne.n	800c6aa <__gethex+0x36c>
 800c68c:	f047 0710 	orr.w	r7, r7, #16
 800c690:	e033      	b.n	800c6fa <__gethex+0x3bc>
 800c692:	f04f 0a01 	mov.w	sl, #1
 800c696:	e7d0      	b.n	800c63a <__gethex+0x2fc>
 800c698:	2701      	movs	r7, #1
 800c69a:	e7e2      	b.n	800c662 <__gethex+0x324>
 800c69c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c69e:	f1c3 0301 	rsb	r3, r3, #1
 800c6a2:	9315      	str	r3, [sp, #84]	; 0x54
 800c6a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0f0      	beq.n	800c68c <__gethex+0x34e>
 800c6aa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c6ae:	f105 0314 	add.w	r3, r5, #20
 800c6b2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c6b6:	eb03 010a 	add.w	r1, r3, sl
 800c6ba:	f04f 0c00 	mov.w	ip, #0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6c8:	d01c      	beq.n	800c704 <__gethex+0x3c6>
 800c6ca:	3201      	adds	r2, #1
 800c6cc:	6002      	str	r2, [r0, #0]
 800c6ce:	2f02      	cmp	r7, #2
 800c6d0:	f105 0314 	add.w	r3, r5, #20
 800c6d4:	d138      	bne.n	800c748 <__gethex+0x40a>
 800c6d6:	f8d8 2000 	ldr.w	r2, [r8]
 800c6da:	3a01      	subs	r2, #1
 800c6dc:	42b2      	cmp	r2, r6
 800c6de:	d10a      	bne.n	800c6f6 <__gethex+0x3b8>
 800c6e0:	1171      	asrs	r1, r6, #5
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f006 061f 	and.w	r6, r6, #31
 800c6e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6ec:	fa02 f606 	lsl.w	r6, r2, r6
 800c6f0:	421e      	tst	r6, r3
 800c6f2:	bf18      	it	ne
 800c6f4:	4617      	movne	r7, r2
 800c6f6:	f047 0720 	orr.w	r7, r7, #32
 800c6fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6fc:	601d      	str	r5, [r3, #0]
 800c6fe:	9b06      	ldr	r3, [sp, #24]
 800c700:	601c      	str	r4, [r3, #0]
 800c702:	e6a4      	b.n	800c44e <__gethex+0x110>
 800c704:	4299      	cmp	r1, r3
 800c706:	f843 cc04 	str.w	ip, [r3, #-4]
 800c70a:	d8d8      	bhi.n	800c6be <__gethex+0x380>
 800c70c:	68ab      	ldr	r3, [r5, #8]
 800c70e:	4599      	cmp	r9, r3
 800c710:	db12      	blt.n	800c738 <__gethex+0x3fa>
 800c712:	6869      	ldr	r1, [r5, #4]
 800c714:	9802      	ldr	r0, [sp, #8]
 800c716:	3101      	adds	r1, #1
 800c718:	f000 f921 	bl	800c95e <_Balloc>
 800c71c:	692a      	ldr	r2, [r5, #16]
 800c71e:	3202      	adds	r2, #2
 800c720:	f105 010c 	add.w	r1, r5, #12
 800c724:	4683      	mov	fp, r0
 800c726:	0092      	lsls	r2, r2, #2
 800c728:	300c      	adds	r0, #12
 800c72a:	f000 f90d 	bl	800c948 <memcpy>
 800c72e:	4629      	mov	r1, r5
 800c730:	9802      	ldr	r0, [sp, #8]
 800c732:	f000 f948 	bl	800c9c6 <_Bfree>
 800c736:	465d      	mov	r5, fp
 800c738:	692b      	ldr	r3, [r5, #16]
 800c73a:	1c5a      	adds	r2, r3, #1
 800c73c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c740:	612a      	str	r2, [r5, #16]
 800c742:	2201      	movs	r2, #1
 800c744:	615a      	str	r2, [r3, #20]
 800c746:	e7c2      	b.n	800c6ce <__gethex+0x390>
 800c748:	692a      	ldr	r2, [r5, #16]
 800c74a:	454a      	cmp	r2, r9
 800c74c:	dd0b      	ble.n	800c766 <__gethex+0x428>
 800c74e:	2101      	movs	r1, #1
 800c750:	4628      	mov	r0, r5
 800c752:	f7ff fda5 	bl	800c2a0 <rshift>
 800c756:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c75a:	3401      	adds	r4, #1
 800c75c:	42a3      	cmp	r3, r4
 800c75e:	f6ff aed9 	blt.w	800c514 <__gethex+0x1d6>
 800c762:	2701      	movs	r7, #1
 800c764:	e7c7      	b.n	800c6f6 <__gethex+0x3b8>
 800c766:	f016 061f 	ands.w	r6, r6, #31
 800c76a:	d0fa      	beq.n	800c762 <__gethex+0x424>
 800c76c:	449a      	add	sl, r3
 800c76e:	f1c6 0620 	rsb	r6, r6, #32
 800c772:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c776:	f000 f9b6 	bl	800cae6 <__hi0bits>
 800c77a:	42b0      	cmp	r0, r6
 800c77c:	dbe7      	blt.n	800c74e <__gethex+0x410>
 800c77e:	e7f0      	b.n	800c762 <__gethex+0x424>

0800c780 <L_shift>:
 800c780:	f1c2 0208 	rsb	r2, r2, #8
 800c784:	0092      	lsls	r2, r2, #2
 800c786:	b570      	push	{r4, r5, r6, lr}
 800c788:	f1c2 0620 	rsb	r6, r2, #32
 800c78c:	6843      	ldr	r3, [r0, #4]
 800c78e:	6804      	ldr	r4, [r0, #0]
 800c790:	fa03 f506 	lsl.w	r5, r3, r6
 800c794:	432c      	orrs	r4, r5
 800c796:	40d3      	lsrs	r3, r2
 800c798:	6004      	str	r4, [r0, #0]
 800c79a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c79e:	4288      	cmp	r0, r1
 800c7a0:	d3f4      	bcc.n	800c78c <L_shift+0xc>
 800c7a2:	bd70      	pop	{r4, r5, r6, pc}

0800c7a4 <__match>:
 800c7a4:	b530      	push	{r4, r5, lr}
 800c7a6:	6803      	ldr	r3, [r0, #0]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ae:	b914      	cbnz	r4, 800c7b6 <__match+0x12>
 800c7b0:	6003      	str	r3, [r0, #0]
 800c7b2:	2001      	movs	r0, #1
 800c7b4:	bd30      	pop	{r4, r5, pc}
 800c7b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c7be:	2d19      	cmp	r5, #25
 800c7c0:	bf98      	it	ls
 800c7c2:	3220      	addls	r2, #32
 800c7c4:	42a2      	cmp	r2, r4
 800c7c6:	d0f0      	beq.n	800c7aa <__match+0x6>
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	e7f3      	b.n	800c7b4 <__match+0x10>

0800c7cc <__hexnan>:
 800c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	680b      	ldr	r3, [r1, #0]
 800c7d2:	6801      	ldr	r1, [r0, #0]
 800c7d4:	115f      	asrs	r7, r3, #5
 800c7d6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c7da:	f013 031f 	ands.w	r3, r3, #31
 800c7de:	b087      	sub	sp, #28
 800c7e0:	bf18      	it	ne
 800c7e2:	3704      	addne	r7, #4
 800c7e4:	2500      	movs	r5, #0
 800c7e6:	1f3e      	subs	r6, r7, #4
 800c7e8:	4682      	mov	sl, r0
 800c7ea:	4690      	mov	r8, r2
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	f847 5c04 	str.w	r5, [r7, #-4]
 800c7f2:	46b1      	mov	r9, r6
 800c7f4:	4634      	mov	r4, r6
 800c7f6:	9502      	str	r5, [sp, #8]
 800c7f8:	46ab      	mov	fp, r5
 800c7fa:	784a      	ldrb	r2, [r1, #1]
 800c7fc:	1c4b      	adds	r3, r1, #1
 800c7fe:	9303      	str	r3, [sp, #12]
 800c800:	b342      	cbz	r2, 800c854 <__hexnan+0x88>
 800c802:	4610      	mov	r0, r2
 800c804:	9105      	str	r1, [sp, #20]
 800c806:	9204      	str	r2, [sp, #16]
 800c808:	f7ff fd84 	bl	800c314 <__hexdig_fun>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	d143      	bne.n	800c898 <__hexnan+0xcc>
 800c810:	9a04      	ldr	r2, [sp, #16]
 800c812:	9905      	ldr	r1, [sp, #20]
 800c814:	2a20      	cmp	r2, #32
 800c816:	d818      	bhi.n	800c84a <__hexnan+0x7e>
 800c818:	9b02      	ldr	r3, [sp, #8]
 800c81a:	459b      	cmp	fp, r3
 800c81c:	dd13      	ble.n	800c846 <__hexnan+0x7a>
 800c81e:	454c      	cmp	r4, r9
 800c820:	d206      	bcs.n	800c830 <__hexnan+0x64>
 800c822:	2d07      	cmp	r5, #7
 800c824:	dc04      	bgt.n	800c830 <__hexnan+0x64>
 800c826:	462a      	mov	r2, r5
 800c828:	4649      	mov	r1, r9
 800c82a:	4620      	mov	r0, r4
 800c82c:	f7ff ffa8 	bl	800c780 <L_shift>
 800c830:	4544      	cmp	r4, r8
 800c832:	d944      	bls.n	800c8be <__hexnan+0xf2>
 800c834:	2300      	movs	r3, #0
 800c836:	f1a4 0904 	sub.w	r9, r4, #4
 800c83a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c83e:	f8cd b008 	str.w	fp, [sp, #8]
 800c842:	464c      	mov	r4, r9
 800c844:	461d      	mov	r5, r3
 800c846:	9903      	ldr	r1, [sp, #12]
 800c848:	e7d7      	b.n	800c7fa <__hexnan+0x2e>
 800c84a:	2a29      	cmp	r2, #41	; 0x29
 800c84c:	d14a      	bne.n	800c8e4 <__hexnan+0x118>
 800c84e:	3102      	adds	r1, #2
 800c850:	f8ca 1000 	str.w	r1, [sl]
 800c854:	f1bb 0f00 	cmp.w	fp, #0
 800c858:	d044      	beq.n	800c8e4 <__hexnan+0x118>
 800c85a:	454c      	cmp	r4, r9
 800c85c:	d206      	bcs.n	800c86c <__hexnan+0xa0>
 800c85e:	2d07      	cmp	r5, #7
 800c860:	dc04      	bgt.n	800c86c <__hexnan+0xa0>
 800c862:	462a      	mov	r2, r5
 800c864:	4649      	mov	r1, r9
 800c866:	4620      	mov	r0, r4
 800c868:	f7ff ff8a 	bl	800c780 <L_shift>
 800c86c:	4544      	cmp	r4, r8
 800c86e:	d928      	bls.n	800c8c2 <__hexnan+0xf6>
 800c870:	4643      	mov	r3, r8
 800c872:	f854 2b04 	ldr.w	r2, [r4], #4
 800c876:	f843 2b04 	str.w	r2, [r3], #4
 800c87a:	42a6      	cmp	r6, r4
 800c87c:	d2f9      	bcs.n	800c872 <__hexnan+0xa6>
 800c87e:	2200      	movs	r2, #0
 800c880:	f843 2b04 	str.w	r2, [r3], #4
 800c884:	429e      	cmp	r6, r3
 800c886:	d2fb      	bcs.n	800c880 <__hexnan+0xb4>
 800c888:	6833      	ldr	r3, [r6, #0]
 800c88a:	b91b      	cbnz	r3, 800c894 <__hexnan+0xc8>
 800c88c:	4546      	cmp	r6, r8
 800c88e:	d127      	bne.n	800c8e0 <__hexnan+0x114>
 800c890:	2301      	movs	r3, #1
 800c892:	6033      	str	r3, [r6, #0]
 800c894:	2005      	movs	r0, #5
 800c896:	e026      	b.n	800c8e6 <__hexnan+0x11a>
 800c898:	3501      	adds	r5, #1
 800c89a:	2d08      	cmp	r5, #8
 800c89c:	f10b 0b01 	add.w	fp, fp, #1
 800c8a0:	dd06      	ble.n	800c8b0 <__hexnan+0xe4>
 800c8a2:	4544      	cmp	r4, r8
 800c8a4:	d9cf      	bls.n	800c846 <__hexnan+0x7a>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8ac:	2501      	movs	r5, #1
 800c8ae:	3c04      	subs	r4, #4
 800c8b0:	6822      	ldr	r2, [r4, #0]
 800c8b2:	f000 000f 	and.w	r0, r0, #15
 800c8b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c8ba:	6020      	str	r0, [r4, #0]
 800c8bc:	e7c3      	b.n	800c846 <__hexnan+0x7a>
 800c8be:	2508      	movs	r5, #8
 800c8c0:	e7c1      	b.n	800c846 <__hexnan+0x7a>
 800c8c2:	9b01      	ldr	r3, [sp, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d0df      	beq.n	800c888 <__hexnan+0xbc>
 800c8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8cc:	f1c3 0320 	rsb	r3, r3, #32
 800c8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c8d8:	401a      	ands	r2, r3
 800c8da:	f847 2c04 	str.w	r2, [r7, #-4]
 800c8de:	e7d3      	b.n	800c888 <__hexnan+0xbc>
 800c8e0:	3e04      	subs	r6, #4
 800c8e2:	e7d1      	b.n	800c888 <__hexnan+0xbc>
 800c8e4:	2004      	movs	r0, #4
 800c8e6:	b007      	add	sp, #28
 800c8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8ec <__locale_ctype_ptr_l>:
 800c8ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c8f0:	4770      	bx	lr

0800c8f2 <__localeconv_l>:
 800c8f2:	30f0      	adds	r0, #240	; 0xf0
 800c8f4:	4770      	bx	lr
	...

0800c8f8 <_localeconv_r>:
 800c8f8:	4b04      	ldr	r3, [pc, #16]	; (800c90c <_localeconv_r+0x14>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6a18      	ldr	r0, [r3, #32]
 800c8fe:	4b04      	ldr	r3, [pc, #16]	; (800c910 <_localeconv_r+0x18>)
 800c900:	2800      	cmp	r0, #0
 800c902:	bf08      	it	eq
 800c904:	4618      	moveq	r0, r3
 800c906:	30f0      	adds	r0, #240	; 0xf0
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	20000028 	.word	0x20000028
 800c910:	2000008c 	.word	0x2000008c

0800c914 <malloc>:
 800c914:	4b02      	ldr	r3, [pc, #8]	; (800c920 <malloc+0xc>)
 800c916:	4601      	mov	r1, r0
 800c918:	6818      	ldr	r0, [r3, #0]
 800c91a:	f000 bc7b 	b.w	800d214 <_malloc_r>
 800c91e:	bf00      	nop
 800c920:	20000028 	.word	0x20000028

0800c924 <__ascii_mbtowc>:
 800c924:	b082      	sub	sp, #8
 800c926:	b901      	cbnz	r1, 800c92a <__ascii_mbtowc+0x6>
 800c928:	a901      	add	r1, sp, #4
 800c92a:	b142      	cbz	r2, 800c93e <__ascii_mbtowc+0x1a>
 800c92c:	b14b      	cbz	r3, 800c942 <__ascii_mbtowc+0x1e>
 800c92e:	7813      	ldrb	r3, [r2, #0]
 800c930:	600b      	str	r3, [r1, #0]
 800c932:	7812      	ldrb	r2, [r2, #0]
 800c934:	1c10      	adds	r0, r2, #0
 800c936:	bf18      	it	ne
 800c938:	2001      	movne	r0, #1
 800c93a:	b002      	add	sp, #8
 800c93c:	4770      	bx	lr
 800c93e:	4610      	mov	r0, r2
 800c940:	e7fb      	b.n	800c93a <__ascii_mbtowc+0x16>
 800c942:	f06f 0001 	mvn.w	r0, #1
 800c946:	e7f8      	b.n	800c93a <__ascii_mbtowc+0x16>

0800c948 <memcpy>:
 800c948:	b510      	push	{r4, lr}
 800c94a:	1e43      	subs	r3, r0, #1
 800c94c:	440a      	add	r2, r1
 800c94e:	4291      	cmp	r1, r2
 800c950:	d100      	bne.n	800c954 <memcpy+0xc>
 800c952:	bd10      	pop	{r4, pc}
 800c954:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c958:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c95c:	e7f7      	b.n	800c94e <memcpy+0x6>

0800c95e <_Balloc>:
 800c95e:	b570      	push	{r4, r5, r6, lr}
 800c960:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c962:	4604      	mov	r4, r0
 800c964:	460e      	mov	r6, r1
 800c966:	b93d      	cbnz	r5, 800c978 <_Balloc+0x1a>
 800c968:	2010      	movs	r0, #16
 800c96a:	f7ff ffd3 	bl	800c914 <malloc>
 800c96e:	6260      	str	r0, [r4, #36]	; 0x24
 800c970:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c974:	6005      	str	r5, [r0, #0]
 800c976:	60c5      	str	r5, [r0, #12]
 800c978:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c97a:	68eb      	ldr	r3, [r5, #12]
 800c97c:	b183      	cbz	r3, 800c9a0 <_Balloc+0x42>
 800c97e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c986:	b9b8      	cbnz	r0, 800c9b8 <_Balloc+0x5a>
 800c988:	2101      	movs	r1, #1
 800c98a:	fa01 f506 	lsl.w	r5, r1, r6
 800c98e:	1d6a      	adds	r2, r5, #5
 800c990:	0092      	lsls	r2, r2, #2
 800c992:	4620      	mov	r0, r4
 800c994:	f000 fbe1 	bl	800d15a <_calloc_r>
 800c998:	b160      	cbz	r0, 800c9b4 <_Balloc+0x56>
 800c99a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c99e:	e00e      	b.n	800c9be <_Balloc+0x60>
 800c9a0:	2221      	movs	r2, #33	; 0x21
 800c9a2:	2104      	movs	r1, #4
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f000 fbd8 	bl	800d15a <_calloc_r>
 800c9aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9ac:	60e8      	str	r0, [r5, #12]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1e4      	bne.n	800c97e <_Balloc+0x20>
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	bd70      	pop	{r4, r5, r6, pc}
 800c9b8:	6802      	ldr	r2, [r0, #0]
 800c9ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9c4:	e7f7      	b.n	800c9b6 <_Balloc+0x58>

0800c9c6 <_Bfree>:
 800c9c6:	b570      	push	{r4, r5, r6, lr}
 800c9c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	460d      	mov	r5, r1
 800c9ce:	b93c      	cbnz	r4, 800c9e0 <_Bfree+0x1a>
 800c9d0:	2010      	movs	r0, #16
 800c9d2:	f7ff ff9f 	bl	800c914 <malloc>
 800c9d6:	6270      	str	r0, [r6, #36]	; 0x24
 800c9d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9dc:	6004      	str	r4, [r0, #0]
 800c9de:	60c4      	str	r4, [r0, #12]
 800c9e0:	b13d      	cbz	r5, 800c9f2 <_Bfree+0x2c>
 800c9e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c9e4:	686a      	ldr	r2, [r5, #4]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9ec:	6029      	str	r1, [r5, #0]
 800c9ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}

0800c9f4 <__multadd>:
 800c9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f8:	690d      	ldr	r5, [r1, #16]
 800c9fa:	461f      	mov	r7, r3
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	f101 0c14 	add.w	ip, r1, #20
 800ca04:	2300      	movs	r3, #0
 800ca06:	f8dc 0000 	ldr.w	r0, [ip]
 800ca0a:	b281      	uxth	r1, r0
 800ca0c:	fb02 7101 	mla	r1, r2, r1, r7
 800ca10:	0c0f      	lsrs	r7, r1, #16
 800ca12:	0c00      	lsrs	r0, r0, #16
 800ca14:	fb02 7000 	mla	r0, r2, r0, r7
 800ca18:	b289      	uxth	r1, r1
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ca20:	429d      	cmp	r5, r3
 800ca22:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ca26:	f84c 1b04 	str.w	r1, [ip], #4
 800ca2a:	dcec      	bgt.n	800ca06 <__multadd+0x12>
 800ca2c:	b1d7      	cbz	r7, 800ca64 <__multadd+0x70>
 800ca2e:	68a3      	ldr	r3, [r4, #8]
 800ca30:	42ab      	cmp	r3, r5
 800ca32:	dc12      	bgt.n	800ca5a <__multadd+0x66>
 800ca34:	6861      	ldr	r1, [r4, #4]
 800ca36:	4630      	mov	r0, r6
 800ca38:	3101      	adds	r1, #1
 800ca3a:	f7ff ff90 	bl	800c95e <_Balloc>
 800ca3e:	6922      	ldr	r2, [r4, #16]
 800ca40:	3202      	adds	r2, #2
 800ca42:	f104 010c 	add.w	r1, r4, #12
 800ca46:	4680      	mov	r8, r0
 800ca48:	0092      	lsls	r2, r2, #2
 800ca4a:	300c      	adds	r0, #12
 800ca4c:	f7ff ff7c 	bl	800c948 <memcpy>
 800ca50:	4621      	mov	r1, r4
 800ca52:	4630      	mov	r0, r6
 800ca54:	f7ff ffb7 	bl	800c9c6 <_Bfree>
 800ca58:	4644      	mov	r4, r8
 800ca5a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca5e:	3501      	adds	r5, #1
 800ca60:	615f      	str	r7, [r3, #20]
 800ca62:	6125      	str	r5, [r4, #16]
 800ca64:	4620      	mov	r0, r4
 800ca66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca6a <__s2b>:
 800ca6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca6e:	460c      	mov	r4, r1
 800ca70:	4615      	mov	r5, r2
 800ca72:	461f      	mov	r7, r3
 800ca74:	2209      	movs	r2, #9
 800ca76:	3308      	adds	r3, #8
 800ca78:	4606      	mov	r6, r0
 800ca7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca7e:	2100      	movs	r1, #0
 800ca80:	2201      	movs	r2, #1
 800ca82:	429a      	cmp	r2, r3
 800ca84:	db20      	blt.n	800cac8 <__s2b+0x5e>
 800ca86:	4630      	mov	r0, r6
 800ca88:	f7ff ff69 	bl	800c95e <_Balloc>
 800ca8c:	9b08      	ldr	r3, [sp, #32]
 800ca8e:	6143      	str	r3, [r0, #20]
 800ca90:	2d09      	cmp	r5, #9
 800ca92:	f04f 0301 	mov.w	r3, #1
 800ca96:	6103      	str	r3, [r0, #16]
 800ca98:	dd19      	ble.n	800cace <__s2b+0x64>
 800ca9a:	f104 0809 	add.w	r8, r4, #9
 800ca9e:	46c1      	mov	r9, r8
 800caa0:	442c      	add	r4, r5
 800caa2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800caa6:	4601      	mov	r1, r0
 800caa8:	3b30      	subs	r3, #48	; 0x30
 800caaa:	220a      	movs	r2, #10
 800caac:	4630      	mov	r0, r6
 800caae:	f7ff ffa1 	bl	800c9f4 <__multadd>
 800cab2:	45a1      	cmp	r9, r4
 800cab4:	d1f5      	bne.n	800caa2 <__s2b+0x38>
 800cab6:	eb08 0405 	add.w	r4, r8, r5
 800caba:	3c08      	subs	r4, #8
 800cabc:	1b2d      	subs	r5, r5, r4
 800cabe:	1963      	adds	r3, r4, r5
 800cac0:	42bb      	cmp	r3, r7
 800cac2:	db07      	blt.n	800cad4 <__s2b+0x6a>
 800cac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac8:	0052      	lsls	r2, r2, #1
 800caca:	3101      	adds	r1, #1
 800cacc:	e7d9      	b.n	800ca82 <__s2b+0x18>
 800cace:	340a      	adds	r4, #10
 800cad0:	2509      	movs	r5, #9
 800cad2:	e7f3      	b.n	800cabc <__s2b+0x52>
 800cad4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cad8:	4601      	mov	r1, r0
 800cada:	3b30      	subs	r3, #48	; 0x30
 800cadc:	220a      	movs	r2, #10
 800cade:	4630      	mov	r0, r6
 800cae0:	f7ff ff88 	bl	800c9f4 <__multadd>
 800cae4:	e7eb      	b.n	800cabe <__s2b+0x54>

0800cae6 <__hi0bits>:
 800cae6:	0c02      	lsrs	r2, r0, #16
 800cae8:	0412      	lsls	r2, r2, #16
 800caea:	4603      	mov	r3, r0
 800caec:	b9b2      	cbnz	r2, 800cb1c <__hi0bits+0x36>
 800caee:	0403      	lsls	r3, r0, #16
 800caf0:	2010      	movs	r0, #16
 800caf2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800caf6:	bf04      	itt	eq
 800caf8:	021b      	lsleq	r3, r3, #8
 800cafa:	3008      	addeq	r0, #8
 800cafc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cb00:	bf04      	itt	eq
 800cb02:	011b      	lsleq	r3, r3, #4
 800cb04:	3004      	addeq	r0, #4
 800cb06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cb0a:	bf04      	itt	eq
 800cb0c:	009b      	lsleq	r3, r3, #2
 800cb0e:	3002      	addeq	r0, #2
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	db06      	blt.n	800cb22 <__hi0bits+0x3c>
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	d503      	bpl.n	800cb20 <__hi0bits+0x3a>
 800cb18:	3001      	adds	r0, #1
 800cb1a:	4770      	bx	lr
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	e7e8      	b.n	800caf2 <__hi0bits+0xc>
 800cb20:	2020      	movs	r0, #32
 800cb22:	4770      	bx	lr

0800cb24 <__lo0bits>:
 800cb24:	6803      	ldr	r3, [r0, #0]
 800cb26:	f013 0207 	ands.w	r2, r3, #7
 800cb2a:	4601      	mov	r1, r0
 800cb2c:	d00b      	beq.n	800cb46 <__lo0bits+0x22>
 800cb2e:	07da      	lsls	r2, r3, #31
 800cb30:	d423      	bmi.n	800cb7a <__lo0bits+0x56>
 800cb32:	0798      	lsls	r0, r3, #30
 800cb34:	bf49      	itett	mi
 800cb36:	085b      	lsrmi	r3, r3, #1
 800cb38:	089b      	lsrpl	r3, r3, #2
 800cb3a:	2001      	movmi	r0, #1
 800cb3c:	600b      	strmi	r3, [r1, #0]
 800cb3e:	bf5c      	itt	pl
 800cb40:	600b      	strpl	r3, [r1, #0]
 800cb42:	2002      	movpl	r0, #2
 800cb44:	4770      	bx	lr
 800cb46:	b298      	uxth	r0, r3
 800cb48:	b9a8      	cbnz	r0, 800cb76 <__lo0bits+0x52>
 800cb4a:	0c1b      	lsrs	r3, r3, #16
 800cb4c:	2010      	movs	r0, #16
 800cb4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb52:	bf04      	itt	eq
 800cb54:	0a1b      	lsreq	r3, r3, #8
 800cb56:	3008      	addeq	r0, #8
 800cb58:	071a      	lsls	r2, r3, #28
 800cb5a:	bf04      	itt	eq
 800cb5c:	091b      	lsreq	r3, r3, #4
 800cb5e:	3004      	addeq	r0, #4
 800cb60:	079a      	lsls	r2, r3, #30
 800cb62:	bf04      	itt	eq
 800cb64:	089b      	lsreq	r3, r3, #2
 800cb66:	3002      	addeq	r0, #2
 800cb68:	07da      	lsls	r2, r3, #31
 800cb6a:	d402      	bmi.n	800cb72 <__lo0bits+0x4e>
 800cb6c:	085b      	lsrs	r3, r3, #1
 800cb6e:	d006      	beq.n	800cb7e <__lo0bits+0x5a>
 800cb70:	3001      	adds	r0, #1
 800cb72:	600b      	str	r3, [r1, #0]
 800cb74:	4770      	bx	lr
 800cb76:	4610      	mov	r0, r2
 800cb78:	e7e9      	b.n	800cb4e <__lo0bits+0x2a>
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	4770      	bx	lr
 800cb7e:	2020      	movs	r0, #32
 800cb80:	4770      	bx	lr

0800cb82 <__i2b>:
 800cb82:	b510      	push	{r4, lr}
 800cb84:	460c      	mov	r4, r1
 800cb86:	2101      	movs	r1, #1
 800cb88:	f7ff fee9 	bl	800c95e <_Balloc>
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	6144      	str	r4, [r0, #20]
 800cb90:	6102      	str	r2, [r0, #16]
 800cb92:	bd10      	pop	{r4, pc}

0800cb94 <__multiply>:
 800cb94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	4614      	mov	r4, r2
 800cb9a:	690a      	ldr	r2, [r1, #16]
 800cb9c:	6923      	ldr	r3, [r4, #16]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	bfb8      	it	lt
 800cba2:	460b      	movlt	r3, r1
 800cba4:	4688      	mov	r8, r1
 800cba6:	bfbc      	itt	lt
 800cba8:	46a0      	movlt	r8, r4
 800cbaa:	461c      	movlt	r4, r3
 800cbac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cbb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cbb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cbbc:	eb07 0609 	add.w	r6, r7, r9
 800cbc0:	42b3      	cmp	r3, r6
 800cbc2:	bfb8      	it	lt
 800cbc4:	3101      	addlt	r1, #1
 800cbc6:	f7ff feca 	bl	800c95e <_Balloc>
 800cbca:	f100 0514 	add.w	r5, r0, #20
 800cbce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cbd2:	462b      	mov	r3, r5
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	4573      	cmp	r3, lr
 800cbd8:	d316      	bcc.n	800cc08 <__multiply+0x74>
 800cbda:	f104 0214 	add.w	r2, r4, #20
 800cbde:	f108 0114 	add.w	r1, r8, #20
 800cbe2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cbe6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	9b00      	ldr	r3, [sp, #0]
 800cbee:	9201      	str	r2, [sp, #4]
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d80c      	bhi.n	800cc0e <__multiply+0x7a>
 800cbf4:	2e00      	cmp	r6, #0
 800cbf6:	dd03      	ble.n	800cc00 <__multiply+0x6c>
 800cbf8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d05d      	beq.n	800ccbc <__multiply+0x128>
 800cc00:	6106      	str	r6, [r0, #16]
 800cc02:	b003      	add	sp, #12
 800cc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc08:	f843 2b04 	str.w	r2, [r3], #4
 800cc0c:	e7e3      	b.n	800cbd6 <__multiply+0x42>
 800cc0e:	f8b2 b000 	ldrh.w	fp, [r2]
 800cc12:	f1bb 0f00 	cmp.w	fp, #0
 800cc16:	d023      	beq.n	800cc60 <__multiply+0xcc>
 800cc18:	4689      	mov	r9, r1
 800cc1a:	46ac      	mov	ip, r5
 800cc1c:	f04f 0800 	mov.w	r8, #0
 800cc20:	f859 4b04 	ldr.w	r4, [r9], #4
 800cc24:	f8dc a000 	ldr.w	sl, [ip]
 800cc28:	b2a3      	uxth	r3, r4
 800cc2a:	fa1f fa8a 	uxth.w	sl, sl
 800cc2e:	fb0b a303 	mla	r3, fp, r3, sl
 800cc32:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cc36:	f8dc 4000 	ldr.w	r4, [ip]
 800cc3a:	4443      	add	r3, r8
 800cc3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cc40:	fb0b 840a 	mla	r4, fp, sl, r8
 800cc44:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cc48:	46e2      	mov	sl, ip
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cc50:	454f      	cmp	r7, r9
 800cc52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cc56:	f84a 3b04 	str.w	r3, [sl], #4
 800cc5a:	d82b      	bhi.n	800ccb4 <__multiply+0x120>
 800cc5c:	f8cc 8004 	str.w	r8, [ip, #4]
 800cc60:	9b01      	ldr	r3, [sp, #4]
 800cc62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cc66:	3204      	adds	r2, #4
 800cc68:	f1ba 0f00 	cmp.w	sl, #0
 800cc6c:	d020      	beq.n	800ccb0 <__multiply+0x11c>
 800cc6e:	682b      	ldr	r3, [r5, #0]
 800cc70:	4689      	mov	r9, r1
 800cc72:	46a8      	mov	r8, r5
 800cc74:	f04f 0b00 	mov.w	fp, #0
 800cc78:	f8b9 c000 	ldrh.w	ip, [r9]
 800cc7c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cc80:	fb0a 440c 	mla	r4, sl, ip, r4
 800cc84:	445c      	add	r4, fp
 800cc86:	46c4      	mov	ip, r8
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cc8e:	f84c 3b04 	str.w	r3, [ip], #4
 800cc92:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc96:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cc9a:	0c1b      	lsrs	r3, r3, #16
 800cc9c:	fb0a b303 	mla	r3, sl, r3, fp
 800cca0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cca4:	454f      	cmp	r7, r9
 800cca6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ccaa:	d805      	bhi.n	800ccb8 <__multiply+0x124>
 800ccac:	f8c8 3004 	str.w	r3, [r8, #4]
 800ccb0:	3504      	adds	r5, #4
 800ccb2:	e79b      	b.n	800cbec <__multiply+0x58>
 800ccb4:	46d4      	mov	ip, sl
 800ccb6:	e7b3      	b.n	800cc20 <__multiply+0x8c>
 800ccb8:	46e0      	mov	r8, ip
 800ccba:	e7dd      	b.n	800cc78 <__multiply+0xe4>
 800ccbc:	3e01      	subs	r6, #1
 800ccbe:	e799      	b.n	800cbf4 <__multiply+0x60>

0800ccc0 <__pow5mult>:
 800ccc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccc4:	4615      	mov	r5, r2
 800ccc6:	f012 0203 	ands.w	r2, r2, #3
 800ccca:	4606      	mov	r6, r0
 800cccc:	460f      	mov	r7, r1
 800ccce:	d007      	beq.n	800cce0 <__pow5mult+0x20>
 800ccd0:	3a01      	subs	r2, #1
 800ccd2:	4c21      	ldr	r4, [pc, #132]	; (800cd58 <__pow5mult+0x98>)
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccda:	f7ff fe8b 	bl	800c9f4 <__multadd>
 800ccde:	4607      	mov	r7, r0
 800cce0:	10ad      	asrs	r5, r5, #2
 800cce2:	d035      	beq.n	800cd50 <__pow5mult+0x90>
 800cce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cce6:	b93c      	cbnz	r4, 800ccf8 <__pow5mult+0x38>
 800cce8:	2010      	movs	r0, #16
 800ccea:	f7ff fe13 	bl	800c914 <malloc>
 800ccee:	6270      	str	r0, [r6, #36]	; 0x24
 800ccf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccf4:	6004      	str	r4, [r0, #0]
 800ccf6:	60c4      	str	r4, [r0, #12]
 800ccf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ccfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd00:	b94c      	cbnz	r4, 800cd16 <__pow5mult+0x56>
 800cd02:	f240 2171 	movw	r1, #625	; 0x271
 800cd06:	4630      	mov	r0, r6
 800cd08:	f7ff ff3b 	bl	800cb82 <__i2b>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd12:	4604      	mov	r4, r0
 800cd14:	6003      	str	r3, [r0, #0]
 800cd16:	f04f 0800 	mov.w	r8, #0
 800cd1a:	07eb      	lsls	r3, r5, #31
 800cd1c:	d50a      	bpl.n	800cd34 <__pow5mult+0x74>
 800cd1e:	4639      	mov	r1, r7
 800cd20:	4622      	mov	r2, r4
 800cd22:	4630      	mov	r0, r6
 800cd24:	f7ff ff36 	bl	800cb94 <__multiply>
 800cd28:	4639      	mov	r1, r7
 800cd2a:	4681      	mov	r9, r0
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f7ff fe4a 	bl	800c9c6 <_Bfree>
 800cd32:	464f      	mov	r7, r9
 800cd34:	106d      	asrs	r5, r5, #1
 800cd36:	d00b      	beq.n	800cd50 <__pow5mult+0x90>
 800cd38:	6820      	ldr	r0, [r4, #0]
 800cd3a:	b938      	cbnz	r0, 800cd4c <__pow5mult+0x8c>
 800cd3c:	4622      	mov	r2, r4
 800cd3e:	4621      	mov	r1, r4
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7ff ff27 	bl	800cb94 <__multiply>
 800cd46:	6020      	str	r0, [r4, #0]
 800cd48:	f8c0 8000 	str.w	r8, [r0]
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	e7e4      	b.n	800cd1a <__pow5mult+0x5a>
 800cd50:	4638      	mov	r0, r7
 800cd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd56:	bf00      	nop
 800cd58:	0800d938 	.word	0x0800d938

0800cd5c <__lshift>:
 800cd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd60:	460c      	mov	r4, r1
 800cd62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd66:	6923      	ldr	r3, [r4, #16]
 800cd68:	6849      	ldr	r1, [r1, #4]
 800cd6a:	eb0a 0903 	add.w	r9, sl, r3
 800cd6e:	68a3      	ldr	r3, [r4, #8]
 800cd70:	4607      	mov	r7, r0
 800cd72:	4616      	mov	r6, r2
 800cd74:	f109 0501 	add.w	r5, r9, #1
 800cd78:	42ab      	cmp	r3, r5
 800cd7a:	db32      	blt.n	800cde2 <__lshift+0x86>
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	f7ff fdee 	bl	800c95e <_Balloc>
 800cd82:	2300      	movs	r3, #0
 800cd84:	4680      	mov	r8, r0
 800cd86:	f100 0114 	add.w	r1, r0, #20
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	4553      	cmp	r3, sl
 800cd8e:	db2b      	blt.n	800cde8 <__lshift+0x8c>
 800cd90:	6920      	ldr	r0, [r4, #16]
 800cd92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd96:	f104 0314 	add.w	r3, r4, #20
 800cd9a:	f016 021f 	ands.w	r2, r6, #31
 800cd9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cda2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cda6:	d025      	beq.n	800cdf4 <__lshift+0x98>
 800cda8:	f1c2 0e20 	rsb	lr, r2, #32
 800cdac:	2000      	movs	r0, #0
 800cdae:	681e      	ldr	r6, [r3, #0]
 800cdb0:	468a      	mov	sl, r1
 800cdb2:	4096      	lsls	r6, r2
 800cdb4:	4330      	orrs	r0, r6
 800cdb6:	f84a 0b04 	str.w	r0, [sl], #4
 800cdba:	f853 0b04 	ldr.w	r0, [r3], #4
 800cdbe:	459c      	cmp	ip, r3
 800cdc0:	fa20 f00e 	lsr.w	r0, r0, lr
 800cdc4:	d814      	bhi.n	800cdf0 <__lshift+0x94>
 800cdc6:	6048      	str	r0, [r1, #4]
 800cdc8:	b108      	cbz	r0, 800cdce <__lshift+0x72>
 800cdca:	f109 0502 	add.w	r5, r9, #2
 800cdce:	3d01      	subs	r5, #1
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	f8c8 5010 	str.w	r5, [r8, #16]
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	f7ff fdf5 	bl	800c9c6 <_Bfree>
 800cddc:	4640      	mov	r0, r8
 800cdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde2:	3101      	adds	r1, #1
 800cde4:	005b      	lsls	r3, r3, #1
 800cde6:	e7c7      	b.n	800cd78 <__lshift+0x1c>
 800cde8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cdec:	3301      	adds	r3, #1
 800cdee:	e7cd      	b.n	800cd8c <__lshift+0x30>
 800cdf0:	4651      	mov	r1, sl
 800cdf2:	e7dc      	b.n	800cdae <__lshift+0x52>
 800cdf4:	3904      	subs	r1, #4
 800cdf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdfa:	f841 2f04 	str.w	r2, [r1, #4]!
 800cdfe:	459c      	cmp	ip, r3
 800ce00:	d8f9      	bhi.n	800cdf6 <__lshift+0x9a>
 800ce02:	e7e4      	b.n	800cdce <__lshift+0x72>

0800ce04 <__mcmp>:
 800ce04:	6903      	ldr	r3, [r0, #16]
 800ce06:	690a      	ldr	r2, [r1, #16]
 800ce08:	1a9b      	subs	r3, r3, r2
 800ce0a:	b530      	push	{r4, r5, lr}
 800ce0c:	d10c      	bne.n	800ce28 <__mcmp+0x24>
 800ce0e:	0092      	lsls	r2, r2, #2
 800ce10:	3014      	adds	r0, #20
 800ce12:	3114      	adds	r1, #20
 800ce14:	1884      	adds	r4, r0, r2
 800ce16:	4411      	add	r1, r2
 800ce18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce20:	4295      	cmp	r5, r2
 800ce22:	d003      	beq.n	800ce2c <__mcmp+0x28>
 800ce24:	d305      	bcc.n	800ce32 <__mcmp+0x2e>
 800ce26:	2301      	movs	r3, #1
 800ce28:	4618      	mov	r0, r3
 800ce2a:	bd30      	pop	{r4, r5, pc}
 800ce2c:	42a0      	cmp	r0, r4
 800ce2e:	d3f3      	bcc.n	800ce18 <__mcmp+0x14>
 800ce30:	e7fa      	b.n	800ce28 <__mcmp+0x24>
 800ce32:	f04f 33ff 	mov.w	r3, #4294967295
 800ce36:	e7f7      	b.n	800ce28 <__mcmp+0x24>

0800ce38 <__mdiff>:
 800ce38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	4607      	mov	r7, r0
 800ce40:	4611      	mov	r1, r2
 800ce42:	4628      	mov	r0, r5
 800ce44:	4614      	mov	r4, r2
 800ce46:	f7ff ffdd 	bl	800ce04 <__mcmp>
 800ce4a:	1e06      	subs	r6, r0, #0
 800ce4c:	d108      	bne.n	800ce60 <__mdiff+0x28>
 800ce4e:	4631      	mov	r1, r6
 800ce50:	4638      	mov	r0, r7
 800ce52:	f7ff fd84 	bl	800c95e <_Balloc>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ce5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce60:	bfa4      	itt	ge
 800ce62:	4623      	movge	r3, r4
 800ce64:	462c      	movge	r4, r5
 800ce66:	4638      	mov	r0, r7
 800ce68:	6861      	ldr	r1, [r4, #4]
 800ce6a:	bfa6      	itte	ge
 800ce6c:	461d      	movge	r5, r3
 800ce6e:	2600      	movge	r6, #0
 800ce70:	2601      	movlt	r6, #1
 800ce72:	f7ff fd74 	bl	800c95e <_Balloc>
 800ce76:	692b      	ldr	r3, [r5, #16]
 800ce78:	60c6      	str	r6, [r0, #12]
 800ce7a:	6926      	ldr	r6, [r4, #16]
 800ce7c:	f105 0914 	add.w	r9, r5, #20
 800ce80:	f104 0214 	add.w	r2, r4, #20
 800ce84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ce88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ce8c:	f100 0514 	add.w	r5, r0, #20
 800ce90:	f04f 0e00 	mov.w	lr, #0
 800ce94:	f852 ab04 	ldr.w	sl, [r2], #4
 800ce98:	f859 4b04 	ldr.w	r4, [r9], #4
 800ce9c:	fa1e f18a 	uxtah	r1, lr, sl
 800cea0:	b2a3      	uxth	r3, r4
 800cea2:	1ac9      	subs	r1, r1, r3
 800cea4:	0c23      	lsrs	r3, r4, #16
 800cea6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ceaa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ceae:	b289      	uxth	r1, r1
 800ceb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ceb4:	45c8      	cmp	r8, r9
 800ceb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ceba:	4694      	mov	ip, r2
 800cebc:	f845 3b04 	str.w	r3, [r5], #4
 800cec0:	d8e8      	bhi.n	800ce94 <__mdiff+0x5c>
 800cec2:	45bc      	cmp	ip, r7
 800cec4:	d304      	bcc.n	800ced0 <__mdiff+0x98>
 800cec6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ceca:	b183      	cbz	r3, 800ceee <__mdiff+0xb6>
 800cecc:	6106      	str	r6, [r0, #16]
 800cece:	e7c5      	b.n	800ce5c <__mdiff+0x24>
 800ced0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ced4:	fa1e f381 	uxtah	r3, lr, r1
 800ced8:	141a      	asrs	r2, r3, #16
 800ceda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cede:	b29b      	uxth	r3, r3
 800cee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cee4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cee8:	f845 3b04 	str.w	r3, [r5], #4
 800ceec:	e7e9      	b.n	800cec2 <__mdiff+0x8a>
 800ceee:	3e01      	subs	r6, #1
 800cef0:	e7e9      	b.n	800cec6 <__mdiff+0x8e>
	...

0800cef4 <__ulp>:
 800cef4:	4b12      	ldr	r3, [pc, #72]	; (800cf40 <__ulp+0x4c>)
 800cef6:	ee10 2a90 	vmov	r2, s1
 800cefa:	401a      	ands	r2, r3
 800cefc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	dd04      	ble.n	800cf0e <__ulp+0x1a>
 800cf04:	2000      	movs	r0, #0
 800cf06:	4619      	mov	r1, r3
 800cf08:	ec41 0b10 	vmov	d0, r0, r1
 800cf0c:	4770      	bx	lr
 800cf0e:	425b      	negs	r3, r3
 800cf10:	151b      	asrs	r3, r3, #20
 800cf12:	2b13      	cmp	r3, #19
 800cf14:	f04f 0000 	mov.w	r0, #0
 800cf18:	f04f 0100 	mov.w	r1, #0
 800cf1c:	dc04      	bgt.n	800cf28 <__ulp+0x34>
 800cf1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cf22:	fa42 f103 	asr.w	r1, r2, r3
 800cf26:	e7ef      	b.n	800cf08 <__ulp+0x14>
 800cf28:	3b14      	subs	r3, #20
 800cf2a:	2b1e      	cmp	r3, #30
 800cf2c:	f04f 0201 	mov.w	r2, #1
 800cf30:	bfda      	itte	le
 800cf32:	f1c3 031f 	rsble	r3, r3, #31
 800cf36:	fa02 f303 	lslle.w	r3, r2, r3
 800cf3a:	4613      	movgt	r3, r2
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	e7e3      	b.n	800cf08 <__ulp+0x14>
 800cf40:	7ff00000 	.word	0x7ff00000

0800cf44 <__b2d>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	6905      	ldr	r5, [r0, #16]
 800cf48:	f100 0714 	add.w	r7, r0, #20
 800cf4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cf50:	1f2e      	subs	r6, r5, #4
 800cf52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cf56:	4620      	mov	r0, r4
 800cf58:	f7ff fdc5 	bl	800cae6 <__hi0bits>
 800cf5c:	f1c0 0320 	rsb	r3, r0, #32
 800cf60:	280a      	cmp	r0, #10
 800cf62:	600b      	str	r3, [r1, #0]
 800cf64:	f8df c074 	ldr.w	ip, [pc, #116]	; 800cfdc <__b2d+0x98>
 800cf68:	dc14      	bgt.n	800cf94 <__b2d+0x50>
 800cf6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800cf6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800cf72:	42b7      	cmp	r7, r6
 800cf74:	ea41 030c 	orr.w	r3, r1, ip
 800cf78:	bf34      	ite	cc
 800cf7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf7e:	2100      	movcs	r1, #0
 800cf80:	3015      	adds	r0, #21
 800cf82:	fa04 f000 	lsl.w	r0, r4, r0
 800cf86:	fa21 f10e 	lsr.w	r1, r1, lr
 800cf8a:	ea40 0201 	orr.w	r2, r0, r1
 800cf8e:	ec43 2b10 	vmov	d0, r2, r3
 800cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf94:	42b7      	cmp	r7, r6
 800cf96:	bf3a      	itte	cc
 800cf98:	f1a5 0608 	subcc.w	r6, r5, #8
 800cf9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cfa0:	2100      	movcs	r1, #0
 800cfa2:	380b      	subs	r0, #11
 800cfa4:	d015      	beq.n	800cfd2 <__b2d+0x8e>
 800cfa6:	4084      	lsls	r4, r0
 800cfa8:	f1c0 0520 	rsb	r5, r0, #32
 800cfac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800cfb0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800cfb4:	42be      	cmp	r6, r7
 800cfb6:	fa21 fc05 	lsr.w	ip, r1, r5
 800cfba:	ea44 030c 	orr.w	r3, r4, ip
 800cfbe:	bf8c      	ite	hi
 800cfc0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cfc4:	2400      	movls	r4, #0
 800cfc6:	fa01 f000 	lsl.w	r0, r1, r0
 800cfca:	40ec      	lsrs	r4, r5
 800cfcc:	ea40 0204 	orr.w	r2, r0, r4
 800cfd0:	e7dd      	b.n	800cf8e <__b2d+0x4a>
 800cfd2:	ea44 030c 	orr.w	r3, r4, ip
 800cfd6:	460a      	mov	r2, r1
 800cfd8:	e7d9      	b.n	800cf8e <__b2d+0x4a>
 800cfda:	bf00      	nop
 800cfdc:	3ff00000 	.word	0x3ff00000

0800cfe0 <__d2b>:
 800cfe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfe4:	460e      	mov	r6, r1
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	ec59 8b10 	vmov	r8, r9, d0
 800cfec:	4615      	mov	r5, r2
 800cfee:	f7ff fcb6 	bl	800c95e <_Balloc>
 800cff2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cff6:	4607      	mov	r7, r0
 800cff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cffc:	bb34      	cbnz	r4, 800d04c <__d2b+0x6c>
 800cffe:	9301      	str	r3, [sp, #4]
 800d000:	f1b8 0300 	subs.w	r3, r8, #0
 800d004:	d027      	beq.n	800d056 <__d2b+0x76>
 800d006:	a802      	add	r0, sp, #8
 800d008:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d00c:	f7ff fd8a 	bl	800cb24 <__lo0bits>
 800d010:	9900      	ldr	r1, [sp, #0]
 800d012:	b1f0      	cbz	r0, 800d052 <__d2b+0x72>
 800d014:	9a01      	ldr	r2, [sp, #4]
 800d016:	f1c0 0320 	rsb	r3, r0, #32
 800d01a:	fa02 f303 	lsl.w	r3, r2, r3
 800d01e:	430b      	orrs	r3, r1
 800d020:	40c2      	lsrs	r2, r0
 800d022:	617b      	str	r3, [r7, #20]
 800d024:	9201      	str	r2, [sp, #4]
 800d026:	9b01      	ldr	r3, [sp, #4]
 800d028:	61bb      	str	r3, [r7, #24]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	bf14      	ite	ne
 800d02e:	2102      	movne	r1, #2
 800d030:	2101      	moveq	r1, #1
 800d032:	6139      	str	r1, [r7, #16]
 800d034:	b1c4      	cbz	r4, 800d068 <__d2b+0x88>
 800d036:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d03a:	4404      	add	r4, r0
 800d03c:	6034      	str	r4, [r6, #0]
 800d03e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d042:	6028      	str	r0, [r5, #0]
 800d044:	4638      	mov	r0, r7
 800d046:	b003      	add	sp, #12
 800d048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d04c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d050:	e7d5      	b.n	800cffe <__d2b+0x1e>
 800d052:	6179      	str	r1, [r7, #20]
 800d054:	e7e7      	b.n	800d026 <__d2b+0x46>
 800d056:	a801      	add	r0, sp, #4
 800d058:	f7ff fd64 	bl	800cb24 <__lo0bits>
 800d05c:	9b01      	ldr	r3, [sp, #4]
 800d05e:	617b      	str	r3, [r7, #20]
 800d060:	2101      	movs	r1, #1
 800d062:	6139      	str	r1, [r7, #16]
 800d064:	3020      	adds	r0, #32
 800d066:	e7e5      	b.n	800d034 <__d2b+0x54>
 800d068:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d06c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d070:	6030      	str	r0, [r6, #0]
 800d072:	6918      	ldr	r0, [r3, #16]
 800d074:	f7ff fd37 	bl	800cae6 <__hi0bits>
 800d078:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d07c:	e7e1      	b.n	800d042 <__d2b+0x62>

0800d07e <__ratio>:
 800d07e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d082:	4688      	mov	r8, r1
 800d084:	4669      	mov	r1, sp
 800d086:	4681      	mov	r9, r0
 800d088:	f7ff ff5c 	bl	800cf44 <__b2d>
 800d08c:	a901      	add	r1, sp, #4
 800d08e:	4640      	mov	r0, r8
 800d090:	ec57 6b10 	vmov	r6, r7, d0
 800d094:	f7ff ff56 	bl	800cf44 <__b2d>
 800d098:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d09c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d0a0:	eba3 0c02 	sub.w	ip, r3, r2
 800d0a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d0a8:	1a9b      	subs	r3, r3, r2
 800d0aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d0ae:	ec5b ab10 	vmov	sl, fp, d0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	bfce      	itee	gt
 800d0b6:	463a      	movgt	r2, r7
 800d0b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d0bc:	465a      	movle	r2, fp
 800d0be:	4659      	mov	r1, fp
 800d0c0:	463d      	mov	r5, r7
 800d0c2:	bfd4      	ite	le
 800d0c4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d0c8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	ee10 2a10 	vmov	r2, s0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	f7f3 fbb9 	bl	800084c <__aeabi_ddiv>
 800d0da:	ec41 0b10 	vmov	d0, r0, r1
 800d0de:	b003      	add	sp, #12
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0e4 <__copybits>:
 800d0e4:	3901      	subs	r1, #1
 800d0e6:	b510      	push	{r4, lr}
 800d0e8:	1149      	asrs	r1, r1, #5
 800d0ea:	6914      	ldr	r4, [r2, #16]
 800d0ec:	3101      	adds	r1, #1
 800d0ee:	f102 0314 	add.w	r3, r2, #20
 800d0f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d0f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d0fa:	42a3      	cmp	r3, r4
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	d303      	bcc.n	800d108 <__copybits+0x24>
 800d100:	2300      	movs	r3, #0
 800d102:	428a      	cmp	r2, r1
 800d104:	d305      	bcc.n	800d112 <__copybits+0x2e>
 800d106:	bd10      	pop	{r4, pc}
 800d108:	f853 2b04 	ldr.w	r2, [r3], #4
 800d10c:	f840 2b04 	str.w	r2, [r0], #4
 800d110:	e7f3      	b.n	800d0fa <__copybits+0x16>
 800d112:	f842 3b04 	str.w	r3, [r2], #4
 800d116:	e7f4      	b.n	800d102 <__copybits+0x1e>

0800d118 <__any_on>:
 800d118:	f100 0214 	add.w	r2, r0, #20
 800d11c:	6900      	ldr	r0, [r0, #16]
 800d11e:	114b      	asrs	r3, r1, #5
 800d120:	4298      	cmp	r0, r3
 800d122:	b510      	push	{r4, lr}
 800d124:	db11      	blt.n	800d14a <__any_on+0x32>
 800d126:	dd0a      	ble.n	800d13e <__any_on+0x26>
 800d128:	f011 011f 	ands.w	r1, r1, #31
 800d12c:	d007      	beq.n	800d13e <__any_on+0x26>
 800d12e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d132:	fa24 f001 	lsr.w	r0, r4, r1
 800d136:	fa00 f101 	lsl.w	r1, r0, r1
 800d13a:	428c      	cmp	r4, r1
 800d13c:	d10b      	bne.n	800d156 <__any_on+0x3e>
 800d13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d142:	4293      	cmp	r3, r2
 800d144:	d803      	bhi.n	800d14e <__any_on+0x36>
 800d146:	2000      	movs	r0, #0
 800d148:	bd10      	pop	{r4, pc}
 800d14a:	4603      	mov	r3, r0
 800d14c:	e7f7      	b.n	800d13e <__any_on+0x26>
 800d14e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d152:	2900      	cmp	r1, #0
 800d154:	d0f5      	beq.n	800d142 <__any_on+0x2a>
 800d156:	2001      	movs	r0, #1
 800d158:	e7f6      	b.n	800d148 <__any_on+0x30>

0800d15a <_calloc_r>:
 800d15a:	b538      	push	{r3, r4, r5, lr}
 800d15c:	fb02 f401 	mul.w	r4, r2, r1
 800d160:	4621      	mov	r1, r4
 800d162:	f000 f857 	bl	800d214 <_malloc_r>
 800d166:	4605      	mov	r5, r0
 800d168:	b118      	cbz	r0, 800d172 <_calloc_r+0x18>
 800d16a:	4622      	mov	r2, r4
 800d16c:	2100      	movs	r1, #0
 800d16e:	f7fc fe44 	bl	8009dfa <memset>
 800d172:	4628      	mov	r0, r5
 800d174:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d178 <_free_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4605      	mov	r5, r0
 800d17c:	2900      	cmp	r1, #0
 800d17e:	d045      	beq.n	800d20c <_free_r+0x94>
 800d180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d184:	1f0c      	subs	r4, r1, #4
 800d186:	2b00      	cmp	r3, #0
 800d188:	bfb8      	it	lt
 800d18a:	18e4      	addlt	r4, r4, r3
 800d18c:	f000 fa3c 	bl	800d608 <__malloc_lock>
 800d190:	4a1f      	ldr	r2, [pc, #124]	; (800d210 <_free_r+0x98>)
 800d192:	6813      	ldr	r3, [r2, #0]
 800d194:	4610      	mov	r0, r2
 800d196:	b933      	cbnz	r3, 800d1a6 <_free_r+0x2e>
 800d198:	6063      	str	r3, [r4, #4]
 800d19a:	6014      	str	r4, [r2, #0]
 800d19c:	4628      	mov	r0, r5
 800d19e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1a2:	f000 ba32 	b.w	800d60a <__malloc_unlock>
 800d1a6:	42a3      	cmp	r3, r4
 800d1a8:	d90c      	bls.n	800d1c4 <_free_r+0x4c>
 800d1aa:	6821      	ldr	r1, [r4, #0]
 800d1ac:	1862      	adds	r2, r4, r1
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	bf04      	itt	eq
 800d1b2:	681a      	ldreq	r2, [r3, #0]
 800d1b4:	685b      	ldreq	r3, [r3, #4]
 800d1b6:	6063      	str	r3, [r4, #4]
 800d1b8:	bf04      	itt	eq
 800d1ba:	1852      	addeq	r2, r2, r1
 800d1bc:	6022      	streq	r2, [r4, #0]
 800d1be:	6004      	str	r4, [r0, #0]
 800d1c0:	e7ec      	b.n	800d19c <_free_r+0x24>
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	b10a      	cbz	r2, 800d1cc <_free_r+0x54>
 800d1c8:	42a2      	cmp	r2, r4
 800d1ca:	d9fa      	bls.n	800d1c2 <_free_r+0x4a>
 800d1cc:	6819      	ldr	r1, [r3, #0]
 800d1ce:	1858      	adds	r0, r3, r1
 800d1d0:	42a0      	cmp	r0, r4
 800d1d2:	d10b      	bne.n	800d1ec <_free_r+0x74>
 800d1d4:	6820      	ldr	r0, [r4, #0]
 800d1d6:	4401      	add	r1, r0
 800d1d8:	1858      	adds	r0, r3, r1
 800d1da:	4282      	cmp	r2, r0
 800d1dc:	6019      	str	r1, [r3, #0]
 800d1de:	d1dd      	bne.n	800d19c <_free_r+0x24>
 800d1e0:	6810      	ldr	r0, [r2, #0]
 800d1e2:	6852      	ldr	r2, [r2, #4]
 800d1e4:	605a      	str	r2, [r3, #4]
 800d1e6:	4401      	add	r1, r0
 800d1e8:	6019      	str	r1, [r3, #0]
 800d1ea:	e7d7      	b.n	800d19c <_free_r+0x24>
 800d1ec:	d902      	bls.n	800d1f4 <_free_r+0x7c>
 800d1ee:	230c      	movs	r3, #12
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	e7d3      	b.n	800d19c <_free_r+0x24>
 800d1f4:	6820      	ldr	r0, [r4, #0]
 800d1f6:	1821      	adds	r1, r4, r0
 800d1f8:	428a      	cmp	r2, r1
 800d1fa:	bf04      	itt	eq
 800d1fc:	6811      	ldreq	r1, [r2, #0]
 800d1fe:	6852      	ldreq	r2, [r2, #4]
 800d200:	6062      	str	r2, [r4, #4]
 800d202:	bf04      	itt	eq
 800d204:	1809      	addeq	r1, r1, r0
 800d206:	6021      	streq	r1, [r4, #0]
 800d208:	605c      	str	r4, [r3, #4]
 800d20a:	e7c7      	b.n	800d19c <_free_r+0x24>
 800d20c:	bd38      	pop	{r3, r4, r5, pc}
 800d20e:	bf00      	nop
 800d210:	200002ac 	.word	0x200002ac

0800d214 <_malloc_r>:
 800d214:	b570      	push	{r4, r5, r6, lr}
 800d216:	1ccd      	adds	r5, r1, #3
 800d218:	f025 0503 	bic.w	r5, r5, #3
 800d21c:	3508      	adds	r5, #8
 800d21e:	2d0c      	cmp	r5, #12
 800d220:	bf38      	it	cc
 800d222:	250c      	movcc	r5, #12
 800d224:	2d00      	cmp	r5, #0
 800d226:	4606      	mov	r6, r0
 800d228:	db01      	blt.n	800d22e <_malloc_r+0x1a>
 800d22a:	42a9      	cmp	r1, r5
 800d22c:	d903      	bls.n	800d236 <_malloc_r+0x22>
 800d22e:	230c      	movs	r3, #12
 800d230:	6033      	str	r3, [r6, #0]
 800d232:	2000      	movs	r0, #0
 800d234:	bd70      	pop	{r4, r5, r6, pc}
 800d236:	f000 f9e7 	bl	800d608 <__malloc_lock>
 800d23a:	4a21      	ldr	r2, [pc, #132]	; (800d2c0 <_malloc_r+0xac>)
 800d23c:	6814      	ldr	r4, [r2, #0]
 800d23e:	4621      	mov	r1, r4
 800d240:	b991      	cbnz	r1, 800d268 <_malloc_r+0x54>
 800d242:	4c20      	ldr	r4, [pc, #128]	; (800d2c4 <_malloc_r+0xb0>)
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	b91b      	cbnz	r3, 800d250 <_malloc_r+0x3c>
 800d248:	4630      	mov	r0, r6
 800d24a:	f000 f98f 	bl	800d56c <_sbrk_r>
 800d24e:	6020      	str	r0, [r4, #0]
 800d250:	4629      	mov	r1, r5
 800d252:	4630      	mov	r0, r6
 800d254:	f000 f98a 	bl	800d56c <_sbrk_r>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	d124      	bne.n	800d2a6 <_malloc_r+0x92>
 800d25c:	230c      	movs	r3, #12
 800d25e:	6033      	str	r3, [r6, #0]
 800d260:	4630      	mov	r0, r6
 800d262:	f000 f9d2 	bl	800d60a <__malloc_unlock>
 800d266:	e7e4      	b.n	800d232 <_malloc_r+0x1e>
 800d268:	680b      	ldr	r3, [r1, #0]
 800d26a:	1b5b      	subs	r3, r3, r5
 800d26c:	d418      	bmi.n	800d2a0 <_malloc_r+0x8c>
 800d26e:	2b0b      	cmp	r3, #11
 800d270:	d90f      	bls.n	800d292 <_malloc_r+0x7e>
 800d272:	600b      	str	r3, [r1, #0]
 800d274:	50cd      	str	r5, [r1, r3]
 800d276:	18cc      	adds	r4, r1, r3
 800d278:	4630      	mov	r0, r6
 800d27a:	f000 f9c6 	bl	800d60a <__malloc_unlock>
 800d27e:	f104 000b 	add.w	r0, r4, #11
 800d282:	1d23      	adds	r3, r4, #4
 800d284:	f020 0007 	bic.w	r0, r0, #7
 800d288:	1ac3      	subs	r3, r0, r3
 800d28a:	d0d3      	beq.n	800d234 <_malloc_r+0x20>
 800d28c:	425a      	negs	r2, r3
 800d28e:	50e2      	str	r2, [r4, r3]
 800d290:	e7d0      	b.n	800d234 <_malloc_r+0x20>
 800d292:	428c      	cmp	r4, r1
 800d294:	684b      	ldr	r3, [r1, #4]
 800d296:	bf16      	itet	ne
 800d298:	6063      	strne	r3, [r4, #4]
 800d29a:	6013      	streq	r3, [r2, #0]
 800d29c:	460c      	movne	r4, r1
 800d29e:	e7eb      	b.n	800d278 <_malloc_r+0x64>
 800d2a0:	460c      	mov	r4, r1
 800d2a2:	6849      	ldr	r1, [r1, #4]
 800d2a4:	e7cc      	b.n	800d240 <_malloc_r+0x2c>
 800d2a6:	1cc4      	adds	r4, r0, #3
 800d2a8:	f024 0403 	bic.w	r4, r4, #3
 800d2ac:	42a0      	cmp	r0, r4
 800d2ae:	d005      	beq.n	800d2bc <_malloc_r+0xa8>
 800d2b0:	1a21      	subs	r1, r4, r0
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	f000 f95a 	bl	800d56c <_sbrk_r>
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	d0cf      	beq.n	800d25c <_malloc_r+0x48>
 800d2bc:	6025      	str	r5, [r4, #0]
 800d2be:	e7db      	b.n	800d278 <_malloc_r+0x64>
 800d2c0:	200002ac 	.word	0x200002ac
 800d2c4:	200002b0 	.word	0x200002b0

0800d2c8 <__ssputs_r>:
 800d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2cc:	688e      	ldr	r6, [r1, #8]
 800d2ce:	429e      	cmp	r6, r3
 800d2d0:	4682      	mov	sl, r0
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	4690      	mov	r8, r2
 800d2d6:	4699      	mov	r9, r3
 800d2d8:	d837      	bhi.n	800d34a <__ssputs_r+0x82>
 800d2da:	898a      	ldrh	r2, [r1, #12]
 800d2dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2e0:	d031      	beq.n	800d346 <__ssputs_r+0x7e>
 800d2e2:	6825      	ldr	r5, [r4, #0]
 800d2e4:	6909      	ldr	r1, [r1, #16]
 800d2e6:	1a6f      	subs	r7, r5, r1
 800d2e8:	6965      	ldr	r5, [r4, #20]
 800d2ea:	2302      	movs	r3, #2
 800d2ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2f0:	fb95 f5f3 	sdiv	r5, r5, r3
 800d2f4:	f109 0301 	add.w	r3, r9, #1
 800d2f8:	443b      	add	r3, r7
 800d2fa:	429d      	cmp	r5, r3
 800d2fc:	bf38      	it	cc
 800d2fe:	461d      	movcc	r5, r3
 800d300:	0553      	lsls	r3, r2, #21
 800d302:	d530      	bpl.n	800d366 <__ssputs_r+0x9e>
 800d304:	4629      	mov	r1, r5
 800d306:	f7ff ff85 	bl	800d214 <_malloc_r>
 800d30a:	4606      	mov	r6, r0
 800d30c:	b950      	cbnz	r0, 800d324 <__ssputs_r+0x5c>
 800d30e:	230c      	movs	r3, #12
 800d310:	f8ca 3000 	str.w	r3, [sl]
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d31a:	81a3      	strh	r3, [r4, #12]
 800d31c:	f04f 30ff 	mov.w	r0, #4294967295
 800d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d324:	463a      	mov	r2, r7
 800d326:	6921      	ldr	r1, [r4, #16]
 800d328:	f7ff fb0e 	bl	800c948 <memcpy>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	6126      	str	r6, [r4, #16]
 800d33a:	6165      	str	r5, [r4, #20]
 800d33c:	443e      	add	r6, r7
 800d33e:	1bed      	subs	r5, r5, r7
 800d340:	6026      	str	r6, [r4, #0]
 800d342:	60a5      	str	r5, [r4, #8]
 800d344:	464e      	mov	r6, r9
 800d346:	454e      	cmp	r6, r9
 800d348:	d900      	bls.n	800d34c <__ssputs_r+0x84>
 800d34a:	464e      	mov	r6, r9
 800d34c:	4632      	mov	r2, r6
 800d34e:	4641      	mov	r1, r8
 800d350:	6820      	ldr	r0, [r4, #0]
 800d352:	f000 f940 	bl	800d5d6 <memmove>
 800d356:	68a3      	ldr	r3, [r4, #8]
 800d358:	1b9b      	subs	r3, r3, r6
 800d35a:	60a3      	str	r3, [r4, #8]
 800d35c:	6823      	ldr	r3, [r4, #0]
 800d35e:	441e      	add	r6, r3
 800d360:	6026      	str	r6, [r4, #0]
 800d362:	2000      	movs	r0, #0
 800d364:	e7dc      	b.n	800d320 <__ssputs_r+0x58>
 800d366:	462a      	mov	r2, r5
 800d368:	f000 f950 	bl	800d60c <_realloc_r>
 800d36c:	4606      	mov	r6, r0
 800d36e:	2800      	cmp	r0, #0
 800d370:	d1e2      	bne.n	800d338 <__ssputs_r+0x70>
 800d372:	6921      	ldr	r1, [r4, #16]
 800d374:	4650      	mov	r0, sl
 800d376:	f7ff feff 	bl	800d178 <_free_r>
 800d37a:	e7c8      	b.n	800d30e <__ssputs_r+0x46>

0800d37c <_svfiprintf_r>:
 800d37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d380:	461d      	mov	r5, r3
 800d382:	898b      	ldrh	r3, [r1, #12]
 800d384:	061f      	lsls	r7, r3, #24
 800d386:	b09d      	sub	sp, #116	; 0x74
 800d388:	4680      	mov	r8, r0
 800d38a:	460c      	mov	r4, r1
 800d38c:	4616      	mov	r6, r2
 800d38e:	d50f      	bpl.n	800d3b0 <_svfiprintf_r+0x34>
 800d390:	690b      	ldr	r3, [r1, #16]
 800d392:	b96b      	cbnz	r3, 800d3b0 <_svfiprintf_r+0x34>
 800d394:	2140      	movs	r1, #64	; 0x40
 800d396:	f7ff ff3d 	bl	800d214 <_malloc_r>
 800d39a:	6020      	str	r0, [r4, #0]
 800d39c:	6120      	str	r0, [r4, #16]
 800d39e:	b928      	cbnz	r0, 800d3ac <_svfiprintf_r+0x30>
 800d3a0:	230c      	movs	r3, #12
 800d3a2:	f8c8 3000 	str.w	r3, [r8]
 800d3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3aa:	e0c8      	b.n	800d53e <_svfiprintf_r+0x1c2>
 800d3ac:	2340      	movs	r3, #64	; 0x40
 800d3ae:	6163      	str	r3, [r4, #20]
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3b4:	2320      	movs	r3, #32
 800d3b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3ba:	2330      	movs	r3, #48	; 0x30
 800d3bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3c0:	9503      	str	r5, [sp, #12]
 800d3c2:	f04f 0b01 	mov.w	fp, #1
 800d3c6:	4637      	mov	r7, r6
 800d3c8:	463d      	mov	r5, r7
 800d3ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d3ce:	b10b      	cbz	r3, 800d3d4 <_svfiprintf_r+0x58>
 800d3d0:	2b25      	cmp	r3, #37	; 0x25
 800d3d2:	d13e      	bne.n	800d452 <_svfiprintf_r+0xd6>
 800d3d4:	ebb7 0a06 	subs.w	sl, r7, r6
 800d3d8:	d00b      	beq.n	800d3f2 <_svfiprintf_r+0x76>
 800d3da:	4653      	mov	r3, sl
 800d3dc:	4632      	mov	r2, r6
 800d3de:	4621      	mov	r1, r4
 800d3e0:	4640      	mov	r0, r8
 800d3e2:	f7ff ff71 	bl	800d2c8 <__ssputs_r>
 800d3e6:	3001      	adds	r0, #1
 800d3e8:	f000 80a4 	beq.w	800d534 <_svfiprintf_r+0x1b8>
 800d3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ee:	4453      	add	r3, sl
 800d3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f2:	783b      	ldrb	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 809d 	beq.w	800d534 <_svfiprintf_r+0x1b8>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d404:	9304      	str	r3, [sp, #16]
 800d406:	9307      	str	r3, [sp, #28]
 800d408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d40c:	931a      	str	r3, [sp, #104]	; 0x68
 800d40e:	462f      	mov	r7, r5
 800d410:	2205      	movs	r2, #5
 800d412:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d416:	4850      	ldr	r0, [pc, #320]	; (800d558 <_svfiprintf_r+0x1dc>)
 800d418:	f7f2 fee2 	bl	80001e0 <memchr>
 800d41c:	9b04      	ldr	r3, [sp, #16]
 800d41e:	b9d0      	cbnz	r0, 800d456 <_svfiprintf_r+0xda>
 800d420:	06d9      	lsls	r1, r3, #27
 800d422:	bf44      	itt	mi
 800d424:	2220      	movmi	r2, #32
 800d426:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d42a:	071a      	lsls	r2, r3, #28
 800d42c:	bf44      	itt	mi
 800d42e:	222b      	movmi	r2, #43	; 0x2b
 800d430:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d434:	782a      	ldrb	r2, [r5, #0]
 800d436:	2a2a      	cmp	r2, #42	; 0x2a
 800d438:	d015      	beq.n	800d466 <_svfiprintf_r+0xea>
 800d43a:	9a07      	ldr	r2, [sp, #28]
 800d43c:	462f      	mov	r7, r5
 800d43e:	2000      	movs	r0, #0
 800d440:	250a      	movs	r5, #10
 800d442:	4639      	mov	r1, r7
 800d444:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d448:	3b30      	subs	r3, #48	; 0x30
 800d44a:	2b09      	cmp	r3, #9
 800d44c:	d94d      	bls.n	800d4ea <_svfiprintf_r+0x16e>
 800d44e:	b1b8      	cbz	r0, 800d480 <_svfiprintf_r+0x104>
 800d450:	e00f      	b.n	800d472 <_svfiprintf_r+0xf6>
 800d452:	462f      	mov	r7, r5
 800d454:	e7b8      	b.n	800d3c8 <_svfiprintf_r+0x4c>
 800d456:	4a40      	ldr	r2, [pc, #256]	; (800d558 <_svfiprintf_r+0x1dc>)
 800d458:	1a80      	subs	r0, r0, r2
 800d45a:	fa0b f000 	lsl.w	r0, fp, r0
 800d45e:	4318      	orrs	r0, r3
 800d460:	9004      	str	r0, [sp, #16]
 800d462:	463d      	mov	r5, r7
 800d464:	e7d3      	b.n	800d40e <_svfiprintf_r+0x92>
 800d466:	9a03      	ldr	r2, [sp, #12]
 800d468:	1d11      	adds	r1, r2, #4
 800d46a:	6812      	ldr	r2, [r2, #0]
 800d46c:	9103      	str	r1, [sp, #12]
 800d46e:	2a00      	cmp	r2, #0
 800d470:	db01      	blt.n	800d476 <_svfiprintf_r+0xfa>
 800d472:	9207      	str	r2, [sp, #28]
 800d474:	e004      	b.n	800d480 <_svfiprintf_r+0x104>
 800d476:	4252      	negs	r2, r2
 800d478:	f043 0302 	orr.w	r3, r3, #2
 800d47c:	9207      	str	r2, [sp, #28]
 800d47e:	9304      	str	r3, [sp, #16]
 800d480:	783b      	ldrb	r3, [r7, #0]
 800d482:	2b2e      	cmp	r3, #46	; 0x2e
 800d484:	d10c      	bne.n	800d4a0 <_svfiprintf_r+0x124>
 800d486:	787b      	ldrb	r3, [r7, #1]
 800d488:	2b2a      	cmp	r3, #42	; 0x2a
 800d48a:	d133      	bne.n	800d4f4 <_svfiprintf_r+0x178>
 800d48c:	9b03      	ldr	r3, [sp, #12]
 800d48e:	1d1a      	adds	r2, r3, #4
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	9203      	str	r2, [sp, #12]
 800d494:	2b00      	cmp	r3, #0
 800d496:	bfb8      	it	lt
 800d498:	f04f 33ff 	movlt.w	r3, #4294967295
 800d49c:	3702      	adds	r7, #2
 800d49e:	9305      	str	r3, [sp, #20]
 800d4a0:	4d2e      	ldr	r5, [pc, #184]	; (800d55c <_svfiprintf_r+0x1e0>)
 800d4a2:	7839      	ldrb	r1, [r7, #0]
 800d4a4:	2203      	movs	r2, #3
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f7f2 fe9a 	bl	80001e0 <memchr>
 800d4ac:	b138      	cbz	r0, 800d4be <_svfiprintf_r+0x142>
 800d4ae:	2340      	movs	r3, #64	; 0x40
 800d4b0:	1b40      	subs	r0, r0, r5
 800d4b2:	fa03 f000 	lsl.w	r0, r3, r0
 800d4b6:	9b04      	ldr	r3, [sp, #16]
 800d4b8:	4303      	orrs	r3, r0
 800d4ba:	3701      	adds	r7, #1
 800d4bc:	9304      	str	r3, [sp, #16]
 800d4be:	7839      	ldrb	r1, [r7, #0]
 800d4c0:	4827      	ldr	r0, [pc, #156]	; (800d560 <_svfiprintf_r+0x1e4>)
 800d4c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4c6:	2206      	movs	r2, #6
 800d4c8:	1c7e      	adds	r6, r7, #1
 800d4ca:	f7f2 fe89 	bl	80001e0 <memchr>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d038      	beq.n	800d544 <_svfiprintf_r+0x1c8>
 800d4d2:	4b24      	ldr	r3, [pc, #144]	; (800d564 <_svfiprintf_r+0x1e8>)
 800d4d4:	bb13      	cbnz	r3, 800d51c <_svfiprintf_r+0x1a0>
 800d4d6:	9b03      	ldr	r3, [sp, #12]
 800d4d8:	3307      	adds	r3, #7
 800d4da:	f023 0307 	bic.w	r3, r3, #7
 800d4de:	3308      	adds	r3, #8
 800d4e0:	9303      	str	r3, [sp, #12]
 800d4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e4:	444b      	add	r3, r9
 800d4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4e8:	e76d      	b.n	800d3c6 <_svfiprintf_r+0x4a>
 800d4ea:	fb05 3202 	mla	r2, r5, r2, r3
 800d4ee:	2001      	movs	r0, #1
 800d4f0:	460f      	mov	r7, r1
 800d4f2:	e7a6      	b.n	800d442 <_svfiprintf_r+0xc6>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	3701      	adds	r7, #1
 800d4f8:	9305      	str	r3, [sp, #20]
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	250a      	movs	r5, #10
 800d4fe:	4638      	mov	r0, r7
 800d500:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d504:	3a30      	subs	r2, #48	; 0x30
 800d506:	2a09      	cmp	r2, #9
 800d508:	d903      	bls.n	800d512 <_svfiprintf_r+0x196>
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d0c8      	beq.n	800d4a0 <_svfiprintf_r+0x124>
 800d50e:	9105      	str	r1, [sp, #20]
 800d510:	e7c6      	b.n	800d4a0 <_svfiprintf_r+0x124>
 800d512:	fb05 2101 	mla	r1, r5, r1, r2
 800d516:	2301      	movs	r3, #1
 800d518:	4607      	mov	r7, r0
 800d51a:	e7f0      	b.n	800d4fe <_svfiprintf_r+0x182>
 800d51c:	ab03      	add	r3, sp, #12
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	4622      	mov	r2, r4
 800d522:	4b11      	ldr	r3, [pc, #68]	; (800d568 <_svfiprintf_r+0x1ec>)
 800d524:	a904      	add	r1, sp, #16
 800d526:	4640      	mov	r0, r8
 800d528:	f7fc fd04 	bl	8009f34 <_printf_float>
 800d52c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d530:	4681      	mov	r9, r0
 800d532:	d1d6      	bne.n	800d4e2 <_svfiprintf_r+0x166>
 800d534:	89a3      	ldrh	r3, [r4, #12]
 800d536:	065b      	lsls	r3, r3, #25
 800d538:	f53f af35 	bmi.w	800d3a6 <_svfiprintf_r+0x2a>
 800d53c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d53e:	b01d      	add	sp, #116	; 0x74
 800d540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d544:	ab03      	add	r3, sp, #12
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	4622      	mov	r2, r4
 800d54a:	4b07      	ldr	r3, [pc, #28]	; (800d568 <_svfiprintf_r+0x1ec>)
 800d54c:	a904      	add	r1, sp, #16
 800d54e:	4640      	mov	r0, r8
 800d550:	f7fc ffa6 	bl	800a4a0 <_printf_i>
 800d554:	e7ea      	b.n	800d52c <_svfiprintf_r+0x1b0>
 800d556:	bf00      	nop
 800d558:	0800d944 	.word	0x0800d944
 800d55c:	0800d94a 	.word	0x0800d94a
 800d560:	0800d94e 	.word	0x0800d94e
 800d564:	08009f35 	.word	0x08009f35
 800d568:	0800d2c9 	.word	0x0800d2c9

0800d56c <_sbrk_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4c06      	ldr	r4, [pc, #24]	; (800d588 <_sbrk_r+0x1c>)
 800d570:	2300      	movs	r3, #0
 800d572:	4605      	mov	r5, r0
 800d574:	4608      	mov	r0, r1
 800d576:	6023      	str	r3, [r4, #0]
 800d578:	f7f6 f88c 	bl	8003694 <_sbrk>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	d102      	bne.n	800d586 <_sbrk_r+0x1a>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	b103      	cbz	r3, 800d586 <_sbrk_r+0x1a>
 800d584:	602b      	str	r3, [r5, #0]
 800d586:	bd38      	pop	{r3, r4, r5, pc}
 800d588:	200009cc 	.word	0x200009cc

0800d58c <nanf>:
 800d58c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d594 <nanf+0x8>
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	7fc00000 	.word	0x7fc00000

0800d598 <strncmp>:
 800d598:	b510      	push	{r4, lr}
 800d59a:	b16a      	cbz	r2, 800d5b8 <strncmp+0x20>
 800d59c:	3901      	subs	r1, #1
 800d59e:	1884      	adds	r4, r0, r2
 800d5a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d103      	bne.n	800d5b4 <strncmp+0x1c>
 800d5ac:	42a0      	cmp	r0, r4
 800d5ae:	d001      	beq.n	800d5b4 <strncmp+0x1c>
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1f5      	bne.n	800d5a0 <strncmp+0x8>
 800d5b4:	1a98      	subs	r0, r3, r2
 800d5b6:	bd10      	pop	{r4, pc}
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	e7fc      	b.n	800d5b6 <strncmp+0x1e>

0800d5bc <__ascii_wctomb>:
 800d5bc:	b149      	cbz	r1, 800d5d2 <__ascii_wctomb+0x16>
 800d5be:	2aff      	cmp	r2, #255	; 0xff
 800d5c0:	bf85      	ittet	hi
 800d5c2:	238a      	movhi	r3, #138	; 0x8a
 800d5c4:	6003      	strhi	r3, [r0, #0]
 800d5c6:	700a      	strbls	r2, [r1, #0]
 800d5c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d5cc:	bf98      	it	ls
 800d5ce:	2001      	movls	r0, #1
 800d5d0:	4770      	bx	lr
 800d5d2:	4608      	mov	r0, r1
 800d5d4:	4770      	bx	lr

0800d5d6 <memmove>:
 800d5d6:	4288      	cmp	r0, r1
 800d5d8:	b510      	push	{r4, lr}
 800d5da:	eb01 0302 	add.w	r3, r1, r2
 800d5de:	d807      	bhi.n	800d5f0 <memmove+0x1a>
 800d5e0:	1e42      	subs	r2, r0, #1
 800d5e2:	4299      	cmp	r1, r3
 800d5e4:	d00a      	beq.n	800d5fc <memmove+0x26>
 800d5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d5ee:	e7f8      	b.n	800d5e2 <memmove+0xc>
 800d5f0:	4283      	cmp	r3, r0
 800d5f2:	d9f5      	bls.n	800d5e0 <memmove+0xa>
 800d5f4:	1881      	adds	r1, r0, r2
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	42d3      	cmn	r3, r2
 800d5fa:	d100      	bne.n	800d5fe <memmove+0x28>
 800d5fc:	bd10      	pop	{r4, pc}
 800d5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d602:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d606:	e7f7      	b.n	800d5f8 <memmove+0x22>

0800d608 <__malloc_lock>:
 800d608:	4770      	bx	lr

0800d60a <__malloc_unlock>:
 800d60a:	4770      	bx	lr

0800d60c <_realloc_r>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	4607      	mov	r7, r0
 800d610:	4614      	mov	r4, r2
 800d612:	460e      	mov	r6, r1
 800d614:	b921      	cbnz	r1, 800d620 <_realloc_r+0x14>
 800d616:	4611      	mov	r1, r2
 800d618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d61c:	f7ff bdfa 	b.w	800d214 <_malloc_r>
 800d620:	b922      	cbnz	r2, 800d62c <_realloc_r+0x20>
 800d622:	f7ff fda9 	bl	800d178 <_free_r>
 800d626:	4625      	mov	r5, r4
 800d628:	4628      	mov	r0, r5
 800d62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d62c:	f000 f814 	bl	800d658 <_malloc_usable_size_r>
 800d630:	42a0      	cmp	r0, r4
 800d632:	d20f      	bcs.n	800d654 <_realloc_r+0x48>
 800d634:	4621      	mov	r1, r4
 800d636:	4638      	mov	r0, r7
 800d638:	f7ff fdec 	bl	800d214 <_malloc_r>
 800d63c:	4605      	mov	r5, r0
 800d63e:	2800      	cmp	r0, #0
 800d640:	d0f2      	beq.n	800d628 <_realloc_r+0x1c>
 800d642:	4631      	mov	r1, r6
 800d644:	4622      	mov	r2, r4
 800d646:	f7ff f97f 	bl	800c948 <memcpy>
 800d64a:	4631      	mov	r1, r6
 800d64c:	4638      	mov	r0, r7
 800d64e:	f7ff fd93 	bl	800d178 <_free_r>
 800d652:	e7e9      	b.n	800d628 <_realloc_r+0x1c>
 800d654:	4635      	mov	r5, r6
 800d656:	e7e7      	b.n	800d628 <_realloc_r+0x1c>

0800d658 <_malloc_usable_size_r>:
 800d658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d65c:	1f18      	subs	r0, r3, #4
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bfbc      	itt	lt
 800d662:	580b      	ldrlt	r3, [r1, r0]
 800d664:	18c0      	addlt	r0, r0, r3
 800d666:	4770      	bx	lr

0800d668 <_init>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	bf00      	nop
 800d66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66e:	bc08      	pop	{r3}
 800d670:	469e      	mov	lr, r3
 800d672:	4770      	bx	lr

0800d674 <_fini>:
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	bf00      	nop
 800d678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67a:	bc08      	pop	{r3}
 800d67c:	469e      	mov	lr, r3
 800d67e:	4770      	bx	lr
