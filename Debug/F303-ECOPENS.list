
F303-ECOPENS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800b480  0800b480  0001b480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b798  0800b798  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b798  0800b798  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b798  0800b798  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b798  0800b798  0001b798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b79c  0800b79c  0001b79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  200001f4  0800b994  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  0800b994  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b52  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002927  00000000  00000000  00033d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  000366a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a0  00000000  00000000  00037898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cfe9  00000000  00000000  00038938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f76c  00000000  00000000  00055921  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae517  00000000  00000000  0006508d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001135a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005600  00000000  00000000  00113620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b468 	.word	0x0800b468

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800b468 	.word	0x0800b468

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <DWT_Init+0x38>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10e      	bne.n	8000bd6 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <DWT_Init+0x38>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <DWT_Init+0x38>)
 8000bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bc2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <DWT_Init+0x3c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <DWT_Init+0x3c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <DWT_Init+0x3c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6013      	str	r3, [r2, #0]
    }
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000edf0 	.word	0xe000edf0
 8000be4:	e0001000 	.word	0xe0001000

08000be8 <getUSARTData>:
static void MX_ADC2_Init(void);
static void MX_TIM15_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void getUSARTData(){
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
	 if(USART1DataFlag){
 8000bee:	4b95      	ldr	r3, [pc, #596]	; (8000e44 <getUSARTData+0x25c>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 8122 	beq.w	8000e3c <getUSARTData+0x254>
		 USART1DataFlag = false;
 8000bf8:	4b92      	ldr	r3, [pc, #584]	; (8000e44 <getUSARTData+0x25c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
		 if(data[0] == '#'){
 8000bfe:	4b92      	ldr	r3, [pc, #584]	; (8000e48 <getUSARTData+0x260>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b23      	cmp	r3, #35	; 0x23
 8000c04:	f040 811a 	bne.w	8000e3c <getUSARTData+0x254>
			 if(memcmp(data + 1, "PWM=", 4) == 0 || memcmp(data + 1, "pwm=", 4) == 0){
 8000c08:	4b90      	ldr	r3, [pc, #576]	; (8000e4c <getUSARTData+0x264>)
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	4990      	ldr	r1, [pc, #576]	; (8000e50 <getUSARTData+0x268>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f008 fb40 	bl	8009294 <memcmp>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d008      	beq.n	8000c2c <getUSARTData+0x44>
 8000c1a:	4b8c      	ldr	r3, [pc, #560]	; (8000e4c <getUSARTData+0x264>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	498d      	ldr	r1, [pc, #564]	; (8000e54 <getUSARTData+0x26c>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f008 fb37 	bl	8009294 <memcmp>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d155      	bne.n	8000cd8 <getUSARTData+0xf0>
				uint8_t value[4];
				memcpy(value, data + 5, 4);
 8000c2c:	4b8a      	ldr	r3, [pc, #552]	; (8000e58 <getUSARTData+0x270>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60bb      	str	r3, [r7, #8]
				uint16_t x = atoi(value);
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4618      	mov	r0, r3
 8000c38:	f008 fafd 	bl	8009236 <atoi>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	81bb      	strh	r3, [r7, #12]
				if(x){
 8000c40:	89bb      	ldrh	r3, [r7, #12]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80f9 	beq.w	8000e3a <getUSARTData+0x252>
					x = constrain(x, 1000, 2000);
 8000c48:	89bb      	ldrh	r3, [r7, #12]
 8000c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c4e:	d307      	bcc.n	8000c60 <getUSARTData+0x78>
 8000c50:	89bb      	ldrh	r3, [r7, #12]
 8000c52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c56:	bf28      	it	cs
 8000c58:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	e001      	b.n	8000c64 <getUSARTData+0x7c>
 8000c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c64:	81bb      	strh	r3, [r7, #12]
					newPWM = map(x, 1000, 2000, PWM_MIN, PWM_MAX);
 8000c66:	89bb      	ldrh	r3, [r7, #12]
 8000c68:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c6c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000c70:	fb02 f303 	mul.w	r3, r2, r3
 8000c74:	4a79      	ldr	r2, [pc, #484]	; (8000e5c <getUSARTData+0x274>)
 8000c76:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7a:	1192      	asrs	r2, r2, #6
 8000c7c:	17db      	asrs	r3, r3, #31
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	4b77      	ldr	r3, [pc, #476]	; (8000e60 <getUSARTData+0x278>)
 8000c84:	801a      	strh	r2, [r3, #0]
					setPWM = newPWM;
 8000c86:	4b76      	ldr	r3, [pc, #472]	; (8000e60 <getUSARTData+0x278>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	4b75      	ldr	r3, [pc, #468]	; (8000e64 <getUSARTData+0x27c>)
 8000c8e:	801a      	strh	r2, [r3, #0]

					TIM1->CCR1 = setPWM;
 8000c90:	4b74      	ldr	r3, [pc, #464]	; (8000e64 <getUSARTData+0x27c>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b21a      	sxth	r2, r3
 8000c96:	4b74      	ldr	r3, [pc, #464]	; (8000e68 <getUSARTData+0x280>)
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR5 = setPWM + compWindowOffset;
 8000c9a:	4b72      	ldr	r3, [pc, #456]	; (8000e64 <getUSARTData+0x27c>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b72      	ldr	r3, [pc, #456]	; (8000e6c <getUSARTData+0x284>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	441a      	add	r2, r3
 8000caa:	4b6f      	ldr	r3, [pc, #444]	; (8000e68 <getUSARTData+0x280>)
 8000cac:	659a      	str	r2, [r3, #88]	; 0x58

					strSize = sprintf((char*)buffer, "PWM: %d\r\n", newPWM);
 8000cae:	4b6c      	ldr	r3, [pc, #432]	; (8000e60 <getUSARTData+0x278>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	496e      	ldr	r1, [pc, #440]	; (8000e70 <getUSARTData+0x288>)
 8000cb8:	486e      	ldr	r0, [pc, #440]	; (8000e74 <getUSARTData+0x28c>)
 8000cba:	f008 ff5f 	bl	8009b7c <siprintf>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	4b6d      	ldr	r3, [pc, #436]	; (8000e78 <getUSARTData+0x290>)
 8000cc4:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 8000cc6:	4b6c      	ldr	r3, [pc, #432]	; (8000e78 <getUSARTData+0x290>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	2332      	movs	r3, #50	; 0x32
 8000cce:	4969      	ldr	r1, [pc, #420]	; (8000e74 <getUSARTData+0x28c>)
 8000cd0:	486a      	ldr	r0, [pc, #424]	; (8000e7c <getUSARTData+0x294>)
 8000cd2:	f007 fbcf 	bl	8008474 <HAL_UART_Transmit>
			 if(memcmp(data + 1, "PWM=", 4) == 0 || memcmp(data + 1, "pwm=", 4) == 0){
 8000cd6:	e0b0      	b.n	8000e3a <getUSARTData+0x252>
				}
			}
			else if(memcmp(data + 1, "OCO=", 4) == 0 || memcmp(data + 1, "oco=", 4) == 0){
 8000cd8:	4b5c      	ldr	r3, [pc, #368]	; (8000e4c <getUSARTData+0x264>)
 8000cda:	2204      	movs	r2, #4
 8000cdc:	4968      	ldr	r1, [pc, #416]	; (8000e80 <getUSARTData+0x298>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f008 fad8 	bl	8009294 <memcmp>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d008      	beq.n	8000cfc <getUSARTData+0x114>
 8000cea:	4b58      	ldr	r3, [pc, #352]	; (8000e4c <getUSARTData+0x264>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	4965      	ldr	r1, [pc, #404]	; (8000e84 <getUSARTData+0x29c>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f008 facf 	bl	8009294 <memcmp>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d12a      	bne.n	8000d52 <getUSARTData+0x16a>
				uint8_t value[3];
				memcpy(value, data + 5, 3);
 8000cfc:	4a56      	ldr	r2, [pc, #344]	; (8000e58 <getUSARTData+0x270>)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	8811      	ldrh	r1, [r2, #0]
 8000d02:	7892      	ldrb	r2, [r2, #2]
 8000d04:	8019      	strh	r1, [r3, #0]
 8000d06:	709a      	strb	r2, [r3, #2]
				uint16_t x = atoi(value);
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f008 fa93 	bl	8009236 <atoi>
 8000d10:	4603      	mov	r3, r0
 8000d12:	81fb      	strh	r3, [r7, #14]
				if(x) oc5Value  = constrain(x, 0, 255);
 8000d14:	89fb      	ldrh	r3, [r7, #14]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <getUSARTData+0x140>
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	2bff      	cmp	r3, #255	; 0xff
 8000d1e:	bf28      	it	cs
 8000d20:	23ff      	movcs	r3, #255	; 0xff
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b58      	ldr	r3, [pc, #352]	; (8000e88 <getUSARTData+0x2a0>)
 8000d26:	801a      	strh	r2, [r3, #0]
				strSize = sprintf((char*)buffer, "oc5: %d\r\n", oc5Value);
 8000d28:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <getUSARTData+0x2a0>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4956      	ldr	r1, [pc, #344]	; (8000e8c <getUSARTData+0x2a4>)
 8000d32:	4850      	ldr	r0, [pc, #320]	; (8000e74 <getUSARTData+0x28c>)
 8000d34:	f008 ff22 	bl	8009b7c <siprintf>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <getUSARTData+0x290>)
 8000d3e:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 8000d40:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <getUSARTData+0x290>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	2332      	movs	r3, #50	; 0x32
 8000d48:	494a      	ldr	r1, [pc, #296]	; (8000e74 <getUSARTData+0x28c>)
 8000d4a:	484c      	ldr	r0, [pc, #304]	; (8000e7c <getUSARTData+0x294>)
 8000d4c:	f007 fb92 	bl	8008474 <HAL_UART_Transmit>
			else if(memcmp(data + 1, "OCO=", 4) == 0 || memcmp(data + 1, "oco=", 4) == 0){
 8000d50:	e074      	b.n	8000e3c <getUSARTData+0x254>
			}
			else if(memcmp(data + 1, "STA", 3) == 0 || memcmp(data + 1, "sta", 3) == 0){
 8000d52:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <getUSARTData+0x264>)
 8000d54:	2203      	movs	r2, #3
 8000d56:	494e      	ldr	r1, [pc, #312]	; (8000e90 <getUSARTData+0x2a8>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f008 fa9b 	bl	8009294 <memcmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d008      	beq.n	8000d76 <getUSARTData+0x18e>
 8000d64:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <getUSARTData+0x264>)
 8000d66:	2203      	movs	r2, #3
 8000d68:	494a      	ldr	r1, [pc, #296]	; (8000e94 <getUSARTData+0x2ac>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f008 fa92 	bl	8009294 <memcmp>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d120      	bne.n	8000db8 <getUSARTData+0x1d0>
				motorGotStarted = 1;
 8000d76:	4b48      	ldr	r3, [pc, #288]	; (8000e98 <getUSARTData+0x2b0>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
				HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_1);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4847      	ldr	r0, [pc, #284]	; (8000e9c <getUSARTData+0x2b4>)
 8000d80:	f006 f826 	bl	8006dd0 <HAL_TIM_IC_Stop_IT>
				HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_2);
 8000d84:	2104      	movs	r1, #4
 8000d86:	4845      	ldr	r0, [pc, #276]	; (8000e9c <getUSARTData+0x2b4>)
 8000d88:	f006 f822 	bl	8006dd0 <HAL_TIM_IC_Stop_IT>
				strSize = sprintf((char*)buffer, "Start Motor\r\n");
 8000d8c:	4a39      	ldr	r2, [pc, #228]	; (8000e74 <getUSARTData+0x28c>)
 8000d8e:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <getUSARTData+0x2b8>)
 8000d90:	4614      	mov	r4, r2
 8000d92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d94:	6020      	str	r0, [r4, #0]
 8000d96:	6061      	str	r1, [r4, #4]
 8000d98:	60a2      	str	r2, [r4, #8]
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	81a3      	strh	r3, [r4, #12]
 8000d9e:	230d      	movs	r3, #13
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <getUSARTData+0x290>)
 8000da4:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 8000da6:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <getUSARTData+0x290>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	2332      	movs	r3, #50	; 0x32
 8000dae:	4931      	ldr	r1, [pc, #196]	; (8000e74 <getUSARTData+0x28c>)
 8000db0:	4832      	ldr	r0, [pc, #200]	; (8000e7c <getUSARTData+0x294>)
 8000db2:	f007 fb5f 	bl	8008474 <HAL_UART_Transmit>
 8000db6:	e041      	b.n	8000e3c <getUSARTData+0x254>
			}
			else if(memcmp(data + 1, "STO", 3) == 0 || memcmp(data + 1, "sto", 3) == 0){
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <getUSARTData+0x264>)
 8000dba:	2203      	movs	r2, #3
 8000dbc:	4939      	ldr	r1, [pc, #228]	; (8000ea4 <getUSARTData+0x2bc>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f008 fa68 	bl	8009294 <memcmp>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d008      	beq.n	8000ddc <getUSARTData+0x1f4>
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <getUSARTData+0x264>)
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4936      	ldr	r1, [pc, #216]	; (8000ea8 <getUSARTData+0x2c0>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 fa5f 	bl	8009294 <memcmp>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d12f      	bne.n	8000e3c <getUSARTData+0x254>
				newPWM = setPWM = 0;
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <getUSARTData+0x27c>)
 8000de0:	460a      	mov	r2, r1
 8000de2:	801a      	strh	r2, [r3, #0]
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <getUSARTData+0x278>)
 8000de6:	460a      	mov	r2, r1
 8000de8:	801a      	strh	r2, [r3, #0]
				TIM1->CCR1 = setPWM;
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <getUSARTData+0x27c>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <getUSARTData+0x280>)
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR5 = setPWM + compWindowOffset;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <getUSARTData+0x27c>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <getUSARTData+0x284>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	441a      	add	r2, r3
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <getUSARTData+0x280>)
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
				motorGotStarted = 0;
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <getUSARTData+0x2b0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
				strSize = sprintf((char*)buffer, "Stop Motor\r\n");
 8000e0e:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <getUSARTData+0x28c>)
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <getUSARTData+0x2c4>)
 8000e12:	4614      	mov	r4, r2
 8000e14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e16:	6020      	str	r0, [r4, #0]
 8000e18:	6061      	str	r1, [r4, #4]
 8000e1a:	60a2      	str	r2, [r4, #8]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	7323      	strb	r3, [r4, #12]
 8000e20:	230c      	movs	r3, #12
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <getUSARTData+0x290>)
 8000e26:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <getUSARTData+0x290>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	2332      	movs	r3, #50	; 0x32
 8000e30:	4910      	ldr	r1, [pc, #64]	; (8000e74 <getUSARTData+0x28c>)
 8000e32:	4812      	ldr	r0, [pc, #72]	; (8000e7c <getUSARTData+0x294>)
 8000e34:	f007 fb1e 	bl	8008474 <HAL_UART_Transmit>
			}
		}
	 }
}
 8000e38:	e000      	b.n	8000e3c <getUSARTData+0x254>
			 if(memcmp(data + 1, "PWM=", 4) == 0 || memcmp(data + 1, "pwm=", 4) == 0){
 8000e3a:	bf00      	nop
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}
 8000e44:	20000210 	.word	0x20000210
 8000e48:	20000220 	.word	0x20000220
 8000e4c:	20000221 	.word	0x20000221
 8000e50:	0800b480 	.word	0x0800b480
 8000e54:	0800b488 	.word	0x0800b488
 8000e58:	20000225 	.word	0x20000225
 8000e5c:	10624dd3 	.word	0x10624dd3
 8000e60:	20000002 	.word	0x20000002
 8000e64:	20000004 	.word	0x20000004
 8000e68:	40012c00 	.word	0x40012c00
 8000e6c:	20000006 	.word	0x20000006
 8000e70:	0800b490 	.word	0x0800b490
 8000e74:	200004b8 	.word	0x200004b8
 8000e78:	20000748 	.word	0x20000748
 8000e7c:	20000424 	.word	0x20000424
 8000e80:	0800b49c 	.word	0x0800b49c
 8000e84:	0800b4a4 	.word	0x0800b4a4
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	0800b4ac 	.word	0x0800b4ac
 8000e90:	0800b4b8 	.word	0x0800b4b8
 8000e94:	0800b4bc 	.word	0x0800b4bc
 8000e98:	20000211 	.word	0x20000211
 8000e9c:	200002d0 	.word	0x200002d0
 8000ea0:	0800b4c0 	.word	0x0800b4c0
 8000ea4:	0800b4d0 	.word	0x0800b4d0
 8000ea8:	0800b4d4 	.word	0x0800b4d4
 8000eac:	0800b4d8 	.word	0x0800b4d8

08000eb0 <commutateNow_0>:
void commutateNow_0(void){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <commutateNow_0+0x28>)
 8000eba:	f004 fa81 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <commutateNow_0+0x28>)
 8000ec4:	f004 fa7c 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <commutateNow_0+0x28>)
 8000ed0:	f004 fa76 	bl	80053c0 <HAL_GPIO_WritePin>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	48000400 	.word	0x48000400

08000edc <commutateNow_1>:

void commutateNow_1(void){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4807      	ldr	r0, [pc, #28]	; (8000f04 <commutateNow_1+0x28>)
 8000ee6:	f004 fa6b 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2120      	movs	r1, #32
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <commutateNow_1+0x28>)
 8000ef0:	f004 fa66 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <commutateNow_1+0x28>)
 8000efa:	f004 fa61 	bl	80053c0 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	48000400 	.word	0x48000400

08000f08 <commutateNow_2>:

void commutateNow_2(void){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2108      	movs	r1, #8
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <commutateNow_2+0x28>)
 8000f12:	f004 fa55 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2110      	movs	r1, #16
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <commutateNow_2+0x28>)
 8000f1c:	f004 fa50 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	4802      	ldr	r0, [pc, #8]	; (8000f30 <commutateNow_2+0x28>)
 8000f28:	f004 fa4a 	bl	80053c0 <HAL_GPIO_WritePin>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	48000400 	.word	0x48000400

08000f34 <commutateNow_3>:

void commutateNow_3(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET); //INH_B connected to ground, IC B Sleep Mode
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <commutateNow_3+0x28>)
 8000f3e:	f004 fa3f 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_SET); //IN_C floating, pwm mode
 8000f42:	2201      	movs	r2, #1
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <commutateNow_3+0x28>)
 8000f48:	f004 fa3a 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //INH_C is high, IC C Active Mode
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <commutateNow_3+0x28>)
 8000f54:	f004 fa34 	bl	80053c0 <HAL_GPIO_WritePin>

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	48000400 	.word	0x48000400

08000f60 <commutateNow_4>:

void commutateNow_4(void){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET); //INH_A connected to ground, IC A Sleep Mode
 8000f64:	2200      	movs	r2, #0
 8000f66:	2110      	movs	r1, #16
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <commutateNow_4+0x28>)
 8000f6a:	f004 fa29 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET); //IN_B connected to ground
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <commutateNow_4+0x28>)
 8000f74:	f004 fa24 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //INH_B is high, IC B Active Mode
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <commutateNow_4+0x28>)
 8000f7e:	f004 fa1f 	bl	80053c0 <HAL_GPIO_WritePin>

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	48000400 	.word	0x48000400

08000f8c <commutateNow_5>:
void commutateNow_5(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_SET); //IN_A connected to ground, PWM Mode
 8000f90:	2201      	movs	r2, #1
 8000f92:	2108      	movs	r1, #8
 8000f94:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <commutateNow_5+0x28>)
 8000f96:	f004 fa13 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //INH_A is HIGH, IC A Active Mode
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <commutateNow_5+0x28>)
 8000fa0:	f004 fa0e 	bl	80053c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_RESET); //INH_C connected to ground, IC C Sleep Mode
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <commutateNow_5+0x28>)
 8000fac:	f004 fa08 	bl	80053c0 <HAL_GPIO_WritePin>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <commutationPattern>:

void commutationPattern(uint8_t step){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	if (step == NEXT && waitForCommutation == 1) {
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	f040 8098 	bne.w	80010fa <commutationPattern+0x142>
 8000fca:	4b6d      	ldr	r3, [pc, #436]	; (8001180 <commutationPattern+0x1c8>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	f040 8092 	bne.w	80010fa <commutationPattern+0x142>
		if (commutationStepCounter < STEP_5)
 8000fd6:	4b6b      	ldr	r3, [pc, #428]	; (8001184 <commutationPattern+0x1cc>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d807      	bhi.n	8000ff0 <commutationPattern+0x38>
			commutationStepCounter++;
 8000fe0:	4b68      	ldr	r3, [pc, #416]	; (8001184 <commutationPattern+0x1cc>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b66      	ldr	r3, [pc, #408]	; (8001184 <commutationPattern+0x1cc>)
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e002      	b.n	8000ff6 <commutationPattern+0x3e>
		else
			commutationStepCounter = STEP_0;
 8000ff0:	4b64      	ldr	r3, [pc, #400]	; (8001184 <commutationPattern+0x1cc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]

		switch (commutationStepCounter) {
 8000ff6:	4b63      	ldr	r3, [pc, #396]	; (8001184 <commutationPattern+0x1cc>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	f200 80a3 	bhi.w	8001148 <commutationPattern+0x190>
 8001002:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <commutationPattern+0x50>)
 8001004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001008:	08001021 	.word	0x08001021
 800100c:	08001045 	.word	0x08001045
 8001010:	08001069 	.word	0x08001069
 8001014:	0800108d 	.word	0x0800108d
 8001018:	080010b1 	.word	0x080010b1
 800101c:	080010d5 	.word	0x080010d5
		case STEP_0:
			commutateNow_0();
 8001020:	f7ff ff46 	bl	8000eb0 <commutateNow_0>
			COMPDELAY;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	e002      	b.n	8001030 <commutationPattern+0x78>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2bf9      	cmp	r3, #249	; 0xf9
 8001034:	d9f9      	bls.n	800102a <commutationPattern+0x72>
			waitForCommutation = 0;
 8001036:	4b52      	ldr	r3, [pc, #328]	; (8001180 <commutationPattern+0x1c8>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 800103c:	4852      	ldr	r0, [pc, #328]	; (8001188 <commutationPattern+0x1d0>)
 800103e:	f003 fa59 	bl	80044f4 <HAL_COMP_Start_IT>
			break;
 8001042:	e059      	b.n	80010f8 <commutationPattern+0x140>
		case STEP_1:
			commutateNow_1();
 8001044:	f7ff ff4a 	bl	8000edc <commutateNow_1>
			COMPDELAY;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	e002      	b.n	8001054 <commutationPattern+0x9c>
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	3301      	adds	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	2bf9      	cmp	r3, #249	; 0xf9
 8001058:	d9f9      	bls.n	800104e <commutationPattern+0x96>
			waitForCommutation = 0;
 800105a:	4b49      	ldr	r3, [pc, #292]	; (8001180 <commutationPattern+0x1c8>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 8001060:	484a      	ldr	r0, [pc, #296]	; (800118c <commutationPattern+0x1d4>)
 8001062:	f003 fa47 	bl	80044f4 <HAL_COMP_Start_IT>
			break;
 8001066:	e047      	b.n	80010f8 <commutationPattern+0x140>
		case STEP_2:
			commutateNow_2();
 8001068:	f7ff ff4e 	bl	8000f08 <commutateNow_2>
			COMPDELAY;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e002      	b.n	8001078 <commutationPattern+0xc0>
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	2bf9      	cmp	r3, #249	; 0xf9
 800107c:	d9f9      	bls.n	8001072 <commutationPattern+0xba>
			waitForCommutation = 0;
 800107e:	4b40      	ldr	r3, [pc, #256]	; (8001180 <commutationPattern+0x1c8>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 8001084:	4842      	ldr	r0, [pc, #264]	; (8001190 <commutationPattern+0x1d8>)
 8001086:	f003 fa35 	bl	80044f4 <HAL_COMP_Start_IT>
			break;
 800108a:	e035      	b.n	80010f8 <commutationPattern+0x140>
		case STEP_3:
			commutateNow_3();
 800108c:	f7ff ff52 	bl	8000f34 <commutateNow_3>
			COMPDELAY;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	e002      	b.n	800109c <commutationPattern+0xe4>
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	3301      	adds	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	2bf9      	cmp	r3, #249	; 0xf9
 80010a0:	d9f9      	bls.n	8001096 <commutationPattern+0xde>
			waitForCommutation = 0;
 80010a2:	4b37      	ldr	r3, [pc, #220]	; (8001180 <commutationPattern+0x1c8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 80010a8:	4837      	ldr	r0, [pc, #220]	; (8001188 <commutationPattern+0x1d0>)
 80010aa:	f003 fa23 	bl	80044f4 <HAL_COMP_Start_IT>
			break;
 80010ae:	e023      	b.n	80010f8 <commutationPattern+0x140>
		case STEP_4:
			commutateNow_4();
 80010b0:	f7ff ff56 	bl	8000f60 <commutateNow_4>
			COMPDELAY;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	e002      	b.n	80010c0 <commutationPattern+0x108>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2bf9      	cmp	r3, #249	; 0xf9
 80010c4:	d9f9      	bls.n	80010ba <commutationPattern+0x102>
			waitForCommutation = 0;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <commutationPattern+0x1c8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 80010cc:	482f      	ldr	r0, [pc, #188]	; (800118c <commutationPattern+0x1d4>)
 80010ce:	f003 fa11 	bl	80044f4 <HAL_COMP_Start_IT>
			break;
 80010d2:	e011      	b.n	80010f8 <commutationPattern+0x140>
		case STEP_5:
			commutateNow_5();
 80010d4:	f7ff ff5a 	bl	8000f8c <commutateNow_5>
			COMPDELAY;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	e002      	b.n	80010e4 <commutationPattern+0x12c>
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2bf9      	cmp	r3, #249	; 0xf9
 80010e8:	d9f9      	bls.n	80010de <commutationPattern+0x126>
			waitForCommutation = 0;
 80010ea:	4b25      	ldr	r3, [pc, #148]	; (8001180 <commutationPattern+0x1c8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 80010f0:	4827      	ldr	r0, [pc, #156]	; (8001190 <commutationPattern+0x1d8>)
 80010f2:	f003 f9ff 	bl	80044f4 <HAL_COMP_Start_IT>
			break;
 80010f6:	bf00      	nop
		}
	} else {
 80010f8:	e026      	b.n	8001148 <commutationPattern+0x190>
		waitForCommutation = 0;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <commutationPattern+0x1c8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
		switch (step) {
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b05      	cmp	r3, #5
 8001104:	d821      	bhi.n	800114a <commutationPattern+0x192>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <commutationPattern+0x154>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	08001125 	.word	0x08001125
 8001110:	0800112b 	.word	0x0800112b
 8001114:	08001131 	.word	0x08001131
 8001118:	08001137 	.word	0x08001137
 800111c:	0800113d 	.word	0x0800113d
 8001120:	08001143 	.word	0x08001143
		case STEP_0:
			commutateNow_0();
 8001124:	f7ff fec4 	bl	8000eb0 <commutateNow_0>
			break;
 8001128:	e00f      	b.n	800114a <commutationPattern+0x192>
		case STEP_1:
			commutateNow_1();
 800112a:	f7ff fed7 	bl	8000edc <commutateNow_1>
			break;
 800112e:	e00c      	b.n	800114a <commutationPattern+0x192>
		case STEP_2:
			commutateNow_2();
 8001130:	f7ff feea 	bl	8000f08 <commutateNow_2>
			break;
 8001134:	e009      	b.n	800114a <commutationPattern+0x192>
		case STEP_3:
			commutateNow_3();
 8001136:	f7ff fefd 	bl	8000f34 <commutateNow_3>
			break;
 800113a:	e006      	b.n	800114a <commutationPattern+0x192>
		case STEP_4:
			commutateNow_4();
 800113c:	f7ff ff10 	bl	8000f60 <commutateNow_4>
			break;
 8001140:	e003      	b.n	800114a <commutationPattern+0x192>
		case STEP_5:
			commutateNow_5();
 8001142:	f7ff ff23 	bl	8000f8c <commutateNow_5>
			break;
 8001146:	e000      	b.n	800114a <commutationPattern+0x192>
	} else {
 8001148:	bf00      	nop
		}
	}
	if(commutationStepCounter == STEP_0){
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <commutationPattern+0x1cc>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d104      	bne.n	800115e <commutationPattern+0x1a6>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <commutationPattern+0x1dc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
	} else if(commutationStepCounter == STEP_5){
		tim2cnt = __HAL_TIM_GET_COUNTER(&htim2);
		readRotation = true;
	}
}
 800115c:	e00c      	b.n	8001178 <commutationPattern+0x1c0>
	} else if(commutationStepCounter == STEP_5){
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <commutationPattern+0x1cc>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b05      	cmp	r3, #5
 8001166:	d107      	bne.n	8001178 <commutationPattern+0x1c0>
		tim2cnt = __HAL_TIM_GET_COUNTER(&htim2);
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <commutationPattern+0x1dc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <commutationPattern+0x1e0>)
 8001170:	6013      	str	r3, [r2, #0]
		readRotation = true;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <commutationPattern+0x1e4>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000278 	.word	0x20000278
 8001188:	200005c8 	.word	0x200005c8
 800118c:	20000318 	.word	0x20000318
 8001190:	200005f8 	.word	0x200005f8
 8001194:	20000708 	.word	0x20000708
 8001198:	20000584 	.word	0x20000584
 800119c:	20000212 	.word	0x20000212

080011a0 <startMotor>:
	}
	HAL_Delay(150);
	motorGotStarted = 2;
}*/

void startMotor(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	mode_motor = MODE_MOTOR_START;
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <startMotor+0x5c>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
	newPWM = setPWM = 300;
 80011aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <startMotor+0x60>)
 80011b0:	460a      	mov	r2, r1
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <startMotor+0x64>)
 80011b6:	460a      	mov	r2, r1
 80011b8:	801a      	strh	r2, [r3, #0]

	TIM1->CCR1 = setPWM;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <startMotor+0x60>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <startMotor+0x68>)
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR5 = setPWM + compWindowOffset;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <startMotor+0x60>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <startMotor+0x6c>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	441a      	add	r2, r3
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <startMotor+0x68>)
 80011d6:	659a      	str	r2, [r3, #88]	; 0x58
		step %= 6;
		i -= 10;
		//DWT_Delay(10);
	}*/

	commutationStepCounter = STEP_0;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <startMotor+0x70>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
	waitForCommutation = 1;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <startMotor+0x74>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
	commutationPattern(NEXT);
 80011e4:	2009      	movs	r0, #9
 80011e6:	f7ff fee7 	bl	8000fb8 <commutationPattern>
	waitForCommutation = 1;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <startMotor+0x74>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
	motorGotStarted = 2;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <startMotor+0x78>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000021c 	.word	0x2000021c
 8001200:	20000004 	.word	0x20000004
 8001204:	20000002 	.word	0x20000002
 8001208:	40012c00 	.word	0x40012c00
 800120c:	20000006 	.word	0x20000006
 8001210:	20000278 	.word	0x20000278
 8001214:	20000000 	.word	0x20000000
 8001218:	20000211 	.word	0x20000211

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001220:	f001 fb92 	bl	8002948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001224:	f000 f8bc 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001228:	f000 fce2 	bl	8001bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 800122c:	f000 fcc2 	bl	8001bb4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001230:	f000 f916 	bl	8001460 <MX_ADC1_Init>
  MX_COMP1_Init();
 8001234:	f000 f9e4 	bl	8001600 <MX_COMP1_Init>
  MX_COMP2_Init();
 8001238:	f000 fa12 	bl	8001660 <MX_COMP2_Init>
  MX_COMP3_Init();
 800123c:	f000 fa40 	bl	80016c0 <MX_COMP3_Init>
  MX_DAC_Init();
 8001240:	f000 fa6e 	bl	8001720 <MX_DAC_Init>
  MX_TIM1_Init();
 8001244:	f000 fa96 	bl	8001774 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001248:	f000 fb9c 	bl	8001984 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800124c:	f000 fc82 	bl	8001b54 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 8001250:	f000 f978 	bl	8001544 <MX_ADC2_Init>
  MX_TIM15_Init();
 8001254:	f000 fbfa 	bl	8001a4c <MX_TIM15_Init>
  MX_TIM2_Init();
 8001258:	f000 fb46 	bl	80018e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 800125c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001260:	f001 fbd8 	bl	8002a14 <HAL_Delay>
  DWT_Init();
 8001264:	f7ff fca0 	bl	8000ba8 <DWT_Init>

  HAL_TIM_Base_Start(&htim2);
 8001268:	483f      	ldr	r0, [pc, #252]	; (8001368 <main+0x14c>)
 800126a:	f005 fbdb 	bl	8006a24 <HAL_TIM_Base_Start>

  sConfig.Rank = ADC_REGULAR_RANK_1;
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <main+0x150>)
 8001270:	2201      	movs	r2, #1
 8001272:	605a      	str	r2, [r3, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001274:	4b3d      	ldr	r3, [pc, #244]	; (800136c <main+0x150>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <main+0x150>)
 800127c:	2203      	movs	r2, #3
 800127e:	609a      	str	r2, [r3, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001280:	4b3a      	ldr	r3, [pc, #232]	; (800136c <main+0x150>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  sConfig.Offset = 0;
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <main+0x150>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]

  //HAL_ADC_Start(&hadc2);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800128c:	2100      	movs	r1, #0
 800128e:	4838      	ldr	r0, [pc, #224]	; (8001370 <main+0x154>)
 8001290:	f005 fca2 	bl	8006bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 8001294:	2110      	movs	r1, #16
 8001296:	4836      	ldr	r0, [pc, #216]	; (8001370 <main+0x154>)
 8001298:	f005 fc9e 	bl	8006bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 800129c:	2104      	movs	r1, #4
 800129e:	4834      	ldr	r0, [pc, #208]	; (8001370 <main+0x154>)
 80012a0:	f005 fc16 	bl	8006ad0 <HAL_TIM_OC_Start>

  //HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80012a4:	2100      	movs	r1, #0
 80012a6:	4833      	ldr	r0, [pc, #204]	; (8001374 <main+0x158>)
 80012a8:	f003 fc86 	bl	8004bb8 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80012ac:	2300      	movs	r3, #0
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	4830      	ldr	r0, [pc, #192]	; (8001374 <main+0x158>)
 80012b4:	f003 fc5b 	bl	8004b6e <HAL_DAC_SetValue>
  newPWM = setPWM = TIM1->CCR1 = TIM1->CCR5 = 0;
 80012b8:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <main+0x15c>)
 80012ba:	2300      	movs	r3, #0
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
 80012be:	4a2e      	ldr	r2, [pc, #184]	; (8001378 <main+0x15c>)
 80012c0:	6353      	str	r3, [r2, #52]	; 0x34
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <main+0x160>)
 80012c6:	4611      	mov	r1, r2
 80012c8:	8019      	strh	r1, [r3, #0]
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <main+0x164>)
 80012cc:	801a      	strh	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <main+0x168>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <main+0x168>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0210 	orr.w	r2, r2, #16
 80012dc:	601a      	str	r2, [r3, #0]

  if(HAL_UART_Receive_DMA(&huart1, dma_rx_buf, DMA_BUF_SIZE) != HAL_OK){
 80012de:	2232      	movs	r2, #50	; 0x32
 80012e0:	4929      	ldr	r1, [pc, #164]	; (8001388 <main+0x16c>)
 80012e2:	4828      	ldr	r0, [pc, #160]	; (8001384 <main+0x168>)
 80012e4:	f007 f95a 	bl	800859c <HAL_UART_Receive_DMA>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <main+0xd6>
	  Error_Handler();
 80012ee:	f000 fe8d 	bl	800200c <Error_Handler>
  }

  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <main+0x168>)
 80012f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <main+0x168>)
 80012fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0204 	bic.w	r2, r2, #4
 8001304:	601a      	str	r2, [r3, #0]

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001306:	2100      	movs	r1, #0
 8001308:	4820      	ldr	r0, [pc, #128]	; (800138c <main+0x170>)
 800130a:	f005 fcf3 	bl	8006cf4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 800130e:	2104      	movs	r1, #4
 8001310:	481e      	ldr	r0, [pc, #120]	; (800138c <main+0x170>)
 8001312:	f005 fcef 	bl	8006cf4 <HAL_TIM_IC_Start_IT>

  strSize = sprintf((char*)buffer, "Test\r\n");
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <main+0x174>)
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <main+0x178>)
 800131a:	6810      	ldr	r0, [r2, #0]
 800131c:	6018      	str	r0, [r3, #0]
 800131e:	8891      	ldrh	r1, [r2, #4]
 8001320:	7992      	ldrb	r2, [r2, #6]
 8001322:	8099      	strh	r1, [r3, #4]
 8001324:	719a      	strb	r2, [r3, #6]
 8001326:	2306      	movs	r3, #6
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <main+0x17c>)
 800132c:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <main+0x17c>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29a      	uxth	r2, r3
 8001334:	230a      	movs	r3, #10
 8001336:	4916      	ldr	r1, [pc, #88]	; (8001390 <main+0x174>)
 8001338:	4812      	ldr	r0, [pc, #72]	; (8001384 <main+0x168>)
 800133a:	f007 f89b 	bl	8008474 <HAL_UART_Transmit>

  motorGotStarted = 0;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <main+0x180>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(motorGotStarted == 1){
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <main+0x180>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d109      	bne.n	8001362 <main+0x146>
		  startMotor();
 800134e:	f7ff ff27 	bl	80011a0 <startMotor>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001352:	2100      	movs	r1, #0
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <main+0x170>)
 8001356:	f005 fccd 	bl	8006cf4 <HAL_TIM_IC_Start_IT>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 800135a:	2104      	movs	r1, #4
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <main+0x170>)
 800135e:	f005 fcc9 	bl	8006cf4 <HAL_TIM_IC_Start_IT>
	  }
	  //uint32_t x = adcIntegral;
	  getUSARTData();
 8001362:	f7ff fc41 	bl	8000be8 <getUSARTData>
	  if(motorGotStarted == 1){
 8001366:	e7ed      	b.n	8001344 <main+0x128>
 8001368:	20000708 	.word	0x20000708
 800136c:	20000628 	.word	0x20000628
 8001370:	20000588 	.word	0x20000588
 8001374:	200004a4 	.word	0x200004a4
 8001378:	40012c00 	.word	0x40012c00
 800137c:	20000004 	.word	0x20000004
 8001380:	20000002 	.word	0x20000002
 8001384:	20000424 	.word	0x20000424
 8001388:	2000074c 	.word	0x2000074c
 800138c:	200002d0 	.word	0x200002d0
 8001390:	200004b8 	.word	0x200004b8
 8001394:	0800b4e8 	.word	0x0800b4e8
 8001398:	20000748 	.word	0x20000748
 800139c:	20000211 	.word	0x20000211

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b09e      	sub	sp, #120	; 0x78
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013aa:	2228      	movs	r2, #40	; 0x28
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f007 ff7f 	bl	80092b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c4:	463b      	mov	r3, r7
 80013c6:	223c      	movs	r2, #60	; 0x3c
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f007 ff71 	bl	80092b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d0:	2301      	movs	r3, #1
 80013d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013de:	2301      	movs	r3, #1
 80013e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e2:	2302      	movs	r3, #2
 80013e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013f0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fffa 	bl	80053f0 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001402:	f000 fe03 	bl	800200c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2302      	movs	r3, #2
 800140c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f004 feec 	bl	8006200 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800142e:	f000 fded 	bl	800200c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8001432:	f241 0381 	movw	r3, #4225	; 0x1081
 8001436:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV32;
 800143c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4618      	mov	r0, r3
 800144a:	f005 f90f 	bl	800666c <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001454:	f000 fdda 	bl	800200c <Error_Handler>
  }
}
 8001458:	bf00      	nop
 800145a:	3778      	adds	r7, #120	; 0x78
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001482:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <MX_ADC1_Init+0xe0>)
 8001484:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001488:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <MX_ADC1_Init+0xe0>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <MX_ADC1_Init+0xe0>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <MX_ADC1_Init+0xe0>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <MX_ADC1_Init+0xe0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014d0:	2204      	movs	r2, #4
 80014d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e0:	4817      	ldr	r0, [pc, #92]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014e2:	f001 fad7 	bl	8002a94 <HAL_ADC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014ec:	f000 fd8e 	bl	800200c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4811      	ldr	r0, [pc, #68]	; (8001540 <MX_ADC1_Init+0xe0>)
 80014fc:	f002 fc54 	bl	8003da8 <HAL_ADCEx_MultiModeConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001506:	f000 fd81 	bl	800200c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800150a:	2301      	movs	r3, #1
 800150c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800150e:	2301      	movs	r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_ADC1_Init+0xe0>)
 8001528:	f002 f952 	bl	80037d0 <HAL_ADC_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8001532:	f000 fd6b 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000038c 	.word	0x2000038c

08001544 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_ADC2_Init+0xb4>)
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <MX_ADC2_Init+0xb8>)
 800155e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <MX_ADC2_Init+0xb4>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_ADC2_Init+0xb4>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_ADC2_Init+0xb4>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_ADC2_Init+0xb4>)
 8001574:	2201      	movs	r2, #1
 8001576:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_ADC2_Init+0xb4>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_ADC2_Init+0xb4>)
 8001582:	2200      	movs	r2, #0
 8001584:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <MX_ADC2_Init+0xb4>)
 8001588:	2201      	movs	r2, #1
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_ADC2_Init+0xb4>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <MX_ADC2_Init+0xb4>)
 8001594:	2201      	movs	r2, #1
 8001596:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_ADC2_Init+0xb4>)
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_ADC2_Init+0xb4>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_ADC2_Init+0xb4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_ADC2_Init+0xb4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <MX_ADC2_Init+0xb4>)
 80015b4:	f001 fa6e 	bl	8002a94 <HAL_ADC_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80015be:	f000 fd25 	bl	800200c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80015ce:	2303      	movs	r3, #3
 80015d0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MX_ADC2_Init+0xb4>)
 80015e0:	f002 f8f6 	bl	80037d0 <HAL_ADC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80015ea:	f000 fd0f 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000027c 	.word	0x2000027c
 80015fc:	50000100 	.word	0x50000100

08001600 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_COMP1_Init+0x58>)
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <MX_COMP1_Init+0x5c>)
 8001608:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_COMP1_Init+0x58>)
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_COMP1_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_COMP1_Init+0x58>)
 8001618:	227f      	movs	r2, #127	; 0x7f
 800161a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_COMP1_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <MX_COMP1_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <MX_COMP1_Init+0x58>)
 800162a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800162e:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_COMP1_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <MX_COMP1_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_COMP1_Init+0x58>)
 800163e:	2203      	movs	r2, #3
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_COMP1_Init+0x58>)
 8001644:	f002 fe0e 	bl	8004264 <HAL_COMP_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 800164e:	f000 fcdd 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000318 	.word	0x20000318
 800165c:	4001001c 	.word	0x4001001c

08001660 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_COMP2_Init+0x58>)
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <MX_COMP2_Init+0x5c>)
 8001668:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_COMP2_Init+0x58>)
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_COMP2_Init+0x58>)
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_COMP2_Init+0x58>)
 8001678:	227f      	movs	r2, #127	; 0x7f
 800167a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_COMP2_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_COMP2_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_COMP2_Init+0x58>)
 800168a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800168e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_COMP2_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_COMP2_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_COMP2_Init+0x58>)
 800169e:	2203      	movs	r2, #3
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_COMP2_Init+0x58>)
 80016a4:	f002 fdde 	bl	8004264 <HAL_COMP_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 80016ae:	f000 fcad 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200005c8 	.word	0x200005c8
 80016bc:	40010020 	.word	0x40010020

080016c0 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_COMP3_Init+0x58>)
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <MX_COMP3_Init+0x5c>)
 80016c8:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_COMP3_Init+0x58>)
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_COMP3_Init+0x58>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <MX_COMP3_Init+0x58>)
 80016d8:	227f      	movs	r2, #127	; 0x7f
 80016da:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_COMP3_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <MX_COMP3_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <MX_COMP3_Init+0x58>)
 80016ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016ee:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_COMP3_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <MX_COMP3_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_COMP3_Init+0x58>)
 80016fe:	2203      	movs	r2, #3
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_COMP3_Init+0x58>)
 8001704:	f002 fdae 	bl	8004264 <HAL_COMP_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_COMP3_Init+0x52>
  {
    Error_Handler();
 800170e:	f000 fc7d 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200005f8 	.word	0x200005f8
 800171c:	40010024 	.word	0x40010024

08001720 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_DAC_Init+0x4c>)
 8001732:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <MX_DAC_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <MX_DAC_Init+0x4c>)
 8001738:	f003 f9f7 	bl	8004b2a <HAL_DAC_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001742:	f000 fc63 	bl	800200c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_DAC_Init+0x4c>)
 8001756:	f003 fa7a 	bl	8004c4e <HAL_DAC_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8001760:	f000 fc54 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200004a4 	.word	0x200004a4
 8001770:	40007400 	.word	0x40007400

08001774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b096      	sub	sp, #88	; 0x58
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	222c      	movs	r2, #44	; 0x2c
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f007 fd86 	bl	80092b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017a6:	4b4e      	ldr	r3, [pc, #312]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80017a8:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <MX_TIM1_Init+0x170>)
 80017aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2 - 1;
 80017ac:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80017b2:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80017b4:	2260      	movs	r2, #96	; 0x60
 80017b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1800 - 1;
 80017b8:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80017ba:	f240 7207 	movw	r2, #1799	; 0x707
 80017be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c6:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017d2:	4843      	ldr	r0, [pc, #268]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80017d4:	f005 f9d4 	bl	8006b80 <HAL_TIM_PWM_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80017de:	f000 fc15 	bl	800200c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80017e2:	483f      	ldr	r0, [pc, #252]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80017e4:	f005 f948 	bl	8006a78 <HAL_TIM_OC_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80017ee:	f000 fc0d 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001802:	4619      	mov	r1, r3
 8001804:	4836      	ldr	r0, [pc, #216]	; (80018e0 <MX_TIM1_Init+0x16c>)
 8001806:	f006 fccb 	bl	80081a0 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001810:	f000 fbfc 	bl	800200c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001814:	2360      	movs	r3, #96	; 0x60
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 8001818:	2364      	movs	r3, #100	; 0x64
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001820:	2300      	movs	r3, #0
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001824:	2304      	movs	r3, #4
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001836:	2200      	movs	r2, #0
 8001838:	4619      	mov	r1, r3
 800183a:	4829      	ldr	r0, [pc, #164]	; (80018e0 <MX_TIM1_Init+0x16c>)
 800183c:	f005 fd72 	bl	8007324 <HAL_TIM_PWM_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001846:	f000 fbe1 	bl	800200c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800184a:	2330      	movs	r3, #48	; 0x30
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001856:	2204      	movs	r2, #4
 8001858:	4619      	mov	r1, r3
 800185a:	4821      	ldr	r0, [pc, #132]	; (80018e0 <MX_TIM1_Init+0x16c>)
 800185c:	f005 fc48 	bl	80070f0 <HAL_TIM_OC_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001866:	f000 fbd1 	bl	800200c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186a:	2360      	movs	r3, #96	; 0x60
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 120;
 800186e:	2378      	movs	r3, #120	; 0x78
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8001876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800187a:	2210      	movs	r2, #16
 800187c:	4619      	mov	r1, r3
 800187e:	4818      	ldr	r0, [pc, #96]	; (80018e0 <MX_TIM1_Init+0x16c>)
 8001880:	f005 fd50 	bl	8007324 <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 800188a:	f000 fbbf 	bl	800200c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80018c4:	f006 fcec 	bl	80082a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 80018ce:	f000 fb9d 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM1_Init+0x16c>)
 80018d4:	f000 fdd0 	bl	8002478 <HAL_TIM_MspPostInit>

}
 80018d8:	bf00      	nop
 80018da:	3758      	adds	r7, #88	; 0x58
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000588 	.word	0x20000588
 80018e4:	40012c00 	.word	0x40012c00

080018e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0310 	add.w	r3, r7, #16
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001906:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <MX_TIM2_Init+0x98>)
 8001908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <MX_TIM2_Init+0x98>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM2_Init+0x98>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <MX_TIM2_Init+0x98>)
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_TIM2_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_TIM2_Init+0x98>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <MX_TIM2_Init+0x98>)
 8001930:	f005 f84c 	bl	80069cc <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800193a:	f000 fb67 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <MX_TIM2_Init+0x98>)
 800194c:	f005 fe02 	bl	8007554 <HAL_TIM_ConfigClockSource>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001956:	f000 fb59 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <MX_TIM2_Init+0x98>)
 8001968:	f006 fc1a 	bl	80081a0 <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001972:	f000 fb4b 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000708 	.word	0x20000708

08001984 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <MX_TIM3_Init+0xc0>)
 80019aa:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <MX_TIM3_Init+0xc4>)
 80019ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80019ae:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <MX_TIM3_Init+0xc0>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <MX_TIM3_Init+0xc0>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <MX_TIM3_Init+0xc0>)
 80019bc:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80019c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <MX_TIM3_Init+0xc0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MX_TIM3_Init+0xc0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80019ce:	481d      	ldr	r0, [pc, #116]	; (8001a44 <MX_TIM3_Init+0xc0>)
 80019d0:	f005 f852 	bl	8006a78 <HAL_TIM_OC_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80019da:	f000 fb17 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4815      	ldr	r0, [pc, #84]	; (8001a44 <MX_TIM3_Init+0xc0>)
 80019ee:	f006 fbd7 	bl	80081a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80019f8:	f000 fb08 	bl	800200c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019fc:	2300      	movs	r3, #0
 80019fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001a00:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2200      	movs	r2, #0
 8001a12:	4619      	mov	r1, r3
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <MX_TIM3_Init+0xc0>)
 8001a16:	f005 fb6b 	bl	80070f0 <HAL_TIM_OC_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001a20:	f000 faf4 	bl	800200c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	2204      	movs	r2, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_TIM3_Init+0xc0>)
 8001a2c:	f005 fb60 	bl	80070f0 <HAL_TIM_OC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001a36:	f000 fae9 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3728      	adds	r7, #40	; 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000348 	.word	0x20000348
 8001a48:	40000400 	.word	0x40000400

08001a4c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	; 0x30
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001a7a:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <MX_TIM15_Init+0x104>)
 8001a7c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72 - 1;
 8001a7e:	4b33      	ldr	r3, [pc, #204]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001a80:	2247      	movs	r2, #71	; 0x47
 8001a82:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001a8a:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a90:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a92:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001aa4:	4829      	ldr	r0, [pc, #164]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001aa6:	f004 ff91 	bl	80069cc <HAL_TIM_Base_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8001ab0:	f000 faac 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001aba:	f107 0320 	add.w	r3, r7, #32
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4822      	ldr	r0, [pc, #136]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001ac2:	f005 fd47 	bl	8007554 <HAL_TIM_ConfigClockSource>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8001acc:	f000 fa9e 	bl	800200c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001ad0:	481e      	ldr	r0, [pc, #120]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001ad2:	f005 f8d9 	bl	8006c88 <HAL_TIM_IC_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001adc:	f000 fa96 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4817      	ldr	r0, [pc, #92]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001af0:	f006 fb56 	bl	80081a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8001afa:	f000 fa87 	bl	800200c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b02:	2301      	movs	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001b16:	f005 fb69 	bl	80071ec <HAL_TIM_IC_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001b20:	f000 fa74 	bl	800200c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b24:	2302      	movs	r3, #2
 8001b26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <MX_TIM15_Init+0x100>)
 8001b34:	f005 fb5a 	bl	80071ec <HAL_TIM_IC_ConfigChannel>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001b3e:	f000 fa65 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	3730      	adds	r7, #48	; 0x30
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002d0 	.word	0x200002d0
 8001b50:	40014000 	.word	0x40014000

08001b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <MX_USART1_UART_Init+0x5c>)
 8001b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_USART1_UART_Init+0x58>)
 8001b98:	f006 fc1e 	bl	80083d8 <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ba2:	f000 fa33 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000424 	.word	0x20000424
 8001bb0:	40013800 	.word	0x40013800

08001bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_DMA_Init+0x38>)
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <MX_DMA_Init+0x38>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6153      	str	r3, [r2, #20]
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_DMA_Init+0x38>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	200f      	movs	r0, #15
 8001bd8:	f002 ff71 	bl	8004abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001bdc:	200f      	movs	r0, #15
 8001bde:	f002 ff8a 	bl	8004af6 <HAL_NVIC_EnableIRQ>

}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000

08001bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <MX_GPIO_Init+0xc8>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <MX_GPIO_Init+0xc8>)
 8001c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c10:	6153      	str	r3, [r2, #20]
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <MX_GPIO_Init+0xc8>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <MX_GPIO_Init+0xc8>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4a25      	ldr	r2, [pc, #148]	; (8001cb8 <MX_GPIO_Init+0xc8>)
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	6153      	str	r3, [r2, #20]
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <MX_GPIO_Init+0xc8>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <MX_GPIO_Init+0xc8>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <MX_GPIO_Init+0xc8>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6153      	str	r3, [r2, #20]
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_GPIO_Init+0xc8>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|IN_A_Pin
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f240 71fb 	movw	r1, #2043	; 0x7fb
 8001c54:	4819      	ldr	r0, [pc, #100]	; (8001cbc <MX_GPIO_Init+0xcc>)
 8001c56:	f003 fbb3 	bl	80053c0 <HAL_GPIO_WritePin>
                          |INH_A_Pin|IN_B_Pin|INH_B_Pin|IN_C_Pin
                          |INH_C_Pin|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ADC_PHASEA_Pin */
  GPIO_InitStruct.Pin = ADC_PHASEA_Pin;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC_PHASEA_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c70:	f003 fa2c 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_A_Pin OUT_B_Pin OUT_C_Pin IN_A_Pin
                           IN_B_Pin IN_C_Pin */
  GPIO_InitStruct.Pin = OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|IN_A_Pin
 8001c74:	f240 43ab 	movw	r3, #1195	; 0x4ab
 8001c78:	60fb      	str	r3, [r7, #12]
                          |IN_B_Pin|IN_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001c7a:	2311      	movs	r3, #17
 8001c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	f107 030c 	add.w	r3, r7, #12
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <MX_GPIO_Init+0xcc>)
 8001c8e:	f003 fa1d 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : INH_A_Pin INH_B_Pin INH_C_Pin LED_Pin */
  GPIO_InitStruct.Pin = INH_A_Pin|INH_B_Pin|INH_C_Pin|LED_Pin;
 8001c92:	f44f 7354 	mov.w	r3, #848	; 0x350
 8001c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_GPIO_Init+0xcc>)
 8001cac:	f003 fa0e 	bl	80050cc <HAL_GPIO_Init>

}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	48000400 	.word	0x48000400

08001cc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    uint16_t i, pos, start, length;
    uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	823b      	strh	r3, [r7, #16]

    /* Ignore IDLE Timeout when the received characters exactly filled up the DMA buffer and DMA Rx Complete IT is generated, but there is no new character during timeout */
    if(dma_uart_rx.flag && currCNDTR == DMA_BUF_SIZE)
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_UART_RxCpltCallback+0x2a>
 8001cdc:	8a3b      	ldrh	r3, [r7, #16]
 8001cde:	2b32      	cmp	r3, #50	; 0x32
 8001ce0:	d103      	bne.n	8001cea <HAL_UART_RxCpltCallback+0x2a>
    {
        dma_uart_rx.flag = 0;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
        return;
 8001ce8:	e045      	b.n	8001d76 <HAL_UART_RxCpltCallback+0xb6>
    }

    /* Determine start position in DMA buffer based on previous CNDTR value */
    start = (dma_uart_rx.prevCNDTR < DMA_BUF_SIZE) ? (DMA_BUF_SIZE - dma_uart_rx.prevCNDTR) : 0;
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001cec:	889b      	ldrh	r3, [r3, #4]
 8001cee:	2b31      	cmp	r3, #49	; 0x31
 8001cf0:	d805      	bhi.n	8001cfe <HAL_UART_RxCpltCallback+0x3e>
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001cf4:	889b      	ldrh	r3, [r3, #4]
 8001cf6:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	e000      	b.n	8001d00 <HAL_UART_RxCpltCallback+0x40>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	81fb      	strh	r3, [r7, #14]

    if(dma_uart_rx.flag)    /* Timeout event */
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d015      	beq.n	8001d38 <HAL_UART_RxCpltCallback+0x78>
    {
        /* Determine new data length based on previous DMA_CNDTR value:
         *  If previous CNDTR is less than DMA buffer size: there is old data in DMA buffer (from previous timeout) that has to be ignored.
         *  If CNDTR == DMA buffer size: entire buffer content is new and has to be processed.
        */
        length = (dma_uart_rx.prevCNDTR < DMA_BUF_SIZE) ? (dma_uart_rx.prevCNDTR - currCNDTR) : (DMA_BUF_SIZE - currCNDTR);
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	2b31      	cmp	r3, #49	; 0x31
 8001d12:	d805      	bhi.n	8001d20 <HAL_UART_RxCpltCallback+0x60>
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001d16:	889a      	ldrh	r2, [r3, #4]
 8001d18:	8a3b      	ldrh	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	e003      	b.n	8001d28 <HAL_UART_RxCpltCallback+0x68>
 8001d20:	8a3b      	ldrh	r3, [r7, #16]
 8001d22:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	827b      	strh	r3, [r7, #18]
        dma_uart_rx.prevCNDTR = currCNDTR;
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001d2c:	8a3b      	ldrh	r3, [r7, #16]
 8001d2e:	8093      	strh	r3, [r2, #4]
        dma_uart_rx.flag = 0;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	e006      	b.n	8001d46 <HAL_UART_RxCpltCallback+0x86>
    }
    else                /* DMA Rx Complete event */
    {
        length = DMA_BUF_SIZE - start;
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001d3e:	827b      	strh	r3, [r7, #18]
        dma_uart_rx.prevCNDTR = DMA_BUF_SIZE;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_UART_RxCpltCallback+0xc0>)
 8001d42:	2232      	movs	r2, #50	; 0x32
 8001d44:	809a      	strh	r2, [r3, #4]
    }

    /* Copy and Process new data */
    for(i=0,pos=start; i<length; ++i,++pos)
 8001d46:	2300      	movs	r3, #0
 8001d48:	82fb      	strh	r3, [r7, #22]
 8001d4a:	89fb      	ldrh	r3, [r7, #14]
 8001d4c:	82bb      	strh	r3, [r7, #20]
 8001d4e:	e00b      	b.n	8001d68 <HAL_UART_RxCpltCallback+0xa8>
    {
        data[i] = dma_rx_buf[pos];
 8001d50:	8aba      	ldrh	r2, [r7, #20]
 8001d52:	8afb      	ldrh	r3, [r7, #22]
 8001d54:	490b      	ldr	r1, [pc, #44]	; (8001d84 <HAL_UART_RxCpltCallback+0xc4>)
 8001d56:	5c89      	ldrb	r1, [r1, r2]
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_UART_RxCpltCallback+0xc8>)
 8001d5a:	54d1      	strb	r1, [r2, r3]
    for(i=0,pos=start; i<length; ++i,++pos)
 8001d5c:	8afb      	ldrh	r3, [r7, #22]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	82fb      	strh	r3, [r7, #22]
 8001d62:	8abb      	ldrh	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	82bb      	strh	r3, [r7, #20]
 8001d68:	8afa      	ldrh	r2, [r7, #22]
 8001d6a:	8a7b      	ldrh	r3, [r7, #18]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d3ef      	bcc.n	8001d50 <HAL_UART_RxCpltCallback+0x90>
    }
    USART1DataFlag = true;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_UART_RxCpltCallback+0xcc>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]

}
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	20000010 	.word	0x20000010
 8001d84:	2000074c 	.word	0x2000074c
 8001d88:	20000220 	.word	0x20000220
 8001d8c:	20000210 	.word	0x20000210

08001d90 <HAL_COMP_TriggerCallback>:
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	0000      	movs	r0, r0
	...

08001da8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	static uint32_t Count_FallingEdge;
	static uint32_t Count_Freq1;
	static uint32_t Count_Freq2;
	static bool Freq_State;

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7f1b      	ldrb	r3, [r3, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d13d      	bne.n	8001e34 <HAL_TIM_IC_CaptureCallback+0x8c>
		Count_RisingEdge = TIM15->CCR1;
 8001db8:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbc:	4a7f      	ldr	r2, [pc, #508]	; (8001fbc <HAL_TIM_IC_CaptureCallback+0x214>)
 8001dbe:	6013      	str	r3, [r2, #0]

		if(Freq_State == 0){
 8001dc0:	4b7f      	ldr	r3, [pc, #508]	; (8001fc0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	f083 0301 	eor.w	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <HAL_TIM_IC_CaptureCallback+0x36>
			Freq_State = 1;
 8001dce:	4b7c      	ldr	r3, [pc, #496]	; (8001fc0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
			Count_Freq1 = Count_RisingEdge;
 8001dd4:	4b79      	ldr	r3, [pc, #484]	; (8001fbc <HAL_TIM_IC_CaptureCallback+0x214>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a7a      	ldr	r2, [pc, #488]	; (8001fc4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	e074      	b.n	8001ec8 <HAL_TIM_IC_CaptureCallback+0x120>

		}
		else if(Freq_State == 1){
 8001dde:	4b78      	ldr	r3, [pc, #480]	; (8001fc0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d070      	beq.n	8001ec8 <HAL_TIM_IC_CaptureCallback+0x120>
			Freq_State = 0;
 8001de6:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_TIM_IC_CaptureCallback+0x218>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
			Count_Freq2 = Count_RisingEdge;
 8001dec:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <HAL_TIM_IC_CaptureCallback+0x214>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a75      	ldr	r2, [pc, #468]	; (8001fc8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001df2:	6013      	str	r3, [r2, #0]
			if(Count_Freq2 > Count_Freq1) inputFrequency = 1/((float)Count_Freq2 - (float)Count_Freq1) * 1000000; //in kHz;
 8001df4:	4b74      	ldr	r3, [pc, #464]	; (8001fc8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d963      	bls.n	8001ec8 <HAL_TIM_IC_CaptureCallback+0x120>
 8001e00:	4b71      	ldr	r3, [pc, #452]	; (8001fc8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e0c:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e24:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001fcc <HAL_TIM_IC_CaptureCallback+0x224>
 8001e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
 8001e32:	e049      	b.n	8001ec8 <HAL_TIM_IC_CaptureCallback+0x120>
		}
	}

	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7f1b      	ldrb	r3, [r3, #28]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d145      	bne.n	8001ec8 <HAL_TIM_IC_CaptureCallback+0x120>
		Count_FallingEdge = TIM15->CCR2;
 8001e3c:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <HAL_TIM_IC_CaptureCallback+0x210>)
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	4a64      	ldr	r2, [pc, #400]	; (8001fd4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001e42:	6013      	str	r3, [r2, #0]

		if(Count_RisingEdge < Count_FallingEdge){
 8001e44:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_TIM_IC_CaptureCallback+0x214>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b62      	ldr	r3, [pc, #392]	; (8001fd4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d23b      	bcs.n	8001ec8 <HAL_TIM_IC_CaptureCallback+0x120>
			inputDutyCycle = Count_FallingEdge - Count_RisingEdge;
 8001e50:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <HAL_TIM_IC_CaptureCallback+0x214>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	4a5f      	ldr	r2, [pc, #380]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001e5c:	6013      	str	r3, [r2, #0]
			input_pwm_min = inputDutyCycle < input_pwm_min ? inputDutyCycle : input_pwm_min;
 8001e5e:	4b5f      	ldr	r3, [pc, #380]	; (8001fdc <HAL_TIM_IC_CaptureCallback+0x234>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bf28      	it	cs
 8001e6c:	4613      	movcs	r3, r2
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_TIM_IC_CaptureCallback+0x234>)
 8001e72:	801a      	strh	r2, [r3, #0]
			input_pwm_max = inputDutyCycle > input_pwm_max ? inputDutyCycle : input_pwm_max;
 8001e74:	4b5a      	ldr	r3, [pc, #360]	; (8001fe0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	bf38      	it	cc
 8001e82:	4613      	movcc	r3, r2
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001e88:	801a      	strh	r2, [r3, #0]

			newPWM = map(inputDutyCycle, input_pwm_min, input_pwm_max, PWM_MIN, PWM_MAX);
 8001e8a:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a53      	ldr	r2, [pc, #332]	; (8001fdc <HAL_TIM_IC_CaptureCallback+0x234>)
 8001e90:	8812      	ldrh	r2, [r2, #0]
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	4a50      	ldr	r2, [pc, #320]	; (8001fe0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001e9e:	8812      	ldrh	r2, [r2, #0]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4a4e      	ldr	r2, [pc, #312]	; (8001fdc <HAL_TIM_IC_CaptureCallback+0x234>)
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	1a8a      	subs	r2, r1, r2
 8001ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001eb0:	801a      	strh	r2, [r3, #0]
			setPWM = newPWM;
 8001eb2:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001eba:	801a      	strh	r2, [r3, #0]

			Count_RisingEdge = 0;
 8001ebc:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_TIM_IC_CaptureCallback+0x214>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
			Count_FallingEdge = 0;
 8001ec2:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
		}
	}

	if(inputFrequency >= FREQ_INPUT_PWM_MIN && inputFrequency <= FREQ_INPUT_PWM_MAX){
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb3b 	bl	8000548 <__aeabi_f2d>
 8001ed2:	a335      	add	r3, pc, #212	; (adr r3, 8001fa8 <HAL_TIM_IC_CaptureCallback+0x200>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fe14 	bl	8000b04 <__aeabi_dcmpge>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d100      	bne.n	8001ee4 <HAL_TIM_IC_CaptureCallback+0x13c>
		if(motorGotStarted == 2){
			TIM1->CCR1 = setPWM;
			TIM1->CCR5 = setPWM + compWindowOffset;
		}
	}
}
 8001ee2:	e05c      	b.n	8001f9e <HAL_TIM_IC_CaptureCallback+0x1f6>
	if(inputFrequency >= FREQ_INPUT_PWM_MIN && inputFrequency <= FREQ_INPUT_PWM_MAX){
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb2d 	bl	8000548 <__aeabi_f2d>
 8001eee:	a330      	add	r3, pc, #192	; (adr r3, 8001fb0 <HAL_TIM_IC_CaptureCallback+0x208>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	f7fe fdfc 	bl	8000af0 <__aeabi_dcmple>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d100      	bne.n	8001f00 <HAL_TIM_IC_CaptureCallback+0x158>
}
 8001efe:	e04e      	b.n	8001f9e <HAL_TIM_IC_CaptureCallback+0x1f6>
		if(setPWM >= 300 && motorGotStarted == 0){
 8001f00:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f0a:	db24      	blt.n	8001f56 <HAL_TIM_IC_CaptureCallback+0x1ae>
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_TIM_IC_CaptureCallback+0x244>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11f      	bne.n	8001f56 <HAL_TIM_IC_CaptureCallback+0x1ae>
			HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_1);
 8001f16:	2100      	movs	r1, #0
 8001f18:	4835      	ldr	r0, [pc, #212]	; (8001ff0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001f1a:	f004 ff59 	bl	8006dd0 <HAL_TIM_IC_Stop_IT>
			HAL_TIM_IC_Stop_IT(&htim15, TIM_CHANNEL_2);
 8001f1e:	2104      	movs	r1, #4
 8001f20:	4833      	ldr	r0, [pc, #204]	; (8001ff0 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001f22:	f004 ff55 	bl	8006dd0 <HAL_TIM_IC_Stop_IT>
			motorGotStarted = 1;
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_TIM_IC_CaptureCallback+0x244>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
			strSize = sprintf((char*)buffer, "Motor Started\r\n");
 8001f2c:	4a31      	ldr	r2, [pc, #196]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001f2e:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001f30:	4614      	mov	r4, r2
 8001f32:	461d      	mov	r5, r3
 8001f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f36:	6020      	str	r0, [r4, #0]
 8001f38:	6061      	str	r1, [r4, #4]
 8001f3a:	60a2      	str	r2, [r4, #8]
 8001f3c:	60e3      	str	r3, [r4, #12]
 8001f3e:	230f      	movs	r3, #15
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001f44:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	4929      	ldr	r1, [pc, #164]	; (8001ff4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001f50:	482b      	ldr	r0, [pc, #172]	; (8002000 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001f52:	f006 fa8f 	bl	8008474 <HAL_UART_Transmit>
		if(setPWM <= 50 && motorGotStarted != 0) {
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	2b32      	cmp	r3, #50	; 0x32
 8001f5e:	dc0a      	bgt.n	8001f76 <HAL_TIM_IC_CaptureCallback+0x1ce>
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_TIM_IC_CaptureCallback+0x244>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_TIM_IC_CaptureCallback+0x1ce>
			TIM1->CCR1 = 0;
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR5 = 0;
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	659a      	str	r2, [r3, #88]	; 0x58
		if(motorGotStarted == 2){
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_TIM_IC_CaptureCallback+0x244>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d10e      	bne.n	8001f9e <HAL_TIM_IC_CaptureCallback+0x1f6>
			TIM1->CCR1 = setPWM;
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR5 = setPWM + compWindowOffset;
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	441a      	add	r2, r3
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	51eb851f 	.word	0x51eb851f
 8001fac:	4048feb8 	.word	0x4048feb8
 8001fb0:	cccccccd 	.word	0xcccccccd
 8001fb4:	40490ccc 	.word	0x40490ccc
 8001fb8:	40014000 	.word	0x40014000
 8001fbc:	20000254 	.word	0x20000254
 8001fc0:	20000258 	.word	0x20000258
 8001fc4:	2000025c 	.word	0x2000025c
 8001fc8:	20000260 	.word	0x20000260
 8001fcc:	49742400 	.word	0x49742400
 8001fd0:	20000218 	.word	0x20000218
 8001fd4:	20000264 	.word	0x20000264
 8001fd8:	20000214 	.word	0x20000214
 8001fdc:	2000000a 	.word	0x2000000a
 8001fe0:	2000000c 	.word	0x2000000c
 8001fe4:	20000002 	.word	0x20000002
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	20000211 	.word	0x20000211
 8001ff0:	200002d0 	.word	0x200002d0
 8001ff4:	200004b8 	.word	0x200004b8
 8001ff8:	0800b4f0 	.word	0x0800b4f0
 8001ffc:	20000748 	.word	0x20000748
 8002000:	20000424 	.word	0x20000424
 8002004:	40012c00 	.word	0x40012c00
 8002008:	20000006 	.word	0x20000006

0800200c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_MspInit+0x44>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <HAL_MspInit+0x44>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6193      	str	r3, [r2, #24]
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_MspInit+0x44>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_MspInit+0x44>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_MspInit+0x44>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	61d3      	str	r3, [r2, #28]
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_MspInit+0x44>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002084:	d136      	bne.n	80020f4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_ADC_MspInit+0x110>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a39      	ldr	r2, [pc, #228]	; (8002174 <HAL_ADC_MspInit+0x110>)
 800208e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002090:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_ADC_MspInit+0x110>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10b      	bne.n	80020b0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_ADC_MspInit+0x114>)
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	4a36      	ldr	r2, [pc, #216]	; (8002178 <HAL_ADC_MspInit+0x114>)
 800209e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6153      	str	r3, [r2, #20]
 80020a4:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_ADC_MspInit+0x114>)
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_ADC_MspInit+0x114>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_ADC_MspInit+0x114>)
 80020b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ba:	6153      	str	r3, [r2, #20]
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <HAL_ADC_MspInit+0x114>)
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CS_Pin;
 80020c8:	2301      	movs	r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020cc:	2303      	movs	r3, #3
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020de:	f002 fff5 	bl	80050cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2012      	movs	r0, #18
 80020e8:	f002 fce9 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020ec:	2012      	movs	r0, #18
 80020ee:	f002 fd02 	bl	8004af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020f2:	e03a      	b.n	800216a <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_ADC_MspInit+0x118>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d135      	bne.n	800216a <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <HAL_ADC_MspInit+0x110>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_ADC_MspInit+0x110>)
 8002106:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_ADC_MspInit+0x110>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_ADC_MspInit+0x114>)
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_ADC_MspInit+0x114>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211a:	6153      	str	r3, [r2, #20]
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_ADC_MspInit+0x114>)
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_ADC_MspInit+0x114>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_ADC_MspInit+0x114>)
 800212e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002132:	6153      	str	r3, [r2, #20]
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_ADC_MspInit+0x114>)
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_PHASEA_Pin|ADC_PHASEB_Pin|ADC_PHASEC_Pin;
 8002140:	23e0      	movs	r3, #224	; 0xe0
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002144:	2303      	movs	r3, #3
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	4619      	mov	r1, r3
 8002152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002156:	f002 ffb9 	bl	80050cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2012      	movs	r0, #18
 8002160:	f002 fcad 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002164:	2012      	movs	r0, #18
 8002166:	f002 fcc6 	bl	8004af6 <HAL_NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3730      	adds	r7, #48	; 0x30
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000268 	.word	0x20000268
 8002178:	40021000 	.word	0x40021000
 800217c:	50000100 	.word	0x50000100

08002180 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3a      	ldr	r2, [pc, #232]	; (8002288 <HAL_COMP_MspInit+0x108>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d121      	bne.n	80021e6 <HAL_COMP_MspInit+0x66>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b3a      	ldr	r3, [pc, #232]	; (800228c <HAL_COMP_MspInit+0x10c>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	4a39      	ldr	r2, [pc, #228]	; (800228c <HAL_COMP_MspInit+0x10c>)
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	6153      	str	r3, [r2, #20]
 80021ae:	4b37      	ldr	r3, [pc, #220]	; (800228c <HAL_COMP_MspInit+0x10c>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = COMP_PHASEA_Pin;
 80021ba:	2302      	movs	r3, #2
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021be:	2303      	movs	r3, #3
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEA_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d0:	f002 ff7c 	bl	80050cc <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2100      	movs	r1, #0
 80021d8:	2040      	movs	r0, #64	; 0x40
 80021da:	f002 fc70 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80021de:	2040      	movs	r0, #64	; 0x40
 80021e0:	f002 fc89 	bl	8004af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP3_MspInit 1 */

  /* USER CODE END COMP3_MspInit 1 */
  }

}
 80021e4:	e04c      	b.n	8002280 <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a29      	ldr	r2, [pc, #164]	; (8002290 <HAL_COMP_MspInit+0x110>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d121      	bne.n	8002234 <HAL_COMP_MspInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_COMP_MspInit+0x10c>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	4a25      	ldr	r2, [pc, #148]	; (800228c <HAL_COMP_MspInit+0x10c>)
 80021f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fa:	6153      	str	r3, [r2, #20]
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_COMP_MspInit+0x10c>)
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COMP_PHASEB_Pin;
 8002208:	2308      	movs	r3, #8
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800220c:	2303      	movs	r3, #3
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEB_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	f002 ff55 	bl	80050cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2040      	movs	r0, #64	; 0x40
 8002228:	f002 fc49 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800222c:	2040      	movs	r0, #64	; 0x40
 800222e:	f002 fc62 	bl	8004af6 <HAL_NVIC_EnableIRQ>
}
 8002232:	e025      	b.n	8002280 <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_COMP_MspInit+0x114>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d120      	bne.n	8002280 <HAL_COMP_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_COMP_MspInit+0x10c>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_COMP_MspInit+0x10c>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6153      	str	r3, [r2, #20]
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_COMP_MspInit+0x10c>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = COMP_PHASEC_Pin;
 8002256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800225c:	2303      	movs	r3, #3
 800225e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEC_GPIO_Port, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <HAL_COMP_MspInit+0x118>)
 800226c:	f002 ff2e 	bl	80050cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	2040      	movs	r0, #64	; 0x40
 8002276:	f002 fc22 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800227a:	2040      	movs	r0, #64	; 0x40
 800227c:	f002 fc3b 	bl	8004af6 <HAL_NVIC_EnableIRQ>
}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	4001001c 	.word	0x4001001c
 800228c:	40021000 	.word	0x40021000
 8002290:	40010020 	.word	0x40010020
 8002294:	40010024 	.word	0x40010024
 8002298:	48000400 	.word	0x48000400

0800229c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a15      	ldr	r2, [pc, #84]	; (8002310 <HAL_DAC_MspInit+0x74>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d124      	bne.n	8002308 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <HAL_DAC_MspInit+0x78>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_DAC_MspInit+0x78>)
 80022c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022c8:	61d3      	str	r3, [r2, #28]
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_DAC_MspInit+0x78>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_DAC_MspInit+0x78>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <HAL_DAC_MspInit+0x78>)
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	6153      	str	r3, [r2, #20]
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_DAC_MspInit+0x78>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022ee:	2310      	movs	r3, #16
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f2:	2303      	movs	r3, #3
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002304:	f002 fee2 	bl	80050cc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40007400 	.word	0x40007400
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_TIM_PWM_MspInit+0x54>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d11b      	bne.n	8002362 <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_TIM_PWM_MspInit+0x58>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <HAL_TIM_PWM_MspInit+0x58>)
 8002330:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002334:	6193      	str	r3, [r2, #24]
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_TIM_PWM_MspInit+0x58>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 2, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2102      	movs	r1, #2
 8002346:	2018      	movs	r0, #24
 8002348:	f002 fbb9 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800234c:	2018      	movs	r0, #24
 800234e:	f002 fbd2 	bl	8004af6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	201b      	movs	r0, #27
 8002358:	f002 fbb1 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800235c:	201b      	movs	r0, #27
 800235e:	f002 fbca 	bl	8004af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002394:	d10c      	bne.n	80023b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <HAL_TIM_Base_MspInit+0xb0>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <HAL_TIM_Base_MspInit+0xb0>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_TIM_Base_MspInit+0xb0>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80023ae:	e035      	b.n	800241c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM15)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_TIM_Base_MspInit+0xb4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d130      	bne.n	800241c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_TIM_Base_MspInit+0xb0>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_TIM_Base_MspInit+0xb0>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6193      	str	r3, [r2, #24]
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_TIM_Base_MspInit+0xb0>)
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_TIM_Base_MspInit+0xb0>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4a13      	ldr	r2, [pc, #76]	; (8002424 <HAL_TIM_Base_MspInit+0xb0>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	6153      	str	r3, [r2, #20]
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_TIM_Base_MspInit+0xb0>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ea:	2304      	movs	r3, #4
 80023ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80023fa:	2309      	movs	r3, #9
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002408:	f002 fe60 	bl	80050cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 2, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2102      	movs	r1, #2
 8002410:	2018      	movs	r0, #24
 8002412:	f002 fb54 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002416:	2018      	movs	r0, #24
 8002418:	f002 fb6d 	bl	8004af6 <HAL_NVIC_EnableIRQ>
}
 800241c:	bf00      	nop
 800241e:	3728      	adds	r7, #40	; 0x28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	40014000 	.word	0x40014000

0800242c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_TIM_OC_MspInit+0x44>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d113      	bne.n	8002466 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_TIM_OC_MspInit+0x48>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <HAL_TIM_OC_MspInit+0x48>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_TIM_OC_MspInit+0x48>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	201d      	movs	r0, #29
 800245c:	f002 fb2f 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002460:	201d      	movs	r0, #29
 8002462:	f002 fb48 	bl	8004af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40000400 	.word	0x40000400
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <HAL_TIM_MspPostInit+0x68>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d11d      	bne.n	80024d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_TIM_MspPostInit+0x6c>)
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <HAL_TIM_MspPostInit+0x6c>)
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	6153      	str	r3, [r2, #20]
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_TIM_MspPostInit+0x6c>)
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMOUT_Pin;
 80024b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024bc:	2302      	movs	r3, #2
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024c0:	2301      	movs	r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80024c4:	2306      	movs	r3, #6
 80024c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOUT_GPIO_Port, &GPIO_InitStruct);
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	4619      	mov	r1, r3
 80024ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d2:	f002 fdfb 	bl	80050cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024d6:	bf00      	nop
 80024d8:	3720      	adds	r7, #32
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <HAL_UART_MspInit+0xdc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d157      	bne.n	80025ba <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800250a:	4b2f      	ldr	r3, [pc, #188]	; (80025c8 <HAL_UART_MspInit+0xe0>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <HAL_UART_MspInit+0xe0>)
 8002510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002514:	6193      	str	r3, [r2, #24]
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_UART_MspInit+0xe0>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <HAL_UART_MspInit+0xe0>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4a28      	ldr	r2, [pc, #160]	; (80025c8 <HAL_UART_MspInit+0xe0>)
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	6153      	str	r3, [r2, #20]
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_UART_MspInit+0xe0>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800253a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800253e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800254c:	2307      	movs	r3, #7
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255a:	f002 fdb7 	bl	80050cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_UART_MspInit+0xe4>)
 8002560:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <HAL_UART_MspInit+0xe8>)
 8002562:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_UART_MspInit+0xe4>)
 8002566:	2200      	movs	r2, #0
 8002568:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_UART_MspInit+0xe4>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_UART_MspInit+0xe4>)
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_UART_MspInit+0xe4>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_UART_MspInit+0xe4>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_UART_MspInit+0xe4>)
 8002584:	2220      	movs	r2, #32
 8002586:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_UART_MspInit+0xe4>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800258e:	480f      	ldr	r0, [pc, #60]	; (80025cc <HAL_UART_MspInit+0xe4>)
 8002590:	f002 fbaa 	bl	8004ce8 <HAL_DMA_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 800259a:	f7ff fd37 	bl	800200c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_UART_MspInit+0xe4>)
 80025a2:	66da      	str	r2, [r3, #108]	; 0x6c
 80025a4:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_UART_MspInit+0xe4>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2102      	movs	r1, #2
 80025ae:	2025      	movs	r0, #37	; 0x25
 80025b0:	f002 fa85 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025b4:	2025      	movs	r0, #37	; 0x25
 80025b6:	f002 fa9e 	bl	8004af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025ba:	bf00      	nop
 80025bc:	3728      	adds	r7, #40	; 0x28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40013800 	.word	0x40013800
 80025c8:	40021000 	.word	0x40021000
 80025cc:	200003dc 	.word	0x200003dc
 80025d0:	40020058 	.word	0x40020058

080025d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <MemManage_Handler+0x4>

080025ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002628:	f000 f9d4 	bl	80029d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(dma_uart_rx.timer == 1)
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <SysTick_Handler+0x38>)
 800262e:	885b      	ldrh	r3, [r3, #2]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <SysTick_Handler+0x1e>
     {
         /* DMA Timeout event: set Timeout Flag and call DMA Rx Complete Callback */
         dma_uart_rx.flag = 1;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <SysTick_Handler+0x38>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
         hdma_usart1_rx.XferCpltCallback(&hdma_usart1_rx);
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <SysTick_Handler+0x3c>)
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <SysTick_Handler+0x3c>)
 8002640:	4798      	blx	r3
     }
     if(dma_uart_rx.timer) { --dma_uart_rx.timer; }
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <SysTick_Handler+0x38>)
 8002644:	885b      	ldrh	r3, [r3, #2]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <SysTick_Handler+0x32>
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <SysTick_Handler+0x38>)
 800264c:	885b      	ldrh	r3, [r3, #2]
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	4b02      	ldr	r3, [pc, #8]	; (800265c <SysTick_Handler+0x38>)
 8002654:	805a      	strh	r2, [r3, #2]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000010 	.word	0x20000010
 8002660:	200003dc 	.word	0x200003dc

08002664 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <DMA1_Channel5_IRQHandler+0x10>)
 800266a:	f002 fc21 	bl	8004eb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200003dc 	.word	0x200003dc

08002678 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	if(__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) == SET){
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <ADC1_2_IRQHandler+0x54>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b04      	cmp	r3, #4
 8002688:	d108      	bne.n	800269c <ADC1_2_IRQHandler+0x24>
		adcIntegral += HAL_ADC_GetValue(&hadc2);
 800268a:	4810      	ldr	r0, [pc, #64]	; (80026cc <ADC1_2_IRQHandler+0x54>)
 800268c:	f000 fd5f 	bl	800314e <HAL_ADC_GetValue>
 8002690:	4602      	mov	r2, r0
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <ADC1_2_IRQHandler+0x58>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <ADC1_2_IRQHandler+0x58>)
 800269a:	6013      	str	r3, [r2, #0]
	}
	if(adcIntegral >= adcOffset){
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <ADC1_2_IRQHandler+0x58>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <ADC1_2_IRQHandler+0x5c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d308      	bcc.n	80026ba <ADC1_2_IRQHandler+0x42>
		HAL_ADC_Stop_IT(&hadc2);
 80026a8:	4808      	ldr	r0, [pc, #32]	; (80026cc <ADC1_2_IRQHandler+0x54>)
 80026aa:	f000 fd13 	bl	80030d4 <HAL_ADC_Stop_IT>
		adcIntegral = 0;
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <ADC1_2_IRQHandler+0x58>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
		commutationPattern(NEXT);
 80026b4:	2009      	movs	r0, #9
 80026b6:	f7fe fc7f 	bl	8000fb8 <commutationPattern>
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026ba:	4807      	ldr	r0, [pc, #28]	; (80026d8 <ADC1_2_IRQHandler+0x60>)
 80026bc:	f000 fd54 	bl	8003168 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <ADC1_2_IRQHandler+0x54>)
 80026c2:	f000 fd51 	bl	8003168 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000027c 	.word	0x2000027c
 80026d0:	20000314 	.word	0x20000314
 80026d4:	20000580 	.word	0x20000580
 80026d8:	2000038c 	.word	0x2000038c

080026dc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026e0:	4803      	ldr	r0, [pc, #12]	; (80026f0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80026e2:	f004 fbe5 	bl	8006eb0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80026e6:	4803      	ldr	r0, [pc, #12]	; (80026f4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80026e8:	f004 fbe2 	bl	8006eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000588 	.word	0x20000588
 80026f4:	200002d0 	.word	0x200002d0

080026f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
		//HAL_ADC_Stop(&hadc2);
		commutationPattern(NEXT);
	}*/

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <TIM1_CC_IRQHandler+0x10>)
 80026fe:	f004 fbd7 	bl	8006eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000588 	.word	0x20000588

0800270c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	//if((__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_CC1)== SET) && waitForCommutation == 1)
	//{
		//commutationPattern(NEXT);
	//}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <TIM3_IRQHandler+0x10>)
 8002712:	f004 fbcd 	bl	8006eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000348 	.word	0x20000348

08002720 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    if((USART1->ISR & USART_ISR_IDLE) != RESET)
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <USART1_IRQHandler+0x28>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <USART1_IRQHandler+0x1c>
    {
        USART1->ICR = UART_CLEAR_IDLEF;
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <USART1_IRQHandler+0x28>)
 8002732:	2210      	movs	r2, #16
 8002734:	621a      	str	r2, [r3, #32]
        /* Start DMA timer */
        dma_uart_rx.timer = DMA_TIMEOUT_MS;
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <USART1_IRQHandler+0x2c>)
 8002738:	220a      	movs	r2, #10
 800273a:	805a      	strh	r2, [r3, #2]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800273c:	4804      	ldr	r0, [pc, #16]	; (8002750 <USART1_IRQHandler+0x30>)
 800273e:	f005 ffb1 	bl	80086a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40013800 	.word	0x40013800
 800274c:	20000010 	.word	0x20000010
 8002750:	20000424 	.word	0x20000424

08002754 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */
	TIM1->CCR5 = setPWM + compWindowOffset;
 8002758:	4b34      	ldr	r3, [pc, #208]	; (800282c <COMP1_2_3_IRQHandler+0xd8>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b34      	ldr	r3, [pc, #208]	; (8002830 <COMP1_2_3_IRQHandler+0xdc>)
 8002760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002764:	441a      	add	r2, r3
 8002766:	4b33      	ldr	r3, [pc, #204]	; (8002834 <COMP1_2_3_IRQHandler+0xe0>)
 8002768:	659a      	str	r2, [r3, #88]	; 0x58

	if(__HAL_COMP_COMP1_EXTI_GET_FLAG() && waitForCommutation == 0){
 800276a:	4b33      	ldr	r3, [pc, #204]	; (8002838 <COMP1_2_3_IRQHandler+0xe4>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <COMP1_2_3_IRQHandler+0x3e>
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <COMP1_2_3_IRQHandler+0xe8>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <COMP1_2_3_IRQHandler+0x3e>
		HAL_COMP_Stop_IT(&hcomp1);
 800277e:	4830      	ldr	r0, [pc, #192]	; (8002840 <COMP1_2_3_IRQHandler+0xec>)
 8002780:	f001 ffac 	bl	80046dc <HAL_COMP_Stop_IT>
		sConfig.Channel = ADC_CHANNEL_2;
 8002784:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <COMP1_2_3_IRQHandler+0xf0>)
 8002786:	2202      	movs	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutationTimerCounterAverage + commutationTimerOffset);
		__HAL_TIM_SET_COUNTER(&htim3, 0);

		for(uint8_t i = 0; i<5; i++) commutationTimerCounterArray[i] = commutationTimerCounterArray[i+1];*/

		waitForCommutation = 1;
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <COMP1_2_3_IRQHandler+0xe8>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e026      	b.n	80027e0 <COMP1_2_3_IRQHandler+0x8c>

	}

	else if(__HAL_COMP_COMP2_EXTI_GET_FLAG() && waitForCommutation == 0){
 8002792:	4b29      	ldr	r3, [pc, #164]	; (8002838 <COMP1_2_3_IRQHandler+0xe4>)
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00d      	beq.n	80027ba <COMP1_2_3_IRQHandler+0x66>
 800279e:	4b27      	ldr	r3, [pc, #156]	; (800283c <COMP1_2_3_IRQHandler+0xe8>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <COMP1_2_3_IRQHandler+0x66>
		HAL_COMP_Stop_IT(&hcomp2);
 80027a6:	4828      	ldr	r0, [pc, #160]	; (8002848 <COMP1_2_3_IRQHandler+0xf4>)
 80027a8:	f001 ff98 	bl	80046dc <HAL_COMP_Stop_IT>
		sConfig.Channel = ADC_CHANNEL_3;
 80027ac:	4b25      	ldr	r3, [pc, #148]	; (8002844 <COMP1_2_3_IRQHandler+0xf0>)
 80027ae:	2203      	movs	r2, #3
 80027b0:	601a      	str	r2, [r3, #0]
		commutationTimerCounterAverage = (commutationTimerCounterArray[0]+commutationTimerCounterArray[1]+commutationTimerCounterArray[2]+commutationTimerCounterArray[3]+commutationTimerCounterArray[4]+commutationTimerCounterArray[5])/12;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutationTimerCounterAverage + commutationTimerOffset);
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		for(uint8_t i = 0; i<5; i++) commutationTimerCounterArray[i] = commutationTimerCounterArray[i+1];*/

		waitForCommutation = 1;
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <COMP1_2_3_IRQHandler+0xe8>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
 80027b8:	e012      	b.n	80027e0 <COMP1_2_3_IRQHandler+0x8c>
	}

	else if(__HAL_COMP_COMP3_EXTI_GET_FLAG() && waitForCommutation == 0){
 80027ba:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <COMP1_2_3_IRQHandler+0xe4>)
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00c      	beq.n	80027e0 <COMP1_2_3_IRQHandler+0x8c>
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <COMP1_2_3_IRQHandler+0xe8>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <COMP1_2_3_IRQHandler+0x8c>
		HAL_COMP_Stop_IT(&hcomp3);
 80027ce:	481f      	ldr	r0, [pc, #124]	; (800284c <COMP1_2_3_IRQHandler+0xf8>)
 80027d0:	f001 ff84 	bl	80046dc <HAL_COMP_Stop_IT>
		sConfig.Channel = ADC_CHANNEL_4;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <COMP1_2_3_IRQHandler+0xf0>)
 80027d6:	2204      	movs	r2, #4
 80027d8:	601a      	str	r2, [r3, #0]
		commutationTimerCounterAverage = (commutationTimerCounterArray[0]+commutationTimerCounterArray[1]+commutationTimerCounterArray[2]+commutationTimerCounterArray[3]+commutationTimerCounterArray[4]+commutationTimerCounterArray[5])/12;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutationTimerCounterAverage + commutationTimerOffset);
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		for(uint8_t i = 0; i<5; i++) commutationTimerCounterArray[i] = commutationTimerCounterArray[i+1];*/

		waitForCommutation = 1;
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <COMP1_2_3_IRQHandler+0xe8>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
			pwmState = 0;
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_5);*/
		//}
	}

	TIM1->CCR5 = setPWM + compWindowOffset;
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <COMP1_2_3_IRQHandler+0xd8>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <COMP1_2_3_IRQHandler+0xdc>)
 80027e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ec:	441a      	add	r2, r3
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <COMP1_2_3_IRQHandler+0xe0>)
 80027f0:	659a      	str	r2, [r3, #88]	; 0x58
	TIM1->CCR2 = setPWM;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <COMP1_2_3_IRQHandler+0xd8>)
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <COMP1_2_3_IRQHandler+0xe0>)
 80027f8:	639a      	str	r2, [r3, #56]	; 0x38

	adcOffset = 1000;
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <COMP1_2_3_IRQHandler+0xfc>)
 80027fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002800:	601a      	str	r2, [r3, #0]
	adcIntegral = 0;
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <COMP1_2_3_IRQHandler+0x100>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8002808:	490e      	ldr	r1, [pc, #56]	; (8002844 <COMP1_2_3_IRQHandler+0xf0>)
 800280a:	4813      	ldr	r0, [pc, #76]	; (8002858 <COMP1_2_3_IRQHandler+0x104>)
 800280c:	f000 ffe0 	bl	80037d0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start_IT(&hadc2);
 8002810:	4811      	ldr	r0, [pc, #68]	; (8002858 <COMP1_2_3_IRQHandler+0x104>)
 8002812:	f000 fb1f 	bl	8002e54 <HAL_ADC_Start_IT>
	adcIntegral = 0;
	commutationPattern(NEXT);*/


  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8002816:	480a      	ldr	r0, [pc, #40]	; (8002840 <COMP1_2_3_IRQHandler+0xec>)
 8002818:	f002 f806 	bl	8004828 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 800281c:	480a      	ldr	r0, [pc, #40]	; (8002848 <COMP1_2_3_IRQHandler+0xf4>)
 800281e:	f002 f803 	bl	8004828 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp3);
 8002822:	480a      	ldr	r0, [pc, #40]	; (800284c <COMP1_2_3_IRQHandler+0xf8>)
 8002824:	f002 f800 	bl	8004828 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000004 	.word	0x20000004
 8002830:	20000006 	.word	0x20000006
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40010400 	.word	0x40010400
 800283c:	20000000 	.word	0x20000000
 8002840:	20000318 	.word	0x20000318
 8002844:	20000628 	.word	0x20000628
 8002848:	200005c8 	.word	0x200005c8
 800284c:	200005f8 	.word	0x200005f8
 8002850:	20000580 	.word	0x20000580
 8002854:	20000314 	.word	0x20000314
 8002858:	2000027c 	.word	0x2000027c

0800285c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <_sbrk+0x5c>)
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <_sbrk+0x60>)
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <_sbrk+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <_sbrk+0x64>)
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <_sbrk+0x68>)
 800287c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <_sbrk+0x64>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	429a      	cmp	r2, r3
 800288a:	d207      	bcs.n	800289c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800288c:	f006 fcd8 	bl	8009240 <__errno>
 8002890:	4602      	mov	r2, r0
 8002892:	230c      	movs	r3, #12
 8002894:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e009      	b.n	80028b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <_sbrk+0x64>)
 80028ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ae:	68fb      	ldr	r3, [r7, #12]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000a000 	.word	0x2000a000
 80028bc:	00000400 	.word	0x00000400
 80028c0:	2000026c 	.word	0x2000026c
 80028c4:	20000788 	.word	0x20000788

080028c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <SystemInit+0x28>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <SystemInit+0x28>)
 80028d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <SystemInit+0x28>)
 80028de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028e2:	609a      	str	r2, [r3, #8]
#endif
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800292c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80028f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80028fa:	e003      	b.n	8002904 <LoopCopyDataInit>

080028fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80028fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002900:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002902:	3104      	adds	r1, #4

08002904 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002908:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800290a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800290c:	d3f6      	bcc.n	80028fc <CopyDataInit>
	ldr	r2, =_sbss
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002910:	e002      	b.n	8002918 <LoopFillZerobss>

08002912 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002912:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002914:	f842 3b04 	str.w	r3, [r2], #4

08002918 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <LoopForever+0x16>)
	cmp	r2, r3
 800291a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800291c:	d3f9      	bcc.n	8002912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800291e:	f7ff ffd3 	bl	80028c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002922:	f006 fc93 	bl	800924c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002926:	f7fe fc79 	bl	800121c <main>

0800292a <LoopForever>:

LoopForever:
    b LoopForever
 800292a:	e7fe      	b.n	800292a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800292c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002930:	0800b7a0 	.word	0x0800b7a0
	ldr	r0, =_sdata
 8002934:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002938:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 800293c:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8002940:	20000788 	.word	0x20000788

08002944 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002944:	e7fe      	b.n	8002944 <ADC3_IRQHandler>
	...

08002948 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_Init+0x28>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a07      	ldr	r2, [pc, #28]	; (8002970 <HAL_Init+0x28>)
 8002952:	f043 0310 	orr.w	r3, r3, #16
 8002956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002958:	2003      	movs	r0, #3
 800295a:	f002 f8a5 	bl	8004aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800295e:	2000      	movs	r0, #0
 8002960:	f000 f808 	bl	8002974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002964:	f7ff fb5a 	bl	800201c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40022000 	.word	0x40022000

08002974 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_InitTick+0x54>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_InitTick+0x58>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4619      	mov	r1, r3
 8002986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298a:	fbb3 f3f1 	udiv	r3, r3, r1
 800298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002992:	4618      	mov	r0, r3
 8002994:	f002 f8bd 	bl	8004b12 <HAL_SYSTICK_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e00e      	b.n	80029c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	d80a      	bhi.n	80029be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a8:	2200      	movs	r2, #0
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f002 f885 	bl	8004abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b4:	4a06      	ldr	r2, [pc, #24]	; (80029d0 <HAL_InitTick+0x5c>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000018 	.word	0x20000018
 80029cc:	20000020 	.word	0x20000020
 80029d0:	2000001c 	.word	0x2000001c

080029d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_IncTick+0x20>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x24>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <HAL_IncTick+0x24>)
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000020 	.word	0x20000020
 80029f8:	20000780 	.word	0x20000780

080029fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_GetTick+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000780 	.word	0x20000780

08002a14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff ffee 	bl	80029fc <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d005      	beq.n	8002a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_Delay+0x40>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a3a:	bf00      	nop
 8002a3c:	f7ff ffde 	bl	80029fc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d8f7      	bhi.n	8002a3c <HAL_Delay+0x28>
  {
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000020 	.word	0x20000020

08002a58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b09a      	sub	sp, #104	; 0x68
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e1c9      	b.n	8002e48 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d176      	bne.n	8002bb4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d152      	bne.n	8002b74 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fabb 	bl	8002064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d13b      	bne.n	8002b74 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f001 faa3 	bl	8004048 <ADC_Disable>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d12f      	bne.n	8002b74 <HAL_ADC_Init+0xe0>
 8002b14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d12b      	bne.n	8002b74 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b24:	f023 0302 	bic.w	r3, r3, #2
 8002b28:	f043 0202 	orr.w	r2, r3, #2
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b3e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b4e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b50:	4b86      	ldr	r3, [pc, #536]	; (8002d6c <HAL_ADC_Init+0x2d8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a86      	ldr	r2, [pc, #536]	; (8002d70 <HAL_ADC_Init+0x2dc>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0c9a      	lsrs	r2, r3, #18
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b66:	e002      	b.n	8002b6e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f9      	bne.n	8002b68 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b90:	d110      	bne.n	8002bb4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f023 0312 	bic.w	r3, r3, #18
 8002b9a:	f043 0210 	orr.w	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 8136 	bne.w	8002e2e <HAL_ADC_Init+0x39a>
 8002bc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 8131 	bne.w	8002e2e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 8129 	bne.w	8002e2e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002be4:	f043 0202 	orr.w	r2, r3, #2
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf4:	d004      	beq.n	8002c00 <HAL_ADC_Init+0x16c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a5e      	ldr	r2, [pc, #376]	; (8002d74 <HAL_ADC_Init+0x2e0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_Init+0x170>
 8002c00:	4b5d      	ldr	r3, [pc, #372]	; (8002d78 <HAL_ADC_Init+0x2e4>)
 8002c02:	e000      	b.n	8002c06 <HAL_ADC_Init+0x172>
 8002c04:	4b5d      	ldr	r3, [pc, #372]	; (8002d7c <HAL_ADC_Init+0x2e8>)
 8002c06:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c10:	d102      	bne.n	8002c18 <HAL_ADC_Init+0x184>
 8002c12:	4b58      	ldr	r3, [pc, #352]	; (8002d74 <HAL_ADC_Init+0x2e0>)
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e01a      	b.n	8002c4e <HAL_ADC_Init+0x1ba>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a55      	ldr	r2, [pc, #340]	; (8002d74 <HAL_ADC_Init+0x2e0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d103      	bne.n	8002c2a <HAL_ADC_Init+0x196>
 8002c22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e011      	b.n	8002c4e <HAL_ADC_Init+0x1ba>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a54      	ldr	r2, [pc, #336]	; (8002d80 <HAL_ADC_Init+0x2ec>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d102      	bne.n	8002c3a <HAL_ADC_Init+0x1a6>
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_ADC_Init+0x2f0>)
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	e009      	b.n	8002c4e <HAL_ADC_Init+0x1ba>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_ADC_Init+0x2f0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d102      	bne.n	8002c4a <HAL_ADC_Init+0x1b6>
 8002c44:	4b4e      	ldr	r3, [pc, #312]	; (8002d80 <HAL_ADC_Init+0x2ec>)
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e001      	b.n	8002c4e <HAL_ADC_Init+0x1ba>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d108      	bne.n	8002c6e <HAL_ADC_Init+0x1da>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_Init+0x1da>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_ADC_Init+0x1dc>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11c      	bne.n	8002cae <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_ADC_Init+0x202>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x202>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_ADC_Init+0x204>
 8002c96:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d108      	bne.n	8002cae <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cac:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7e5b      	ldrb	r3, [r3, #25]
 8002cb2:	035b      	lsls	r3, r3, #13
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	d002      	beq.n	8002cc2 <HAL_ADC_Init+0x22e>
 8002cbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cc0:	e000      	b.n	8002cc4 <HAL_ADC_Init+0x230>
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d11b      	bne.n	8002d1a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7e5b      	ldrb	r3, [r3, #25]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	045a      	lsls	r2, r3, #17
 8002cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8002cfc:	e00d      	b.n	8002d1a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d03a      	beq.n	8002d98 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a16      	ldr	r2, [pc, #88]	; (8002d80 <HAL_ADC_Init+0x2ec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_Init+0x2a2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_ADC_Init+0x2f0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d128      	bne.n	8002d88 <HAL_ADC_Init+0x2f4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002d3e:	d012      	beq.n	8002d66 <HAL_ADC_Init+0x2d2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d48:	d00a      	beq.n	8002d60 <HAL_ADC_Init+0x2cc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002d52:	d002      	beq.n	8002d5a <HAL_ADC_Init+0x2c6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	e018      	b.n	8002d8c <HAL_ADC_Init+0x2f8>
 8002d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5e:	e015      	b.n	8002d8c <HAL_ADC_Init+0x2f8>
 8002d60:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002d64:	e012      	b.n	8002d8c <HAL_ADC_Init+0x2f8>
 8002d66:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002d6a:	e00f      	b.n	8002d8c <HAL_ADC_Init+0x2f8>
 8002d6c:	20000018 	.word	0x20000018
 8002d70:	431bde83 	.word	0x431bde83
 8002d74:	50000100 	.word	0x50000100
 8002d78:	50000300 	.word	0x50000300
 8002d7c:	50000700 	.word	0x50000700
 8002d80:	50000400 	.word	0x50000400
 8002d84:	50000500 	.word	0x50000500
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d90:	4313      	orrs	r3, r2
 8002d92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d94:	4313      	orrs	r3, r2
 8002d96:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d114      	bne.n	8002dd0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db4:	f023 0302 	bic.w	r3, r3, #2
 8002db8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7e1b      	ldrb	r3, [r3, #24]
 8002dbe:	039a      	lsls	r2, r3, #14
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <HAL_ADC_Init+0x3bc>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002de0:	430b      	orrs	r3, r1
 8002de2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10c      	bne.n	8002e06 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f023 010f 	bic.w	r1, r3, #15
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	1e5a      	subs	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
 8002e04:	e007      	b.n	8002e16 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 020f 	bic.w	r2, r2, #15
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f023 0303 	bic.w	r3, r3, #3
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e2c:	e00a      	b.n	8002e44 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f023 0312 	bic.w	r3, r3, #18
 8002e36:	f043 0210 	orr.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002e44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3768      	adds	r7, #104	; 0x68
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	fff0c007 	.word	0xfff0c007

08002e54 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 8123 	bne.w	80030b6 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_Start_IT+0x2a>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e11e      	b.n	80030bc <HAL_ADC_Start_IT+0x268>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f001 f880 	bl	8003f8c <ADC_Enable>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 810a 	bne.w	80030ac <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb4:	d004      	beq.n	8002ec0 <HAL_ADC_Start_IT+0x6c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a82      	ldr	r2, [pc, #520]	; (80030c4 <HAL_ADC_Start_IT+0x270>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d106      	bne.n	8002ece <HAL_ADC_Start_IT+0x7a>
 8002ec0:	4b81      	ldr	r3, [pc, #516]	; (80030c8 <HAL_ADC_Start_IT+0x274>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_ADC_Start_IT+0x9a>
 8002ecc:	e005      	b.n	8002eda <HAL_ADC_Start_IT+0x86>
 8002ece:	4b7f      	ldr	r3, [pc, #508]	; (80030cc <HAL_ADC_Start_IT+0x278>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_ADC_Start_IT+0x9a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee2:	d004      	beq.n	8002eee <HAL_ADC_Start_IT+0x9a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a79      	ldr	r2, [pc, #484]	; (80030d0 <HAL_ADC_Start_IT+0x27c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d115      	bne.n	8002f1a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d036      	beq.n	8002f76 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002f18:	e02d      	b.n	8002f76 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f2e:	d004      	beq.n	8002f3a <HAL_ADC_Start_IT+0xe6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a63      	ldr	r2, [pc, #396]	; (80030c4 <HAL_ADC_Start_IT+0x270>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10a      	bne.n	8002f50 <HAL_ADC_Start_IT+0xfc>
 8002f3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e008      	b.n	8002f62 <HAL_ADC_Start_IT+0x10e>
 8002f50:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <HAL_ADC_Start_IT+0x27c>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f82:	d106      	bne.n	8002f92 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f023 0206 	bic.w	r2, r3, #6
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44
 8002f90:	e002      	b.n	8002f98 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	221c      	movs	r2, #28
 8002fa6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d110      	bne.n	8002fd2 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0208 	orr.w	r2, r2, #8
 8002fce:	605a      	str	r2, [r3, #4]
          break;
 8002fd0:	e008      	b.n	8002fe4 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 020c 	orr.w	r2, r2, #12
 8002fe0:	605a      	str	r2, [r3, #4]
          break;
 8002fe2:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0210 	bic.w	r2, r2, #16
 8002ffa:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003004:	d004      	beq.n	8003010 <HAL_ADC_Start_IT+0x1bc>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2e      	ldr	r2, [pc, #184]	; (80030c4 <HAL_ADC_Start_IT+0x270>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d106      	bne.n	800301e <HAL_ADC_Start_IT+0x1ca>
 8003010:	4b2d      	ldr	r3, [pc, #180]	; (80030c8 <HAL_ADC_Start_IT+0x274>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2b00      	cmp	r3, #0
 800301a:	d03e      	beq.n	800309a <HAL_ADC_Start_IT+0x246>
 800301c:	e005      	b.n	800302a <HAL_ADC_Start_IT+0x1d6>
 800301e:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_ADC_Start_IT+0x278>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2b00      	cmp	r3, #0
 8003028:	d037      	beq.n	800309a <HAL_ADC_Start_IT+0x246>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003032:	d004      	beq.n	800303e <HAL_ADC_Start_IT+0x1ea>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <HAL_ADC_Start_IT+0x270>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d106      	bne.n	800304c <HAL_ADC_Start_IT+0x1f8>
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_ADC_Start_IT+0x274>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	2b05      	cmp	r3, #5
 8003048:	d027      	beq.n	800309a <HAL_ADC_Start_IT+0x246>
 800304a:	e005      	b.n	8003058 <HAL_ADC_Start_IT+0x204>
 800304c:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <HAL_ADC_Start_IT+0x278>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2b05      	cmp	r3, #5
 8003056:	d020      	beq.n	800309a <HAL_ADC_Start_IT+0x246>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003060:	d004      	beq.n	800306c <HAL_ADC_Start_IT+0x218>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_ADC_Start_IT+0x270>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d106      	bne.n	800307a <HAL_ADC_Start_IT+0x226>
 800306c:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <HAL_ADC_Start_IT+0x274>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2b09      	cmp	r3, #9
 8003076:	d010      	beq.n	800309a <HAL_ADC_Start_IT+0x246>
 8003078:	e005      	b.n	8003086 <HAL_ADC_Start_IT+0x232>
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_ADC_Start_IT+0x278>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	2b09      	cmp	r3, #9
 8003084:	d009      	beq.n	800309a <HAL_ADC_Start_IT+0x246>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800308e:	d004      	beq.n	800309a <HAL_ADC_Start_IT+0x246>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <HAL_ADC_Start_IT+0x27c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d10f      	bne.n	80030ba <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0204 	orr.w	r2, r2, #4
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	e006      	b.n	80030ba <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80030b4:	e001      	b.n	80030ba <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
 80030b8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	50000100 	.word	0x50000100
 80030c8:	50000300 	.word	0x50000300
 80030cc:	50000700 	.word	0x50000700
 80030d0:	50000400 	.word	0x50000400

080030d4 <HAL_ADC_Stop_IT>:
  *         use function @ref HAL_ADCEx_RegularStop_IT().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_Stop_IT+0x1a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e02b      	b.n	8003146 <HAL_ADC_Stop_IT+0x72>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80030f6:	216c      	movs	r1, #108	; 0x6c
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f001 f805 	bl	8004108 <ADC_ConversionStop>
 80030fe:	4603      	mov	r3, r0
 8003100:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d119      	bne.n	800313c <HAL_ADC_Stop_IT+0x68>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 021c 	bic.w	r2, r2, #28
 8003116:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 ff95 	bl	8004048 <ADC_Disable>
 800311e:	4603      	mov	r3, r0
 8003120:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <HAL_ADC_Stop_IT+0x68>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d106      	bne.n	8003198 <HAL_ADC_IRQHandler+0x30>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d00f      	beq.n	80031b8 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	f040 80c0 	bne.w	8003328 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	f040 80b8 	bne.w	8003328 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d8:	d004      	beq.n	80031e4 <HAL_ADC_IRQHandler+0x7c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a95      	ldr	r2, [pc, #596]	; (8003434 <HAL_ADC_IRQHandler+0x2cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d106      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x8a>
 80031e4:	4b94      	ldr	r3, [pc, #592]	; (8003438 <HAL_ADC_IRQHandler+0x2d0>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d03e      	beq.n	800326e <HAL_ADC_IRQHandler+0x106>
 80031f0:	e005      	b.n	80031fe <HAL_ADC_IRQHandler+0x96>
 80031f2:	4b92      	ldr	r3, [pc, #584]	; (800343c <HAL_ADC_IRQHandler+0x2d4>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d037      	beq.n	800326e <HAL_ADC_IRQHandler+0x106>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003206:	d004      	beq.n	8003212 <HAL_ADC_IRQHandler+0xaa>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a89      	ldr	r2, [pc, #548]	; (8003434 <HAL_ADC_IRQHandler+0x2cc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d106      	bne.n	8003220 <HAL_ADC_IRQHandler+0xb8>
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <HAL_ADC_IRQHandler+0x2d0>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2b05      	cmp	r3, #5
 800321c:	d027      	beq.n	800326e <HAL_ADC_IRQHandler+0x106>
 800321e:	e005      	b.n	800322c <HAL_ADC_IRQHandler+0xc4>
 8003220:	4b86      	ldr	r3, [pc, #536]	; (800343c <HAL_ADC_IRQHandler+0x2d4>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2b05      	cmp	r3, #5
 800322a:	d020      	beq.n	800326e <HAL_ADC_IRQHandler+0x106>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003234:	d004      	beq.n	8003240 <HAL_ADC_IRQHandler+0xd8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a7e      	ldr	r2, [pc, #504]	; (8003434 <HAL_ADC_IRQHandler+0x2cc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d106      	bne.n	800324e <HAL_ADC_IRQHandler+0xe6>
 8003240:	4b7d      	ldr	r3, [pc, #500]	; (8003438 <HAL_ADC_IRQHandler+0x2d0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2b09      	cmp	r3, #9
 800324a:	d010      	beq.n	800326e <HAL_ADC_IRQHandler+0x106>
 800324c:	e005      	b.n	800325a <HAL_ADC_IRQHandler+0xf2>
 800324e:	4b7b      	ldr	r3, [pc, #492]	; (800343c <HAL_ADC_IRQHandler+0x2d4>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2b09      	cmp	r3, #9
 8003258:	d009      	beq.n	800326e <HAL_ADC_IRQHandler+0x106>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003262:	d004      	beq.n	800326e <HAL_ADC_IRQHandler+0x106>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a75      	ldr	r2, [pc, #468]	; (8003440 <HAL_ADC_IRQHandler+0x2d8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d104      	bne.n	8003278 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	e00f      	b.n	8003298 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003280:	d004      	beq.n	800328c <HAL_ADC_IRQHandler+0x124>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6b      	ldr	r2, [pc, #428]	; (8003434 <HAL_ADC_IRQHandler+0x2cc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d102      	bne.n	8003292 <HAL_ADC_IRQHandler+0x12a>
 800328c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003290:	e000      	b.n	8003294 <HAL_ADC_IRQHandler+0x12c>
 8003292:	4b6b      	ldr	r3, [pc, #428]	; (8003440 <HAL_ADC_IRQHandler+0x2d8>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d139      	bne.n	800331a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d134      	bne.n	800331a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d12d      	bne.n	800331a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11a      	bne.n	8003302 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 020c 	bic.w	r2, r2, #12
 80032da:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d112      	bne.n	800331a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f043 0201 	orr.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003300:	e00b      	b.n	800331a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f043 0201 	orr.w	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff fb9c 	bl	8002a58 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	220c      	movs	r2, #12
 8003326:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b20      	cmp	r3, #32
 8003334:	d106      	bne.n	8003344 <HAL_ADC_IRQHandler+0x1dc>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b20      	cmp	r3, #32
 8003342:	d00f      	beq.n	8003364 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	f040 813c 	bne.w	80035cc <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	f040 8134 	bne.w	80035cc <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003378:	d004      	beq.n	8003384 <HAL_ADC_IRQHandler+0x21c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <HAL_ADC_IRQHandler+0x2cc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d106      	bne.n	8003392 <HAL_ADC_IRQHandler+0x22a>
 8003384:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <HAL_ADC_IRQHandler+0x2d0>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2b00      	cmp	r3, #0
 800338e:	d03e      	beq.n	800340e <HAL_ADC_IRQHandler+0x2a6>
 8003390:	e005      	b.n	800339e <HAL_ADC_IRQHandler+0x236>
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <HAL_ADC_IRQHandler+0x2d4>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	2b00      	cmp	r3, #0
 800339c:	d037      	beq.n	800340e <HAL_ADC_IRQHandler+0x2a6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033a6:	d004      	beq.n	80033b2 <HAL_ADC_IRQHandler+0x24a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a21      	ldr	r2, [pc, #132]	; (8003434 <HAL_ADC_IRQHandler+0x2cc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d106      	bne.n	80033c0 <HAL_ADC_IRQHandler+0x258>
 80033b2:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_ADC_IRQHandler+0x2d0>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d027      	beq.n	800340e <HAL_ADC_IRQHandler+0x2a6>
 80033be:	e005      	b.n	80033cc <HAL_ADC_IRQHandler+0x264>
 80033c0:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_ADC_IRQHandler+0x2d4>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d020      	beq.n	800340e <HAL_ADC_IRQHandler+0x2a6>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d4:	d004      	beq.n	80033e0 <HAL_ADC_IRQHandler+0x278>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a16      	ldr	r2, [pc, #88]	; (8003434 <HAL_ADC_IRQHandler+0x2cc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d106      	bne.n	80033ee <HAL_ADC_IRQHandler+0x286>
 80033e0:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_ADC_IRQHandler+0x2d0>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2b09      	cmp	r3, #9
 80033ea:	d010      	beq.n	800340e <HAL_ADC_IRQHandler+0x2a6>
 80033ec:	e005      	b.n	80033fa <HAL_ADC_IRQHandler+0x292>
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_ADC_IRQHandler+0x2d4>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	2b09      	cmp	r3, #9
 80033f8:	d009      	beq.n	800340e <HAL_ADC_IRQHandler+0x2a6>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003402:	d004      	beq.n	800340e <HAL_ADC_IRQHandler+0x2a6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <HAL_ADC_IRQHandler+0x2d8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d104      	bne.n	8003418 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	e018      	b.n	800344a <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003420:	d004      	beq.n	800342c <HAL_ADC_IRQHandler+0x2c4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_ADC_IRQHandler+0x2cc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10b      	bne.n	8003444 <HAL_ADC_IRQHandler+0x2dc>
 800342c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003430:	e009      	b.n	8003446 <HAL_ADC_IRQHandler+0x2de>
 8003432:	bf00      	nop
 8003434:	50000100 	.word	0x50000100
 8003438:	50000300 	.word	0x50000300
 800343c:	50000700 	.word	0x50000700
 8003440:	50000400 	.word	0x50000400
 8003444:	4b9d      	ldr	r3, [pc, #628]	; (80036bc <HAL_ADC_IRQHandler+0x554>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 80ad 	bne.w	80035be <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800346e:	2b00      	cmp	r3, #0
 8003470:	f040 80a5 	bne.w	80035be <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 809f 	bne.w	80035be <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b40      	cmp	r3, #64	; 0x40
 800348c:	f040 8097 	bne.w	80035be <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003498:	d004      	beq.n	80034a4 <HAL_ADC_IRQHandler+0x33c>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a88      	ldr	r2, [pc, #544]	; (80036c0 <HAL_ADC_IRQHandler+0x558>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d106      	bne.n	80034b2 <HAL_ADC_IRQHandler+0x34a>
 80034a4:	4b87      	ldr	r3, [pc, #540]	; (80036c4 <HAL_ADC_IRQHandler+0x55c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03e      	beq.n	800352e <HAL_ADC_IRQHandler+0x3c6>
 80034b0:	e005      	b.n	80034be <HAL_ADC_IRQHandler+0x356>
 80034b2:	4b85      	ldr	r3, [pc, #532]	; (80036c8 <HAL_ADC_IRQHandler+0x560>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d037      	beq.n	800352e <HAL_ADC_IRQHandler+0x3c6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c6:	d004      	beq.n	80034d2 <HAL_ADC_IRQHandler+0x36a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a7c      	ldr	r2, [pc, #496]	; (80036c0 <HAL_ADC_IRQHandler+0x558>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d106      	bne.n	80034e0 <HAL_ADC_IRQHandler+0x378>
 80034d2:	4b7c      	ldr	r3, [pc, #496]	; (80036c4 <HAL_ADC_IRQHandler+0x55c>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d027      	beq.n	800352e <HAL_ADC_IRQHandler+0x3c6>
 80034de:	e005      	b.n	80034ec <HAL_ADC_IRQHandler+0x384>
 80034e0:	4b79      	ldr	r3, [pc, #484]	; (80036c8 <HAL_ADC_IRQHandler+0x560>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d020      	beq.n	800352e <HAL_ADC_IRQHandler+0x3c6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f4:	d004      	beq.n	8003500 <HAL_ADC_IRQHandler+0x398>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a71      	ldr	r2, [pc, #452]	; (80036c0 <HAL_ADC_IRQHandler+0x558>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d106      	bne.n	800350e <HAL_ADC_IRQHandler+0x3a6>
 8003500:	4b70      	ldr	r3, [pc, #448]	; (80036c4 <HAL_ADC_IRQHandler+0x55c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2b07      	cmp	r3, #7
 800350a:	d010      	beq.n	800352e <HAL_ADC_IRQHandler+0x3c6>
 800350c:	e005      	b.n	800351a <HAL_ADC_IRQHandler+0x3b2>
 800350e:	4b6e      	ldr	r3, [pc, #440]	; (80036c8 <HAL_ADC_IRQHandler+0x560>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2b07      	cmp	r3, #7
 8003518:	d009      	beq.n	800352e <HAL_ADC_IRQHandler+0x3c6>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003522:	d004      	beq.n	800352e <HAL_ADC_IRQHandler+0x3c6>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a64      	ldr	r2, [pc, #400]	; (80036bc <HAL_ADC_IRQHandler+0x554>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d104      	bne.n	8003538 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e00f      	b.n	8003558 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003540:	d004      	beq.n	800354c <HAL_ADC_IRQHandler+0x3e4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a5e      	ldr	r2, [pc, #376]	; (80036c0 <HAL_ADC_IRQHandler+0x558>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d102      	bne.n	8003552 <HAL_ADC_IRQHandler+0x3ea>
 800354c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003550:	e000      	b.n	8003554 <HAL_ADC_IRQHandler+0x3ec>
 8003552:	4b5a      	ldr	r3, [pc, #360]	; (80036bc <HAL_ADC_IRQHandler+0x554>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d12d      	bne.n	80035be <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11a      	bne.n	80035a6 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800357e:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d112      	bne.n	80035be <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f043 0201 	orr.w	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
 80035a4:	e00b      	b.n	80035be <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f043 0210 	orr.w	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f043 0201 	orr.w	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8de 	bl	8003780 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2260      	movs	r2, #96	; 0x60
 80035ca:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b80      	cmp	r3, #128	; 0x80
 80035d8:	d113      	bne.n	8003602 <HAL_ADC_IRQHandler+0x49a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d10c      	bne.n	8003602 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff fa39 	bl	8002a6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003610:	d115      	bne.n	800363e <HAL_ADC_IRQHandler+0x4d6>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003620:	d10d      	bne.n	800363e <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8ba 	bl	80037a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364c:	d115      	bne.n	800367a <HAL_ADC_IRQHandler+0x512>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d10d      	bne.n	800367a <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8a6 	bl	80037bc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003678:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b10      	cmp	r3, #16
 8003686:	d151      	bne.n	800372c <HAL_ADC_IRQHandler+0x5c4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b10      	cmp	r3, #16
 8003694:	d14a      	bne.n	800372c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	2b01      	cmp	r3, #1
 800369c:	d102      	bne.n	80036a4 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800369e:	2301      	movs	r3, #1
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e02d      	b.n	8003700 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ac:	d004      	beq.n	80036b8 <HAL_ADC_IRQHandler+0x550>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a03      	ldr	r2, [pc, #12]	; (80036c0 <HAL_ADC_IRQHandler+0x558>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d109      	bne.n	80036cc <HAL_ADC_IRQHandler+0x564>
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <HAL_ADC_IRQHandler+0x55c>)
 80036ba:	e008      	b.n	80036ce <HAL_ADC_IRQHandler+0x566>
 80036bc:	50000400 	.word	0x50000400
 80036c0:	50000100 	.word	0x50000100
 80036c4:	50000300 	.word	0x50000300
 80036c8:	50000700 	.word	0x50000700
 80036cc:	4b2b      	ldr	r3, [pc, #172]	; (800377c <HAL_ADC_IRQHandler+0x614>)
 80036ce:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10a      	bne.n	8003700 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80036ea:	2301      	movs	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e007      	b.n	8003700 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80036fc:	2301      	movs	r3, #1
 80036fe:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10e      	bne.n	8003724 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f043 0202 	orr.w	r2, r3, #2
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff f9ae 	bl	8002a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2210      	movs	r2, #16
 800372a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373a:	d11b      	bne.n	8003774 <HAL_ADC_IRQHandler+0x60c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374a:	d113      	bne.n	8003774 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	f043 0208 	orr.w	r2, r3, #8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800376c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f810 	bl	8003794 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003774:	bf00      	nop
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	50000700 	.word	0x50000700

08003780 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b09b      	sub	sp, #108	; 0x6c
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x22>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e2cb      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x5ba>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 82af 	bne.w	8003d68 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d81c      	bhi.n	800384c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	461a      	mov	r2, r3
 8003826:	231f      	movs	r3, #31
 8003828:	4093      	lsls	r3, r2
 800382a:	43db      	mvns	r3, r3
 800382c:	4019      	ands	r1, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa00 f203 	lsl.w	r2, r0, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
 800384a:	e063      	b.n	8003914 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b09      	cmp	r3, #9
 8003852:	d81e      	bhi.n	8003892 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	3b1e      	subs	r3, #30
 8003868:	221f      	movs	r2, #31
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	4019      	ands	r1, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	3b1e      	subs	r3, #30
 8003884:	fa00 f203 	lsl.w	r2, r0, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	635a      	str	r2, [r3, #52]	; 0x34
 8003890:	e040      	b.n	8003914 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b0e      	cmp	r3, #14
 8003898:	d81e      	bhi.n	80038d8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	3b3c      	subs	r3, #60	; 0x3c
 80038ae:	221f      	movs	r2, #31
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	4019      	ands	r1, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	3b3c      	subs	r3, #60	; 0x3c
 80038ca:	fa00 f203 	lsl.w	r2, r0, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
 80038d6:	e01d      	b.n	8003914 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	3b5a      	subs	r3, #90	; 0x5a
 80038ec:	221f      	movs	r2, #31
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	4019      	ands	r1, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	3b5a      	subs	r3, #90	; 0x5a
 8003908:	fa00 f203 	lsl.w	r2, r0, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 80e5 	bne.w	8003aee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b09      	cmp	r3, #9
 800392a:	d91c      	bls.n	8003966 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6999      	ldr	r1, [r3, #24]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4413      	add	r3, r2
 800393c:	3b1e      	subs	r3, #30
 800393e:	2207      	movs	r2, #7
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	4019      	ands	r1, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6898      	ldr	r0, [r3, #8]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	3b1e      	subs	r3, #30
 8003958:	fa00 f203 	lsl.w	r2, r0, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	619a      	str	r2, [r3, #24]
 8003964:	e019      	b.n	800399a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6959      	ldr	r1, [r3, #20]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4413      	add	r3, r2
 8003976:	2207      	movs	r2, #7
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	4019      	ands	r1, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6898      	ldr	r0, [r3, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	4413      	add	r3, r2
 800398e:	fa00 f203 	lsl.w	r2, r0, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d84f      	bhi.n	8003a5c <HAL_ADC_ConfigChannel+0x28c>
 80039bc:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039d5 	.word	0x080039d5
 80039c8:	080039f7 	.word	0x080039f7
 80039cc:	08003a19 	.word	0x08003a19
 80039d0:	08003a3b 	.word	0x08003a3b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039da:	4b9f      	ldr	r3, [pc, #636]	; (8003c58 <HAL_ADC_ConfigChannel+0x488>)
 80039dc:	4013      	ands	r3, r2
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	0691      	lsls	r1, r2, #26
 80039e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039e6:	430a      	orrs	r2, r1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80039f4:	e07e      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039fc:	4b96      	ldr	r3, [pc, #600]	; (8003c58 <HAL_ADC_ConfigChannel+0x488>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	0691      	lsls	r1, r2, #26
 8003a06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a14:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a16:	e06d      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a1e:	4b8e      	ldr	r3, [pc, #568]	; (8003c58 <HAL_ADC_ConfigChannel+0x488>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	6812      	ldr	r2, [r2, #0]
 8003a26:	0691      	lsls	r1, r2, #26
 8003a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a36:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a38:	e05c      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a40:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_ADC_ConfigChannel+0x488>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	0691      	lsls	r1, r2, #26
 8003a4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a58:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a5a:	e04b      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	069b      	lsls	r3, r3, #26
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d107      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	069b      	lsls	r3, r3, #26
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d107      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aa2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	069b      	lsls	r3, r3, #26
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d107      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ac6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ace:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	069b      	lsls	r3, r3, #26
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d10a      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003aec:	e001      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003aee:	bf00      	nop
 8003af0:	e000      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003af2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d108      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x344>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x344>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x346>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 8131 	bne.w	8003d7e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d00f      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43da      	mvns	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003b42:	e049      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	409a      	lsls	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b09      	cmp	r3, #9
 8003b64:	d91c      	bls.n	8003ba0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6999      	ldr	r1, [r3, #24]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	3b1b      	subs	r3, #27
 8003b78:	2207      	movs	r2, #7
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	4019      	ands	r1, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6898      	ldr	r0, [r3, #8]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	3b1b      	subs	r3, #27
 8003b92:	fa00 f203 	lsl.w	r2, r0, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	619a      	str	r2, [r3, #24]
 8003b9e:	e01b      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6959      	ldr	r1, [r3, #20]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	4019      	ands	r1, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6898      	ldr	r0, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	fa00 f203 	lsl.w	r2, r0, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be0:	d004      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x41c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <HAL_ADC_ConfigChannel+0x48c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x420>
 8003bec:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_ADC_ConfigChannel+0x490>)
 8003bee:	e000      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x422>
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_ADC_ConfigChannel+0x494>)
 8003bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d105      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d015      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c0c:	2b11      	cmp	r3, #17
 8003c0e:	d105      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c20:	2b12      	cmp	r3, #18
 8003c22:	f040 80ac 	bne.w	8003d7e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 80a5 	bne.w	8003d7e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c3c:	d102      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x474>
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_ADC_ConfigChannel+0x48c>)
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e023      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x4bc>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <HAL_ADC_ConfigChannel+0x48c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10c      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x498>
 8003c4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e01a      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x4bc>
 8003c56:	bf00      	nop
 8003c58:	83fff000 	.word	0x83fff000
 8003c5c:	50000100 	.word	0x50000100
 8003c60:	50000300 	.word	0x50000300
 8003c64:	50000700 	.word	0x50000700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a4a      	ldr	r2, [pc, #296]	; (8003d98 <HAL_ADC_ConfigChannel+0x5c8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d102      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x4a8>
 8003c72:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <HAL_ADC_ConfigChannel+0x5cc>)
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e009      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x4bc>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a47      	ldr	r2, [pc, #284]	; (8003d9c <HAL_ADC_ConfigChannel+0x5cc>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d102      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x4b8>
 8003c82:	4b45      	ldr	r3, [pc, #276]	; (8003d98 <HAL_ADC_ConfigChannel+0x5c8>)
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e001      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x4bc>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x4dc>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x4dc>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_ADC_ConfigChannel+0x4de>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d150      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003cb2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d010      	beq.n	8003cda <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d107      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x504>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x504>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x506>
 8003cd4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d13c      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d11d      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x54e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cea:	d118      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_ADC_ConfigChannel+0x5d0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <HAL_ADC_ConfigChannel+0x5d4>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	0c9a      	lsrs	r2, r3, #18
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d0e:	e002      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f9      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d1c:	e02e      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b11      	cmp	r3, #17
 8003d24:	d10b      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x56e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d2e:	d106      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d3c:	e01e      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b12      	cmp	r3, #18
 8003d44:	d11a      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d50:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d52:	e013      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d66:	e00a      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d7a:	e000      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d7c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	376c      	adds	r7, #108	; 0x6c
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	50000400 	.word	0x50000400
 8003d9c:	50000500 	.word	0x50000500
 8003da0:	20000018 	.word	0x20000018
 8003da4:	431bde83 	.word	0x431bde83

08003da8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b099      	sub	sp, #100	; 0x64
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc0:	d102      	bne.n	8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003dc2:	4b6d      	ldr	r3, [pc, #436]	; (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	e01a      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	; (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d103      	bne.n	8003dda <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003dd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	e011      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a67      	ldr	r2, [pc, #412]	; (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d102      	bne.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003de4:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	e009      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a64      	ldr	r2, [pc, #400]	; (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d102      	bne.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003df4:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	e001      	b.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b0      	b.n	8003f6a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e0a9      	b.n	8003f6a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f040 808d 	bne.w	8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 8086 	bne.w	8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e44:	d004      	beq.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4b      	ldr	r2, [pc, #300]	; (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e50:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003e52:	e000      	b.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003e54:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003e56:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d040      	beq.n	8003ee2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e72:	035b      	lsls	r3, r3, #13
 8003e74:	430b      	orrs	r3, r1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e7a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d108      	bne.n	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d15c      	bne.n	8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d107      	bne.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003ebe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d14b      	bne.n	8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ecc:	f023 030f 	bic.w	r3, r3, #15
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	6811      	ldr	r1, [r2, #0]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	6892      	ldr	r2, [r2, #8]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	431a      	orrs	r2, r3
 8003edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ede:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ee0:	e03c      	b.n	8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eec:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d108      	bne.n	8003f0e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d123      	bne.n	8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003f30:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d112      	bne.n	8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f3e:	f023 030f 	bic.w	r3, r3, #15
 8003f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f44:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f46:	e009      	b.n	8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003f5a:	e000      	b.n	8003f5e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f5c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3764      	adds	r7, #100	; 0x64
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	50000100 	.word	0x50000100
 8003f7c:	50000400 	.word	0x50000400
 8003f80:	50000500 	.word	0x50000500
 8003f84:	50000300 	.word	0x50000300
 8003f88:	50000700 	.word	0x50000700

08003f8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d108      	bne.n	8003fb8 <ADC_Enable+0x2c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <ADC_Enable+0x2c>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <ADC_Enable+0x2e>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d13c      	bne.n	8004038 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	4b1f      	ldr	r3, [pc, #124]	; (8004044 <ADC_Enable+0xb8>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f043 0210 	orr.w	r2, r3, #16
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e028      	b.n	800403a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003ff8:	f7fe fd00 	bl	80029fc <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ffe:	e014      	b.n	800402a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004000:	f7fe fcfc 	bl	80029fc <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d90d      	bls.n	800402a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0210 	orr.w	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e007      	b.n	800403a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d1e3      	bne.n	8004000 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	8000003f 	.word	0x8000003f

08004048 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d108      	bne.n	8004074 <ADC_Disable+0x2c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <ADC_Disable+0x2c>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <ADC_Disable+0x2e>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d040      	beq.n	80040fc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030d 	and.w	r3, r3, #13
 8004084:	2b01      	cmp	r3, #1
 8004086:	d10f      	bne.n	80040a8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0202 	orr.w	r2, r2, #2
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2203      	movs	r2, #3
 800409e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80040a0:	f7fe fcac 	bl	80029fc <HAL_GetTick>
 80040a4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040a6:	e022      	b.n	80040ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f043 0210 	orr.w	r2, r3, #16
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e01c      	b.n	80040fe <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040c4:	f7fe fc9a 	bl	80029fc <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d90d      	bls.n	80040ee <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0210 	orr.w	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f043 0201 	orr.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e007      	b.n	80040fe <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d0e3      	beq.n	80040c4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8093 	beq.w	8004254 <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800413c:	d12a      	bne.n	8004194 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004142:	2b01      	cmp	r3, #1
 8004144:	d126      	bne.n	8004194 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800414a:	2b01      	cmp	r3, #1
 800414c:	d122      	bne.n	8004194 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800414e:	230c      	movs	r3, #12
 8004150:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004152:	e014      	b.n	800417e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4a42      	ldr	r2, [pc, #264]	; (8004260 <ADC_ConversionStop+0x158>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d90d      	bls.n	8004178 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f043 0210 	orr.w	r2, r3, #16
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	f043 0201 	orr.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e06e      	b.n	8004256 <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	3301      	adds	r3, #1
 800417c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d1e3      	bne.n	8004154 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2240      	movs	r2, #64	; 0x40
 8004192:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b60      	cmp	r3, #96	; 0x60
 8004198:	d015      	beq.n	80041c6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d10e      	bne.n	80041c6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0210 	orr.w	r2, r2, #16
 80041c4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d015      	beq.n	80041f8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d10e      	bne.n	80041f8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0220 	orr.w	r2, r2, #32
 80041f6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b60      	cmp	r3, #96	; 0x60
 80041fc:	d004      	beq.n	8004208 <ADC_ConversionStop+0x100>
 80041fe:	2b6c      	cmp	r3, #108	; 0x6c
 8004200:	d105      	bne.n	800420e <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004202:	230c      	movs	r3, #12
 8004204:	617b      	str	r3, [r7, #20]
        break;
 8004206:	e005      	b.n	8004214 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004208:	2308      	movs	r3, #8
 800420a:	617b      	str	r3, [r7, #20]
        break;
 800420c:	e002      	b.n	8004214 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800420e:	2304      	movs	r3, #4
 8004210:	617b      	str	r3, [r7, #20]
        break;
 8004212:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004214:	f7fe fbf2 	bl	80029fc <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800421a:	e014      	b.n	8004246 <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800421c:	f7fe fbee 	bl	80029fc <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b0b      	cmp	r3, #11
 8004228:	d90d      	bls.n	8004246 <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f043 0210 	orr.w	r2, r3, #16
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f043 0201 	orr.w	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e007      	b.n	8004256 <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	000993ff 	.word	0x000993ff

08004264 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <HAL_COMP_Init+0x22>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
 800428a:	e064      	b.n	8004356 <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428c:	4b34      	ldr	r3, [pc, #208]	; (8004360 <HAL_COMP_Init+0xfc>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	4a33      	ldr	r2, [pc, #204]	; (8004360 <HAL_COMP_Init+0xfc>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	6193      	str	r3, [r2, #24]
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_COMP_Init+0xfc>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fd ff6b 	bl	8002180 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d103      	bne.n	80042be <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f023 020c 	bic.w	r2, r3, #12
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8004356:	7dfb      	ldrb	r3, [r7, #23]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000

08004364 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_COMP_Stop+0x22>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_COMP_Stop+0x28>
  {
    status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	e09d      	b.n	80044c8 <HAL_COMP_Stop+0x164>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_BUSY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	f040 8095 	bne.w	80044c4 <HAL_COMP_Stop+0x160>
    {
      /* Disable the EXTI Line event mode if any */
      COMP_EXTI_DISABLE_EVENT(COMP_GET_EXTI_LINE(hcomp->Instance));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a4e      	ldr	r2, [pc, #312]	; (80044d8 <HAL_COMP_Stop+0x174>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d04b      	beq.n	800443c <HAL_COMP_Stop+0xd8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a4c      	ldr	r2, [pc, #304]	; (80044dc <HAL_COMP_Stop+0x178>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d046      	beq.n	800443c <HAL_COMP_Stop+0xd8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4b      	ldr	r2, [pc, #300]	; (80044e0 <HAL_COMP_Stop+0x17c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d041      	beq.n	800443c <HAL_COMP_Stop+0xd8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a49      	ldr	r2, [pc, #292]	; (80044e4 <HAL_COMP_Stop+0x180>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d03c      	beq.n	800443c <HAL_COMP_Stop+0xd8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a48      	ldr	r2, [pc, #288]	; (80044e8 <HAL_COMP_Stop+0x184>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d037      	beq.n	800443c <HAL_COMP_Stop+0xd8>
 80043cc:	4b47      	ldr	r3, [pc, #284]	; (80044ec <HAL_COMP_Stop+0x188>)
 80043ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4940      	ldr	r1, [pc, #256]	; (80044d8 <HAL_COMP_Stop+0x174>)
 80043d6:	428b      	cmp	r3, r1
 80043d8:	d02a      	beq.n	8004430 <HAL_COMP_Stop+0xcc>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	493f      	ldr	r1, [pc, #252]	; (80044dc <HAL_COMP_Stop+0x178>)
 80043e0:	428b      	cmp	r3, r1
 80043e2:	d022      	beq.n	800442a <HAL_COMP_Stop+0xc6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	493d      	ldr	r1, [pc, #244]	; (80044e0 <HAL_COMP_Stop+0x17c>)
 80043ea:	428b      	cmp	r3, r1
 80043ec:	d01a      	beq.n	8004424 <HAL_COMP_Stop+0xc0>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	493c      	ldr	r1, [pc, #240]	; (80044e4 <HAL_COMP_Stop+0x180>)
 80043f4:	428b      	cmp	r3, r1
 80043f6:	d012      	beq.n	800441e <HAL_COMP_Stop+0xba>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	493a      	ldr	r1, [pc, #232]	; (80044e8 <HAL_COMP_Stop+0x184>)
 80043fe:	428b      	cmp	r3, r1
 8004400:	d00a      	beq.n	8004418 <HAL_COMP_Stop+0xb4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	493a      	ldr	r1, [pc, #232]	; (80044f0 <HAL_COMP_Stop+0x18c>)
 8004408:	428b      	cmp	r3, r1
 800440a:	d102      	bne.n	8004412 <HAL_COMP_Stop+0xae>
 800440c:	f06f 0301 	mvn.w	r3, #1
 8004410:	e010      	b.n	8004434 <HAL_COMP_Stop+0xd0>
 8004412:	f06f 0302 	mvn.w	r3, #2
 8004416:	e00d      	b.n	8004434 <HAL_COMP_Stop+0xd0>
 8004418:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800441c:	e00a      	b.n	8004434 <HAL_COMP_Stop+0xd0>
 800441e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004422:	e007      	b.n	8004434 <HAL_COMP_Stop+0xd0>
 8004424:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004428:	e004      	b.n	8004434 <HAL_COMP_Stop+0xd0>
 800442a:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 800442e:	e001      	b.n	8004434 <HAL_COMP_Stop+0xd0>
 8004430:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004434:	492d      	ldr	r1, [pc, #180]	; (80044ec <HAL_COMP_Stop+0x188>)
 8004436:	4013      	ands	r3, r2
 8004438:	624b      	str	r3, [r1, #36]	; 0x24
 800443a:	e036      	b.n	80044aa <HAL_COMP_Stop+0x146>
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_COMP_Stop+0x188>)
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4924      	ldr	r1, [pc, #144]	; (80044d8 <HAL_COMP_Stop+0x174>)
 8004446:	428b      	cmp	r3, r1
 8004448:	d02a      	beq.n	80044a0 <HAL_COMP_Stop+0x13c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4923      	ldr	r1, [pc, #140]	; (80044dc <HAL_COMP_Stop+0x178>)
 8004450:	428b      	cmp	r3, r1
 8004452:	d022      	beq.n	800449a <HAL_COMP_Stop+0x136>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4921      	ldr	r1, [pc, #132]	; (80044e0 <HAL_COMP_Stop+0x17c>)
 800445a:	428b      	cmp	r3, r1
 800445c:	d01a      	beq.n	8004494 <HAL_COMP_Stop+0x130>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4920      	ldr	r1, [pc, #128]	; (80044e4 <HAL_COMP_Stop+0x180>)
 8004464:	428b      	cmp	r3, r1
 8004466:	d012      	beq.n	800448e <HAL_COMP_Stop+0x12a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	491e      	ldr	r1, [pc, #120]	; (80044e8 <HAL_COMP_Stop+0x184>)
 800446e:	428b      	cmp	r3, r1
 8004470:	d00a      	beq.n	8004488 <HAL_COMP_Stop+0x124>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	491e      	ldr	r1, [pc, #120]	; (80044f0 <HAL_COMP_Stop+0x18c>)
 8004478:	428b      	cmp	r3, r1
 800447a:	d102      	bne.n	8004482 <HAL_COMP_Stop+0x11e>
 800447c:	f06f 0301 	mvn.w	r3, #1
 8004480:	e010      	b.n	80044a4 <HAL_COMP_Stop+0x140>
 8004482:	f06f 0302 	mvn.w	r3, #2
 8004486:	e00d      	b.n	80044a4 <HAL_COMP_Stop+0x140>
 8004488:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800448c:	e00a      	b.n	80044a4 <HAL_COMP_Stop+0x140>
 800448e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004492:	e007      	b.n	80044a4 <HAL_COMP_Stop+0x140>
 8004494:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004498:	e004      	b.n	80044a4 <HAL_COMP_Stop+0x140>
 800449a:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 800449e:	e001      	b.n	80044a4 <HAL_COMP_Stop+0x140>
 80044a0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80044a4:	4911      	ldr	r1, [pc, #68]	; (80044ec <HAL_COMP_Stop+0x188>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]

      /* Disable the selected comparator */
      __HAL_COMP_DISABLE(hcomp);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80044c2:	e001      	b.n	80044c8 <HAL_COMP_Stop+0x164>
    }
    else
    {
      status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	4001001c 	.word	0x4001001c
 80044dc:	40010020 	.word	0x40010020
 80044e0:	40010024 	.word	0x40010024
 80044e4:	40010028 	.word	0x40010028
 80044e8:	4001002c 	.word	0x4001002c
 80044ec:	40010400 	.word	0x40010400
 80044f0:	40010030 	.word	0x40010030

080044f4 <HAL_COMP_Start_IT>:
  * @brief  Start the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <HAL_COMP_Start_IT+0x26>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_COMP_Start_IT+0x2c>
  {
    status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	e0c8      	b.n	80046b2 <HAL_COMP_Start_IT+0x1be>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	f040 80c0 	bne.w	80046ae <HAL_COMP_Start_IT+0x1ba>
    {
      /* Configure the EXTI event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_IT_RISING | COMP_TRIGGERMODE_IT_FALLING)) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80b6 	beq.w	80046a8 <HAL_COMP_Start_IT+0x1b4>
      {
        /* Get the EXTI Line output configuration */
        extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a5f      	ldr	r2, [pc, #380]	; (80046c0 <HAL_COMP_Start_IT+0x1cc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d028      	beq.n	8004598 <HAL_COMP_Start_IT+0xa4>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a5e      	ldr	r2, [pc, #376]	; (80046c4 <HAL_COMP_Start_IT+0x1d0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d020      	beq.n	8004592 <HAL_COMP_Start_IT+0x9e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a5c      	ldr	r2, [pc, #368]	; (80046c8 <HAL_COMP_Start_IT+0x1d4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d018      	beq.n	800458c <HAL_COMP_Start_IT+0x98>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a5b      	ldr	r2, [pc, #364]	; (80046cc <HAL_COMP_Start_IT+0x1d8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d010      	beq.n	8004586 <HAL_COMP_Start_IT+0x92>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a59      	ldr	r2, [pc, #356]	; (80046d0 <HAL_COMP_Start_IT+0x1dc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d008      	beq.n	8004580 <HAL_COMP_Start_IT+0x8c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a58      	ldr	r2, [pc, #352]	; (80046d4 <HAL_COMP_Start_IT+0x1e0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d101      	bne.n	800457c <HAL_COMP_Start_IT+0x88>
 8004578:	2301      	movs	r3, #1
 800457a:	e00f      	b.n	800459c <HAL_COMP_Start_IT+0xa8>
 800457c:	2302      	movs	r3, #2
 800457e:	e00d      	b.n	800459c <HAL_COMP_Start_IT+0xa8>
 8004580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004584:	e00a      	b.n	800459c <HAL_COMP_Start_IT+0xa8>
 8004586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800458a:	e007      	b.n	800459c <HAL_COMP_Start_IT+0xa8>
 800458c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004590:	e004      	b.n	800459c <HAL_COMP_Start_IT+0xa8>
 8004592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004596:	e001      	b.n	800459c <HAL_COMP_Start_IT+0xa8>
 8004598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800459c:	60bb      	str	r3, [r7, #8]

        /* Configure the trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d012      	beq.n	80045d0 <HAL_COMP_Start_IT+0xdc>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <HAL_COMP_Start_IT+0xce>
 80045b4:	4b48      	ldr	r3, [pc, #288]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 80045b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b8:	4947      	ldr	r1, [pc, #284]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4313      	orrs	r3, r2
 80045be:	628b      	str	r3, [r1, #40]	; 0x28
 80045c0:	e01a      	b.n	80045f8 <HAL_COMP_Start_IT+0x104>
 80045c2:	4b45      	ldr	r3, [pc, #276]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	4944      	ldr	r1, [pc, #272]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
 80045ce:	e013      	b.n	80045f8 <HAL_COMP_Start_IT+0x104>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_COMP_Start_IT+0xf6>
 80045da:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 80045dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	493d      	ldr	r1, [pc, #244]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	628b      	str	r3, [r1, #40]	; 0x28
 80045e8:	e006      	b.n	80045f8 <HAL_COMP_Start_IT+0x104>
 80045ea:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	4939      	ldr	r1, [pc, #228]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]
        }
        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d012      	beq.n	800462a <HAL_COMP_Start_IT+0x136>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <HAL_COMP_Start_IT+0x128>
 800460e:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 8004610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004612:	4931      	ldr	r1, [pc, #196]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4313      	orrs	r3, r2
 8004618:	62cb      	str	r3, [r1, #44]	; 0x2c
 800461a:	e01a      	b.n	8004652 <HAL_COMP_Start_IT+0x15e>
 800461c:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	492d      	ldr	r1, [pc, #180]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4313      	orrs	r3, r2
 8004626:	60cb      	str	r3, [r1, #12]
 8004628:	e013      	b.n	8004652 <HAL_COMP_Start_IT+0x15e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_COMP_Start_IT+0x150>
 8004634:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 8004636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	43db      	mvns	r3, r3
 800463c:	4926      	ldr	r1, [pc, #152]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 800463e:	4013      	ands	r3, r2
 8004640:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004642:	e006      	b.n	8004652 <HAL_COMP_Start_IT+0x15e>
 8004644:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	43db      	mvns	r3, r3
 800464c:	4922      	ldr	r1, [pc, #136]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 800464e:	4013      	ands	r3, r2
 8004650:	60cb      	str	r3, [r1, #12]
        }

        /* Clear COMP EXTI pending bit if any */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_COMP_Start_IT+0x170>
 800465c:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6353      	str	r3, [r2, #52]	; 0x34
 8004662:	e002      	b.n	800466a <HAL_COMP_Start_IT+0x176>
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6153      	str	r3, [r2, #20]

        /* Enable EXTI interrupt mode */
        COMP_EXTI_ENABLE_IT(extiline);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <HAL_COMP_Start_IT+0x18e>
 8004674:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 8004676:	6a1a      	ldr	r2, [r3, #32]
 8004678:	4917      	ldr	r1, [pc, #92]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4313      	orrs	r3, r2
 800467e:	620b      	str	r3, [r1, #32]
 8004680:	e005      	b.n	800468e <HAL_COMP_Start_IT+0x19a>
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	4914      	ldr	r1, [pc, #80]	; (80046d8 <HAL_COMP_Start_IT+0x1e4>)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

        /* Enable the selected comparator */
        __HAL_COMP_ENABLE(hcomp);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        hcomp->State = HAL_COMP_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80046a6:	e004      	b.n	80046b2 <HAL_COMP_Start_IT+0x1be>
      }
      else
      {
        status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
 80046ac:	e001      	b.n	80046b2 <HAL_COMP_Start_IT+0x1be>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	4001001c 	.word	0x4001001c
 80046c4:	40010020 	.word	0x40010020
 80046c8:	40010024 	.word	0x40010024
 80046cc:	40010028 	.word	0x40010028
 80046d0:	4001002c 	.word	0x4001002c
 80046d4:	40010030 	.word	0x40010030
 80046d8:	40010400 	.word	0x40010400

080046dc <HAL_COMP_Stop_IT>:
  * @brief  Stop the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	73fb      	strb	r3, [r7, #15]

  /* Disable the EXTI Line interrupt mode */
  COMP_EXTI_DISABLE_IT(COMP_GET_EXTI_LINE(hcomp->Instance));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a47      	ldr	r2, [pc, #284]	; (800480c <HAL_COMP_Stop_IT+0x130>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d04b      	beq.n	800478a <HAL_COMP_Stop_IT+0xae>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a46      	ldr	r2, [pc, #280]	; (8004810 <HAL_COMP_Stop_IT+0x134>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d046      	beq.n	800478a <HAL_COMP_Stop_IT+0xae>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a44      	ldr	r2, [pc, #272]	; (8004814 <HAL_COMP_Stop_IT+0x138>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d041      	beq.n	800478a <HAL_COMP_Stop_IT+0xae>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a43      	ldr	r2, [pc, #268]	; (8004818 <HAL_COMP_Stop_IT+0x13c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d03c      	beq.n	800478a <HAL_COMP_Stop_IT+0xae>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a41      	ldr	r2, [pc, #260]	; (800481c <HAL_COMP_Stop_IT+0x140>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d037      	beq.n	800478a <HAL_COMP_Stop_IT+0xae>
 800471a:	4b41      	ldr	r3, [pc, #260]	; (8004820 <HAL_COMP_Stop_IT+0x144>)
 800471c:	6a1a      	ldr	r2, [r3, #32]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	493a      	ldr	r1, [pc, #232]	; (800480c <HAL_COMP_Stop_IT+0x130>)
 8004724:	428b      	cmp	r3, r1
 8004726:	d02a      	beq.n	800477e <HAL_COMP_Stop_IT+0xa2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4938      	ldr	r1, [pc, #224]	; (8004810 <HAL_COMP_Stop_IT+0x134>)
 800472e:	428b      	cmp	r3, r1
 8004730:	d022      	beq.n	8004778 <HAL_COMP_Stop_IT+0x9c>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4937      	ldr	r1, [pc, #220]	; (8004814 <HAL_COMP_Stop_IT+0x138>)
 8004738:	428b      	cmp	r3, r1
 800473a:	d01a      	beq.n	8004772 <HAL_COMP_Stop_IT+0x96>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4935      	ldr	r1, [pc, #212]	; (8004818 <HAL_COMP_Stop_IT+0x13c>)
 8004742:	428b      	cmp	r3, r1
 8004744:	d012      	beq.n	800476c <HAL_COMP_Stop_IT+0x90>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4934      	ldr	r1, [pc, #208]	; (800481c <HAL_COMP_Stop_IT+0x140>)
 800474c:	428b      	cmp	r3, r1
 800474e:	d00a      	beq.n	8004766 <HAL_COMP_Stop_IT+0x8a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4933      	ldr	r1, [pc, #204]	; (8004824 <HAL_COMP_Stop_IT+0x148>)
 8004756:	428b      	cmp	r3, r1
 8004758:	d102      	bne.n	8004760 <HAL_COMP_Stop_IT+0x84>
 800475a:	f06f 0301 	mvn.w	r3, #1
 800475e:	e010      	b.n	8004782 <HAL_COMP_Stop_IT+0xa6>
 8004760:	f06f 0302 	mvn.w	r3, #2
 8004764:	e00d      	b.n	8004782 <HAL_COMP_Stop_IT+0xa6>
 8004766:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800476a:	e00a      	b.n	8004782 <HAL_COMP_Stop_IT+0xa6>
 800476c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004770:	e007      	b.n	8004782 <HAL_COMP_Stop_IT+0xa6>
 8004772:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004776:	e004      	b.n	8004782 <HAL_COMP_Stop_IT+0xa6>
 8004778:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 800477c:	e001      	b.n	8004782 <HAL_COMP_Stop_IT+0xa6>
 800477e:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004782:	4927      	ldr	r1, [pc, #156]	; (8004820 <HAL_COMP_Stop_IT+0x144>)
 8004784:	4013      	ands	r3, r2
 8004786:	620b      	str	r3, [r1, #32]
 8004788:	e036      	b.n	80047f8 <HAL_COMP_Stop_IT+0x11c>
 800478a:	4b25      	ldr	r3, [pc, #148]	; (8004820 <HAL_COMP_Stop_IT+0x144>)
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	491e      	ldr	r1, [pc, #120]	; (800480c <HAL_COMP_Stop_IT+0x130>)
 8004794:	428b      	cmp	r3, r1
 8004796:	d02a      	beq.n	80047ee <HAL_COMP_Stop_IT+0x112>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	491c      	ldr	r1, [pc, #112]	; (8004810 <HAL_COMP_Stop_IT+0x134>)
 800479e:	428b      	cmp	r3, r1
 80047a0:	d022      	beq.n	80047e8 <HAL_COMP_Stop_IT+0x10c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	491b      	ldr	r1, [pc, #108]	; (8004814 <HAL_COMP_Stop_IT+0x138>)
 80047a8:	428b      	cmp	r3, r1
 80047aa:	d01a      	beq.n	80047e2 <HAL_COMP_Stop_IT+0x106>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4919      	ldr	r1, [pc, #100]	; (8004818 <HAL_COMP_Stop_IT+0x13c>)
 80047b2:	428b      	cmp	r3, r1
 80047b4:	d012      	beq.n	80047dc <HAL_COMP_Stop_IT+0x100>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4918      	ldr	r1, [pc, #96]	; (800481c <HAL_COMP_Stop_IT+0x140>)
 80047bc:	428b      	cmp	r3, r1
 80047be:	d00a      	beq.n	80047d6 <HAL_COMP_Stop_IT+0xfa>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4917      	ldr	r1, [pc, #92]	; (8004824 <HAL_COMP_Stop_IT+0x148>)
 80047c6:	428b      	cmp	r3, r1
 80047c8:	d102      	bne.n	80047d0 <HAL_COMP_Stop_IT+0xf4>
 80047ca:	f06f 0301 	mvn.w	r3, #1
 80047ce:	e010      	b.n	80047f2 <HAL_COMP_Stop_IT+0x116>
 80047d0:	f06f 0302 	mvn.w	r3, #2
 80047d4:	e00d      	b.n	80047f2 <HAL_COMP_Stop_IT+0x116>
 80047d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80047da:	e00a      	b.n	80047f2 <HAL_COMP_Stop_IT+0x116>
 80047dc:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80047e0:	e007      	b.n	80047f2 <HAL_COMP_Stop_IT+0x116>
 80047e2:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 80047e6:	e004      	b.n	80047f2 <HAL_COMP_Stop_IT+0x116>
 80047e8:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 80047ec:	e001      	b.n	80047f2 <HAL_COMP_Stop_IT+0x116>
 80047ee:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80047f2:	490b      	ldr	r1, [pc, #44]	; (8004820 <HAL_COMP_Stop_IT+0x144>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]

  status = HAL_COMP_Stop(hcomp);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fdb3 	bl	8004364 <HAL_COMP_Stop>
 80047fe:	4603      	mov	r3, r0
 8004800:	73fb      	strb	r3, [r7, #15]

  return status;
 8004802:	7bfb      	ldrb	r3, [r7, #15]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	4001001c 	.word	0x4001001c
 8004810:	40010020 	.word	0x40010020
 8004814:	40010024 	.word	0x40010024
 8004818:	40010028 	.word	0x40010028
 800481c:	4001002c 	.word	0x4001002c
 8004820:	40010400 	.word	0x40010400
 8004824:	40010030 	.word	0x40010030

08004828 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2d      	ldr	r2, [pc, #180]	; (80048ec <HAL_COMP_IRQHandler+0xc4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d028      	beq.n	800488c <HAL_COMP_IRQHandler+0x64>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a2c      	ldr	r2, [pc, #176]	; (80048f0 <HAL_COMP_IRQHandler+0xc8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d020      	beq.n	8004886 <HAL_COMP_IRQHandler+0x5e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <HAL_COMP_IRQHandler+0xcc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <HAL_COMP_IRQHandler+0x58>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <HAL_COMP_IRQHandler+0xd0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d010      	beq.n	800487a <HAL_COMP_IRQHandler+0x52>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a27      	ldr	r2, [pc, #156]	; (80048fc <HAL_COMP_IRQHandler+0xd4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d008      	beq.n	8004874 <HAL_COMP_IRQHandler+0x4c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a26      	ldr	r2, [pc, #152]	; (8004900 <HAL_COMP_IRQHandler+0xd8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d101      	bne.n	8004870 <HAL_COMP_IRQHandler+0x48>
 800486c:	2301      	movs	r3, #1
 800486e:	e00f      	b.n	8004890 <HAL_COMP_IRQHandler+0x68>
 8004870:	2302      	movs	r3, #2
 8004872:	e00d      	b.n	8004890 <HAL_COMP_IRQHandler+0x68>
 8004874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004878:	e00a      	b.n	8004890 <HAL_COMP_IRQHandler+0x68>
 800487a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800487e:	e007      	b.n	8004890 <HAL_COMP_IRQHandler+0x68>
 8004880:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004884:	e004      	b.n	8004890 <HAL_COMP_IRQHandler+0x68>
 8004886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800488a:	e001      	b.n	8004890 <HAL_COMP_IRQHandler+0x68>
 800488c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004890:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if (COMP_EXTI_GET_FLAG(extiline) != RESET)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <HAL_COMP_IRQHandler+0x88>
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_COMP_IRQHandler+0xdc>)
 800489e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e008      	b.n	80048c2 <HAL_COMP_IRQHandler+0x9a>
 80048b0:	4b14      	ldr	r3, [pc, #80]	; (8004904 <HAL_COMP_IRQHandler+0xdc>)
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4013      	ands	r3, r2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <HAL_COMP_IRQHandler+0xbc>
  {
    /* Clear COMP EXTI pending bit */
    COMP_EXTI_CLEAR_FLAG(extiline);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_COMP_IRQHandler+0xb0>
 80048d0:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <HAL_COMP_IRQHandler+0xdc>)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6353      	str	r3, [r2, #52]	; 0x34
 80048d6:	e002      	b.n	80048de <HAL_COMP_IRQHandler+0xb6>
 80048d8:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <HAL_COMP_IRQHandler+0xdc>)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6153      	str	r3, [r2, #20]

    /* COMP trigger callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fd fa56 	bl	8001d90 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	4001001c 	.word	0x4001001c
 80048f0:	40010020 	.word	0x40010020
 80048f4:	40010024 	.word	0x40010024
 80048f8:	40010028 	.word	0x40010028
 80048fc:	4001002c 	.word	0x4001002c
 8004900:	40010030 	.word	0x40010030
 8004904:	40010400 	.word	0x40010400

08004908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <__NVIC_SetPriorityGrouping+0x44>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004924:	4013      	ands	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800493a:	4a04      	ldr	r2, [pc, #16]	; (800494c <__NVIC_SetPriorityGrouping+0x44>)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	60d3      	str	r3, [r2, #12]
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <__NVIC_GetPriorityGrouping+0x18>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	f003 0307 	and.w	r3, r3, #7
}
 800495e:	4618      	mov	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497a:	2b00      	cmp	r3, #0
 800497c:	db0b      	blt.n	8004996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	f003 021f 	and.w	r2, r3, #31
 8004984:	4907      	ldr	r1, [pc, #28]	; (80049a4 <__NVIC_EnableIRQ+0x38>)
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	2001      	movs	r0, #1
 800498e:	fa00 f202 	lsl.w	r2, r0, r2
 8004992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000e100 	.word	0xe000e100

080049a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	6039      	str	r1, [r7, #0]
 80049b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	db0a      	blt.n	80049d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	490c      	ldr	r1, [pc, #48]	; (80049f4 <__NVIC_SetPriority+0x4c>)
 80049c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c6:	0112      	lsls	r2, r2, #4
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	440b      	add	r3, r1
 80049cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049d0:	e00a      	b.n	80049e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4908      	ldr	r1, [pc, #32]	; (80049f8 <__NVIC_SetPriority+0x50>)
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	3b04      	subs	r3, #4
 80049e0:	0112      	lsls	r2, r2, #4
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	440b      	add	r3, r1
 80049e6:	761a      	strb	r2, [r3, #24]
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	e000e100 	.word	0xe000e100
 80049f8:	e000ed00 	.word	0xe000ed00

080049fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b089      	sub	sp, #36	; 0x24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f1c3 0307 	rsb	r3, r3, #7
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	bf28      	it	cs
 8004a1a:	2304      	movcs	r3, #4
 8004a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3304      	adds	r3, #4
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d902      	bls.n	8004a2c <NVIC_EncodePriority+0x30>
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3b03      	subs	r3, #3
 8004a2a:	e000      	b.n	8004a2e <NVIC_EncodePriority+0x32>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a30:	f04f 32ff 	mov.w	r2, #4294967295
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	401a      	ands	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a44:	f04f 31ff 	mov.w	r1, #4294967295
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	43d9      	mvns	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a54:	4313      	orrs	r3, r2
         );
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3724      	adds	r7, #36	; 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a74:	d301      	bcc.n	8004a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a76:	2301      	movs	r3, #1
 8004a78:	e00f      	b.n	8004a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <SysTick_Config+0x40>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a82:	210f      	movs	r1, #15
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	f7ff ff8e 	bl	80049a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <SysTick_Config+0x40>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a92:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <SysTick_Config+0x40>)
 8004a94:	2207      	movs	r2, #7
 8004a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	e000e010 	.word	0xe000e010

08004aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ff29 	bl	8004908 <__NVIC_SetPriorityGrouping>
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad0:	f7ff ff3e 	bl	8004950 <__NVIC_GetPriorityGrouping>
 8004ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff ff8e 	bl	80049fc <NVIC_EncodePriority>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ff5d 	bl	80049a8 <__NVIC_SetPriority>
}
 8004aee:	bf00      	nop
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	4603      	mov	r3, r0
 8004afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff31 	bl	800496c <__NVIC_EnableIRQ>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff ffa2 	bl	8004a64 <SysTick_Config>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e014      	b.n	8004b66 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	791b      	ldrb	r3, [r3, #4]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fd fba5 	bl	800229c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004b6e:	b480      	push	{r7}
 8004b70:	b087      	sub	sp, #28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	3308      	adds	r3, #8
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e004      	b.n	8004ba2 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	795b      	ldrb	r3, [r3, #5]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_DAC_Start+0x16>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e039      	b.n	8004c42 <HAL_DAC_Start+0x8a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	2201      	movs	r2, #1
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	409a      	lsls	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10f      	bne.n	8004c14 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004bfe:	2b3c      	cmp	r3, #60	; 0x3c
 8004c00:	d118      	bne.n	8004c34 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	e00f      	b.n	8004c34 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004c1e:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8004c22:	d107      	bne.n	8004c34 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0202 	orr.w	r2, r2, #2
 8004c32:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b087      	sub	sp, #28
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	795b      	ldrb	r3, [r3, #5]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_DAC_ConfigChannel+0x20>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e036      	b.n	8004cdc <HAL_DAC_ConfigChannel+0x8e>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2202      	movs	r2, #2
 8004c78:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004c82:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4013      	ands	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	22c0      	movs	r2, #192	; 0xc0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43da      	mvns	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	400a      	ands	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e037      	b.n	8004d6e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d14:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004d18:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f97f 	bl	8005054 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}  
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_DMA_Start_IT+0x20>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e04a      	b.n	8004e2c <HAL_DMA_Start_IT+0xb6>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d13a      	bne.n	8004e1e <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f912 	bl	8004ff6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 020e 	orr.w	r2, r2, #14
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e00f      	b.n	8004e0c <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 020a 	orr.w	r2, r2, #10
 8004dfa:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0204 	bic.w	r2, r2, #4
 8004e0a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e005      	b.n	8004e2a <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004e26:	2302      	movs	r3, #2
 8004e28:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d005      	beq.n	8004e56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	e027      	b.n	8004ea6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 020e 	bic.w	r2, r2, #14
 8004e64:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0201 	bic.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	2101      	movs	r1, #1
 8004e80:	fa01 f202 	lsl.w	r2, r1, r2
 8004e84:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
    } 
  }
  return status;
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	2204      	movs	r2, #4
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d024      	beq.n	8004f22 <HAL_DMA_IRQHandler+0x72>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01f      	beq.n	8004f22 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d107      	bne.n	8004f00 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0204 	bic.w	r2, r2, #4
 8004efe:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	2104      	movs	r1, #4
 8004f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f0e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d06a      	beq.n	8004fee <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004f20:	e065      	b.n	8004fee <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	2202      	movs	r2, #2
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d02c      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xdc>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d027      	beq.n	8004f8c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 020a 	bic.w	r2, r2, #10
 8004f58:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f70:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d035      	beq.n	8004fee <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004f8a:	e030      	b.n	8004fee <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	2208      	movs	r2, #8
 8004f92:	409a      	lsls	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d028      	beq.n	8004fee <HAL_DMA_IRQHandler+0x13e>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d023      	beq.n	8004fee <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 020e 	bic.w	r2, r2, #14
 8004fb4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
    }
  }
}  
 8004fec:	e7ff      	b.n	8004fee <HAL_DMA_IRQHandler+0x13e>
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500c:	2101      	movs	r1, #1
 800500e:	fa01 f202 	lsl.w	r2, r1, r2
 8005012:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b10      	cmp	r3, #16
 8005022:	d108      	bne.n	8005036 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005034:	e007      	b.n	8005046 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	60da      	str	r2, [r3, #12]
}
 8005046:	bf00      	nop
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <DMA_CalcBaseAndBitshift+0x60>)
 8005064:	429a      	cmp	r2, r3
 8005066:	d80f      	bhi.n	8005088 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005070:	4413      	add	r3, r2
 8005072:	4a12      	ldr	r2, [pc, #72]	; (80050bc <DMA_CalcBaseAndBitshift+0x68>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	091b      	lsrs	r3, r3, #4
 800507a:	009a      	lsls	r2, r3, #2
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a0f      	ldr	r2, [pc, #60]	; (80050c0 <DMA_CalcBaseAndBitshift+0x6c>)
 8005084:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005086:	e00e      	b.n	80050a6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <DMA_CalcBaseAndBitshift+0x70>)
 8005090:	4413      	add	r3, r2
 8005092:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <DMA_CalcBaseAndBitshift+0x68>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	009a      	lsls	r2, r3, #2
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <DMA_CalcBaseAndBitshift+0x74>)
 80050a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40020407 	.word	0x40020407
 80050b8:	bffdfff8 	.word	0xbffdfff8
 80050bc:	cccccccd 	.word	0xcccccccd
 80050c0:	40020000 	.word	0x40020000
 80050c4:	bffdfbf8 	.word	0xbffdfbf8
 80050c8:	40020400 	.word	0x40020400

080050cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050da:	e154      	b.n	8005386 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	2101      	movs	r1, #1
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	fa01 f303 	lsl.w	r3, r1, r3
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8146 	beq.w	8005380 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d003      	beq.n	8005104 <HAL_GPIO_Init+0x38>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b12      	cmp	r3, #18
 8005102:	d123      	bne.n	800514c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	08da      	lsrs	r2, r3, #3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3208      	adds	r2, #8
 800510c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005110:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	220f      	movs	r2, #15
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	43db      	mvns	r3, r3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4013      	ands	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	08da      	lsrs	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3208      	adds	r2, #8
 8005146:	6939      	ldr	r1, [r7, #16]
 8005148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2203      	movs	r2, #3
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4013      	ands	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 0203 	and.w	r2, r3, #3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d00b      	beq.n	80051a0 <HAL_GPIO_Init+0xd4>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d007      	beq.n	80051a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005194:	2b11      	cmp	r3, #17
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b12      	cmp	r3, #18
 800519e:	d130      	bne.n	8005202 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	2203      	movs	r2, #3
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4013      	ands	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051d6:	2201      	movs	r2, #1
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4013      	ands	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	091b      	lsrs	r3, r3, #4
 80051ec:	f003 0201 	and.w	r2, r3, #1
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	2203      	movs	r2, #3
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	43db      	mvns	r3, r3
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4013      	ands	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80a0 	beq.w	8005380 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005240:	4b58      	ldr	r3, [pc, #352]	; (80053a4 <HAL_GPIO_Init+0x2d8>)
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	4a57      	ldr	r2, [pc, #348]	; (80053a4 <HAL_GPIO_Init+0x2d8>)
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	6193      	str	r3, [r2, #24]
 800524c:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <HAL_GPIO_Init+0x2d8>)
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005258:	4a53      	ldr	r2, [pc, #332]	; (80053a8 <HAL_GPIO_Init+0x2dc>)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	089b      	lsrs	r3, r3, #2
 800525e:	3302      	adds	r3, #2
 8005260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005264:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	220f      	movs	r2, #15
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	43db      	mvns	r3, r3
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4013      	ands	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005282:	d019      	beq.n	80052b8 <HAL_GPIO_Init+0x1ec>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a49      	ldr	r2, [pc, #292]	; (80053ac <HAL_GPIO_Init+0x2e0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <HAL_GPIO_Init+0x1e8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a48      	ldr	r2, [pc, #288]	; (80053b0 <HAL_GPIO_Init+0x2e4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00d      	beq.n	80052b0 <HAL_GPIO_Init+0x1e4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a47      	ldr	r2, [pc, #284]	; (80053b4 <HAL_GPIO_Init+0x2e8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d007      	beq.n	80052ac <HAL_GPIO_Init+0x1e0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a46      	ldr	r2, [pc, #280]	; (80053b8 <HAL_GPIO_Init+0x2ec>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d101      	bne.n	80052a8 <HAL_GPIO_Init+0x1dc>
 80052a4:	2304      	movs	r3, #4
 80052a6:	e008      	b.n	80052ba <HAL_GPIO_Init+0x1ee>
 80052a8:	2305      	movs	r3, #5
 80052aa:	e006      	b.n	80052ba <HAL_GPIO_Init+0x1ee>
 80052ac:	2303      	movs	r3, #3
 80052ae:	e004      	b.n	80052ba <HAL_GPIO_Init+0x1ee>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e002      	b.n	80052ba <HAL_GPIO_Init+0x1ee>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_GPIO_Init+0x1ee>
 80052b8:	2300      	movs	r3, #0
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	f002 0203 	and.w	r2, r2, #3
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	4093      	lsls	r3, r2
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052ca:	4937      	ldr	r1, [pc, #220]	; (80053a8 <HAL_GPIO_Init+0x2dc>)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	089b      	lsrs	r3, r3, #2
 80052d0:	3302      	adds	r3, #2
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052d8:	4b38      	ldr	r3, [pc, #224]	; (80053bc <HAL_GPIO_Init+0x2f0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4013      	ands	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80052fc:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <HAL_GPIO_Init+0x2f0>)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005302:	4b2e      	ldr	r3, [pc, #184]	; (80053bc <HAL_GPIO_Init+0x2f0>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	43db      	mvns	r3, r3
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4013      	ands	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005326:	4a25      	ldr	r2, [pc, #148]	; (80053bc <HAL_GPIO_Init+0x2f0>)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <HAL_GPIO_Init+0x2f0>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	43db      	mvns	r3, r3
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4013      	ands	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005350:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <HAL_GPIO_Init+0x2f0>)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_GPIO_Init+0x2f0>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	43db      	mvns	r3, r3
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4013      	ands	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800537a:	4a10      	ldr	r2, [pc, #64]	; (80053bc <HAL_GPIO_Init+0x2f0>)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3301      	adds	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	f47f aea3 	bne.w	80050dc <HAL_GPIO_Init+0x10>
  }
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40010000 	.word	0x40010000
 80053ac:	48000400 	.word	0x48000400
 80053b0:	48000800 	.word	0x48000800
 80053b4:	48000c00 	.word	0x48000c00
 80053b8:	48001000 	.word	0x48001000
 80053bc:	40010400 	.word	0x40010400

080053c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
 80053cc:	4613      	mov	r3, r2
 80053ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053d0:	787b      	ldrb	r3, [r7, #1]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053d6:	887a      	ldrh	r2, [r7, #2]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053dc:	e002      	b.n	80053e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	1d3b      	adds	r3, r7, #4
 80053fa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f000 bef4 	b.w	80061f2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800540a:	1d3b      	adds	r3, r7, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 816a 	beq.w	80056ee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800541a:	4bb3      	ldr	r3, [pc, #716]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b04      	cmp	r3, #4
 8005424:	d00c      	beq.n	8005440 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005426:	4bb0      	ldr	r3, [pc, #704]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b08      	cmp	r3, #8
 8005430:	d159      	bne.n	80054e6 <HAL_RCC_OscConfig+0xf6>
 8005432:	4bad      	ldr	r3, [pc, #692]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543e:	d152      	bne.n	80054e6 <HAL_RCC_OscConfig+0xf6>
 8005440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005444:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005448:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800544c:	fa93 f3a3 	rbit	r3, r3
 8005450:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005454:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005458:	fab3 f383 	clz	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d102      	bne.n	8005472 <HAL_RCC_OscConfig+0x82>
 800546c:	4b9e      	ldr	r3, [pc, #632]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	e015      	b.n	800549e <HAL_RCC_OscConfig+0xae>
 8005472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005476:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800547e:	fa93 f3a3 	rbit	r3, r3
 8005482:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005486:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800548a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800548e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800549a:	4b93      	ldr	r3, [pc, #588]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054a2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80054a6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80054aa:	fa92 f2a2 	rbit	r2, r2
 80054ae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80054b2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80054b6:	fab2 f282 	clz	r2, r2
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	f042 0220 	orr.w	r2, r2, #32
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	f002 021f 	and.w	r2, r2, #31
 80054c6:	2101      	movs	r1, #1
 80054c8:	fa01 f202 	lsl.w	r2, r1, r2
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 810c 	beq.w	80056ec <HAL_RCC_OscConfig+0x2fc>
 80054d4:	1d3b      	adds	r3, r7, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 8106 	bne.w	80056ec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f000 be86 	b.w	80061f2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x110>
 80054f2:	4b7d      	ldr	r3, [pc, #500]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e030      	b.n	8005562 <HAL_RCC_OscConfig+0x172>
 8005500:	1d3b      	adds	r3, r7, #4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x134>
 800550a:	4b77      	ldr	r3, [pc, #476]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a76      	ldr	r2, [pc, #472]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b74      	ldr	r3, [pc, #464]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a73      	ldr	r2, [pc, #460]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 800551c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e01e      	b.n	8005562 <HAL_RCC_OscConfig+0x172>
 8005524:	1d3b      	adds	r3, r7, #4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800552e:	d10c      	bne.n	800554a <HAL_RCC_OscConfig+0x15a>
 8005530:	4b6d      	ldr	r3, [pc, #436]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a6c      	ldr	r2, [pc, #432]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	4b6a      	ldr	r3, [pc, #424]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a69      	ldr	r2, [pc, #420]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	e00b      	b.n	8005562 <HAL_RCC_OscConfig+0x172>
 800554a:	4b67      	ldr	r3, [pc, #412]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a66      	ldr	r2, [pc, #408]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	4b64      	ldr	r3, [pc, #400]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a63      	ldr	r2, [pc, #396]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 800555c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005560:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005562:	4b61      	ldr	r3, [pc, #388]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	f023 020f 	bic.w	r2, r3, #15
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	495d      	ldr	r1, [pc, #372]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005572:	4313      	orrs	r3, r2
 8005574:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d059      	beq.n	8005634 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005580:	f7fd fa3c 	bl	80029fc <HAL_GetTick>
 8005584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005588:	e00a      	b.n	80055a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800558a:	f7fd fa37 	bl	80029fc <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	; 0x64
 8005598:	d902      	bls.n	80055a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	f000 be29 	b.w	80061f2 <HAL_RCC_OscConfig+0xe02>
 80055a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80055ac:	fa93 f3a3 	rbit	r3, r3
 80055b0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80055b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055b8:	fab3 f383 	clz	r3, r3
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d102      	bne.n	80055d2 <HAL_RCC_OscConfig+0x1e2>
 80055cc:	4b46      	ldr	r3, [pc, #280]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	e015      	b.n	80055fe <HAL_RCC_OscConfig+0x20e>
 80055d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055da:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80055de:	fa93 f3a3 	rbit	r3, r3
 80055e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80055e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80055ee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80055f2:	fa93 f3a3 	rbit	r3, r3
 80055f6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80055fa:	4b3b      	ldr	r3, [pc, #236]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005602:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005606:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800560a:	fa92 f2a2 	rbit	r2, r2
 800560e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005612:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005616:	fab2 f282 	clz	r2, r2
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	f042 0220 	orr.w	r2, r2, #32
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	f002 021f 	and.w	r2, r2, #31
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f202 	lsl.w	r2, r1, r2
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0ab      	beq.n	800558a <HAL_RCC_OscConfig+0x19a>
 8005632:	e05c      	b.n	80056ee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005634:	f7fd f9e2 	bl	80029fc <HAL_GetTick>
 8005638:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563c:	e00a      	b.n	8005654 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800563e:	f7fd f9dd 	bl	80029fc <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d902      	bls.n	8005654 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	f000 bdcf 	b.w	80061f2 <HAL_RCC_OscConfig+0xe02>
 8005654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005658:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005668:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800566c:	fab3 f383 	clz	r3, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d102      	bne.n	8005686 <HAL_RCC_OscConfig+0x296>
 8005680:	4b19      	ldr	r3, [pc, #100]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	e015      	b.n	80056b2 <HAL_RCC_OscConfig+0x2c2>
 8005686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800568a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005692:	fa93 f3a3 	rbit	r3, r3
 8005696:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800569a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800569e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80056a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80056a6:	fa93 f3a3 	rbit	r3, r3
 80056aa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <HAL_RCC_OscConfig+0x2f8>)
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80056ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80056be:	fa92 f2a2 	rbit	r2, r2
 80056c2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80056c6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80056ca:	fab2 f282 	clz	r2, r2
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	f042 0220 	orr.w	r2, r2, #32
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	f002 021f 	and.w	r2, r2, #31
 80056da:	2101      	movs	r1, #1
 80056dc:	fa01 f202 	lsl.w	r2, r1, r2
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1ab      	bne.n	800563e <HAL_RCC_OscConfig+0x24e>
 80056e6:	e002      	b.n	80056ee <HAL_RCC_OscConfig+0x2fe>
 80056e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 816f 	beq.w	80059dc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80056fe:	4bd0      	ldr	r3, [pc, #832]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800570a:	4bcd      	ldr	r3, [pc, #820]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b08      	cmp	r3, #8
 8005714:	d16c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x400>
 8005716:	4bca      	ldr	r3, [pc, #808]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d166      	bne.n	80057f0 <HAL_RCC_OscConfig+0x400>
 8005722:	2302      	movs	r3, #2
 8005724:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005728:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800572c:	fa93 f3a3 	rbit	r3, r3
 8005730:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005734:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005738:	fab3 f383 	clz	r3, r3
 800573c:	b2db      	uxtb	r3, r3
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f043 0301 	orr.w	r3, r3, #1
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d102      	bne.n	8005752 <HAL_RCC_OscConfig+0x362>
 800574c:	4bbc      	ldr	r3, [pc, #752]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	e013      	b.n	800577a <HAL_RCC_OscConfig+0x38a>
 8005752:	2302      	movs	r3, #2
 8005754:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005758:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005764:	2302      	movs	r3, #2
 8005766:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800576a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800576e:	fa93 f3a3 	rbit	r3, r3
 8005772:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005776:	4bb2      	ldr	r3, [pc, #712]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2202      	movs	r2, #2
 800577c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005780:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005784:	fa92 f2a2 	rbit	r2, r2
 8005788:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800578c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005790:	fab2 f282 	clz	r2, r2
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	f042 0220 	orr.w	r2, r2, #32
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	f002 021f 	and.w	r2, r2, #31
 80057a0:	2101      	movs	r1, #1
 80057a2:	fa01 f202 	lsl.w	r2, r1, r2
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <HAL_RCC_OscConfig+0x3cc>
 80057ac:	1d3b      	adds	r3, r7, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d002      	beq.n	80057bc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f000 bd1b 	b.w	80061f2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057bc:	4ba0      	ldr	r3, [pc, #640]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c4:	1d3b      	adds	r3, r7, #4
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	21f8      	movs	r1, #248	; 0xf8
 80057cc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80057d4:	fa91 f1a1 	rbit	r1, r1
 80057d8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80057dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80057e0:	fab1 f181 	clz	r1, r1
 80057e4:	b2c9      	uxtb	r1, r1
 80057e6:	408b      	lsls	r3, r1
 80057e8:	4995      	ldr	r1, [pc, #596]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ee:	e0f5      	b.n	80059dc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057f0:	1d3b      	adds	r3, r7, #4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8085 	beq.w	8005906 <HAL_RCC_OscConfig+0x516>
 80057fc:	2301      	movs	r3, #1
 80057fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005806:	fa93 f3a3 	rbit	r3, r3
 800580a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800580e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005812:	fab3 f383 	clz	r3, r3
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800581c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	461a      	mov	r2, r3
 8005824:	2301      	movs	r3, #1
 8005826:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005828:	f7fd f8e8 	bl	80029fc <HAL_GetTick>
 800582c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005830:	e00a      	b.n	8005848 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005832:	f7fd f8e3 	bl	80029fc <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d902      	bls.n	8005848 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	f000 bcd5 	b.w	80061f2 <HAL_RCC_OscConfig+0xe02>
 8005848:	2302      	movs	r3, #2
 800584a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005852:	fa93 f3a3 	rbit	r3, r3
 8005856:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800585a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d102      	bne.n	8005878 <HAL_RCC_OscConfig+0x488>
 8005872:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	e013      	b.n	80058a0 <HAL_RCC_OscConfig+0x4b0>
 8005878:	2302      	movs	r3, #2
 800587a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005882:	fa93 f3a3 	rbit	r3, r3
 8005886:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800588a:	2302      	movs	r3, #2
 800588c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005890:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005894:	fa93 f3a3 	rbit	r3, r3
 8005898:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800589c:	4b68      	ldr	r3, [pc, #416]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	2202      	movs	r2, #2
 80058a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80058a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80058aa:	fa92 f2a2 	rbit	r2, r2
 80058ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80058b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80058b6:	fab2 f282 	clz	r2, r2
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	f042 0220 	orr.w	r2, r2, #32
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	f002 021f 	and.w	r2, r2, #31
 80058c6:	2101      	movs	r1, #1
 80058c8:	fa01 f202 	lsl.w	r2, r1, r2
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0af      	beq.n	8005832 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d2:	4b5b      	ldr	r3, [pc, #364]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058da:	1d3b      	adds	r3, r7, #4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	21f8      	movs	r1, #248	; 0xf8
 80058e2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80058ea:	fa91 f1a1 	rbit	r1, r1
 80058ee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80058f2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80058f6:	fab1 f181 	clz	r1, r1
 80058fa:	b2c9      	uxtb	r1, r1
 80058fc:	408b      	lsls	r3, r1
 80058fe:	4950      	ldr	r1, [pc, #320]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 8005900:	4313      	orrs	r3, r2
 8005902:	600b      	str	r3, [r1, #0]
 8005904:	e06a      	b.n	80059dc <HAL_RCC_OscConfig+0x5ec>
 8005906:	2301      	movs	r3, #1
 8005908:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005910:	fa93 f3a3 	rbit	r3, r3
 8005914:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005918:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591c:	fab3 f383 	clz	r3, r3
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005926:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	461a      	mov	r2, r3
 800592e:	2300      	movs	r3, #0
 8005930:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005932:	f7fd f863 	bl	80029fc <HAL_GetTick>
 8005936:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593a:	e00a      	b.n	8005952 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800593c:	f7fd f85e 	bl	80029fc <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d902      	bls.n	8005952 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	f000 bc50 	b.w	80061f2 <HAL_RCC_OscConfig+0xe02>
 8005952:	2302      	movs	r3, #2
 8005954:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005958:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800595c:	fa93 f3a3 	rbit	r3, r3
 8005960:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005968:	fab3 f383 	clz	r3, r3
 800596c:	b2db      	uxtb	r3, r3
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	b2db      	uxtb	r3, r3
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <HAL_RCC_OscConfig+0x592>
 800597c:	4b30      	ldr	r3, [pc, #192]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	e013      	b.n	80059aa <HAL_RCC_OscConfig+0x5ba>
 8005982:	2302      	movs	r3, #2
 8005984:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800598c:	fa93 f3a3 	rbit	r3, r3
 8005990:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005994:	2302      	movs	r3, #2
 8005996:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800599a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800599e:	fa93 f3a3 	rbit	r3, r3
 80059a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80059a6:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <HAL_RCC_OscConfig+0x650>)
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	2202      	movs	r2, #2
 80059ac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80059b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80059b4:	fa92 f2a2 	rbit	r2, r2
 80059b8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80059bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80059c0:	fab2 f282 	clz	r2, r2
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	f042 0220 	orr.w	r2, r2, #32
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	f002 021f 	and.w	r2, r2, #31
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f202 	lsl.w	r2, r1, r2
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1af      	bne.n	800593c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80da 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059ec:	1d3b      	adds	r3, r7, #4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d069      	beq.n	8005aca <HAL_RCC_OscConfig+0x6da>
 80059f6:	2301      	movs	r3, #1
 80059f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a00:	fa93 f3a3 	rbit	r3, r3
 8005a04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a0c:	fab3 f383 	clz	r3, r3
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <HAL_RCC_OscConfig+0x654>)
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a20:	f7fc ffec 	bl	80029fc <HAL_GetTick>
 8005a24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a28:	e00e      	b.n	8005a48 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a2a:	f7fc ffe7 	bl	80029fc <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d906      	bls.n	8005a48 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e3d9      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000
 8005a44:	10908120 	.word	0x10908120
 8005a48:	2302      	movs	r3, #2
 8005a4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a52:	fa93 f3a3 	rbit	r3, r3
 8005a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a5e:	2202      	movs	r2, #2
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	fa93 f2a3 	rbit	r2, r3
 8005a6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005a76:	2202      	movs	r2, #2
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	fa93 f2a3 	rbit	r2, r3
 8005a84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005a88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a8a:	4ba5      	ldr	r3, [pc, #660]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a8e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005a92:	2102      	movs	r1, #2
 8005a94:	6019      	str	r1, [r3, #0]
 8005a96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	fa93 f1a3 	rbit	r1, r3
 8005aa0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005aa4:	6019      	str	r1, [r3, #0]
  return result;
 8005aa6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	fab3 f383 	clz	r3, r3
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	2101      	movs	r1, #1
 8005abe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0b0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x63a>
 8005ac8:	e06a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x7b0>
 8005aca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	fa93 f2a3 	rbit	r2, r3
 8005adc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005ae0:	601a      	str	r2, [r3, #0]
  return result;
 8005ae2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005ae6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae8:	fab3 f383 	clz	r3, r3
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	4b8c      	ldr	r3, [pc, #560]	; (8005d24 <HAL_RCC_OscConfig+0x934>)
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005afc:	f7fc ff7e 	bl	80029fc <HAL_GetTick>
 8005b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b04:	e009      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b06:	f7fc ff79 	bl	80029fc <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e36b      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
 8005b1a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b1e:	2202      	movs	r2, #2
 8005b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	fa93 f2a3 	rbit	r2, r3
 8005b2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b36:	2202      	movs	r2, #2
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	fa93 f2a3 	rbit	r2, r3
 8005b44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b4e:	2202      	movs	r2, #2
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	fa93 f2a3 	rbit	r2, r3
 8005b5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005b60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b62:	4b6f      	ldr	r3, [pc, #444]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	6019      	str	r1, [r3, #0]
 8005b6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	fa93 f1a3 	rbit	r1, r3
 8005b78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005b7c:	6019      	str	r1, [r3, #0]
  return result;
 8005b7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	fab3 f383 	clz	r3, r3
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	2101      	movs	r1, #1
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1b2      	bne.n	8005b06 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ba0:	1d3b      	adds	r3, r7, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8158 	beq.w	8005e60 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb6:	4b5a      	ldr	r3, [pc, #360]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d112      	bne.n	8005be8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	4b57      	ldr	r3, [pc, #348]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	4a56      	ldr	r2, [pc, #344]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	61d3      	str	r3, [r2, #28]
 8005bce:	4b54      	ldr	r3, [pc, #336]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005bd6:	f107 0308 	add.w	r3, r7, #8
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f107 0308 	add.w	r3, r7, #8
 8005be0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be8:	4b4f      	ldr	r3, [pc, #316]	; (8005d28 <HAL_RCC_OscConfig+0x938>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d11a      	bne.n	8005c2a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bf4:	4b4c      	ldr	r3, [pc, #304]	; (8005d28 <HAL_RCC_OscConfig+0x938>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a4b      	ldr	r2, [pc, #300]	; (8005d28 <HAL_RCC_OscConfig+0x938>)
 8005bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c00:	f7fc fefc 	bl	80029fc <HAL_GetTick>
 8005c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c08:	e009      	b.n	8005c1e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0a:	f7fc fef7 	bl	80029fc <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b64      	cmp	r3, #100	; 0x64
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e2e9      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1e:	4b42      	ldr	r3, [pc, #264]	; (8005d28 <HAL_RCC_OscConfig+0x938>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0ef      	beq.n	8005c0a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c2a:	1d3b      	adds	r3, r7, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d106      	bne.n	8005c42 <HAL_RCC_OscConfig+0x852>
 8005c34:	4b3a      	ldr	r3, [pc, #232]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	4a39      	ldr	r2, [pc, #228]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c3a:	f043 0301 	orr.w	r3, r3, #1
 8005c3e:	6213      	str	r3, [r2, #32]
 8005c40:	e02f      	b.n	8005ca2 <HAL_RCC_OscConfig+0x8b2>
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10c      	bne.n	8005c66 <HAL_RCC_OscConfig+0x876>
 8005c4c:	4b34      	ldr	r3, [pc, #208]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	4a33      	ldr	r2, [pc, #204]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	6213      	str	r3, [r2, #32]
 8005c58:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	4a30      	ldr	r2, [pc, #192]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c5e:	f023 0304 	bic.w	r3, r3, #4
 8005c62:	6213      	str	r3, [r2, #32]
 8005c64:	e01d      	b.n	8005ca2 <HAL_RCC_OscConfig+0x8b2>
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d10c      	bne.n	8005c8a <HAL_RCC_OscConfig+0x89a>
 8005c70:	4b2b      	ldr	r3, [pc, #172]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	4a2a      	ldr	r2, [pc, #168]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c76:	f043 0304 	orr.w	r3, r3, #4
 8005c7a:	6213      	str	r3, [r2, #32]
 8005c7c:	4b28      	ldr	r3, [pc, #160]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	4a27      	ldr	r2, [pc, #156]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	6213      	str	r3, [r2, #32]
 8005c88:	e00b      	b.n	8005ca2 <HAL_RCC_OscConfig+0x8b2>
 8005c8a:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	6213      	str	r3, [r2, #32]
 8005c96:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	4a21      	ldr	r2, [pc, #132]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ca2:	1d3b      	adds	r3, r7, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d06b      	beq.n	8005d84 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cac:	f7fc fea6 	bl	80029fc <HAL_GetTick>
 8005cb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb4:	e00b      	b.n	8005cce <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb6:	f7fc fea1 	bl	80029fc <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e291      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
 8005cce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	fa93 f2a3 	rbit	r2, r3
 8005ce0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005cea:	2202      	movs	r2, #2
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	fa93 f2a3 	rbit	r2, r3
 8005cf8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005cfc:	601a      	str	r2, [r3, #0]
  return result;
 8005cfe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005d02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d04:	fab3 f383 	clz	r3, r3
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f043 0302 	orr.w	r3, r3, #2
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d109      	bne.n	8005d2c <HAL_RCC_OscConfig+0x93c>
 8005d18:	4b01      	ldr	r3, [pc, #4]	; (8005d20 <HAL_RCC_OscConfig+0x930>)
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	e014      	b.n	8005d48 <HAL_RCC_OscConfig+0x958>
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000
 8005d24:	10908120 	.word	0x10908120
 8005d28:	40007000 	.word	0x40007000
 8005d2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d30:	2202      	movs	r2, #2
 8005d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d34:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	fa93 f2a3 	rbit	r2, r3
 8005d3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	4bbb      	ldr	r3, [pc, #748]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	6011      	str	r1, [r2, #0]
 8005d50:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	fa92 f1a2 	rbit	r1, r2
 8005d5a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d5e:	6011      	str	r1, [r2, #0]
  return result;
 8005d60:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	fab2 f282 	clz	r2, r2
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	f002 021f 	and.w	r2, r2, #31
 8005d76:	2101      	movs	r1, #1
 8005d78:	fa01 f202 	lsl.w	r2, r1, r2
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d099      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x8c6>
 8005d82:	e063      	b.n	8005e4c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d84:	f7fc fe3a 	bl	80029fc <HAL_GetTick>
 8005d88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d8c:	e00b      	b.n	8005da6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d8e:	f7fc fe35 	bl	80029fc <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e225      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
 8005da6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005daa:	2202      	movs	r2, #2
 8005dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	fa93 f2a3 	rbit	r2, r3
 8005db8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	fa93 f2a3 	rbit	r2, r3
 8005dd0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005dd4:	601a      	str	r2, [r3, #0]
  return result;
 8005dd6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005dda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ddc:	fab3 f383 	clz	r3, r3
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f043 0302 	orr.w	r3, r3, #2
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d102      	bne.n	8005df6 <HAL_RCC_OscConfig+0xa06>
 8005df0:	4b90      	ldr	r3, [pc, #576]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	e00d      	b.n	8005e12 <HAL_RCC_OscConfig+0xa22>
 8005df6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	fa93 f2a3 	rbit	r2, r3
 8005e08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	4b89      	ldr	r3, [pc, #548]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e16:	2102      	movs	r1, #2
 8005e18:	6011      	str	r1, [r2, #0]
 8005e1a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	fa92 f1a2 	rbit	r1, r2
 8005e24:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e28:	6011      	str	r1, [r2, #0]
  return result;
 8005e2a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	fab2 f282 	clz	r2, r2
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	f002 021f 	and.w	r2, r2, #31
 8005e40:	2101      	movs	r1, #1
 8005e42:	fa01 f202 	lsl.w	r2, r1, r2
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1a0      	bne.n	8005d8e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d105      	bne.n	8005e60 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e54:	4b77      	ldr	r3, [pc, #476]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	4a76      	ldr	r2, [pc, #472]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 81c2 	beq.w	80061f0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e6c:	4b71      	ldr	r3, [pc, #452]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f003 030c 	and.w	r3, r3, #12
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	f000 819c 	beq.w	80061b2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e7a:	1d3b      	adds	r3, r7, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	f040 8114 	bne.w	80060ae <HAL_RCC_OscConfig+0xcbe>
 8005e86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	fa93 f2a3 	rbit	r2, r3
 8005e9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e9e:	601a      	str	r2, [r3, #0]
  return result;
 8005ea0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005ea4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ea6:	fab3 f383 	clz	r3, r3
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005eb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fd9e 	bl	80029fc <HAL_GetTick>
 8005ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ec4:	e009      	b.n	8005eda <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec6:	f7fc fd99 	bl	80029fc <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e18b      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
 8005eda:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	fa93 f2a3 	rbit	r2, r3
 8005eee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005ef2:	601a      	str	r2, [r3, #0]
  return result;
 8005ef4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005ef8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005efa:	fab3 f383 	clz	r3, r3
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d102      	bne.n	8005f14 <HAL_RCC_OscConfig+0xb24>
 8005f0e:	4b49      	ldr	r3, [pc, #292]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	e01b      	b.n	8005f4c <HAL_RCC_OscConfig+0xb5c>
 8005f14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	fa93 f2a3 	rbit	r2, r3
 8005f28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	fa93 f2a3 	rbit	r2, r3
 8005f42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	4b3a      	ldr	r3, [pc, #232]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f54:	6011      	str	r1, [r2, #0]
 8005f56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	fa92 f1a2 	rbit	r1, r2
 8005f60:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f64:	6011      	str	r1, [r2, #0]
  return result;
 8005f66:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	fab2 f282 	clz	r2, r2
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	f042 0220 	orr.w	r2, r2, #32
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	f002 021f 	and.w	r2, r2, #31
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d19e      	bne.n	8005ec6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f88:	4b2a      	ldr	r3, [pc, #168]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f90:	1d3b      	adds	r3, r7, #4
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	4925      	ldr	r1, [pc, #148]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]
 8005fa4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	fa93 f2a3 	rbit	r2, r3
 8005fb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fbc:	601a      	str	r2, [r3, #0]
  return result;
 8005fbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fc2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc4:	fab3 f383 	clz	r3, r3
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005fce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fda:	f7fc fd0f 	bl	80029fc <HAL_GetTick>
 8005fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fe2:	e009      	b.n	8005ff8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe4:	f7fc fd0a 	bl	80029fc <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e0fc      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
 8005ff8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ffc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006002:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	fa93 f2a3 	rbit	r2, r3
 800600c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006010:	601a      	str	r2, [r3, #0]
  return result;
 8006012:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006016:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006018:	fab3 f383 	clz	r3, r3
 800601c:	b2db      	uxtb	r3, r3
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	b2db      	uxtb	r3, r3
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d105      	bne.n	8006038 <HAL_RCC_OscConfig+0xc48>
 800602c:	4b01      	ldr	r3, [pc, #4]	; (8006034 <HAL_RCC_OscConfig+0xc44>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	e01e      	b.n	8006070 <HAL_RCC_OscConfig+0xc80>
 8006032:	bf00      	nop
 8006034:	40021000 	.word	0x40021000
 8006038:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800603c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006042:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	fa93 f2a3 	rbit	r2, r3
 800604c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	fa93 f2a3 	rbit	r2, r3
 8006066:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	4b63      	ldr	r3, [pc, #396]	; (80061fc <HAL_RCC_OscConfig+0xe0c>)
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006074:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006078:	6011      	str	r1, [r2, #0]
 800607a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	fa92 f1a2 	rbit	r1, r2
 8006084:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006088:	6011      	str	r1, [r2, #0]
  return result;
 800608a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	fab2 f282 	clz	r2, r2
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	f042 0220 	orr.w	r2, r2, #32
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	f002 021f 	and.w	r2, r2, #31
 80060a0:	2101      	movs	r1, #1
 80060a2:	fa01 f202 	lsl.w	r2, r1, r2
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d09b      	beq.n	8005fe4 <HAL_RCC_OscConfig+0xbf4>
 80060ac:	e0a0      	b.n	80061f0 <HAL_RCC_OscConfig+0xe00>
 80060ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	fa93 f2a3 	rbit	r2, r3
 80060c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060c6:	601a      	str	r2, [r3, #0]
  return result;
 80060c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ce:	fab3 f383 	clz	r3, r3
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	461a      	mov	r2, r3
 80060e0:	2300      	movs	r3, #0
 80060e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e4:	f7fc fc8a 	bl	80029fc <HAL_GetTick>
 80060e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ec:	e009      	b.n	8006102 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ee:	f7fc fc85 	bl	80029fc <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e077      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
 8006102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006106:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800610a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	fa93 f2a3 	rbit	r2, r3
 8006116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800611a:	601a      	str	r2, [r3, #0]
  return result;
 800611c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006120:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006122:	fab3 f383 	clz	r3, r3
 8006126:	b2db      	uxtb	r3, r3
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b01      	cmp	r3, #1
 8006134:	d102      	bne.n	800613c <HAL_RCC_OscConfig+0xd4c>
 8006136:	4b31      	ldr	r3, [pc, #196]	; (80061fc <HAL_RCC_OscConfig+0xe0c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	e01b      	b.n	8006174 <HAL_RCC_OscConfig+0xd84>
 800613c:	f107 0320 	add.w	r3, r7, #32
 8006140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006146:	f107 0320 	add.w	r3, r7, #32
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	fa93 f2a3 	rbit	r2, r3
 8006150:	f107 031c 	add.w	r3, r7, #28
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f107 0318 	add.w	r3, r7, #24
 800615a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f107 0318 	add.w	r3, r7, #24
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	fa93 f2a3 	rbit	r2, r3
 800616a:	f107 0314 	add.w	r3, r7, #20
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	4b22      	ldr	r3, [pc, #136]	; (80061fc <HAL_RCC_OscConfig+0xe0c>)
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	f107 0210 	add.w	r2, r7, #16
 8006178:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800617c:	6011      	str	r1, [r2, #0]
 800617e:	f107 0210 	add.w	r2, r7, #16
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	fa92 f1a2 	rbit	r1, r2
 8006188:	f107 020c 	add.w	r2, r7, #12
 800618c:	6011      	str	r1, [r2, #0]
  return result;
 800618e:	f107 020c 	add.w	r2, r7, #12
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	fab2 f282 	clz	r2, r2
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	f042 0220 	orr.w	r2, r2, #32
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	f002 021f 	and.w	r2, r2, #31
 80061a4:	2101      	movs	r1, #1
 80061a6:	fa01 f202 	lsl.w	r2, r1, r2
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d19e      	bne.n	80060ee <HAL_RCC_OscConfig+0xcfe>
 80061b0:	e01e      	b.n	80061f0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e018      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061c0:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <HAL_RCC_OscConfig+0xe0c>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80061c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061d0:	1d3b      	adds	r3, r7, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d108      	bne.n	80061ec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80061da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d001      	beq.n	80061f0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40021000 	.word	0x40021000

08006200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b09e      	sub	sp, #120	; 0x78
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e162      	b.n	80064de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006218:	4b90      	ldr	r3, [pc, #576]	; (800645c <HAL_RCC_ClockConfig+0x25c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0307 	and.w	r3, r3, #7
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d910      	bls.n	8006248 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006226:	4b8d      	ldr	r3, [pc, #564]	; (800645c <HAL_RCC_ClockConfig+0x25c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f023 0207 	bic.w	r2, r3, #7
 800622e:	498b      	ldr	r1, [pc, #556]	; (800645c <HAL_RCC_ClockConfig+0x25c>)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	4313      	orrs	r3, r2
 8006234:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006236:	4b89      	ldr	r3, [pc, #548]	; (800645c <HAL_RCC_ClockConfig+0x25c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e14a      	b.n	80064de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006254:	4b82      	ldr	r3, [pc, #520]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	497f      	ldr	r1, [pc, #508]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 8006262:	4313      	orrs	r3, r2
 8006264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80dc 	beq.w	800642c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d13c      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xf6>
 800627c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006280:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006284:	fa93 f3a3 	rbit	r3, r3
 8006288:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800628a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628c:	fab3 f383 	clz	r3, r3
 8006290:	b2db      	uxtb	r3, r3
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d102      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xa6>
 80062a0:	4b6f      	ldr	r3, [pc, #444]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	e00f      	b.n	80062c6 <HAL_RCC_ClockConfig+0xc6>
 80062a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062ae:	fa93 f3a3 	rbit	r3, r3
 80062b2:	667b      	str	r3, [r7, #100]	; 0x64
 80062b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062b8:	663b      	str	r3, [r7, #96]	; 0x60
 80062ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062bc:	fa93 f3a3 	rbit	r3, r3
 80062c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062c2:	4b67      	ldr	r3, [pc, #412]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80062cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ce:	fa92 f2a2 	rbit	r2, r2
 80062d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80062d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062d6:	fab2 f282 	clz	r2, r2
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	f042 0220 	orr.w	r2, r2, #32
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	f002 021f 	and.w	r2, r2, #31
 80062e6:	2101      	movs	r1, #1
 80062e8:	fa01 f202 	lsl.w	r2, r1, r2
 80062ec:	4013      	ands	r3, r2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d17b      	bne.n	80063ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e0f3      	b.n	80064de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d13c      	bne.n	8006378 <HAL_RCC_ClockConfig+0x178>
 80062fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006302:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006306:	fa93 f3a3 	rbit	r3, r3
 800630a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800630c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800630e:	fab3 f383 	clz	r3, r3
 8006312:	b2db      	uxtb	r3, r3
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f043 0301 	orr.w	r3, r3, #1
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b01      	cmp	r3, #1
 8006320:	d102      	bne.n	8006328 <HAL_RCC_ClockConfig+0x128>
 8006322:	4b4f      	ldr	r3, [pc, #316]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	e00f      	b.n	8006348 <HAL_RCC_ClockConfig+0x148>
 8006328:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006330:	fa93 f3a3 	rbit	r3, r3
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
 8006336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800633a:	643b      	str	r3, [r7, #64]	; 0x40
 800633c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633e:	fa93 f3a3 	rbit	r3, r3
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006344:	4b46      	ldr	r3, [pc, #280]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800634c:	63ba      	str	r2, [r7, #56]	; 0x38
 800634e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006350:	fa92 f2a2 	rbit	r2, r2
 8006354:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006358:	fab2 f282 	clz	r2, r2
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	f042 0220 	orr.w	r2, r2, #32
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	f002 021f 	and.w	r2, r2, #31
 8006368:	2101      	movs	r1, #1
 800636a:	fa01 f202 	lsl.w	r2, r1, r2
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d13a      	bne.n	80063ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0b2      	b.n	80064de <HAL_RCC_ClockConfig+0x2de>
 8006378:	2302      	movs	r3, #2
 800637a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	fa93 f3a3 	rbit	r3, r3
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006386:	fab3 f383 	clz	r3, r3
 800638a:	b2db      	uxtb	r3, r3
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	d102      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x1a0>
 800639a:	4b31      	ldr	r3, [pc, #196]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	e00d      	b.n	80063bc <HAL_RCC_ClockConfig+0x1bc>
 80063a0:	2302      	movs	r3, #2
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	fa93 f3a3 	rbit	r3, r3
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
 80063ac:	2302      	movs	r3, #2
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	fa93 f3a3 	rbit	r3, r3
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	4b29      	ldr	r3, [pc, #164]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	2202      	movs	r2, #2
 80063be:	61ba      	str	r2, [r7, #24]
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	fa92 f2a2 	rbit	r2, r2
 80063c6:	617a      	str	r2, [r7, #20]
  return result;
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	fab2 f282 	clz	r2, r2
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	f042 0220 	orr.w	r2, r2, #32
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	f002 021f 	and.w	r2, r2, #31
 80063da:	2101      	movs	r1, #1
 80063dc:	fa01 f202 	lsl.w	r2, r1, r2
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e079      	b.n	80064de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f023 0203 	bic.w	r2, r3, #3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	491a      	ldr	r1, [pc, #104]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063fc:	f7fc fafe 	bl	80029fc <HAL_GetTick>
 8006400:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006402:	e00a      	b.n	800641a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006404:	f7fc fafa 	bl	80029fc <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006412:	4293      	cmp	r3, r2
 8006414:	d901      	bls.n	800641a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e061      	b.n	80064de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641a:	4b11      	ldr	r3, [pc, #68]	; (8006460 <HAL_RCC_ClockConfig+0x260>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f003 020c 	and.w	r2, r3, #12
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	429a      	cmp	r2, r3
 800642a:	d1eb      	bne.n	8006404 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <HAL_RCC_ClockConfig+0x25c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d214      	bcs.n	8006464 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b08      	ldr	r3, [pc, #32]	; (800645c <HAL_RCC_ClockConfig+0x25c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 0207 	bic.w	r2, r3, #7
 8006442:	4906      	ldr	r1, [pc, #24]	; (800645c <HAL_RCC_ClockConfig+0x25c>)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b04      	ldr	r3, [pc, #16]	; (800645c <HAL_RCC_ClockConfig+0x25c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d005      	beq.n	8006464 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e040      	b.n	80064de <HAL_RCC_ClockConfig+0x2de>
 800645c:	40022000 	.word	0x40022000
 8006460:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d008      	beq.n	8006482 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006470:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <HAL_RCC_ClockConfig+0x2e8>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	491a      	ldr	r1, [pc, #104]	; (80064e8 <HAL_RCC_ClockConfig+0x2e8>)
 800647e:	4313      	orrs	r3, r2
 8006480:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800648e:	4b16      	ldr	r3, [pc, #88]	; (80064e8 <HAL_RCC_ClockConfig+0x2e8>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	4912      	ldr	r1, [pc, #72]	; (80064e8 <HAL_RCC_ClockConfig+0x2e8>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80064a2:	f000 f829 	bl	80064f8 <HAL_RCC_GetSysClockFreq>
 80064a6:	4601      	mov	r1, r0
 80064a8:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <HAL_RCC_ClockConfig+0x2e8>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064b0:	22f0      	movs	r2, #240	; 0xf0
 80064b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	fa92 f2a2 	rbit	r2, r2
 80064ba:	60fa      	str	r2, [r7, #12]
  return result;
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	fab2 f282 	clz	r2, r2
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	40d3      	lsrs	r3, r2
 80064c6:	4a09      	ldr	r2, [pc, #36]	; (80064ec <HAL_RCC_ClockConfig+0x2ec>)
 80064c8:	5cd3      	ldrb	r3, [r2, r3]
 80064ca:	fa21 f303 	lsr.w	r3, r1, r3
 80064ce:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <HAL_RCC_ClockConfig+0x2f0>)
 80064d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <HAL_RCC_ClockConfig+0x2f4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fc fa4c 	bl	8002974 <HAL_InitTick>
  
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3778      	adds	r7, #120	; 0x78
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40021000 	.word	0x40021000
 80064ec:	0800b500 	.word	0x0800b500
 80064f0:	20000018 	.word	0x20000018
 80064f4:	2000001c 	.word	0x2000001c

080064f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b08b      	sub	sp, #44	; 0x2c
 80064fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	2300      	movs	r3, #0
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006512:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	2b04      	cmp	r3, #4
 8006520:	d002      	beq.n	8006528 <HAL_RCC_GetSysClockFreq+0x30>
 8006522:	2b08      	cmp	r3, #8
 8006524:	d003      	beq.n	800652e <HAL_RCC_GetSysClockFreq+0x36>
 8006526:	e03c      	b.n	80065a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006528:	4b24      	ldr	r3, [pc, #144]	; (80065bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800652a:	623b      	str	r3, [r7, #32]
      break;
 800652c:	e03c      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006534:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006538:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	fa92 f2a2 	rbit	r2, r2
 8006540:	607a      	str	r2, [r7, #4]
  return result;
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	fab2 f282 	clz	r2, r2
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	40d3      	lsrs	r3, r2
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800654e:	5cd3      	ldrb	r3, [r2, r3]
 8006550:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006552:	4b19      	ldr	r3, [pc, #100]	; (80065b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	220f      	movs	r2, #15
 800655c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	fa92 f2a2 	rbit	r2, r2
 8006564:	60fa      	str	r2, [r7, #12]
  return result;
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	fab2 f282 	clz	r2, r2
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	40d3      	lsrs	r3, r2
 8006570:	4a14      	ldr	r2, [pc, #80]	; (80065c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006572:	5cd3      	ldrb	r3, [r2, r3]
 8006574:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006580:	4a0e      	ldr	r2, [pc, #56]	; (80065bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	fbb2 f2f3 	udiv	r2, r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
 8006590:	e004      	b.n	800659c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4a0c      	ldr	r2, [pc, #48]	; (80065c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006596:	fb02 f303 	mul.w	r3, r2, r3
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	623b      	str	r3, [r7, #32]
      break;
 80065a0:	e002      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80065a4:	623b      	str	r3, [r7, #32]
      break;
 80065a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065a8:	6a3b      	ldr	r3, [r7, #32]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	372c      	adds	r7, #44	; 0x2c
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
 80065bc:	007a1200 	.word	0x007a1200
 80065c0:	0800b518 	.word	0x0800b518
 80065c4:	0800b528 	.word	0x0800b528
 80065c8:	003d0900 	.word	0x003d0900

080065cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065d0:	4b03      	ldr	r3, [pc, #12]	; (80065e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065d2:	681b      	ldr	r3, [r3, #0]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20000018 	.word	0x20000018

080065e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80065ea:	f7ff ffef 	bl	80065cc <HAL_RCC_GetHCLKFreq>
 80065ee:	4601      	mov	r1, r0
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80065fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	fa92 f2a2 	rbit	r2, r2
 8006604:	603a      	str	r2, [r7, #0]
  return result;
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	fab2 f282 	clz	r2, r2
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	40d3      	lsrs	r3, r2
 8006610:	4a04      	ldr	r2, [pc, #16]	; (8006624 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006612:	5cd3      	ldrb	r3, [r2, r3]
 8006614:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40021000 	.word	0x40021000
 8006624:	0800b510 	.word	0x0800b510

08006628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800662e:	f7ff ffcd 	bl	80065cc <HAL_RCC_GetHCLKFreq>
 8006632:	4601      	mov	r1, r0
 8006634:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800663c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006640:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	fa92 f2a2 	rbit	r2, r2
 8006648:	603a      	str	r2, [r7, #0]
  return result;
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	fab2 f282 	clz	r2, r2
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	40d3      	lsrs	r3, r2
 8006654:	4a04      	ldr	r2, [pc, #16]	; (8006668 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006656:	5cd3      	ldrb	r3, [r2, r3]
 8006658:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	40021000 	.word	0x40021000
 8006668:	0800b510 	.word	0x0800b510

0800666c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b092      	sub	sp, #72	; 0x48
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80d7 	beq.w	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800668a:	2300      	movs	r3, #0
 800668c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006690:	4b4e      	ldr	r3, [pc, #312]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10e      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800669c:	4b4b      	ldr	r3, [pc, #300]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	4a4a      	ldr	r2, [pc, #296]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a6:	61d3      	str	r3, [r2, #28]
 80066a8:	4b48      	ldr	r3, [pc, #288]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ba:	4b45      	ldr	r3, [pc, #276]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d118      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066c6:	4b42      	ldr	r3, [pc, #264]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a41      	ldr	r2, [pc, #260]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066d2:	f7fc f993 	bl	80029fc <HAL_GetTick>
 80066d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d8:	e008      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066da:	f7fc f98f 	bl	80029fc <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b64      	cmp	r3, #100	; 0x64
 80066e6:	d901      	bls.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e169      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ec:	4b38      	ldr	r3, [pc, #224]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f0      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066f8:	4b34      	ldr	r3, [pc, #208]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8084 	beq.w	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006714:	429a      	cmp	r2, r3
 8006716:	d07c      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006718:	4b2c      	ldr	r3, [pc, #176]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006726:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	fa93 f3a3 	rbit	r3, r3
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006732:	fab3 f383 	clz	r3, r3
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	4b26      	ldr	r3, [pc, #152]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	461a      	mov	r2, r3
 8006742:	2301      	movs	r3, #1
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800674a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	fa93 f3a3 	rbit	r3, r3
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006756:	fab3 f383 	clz	r3, r3
 800675a:	b2db      	uxtb	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	461a      	mov	r2, r3
 8006766:	2300      	movs	r3, #0
 8006768:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800676a:	4a18      	ldr	r2, [pc, #96]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800676c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d04b      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677a:	f7fc f93f 	bl	80029fc <HAL_GetTick>
 800677e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006780:	e00a      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006782:	f7fc f93b 	bl	80029fc <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006790:	4293      	cmp	r3, r2
 8006792:	d901      	bls.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e113      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006798:	2302      	movs	r3, #2
 800679a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	fa93 f3a3 	rbit	r3, r3
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
 80067a4:	2302      	movs	r3, #2
 80067a6:	623b      	str	r3, [r7, #32]
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	fa93 f3a3 	rbit	r3, r3
 80067ae:	61fb      	str	r3, [r7, #28]
  return result;
 80067b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b2:	fab3 f383 	clz	r3, r3
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f043 0302 	orr.w	r3, r3, #2
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d108      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80067c6:	4b01      	ldr	r3, [pc, #4]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	e00d      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80067cc:	40021000 	.word	0x40021000
 80067d0:	40007000 	.word	0x40007000
 80067d4:	10908100 	.word	0x10908100
 80067d8:	2302      	movs	r3, #2
 80067da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	fa93 f3a3 	rbit	r3, r3
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	4b78      	ldr	r3, [pc, #480]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	2202      	movs	r2, #2
 80067ea:	613a      	str	r2, [r7, #16]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	fa92 f2a2 	rbit	r2, r2
 80067f2:	60fa      	str	r2, [r7, #12]
  return result;
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	fab2 f282 	clz	r2, r2
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	f002 021f 	and.w	r2, r2, #31
 8006806:	2101      	movs	r1, #1
 8006808:	fa01 f202 	lsl.w	r2, r1, r2
 800680c:	4013      	ands	r3, r2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0b7      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006812:	4b6d      	ldr	r3, [pc, #436]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	496a      	ldr	r1, [pc, #424]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006820:	4313      	orrs	r3, r2
 8006822:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006824:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006828:	2b01      	cmp	r3, #1
 800682a:	d105      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800682c:	4b66      	ldr	r3, [pc, #408]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	4a65      	ldr	r2, [pc, #404]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006836:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006844:	4b60      	ldr	r3, [pc, #384]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	f023 0203 	bic.w	r2, r3, #3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	495d      	ldr	r1, [pc, #372]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006852:	4313      	orrs	r3, r2
 8006854:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d008      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006862:	4b59      	ldr	r3, [pc, #356]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	4956      	ldr	r1, [pc, #344]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006870:	4313      	orrs	r3, r2
 8006872:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006880:	4b51      	ldr	r3, [pc, #324]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	494e      	ldr	r1, [pc, #312]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800688e:	4313      	orrs	r3, r2
 8006890:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d008      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800689e:	4b4a      	ldr	r3, [pc, #296]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	f023 0210 	bic.w	r2, r3, #16
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	4947      	ldr	r1, [pc, #284]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80068bc:	4b42      	ldr	r3, [pc, #264]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	493f      	ldr	r1, [pc, #252]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068da:	4b3b      	ldr	r3, [pc, #236]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	f023 0220 	bic.w	r2, r3, #32
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	4938      	ldr	r1, [pc, #224]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068f8:	4b33      	ldr	r3, [pc, #204]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	4930      	ldr	r1, [pc, #192]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006906:	4313      	orrs	r3, r2
 8006908:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0310 	and.w	r3, r3, #16
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006916:	4b2c      	ldr	r3, [pc, #176]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	4929      	ldr	r1, [pc, #164]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006924:	4313      	orrs	r3, r2
 8006926:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006934:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	4921      	ldr	r1, [pc, #132]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006942:	4313      	orrs	r3, r2
 8006944:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d008      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006952:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	491a      	ldr	r1, [pc, #104]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006960:	4313      	orrs	r3, r2
 8006962:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006970:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	4912      	ldr	r1, [pc, #72]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800697e:	4313      	orrs	r3, r2
 8006980:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800698e:	4b0e      	ldr	r3, [pc, #56]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	490b      	ldr	r1, [pc, #44]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800699c:	4313      	orrs	r3, r2
 800699e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b8:	4903      	ldr	r1, [pc, #12]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3748      	adds	r7, #72	; 0x48
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40021000 	.word	0x40021000

080069cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e01d      	b.n	8006a1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fb fcbe 	bl	8002374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f000 fe84 	bl	8007718 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <HAL_TIM_Base_Start+0x50>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b06      	cmp	r3, #6
 8006a44:	d00b      	beq.n	8006a5e <HAL_TIM_Base_Start+0x3a>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4c:	d007      	beq.n	8006a5e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	00010007 	.word	0x00010007

08006a78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e01d      	b.n	8006ac6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fb fcc4 	bl	800242c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f000 fe2e 	bl	8007718 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f001 fb36 	bl	8008154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <HAL_TIM_OC_Start+0x98>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <HAL_TIM_OC_Start+0x4a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1d      	ldr	r2, [pc, #116]	; (8006b6c <HAL_TIM_OC_Start+0x9c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00e      	beq.n	8006b1a <HAL_TIM_OC_Start+0x4a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1b      	ldr	r2, [pc, #108]	; (8006b70 <HAL_TIM_OC_Start+0xa0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_TIM_OC_Start+0x4a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1a      	ldr	r2, [pc, #104]	; (8006b74 <HAL_TIM_OC_Start+0xa4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d004      	beq.n	8006b1a <HAL_TIM_OC_Start+0x4a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <HAL_TIM_OC_Start+0xa8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d101      	bne.n	8006b1e <HAL_TIM_OC_Start+0x4e>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <HAL_TIM_OC_Start+0x50>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <HAL_TIM_OC_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <HAL_TIM_OC_Start+0xac>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b06      	cmp	r3, #6
 8006b44:	d00b      	beq.n	8006b5e <HAL_TIM_OC_Start+0x8e>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b4c:	d007      	beq.n	8006b5e <HAL_TIM_OC_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40012c00 	.word	0x40012c00
 8006b6c:	40013400 	.word	0x40013400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800
 8006b7c:	00010007 	.word	0x00010007

08006b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e01d      	b.n	8006bce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fb fbb6 	bl	8002318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f000 fdaa 	bl	8007718 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2201      	movs	r2, #1
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 fab2 	bl	8008154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <HAL_TIM_PWM_Start+0x98>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x4a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a1d      	ldr	r2, [pc, #116]	; (8006c74 <HAL_TIM_PWM_Start+0x9c>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00e      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x4a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1b      	ldr	r2, [pc, #108]	; (8006c78 <HAL_TIM_PWM_Start+0xa0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d009      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x4a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1a      	ldr	r2, [pc, #104]	; (8006c7c <HAL_TIM_PWM_Start+0xa4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d004      	beq.n	8006c22 <HAL_TIM_PWM_Start+0x4a>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a18      	ldr	r2, [pc, #96]	; (8006c80 <HAL_TIM_PWM_Start+0xa8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <HAL_TIM_PWM_Start+0x4e>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <HAL_TIM_PWM_Start+0x50>
 8006c26:	2300      	movs	r3, #0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c3a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <HAL_TIM_PWM_Start+0xac>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b06      	cmp	r3, #6
 8006c4c:	d00b      	beq.n	8006c66 <HAL_TIM_PWM_Start+0x8e>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c54:	d007      	beq.n	8006c66 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0201 	orr.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40013400 	.word	0x40013400
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	40014400 	.word	0x40014400
 8006c80:	40014800 	.word	0x40014800
 8006c84:	00010007 	.word	0x00010007

08006c88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e01d      	b.n	8006cd6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f815 	bl	8006cde <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f000 fd26 	bl	8007718 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	d841      	bhi.n	8006d88 <HAL_TIM_IC_Start_IT+0x94>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <HAL_TIM_IC_Start_IT+0x18>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d41 	.word	0x08006d41
 8006d10:	08006d89 	.word	0x08006d89
 8006d14:	08006d89 	.word	0x08006d89
 8006d18:	08006d89 	.word	0x08006d89
 8006d1c:	08006d53 	.word	0x08006d53
 8006d20:	08006d89 	.word	0x08006d89
 8006d24:	08006d89 	.word	0x08006d89
 8006d28:	08006d89 	.word	0x08006d89
 8006d2c:	08006d65 	.word	0x08006d65
 8006d30:	08006d89 	.word	0x08006d89
 8006d34:	08006d89 	.word	0x08006d89
 8006d38:	08006d89 	.word	0x08006d89
 8006d3c:	08006d77 	.word	0x08006d77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0202 	orr.w	r2, r2, #2
 8006d4e:	60da      	str	r2, [r3, #12]
      break;
 8006d50:	e01b      	b.n	8006d8a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0204 	orr.w	r2, r2, #4
 8006d60:	60da      	str	r2, [r3, #12]
      break;
 8006d62:	e012      	b.n	8006d8a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0208 	orr.w	r2, r2, #8
 8006d72:	60da      	str	r2, [r3, #12]
      break;
 8006d74:	e009      	b.n	8006d8a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0210 	orr.w	r2, r2, #16
 8006d84:	60da      	str	r2, [r3, #12]
      break;
 8006d86:	e000      	b.n	8006d8a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8006d88:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f001 f9de 	bl	8008154 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <HAL_TIM_IC_Start_IT+0xd8>)
 8006da0:	4013      	ands	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b06      	cmp	r3, #6
 8006da8:	d00b      	beq.n	8006dc2 <HAL_TIM_IC_Start_IT+0xce>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db0:	d007      	beq.n	8006dc2 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0201 	orr.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	00010007 	.word	0x00010007

08006dd0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b0c      	cmp	r3, #12
 8006dde:	d841      	bhi.n	8006e64 <HAL_TIM_IC_Stop_IT+0x94>
 8006de0:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <HAL_TIM_IC_Stop_IT+0x18>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006e1d 	.word	0x08006e1d
 8006dec:	08006e65 	.word	0x08006e65
 8006df0:	08006e65 	.word	0x08006e65
 8006df4:	08006e65 	.word	0x08006e65
 8006df8:	08006e2f 	.word	0x08006e2f
 8006dfc:	08006e65 	.word	0x08006e65
 8006e00:	08006e65 	.word	0x08006e65
 8006e04:	08006e65 	.word	0x08006e65
 8006e08:	08006e41 	.word	0x08006e41
 8006e0c:	08006e65 	.word	0x08006e65
 8006e10:	08006e65 	.word	0x08006e65
 8006e14:	08006e65 	.word	0x08006e65
 8006e18:	08006e53 	.word	0x08006e53
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0202 	bic.w	r2, r2, #2
 8006e2a:	60da      	str	r2, [r3, #12]
      break;
 8006e2c:	e01b      	b.n	8006e66 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0204 	bic.w	r2, r2, #4
 8006e3c:	60da      	str	r2, [r3, #12]
      break;
 8006e3e:	e012      	b.n	8006e66 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0208 	bic.w	r2, r2, #8
 8006e4e:	60da      	str	r2, [r3, #12]
      break;
 8006e50:	e009      	b.n	8006e66 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0210 	bic.w	r2, r2, #16
 8006e60:	60da      	str	r2, [r3, #12]
      break;
 8006e62:	e000      	b.n	8006e66 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8006e64:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 f970 	bl	8008154 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6a1a      	ldr	r2, [r3, #32]
 8006e7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e7e:	4013      	ands	r3, r2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10f      	bne.n	8006ea4 <HAL_TIM_IC_Stop_IT+0xd4>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6a1a      	ldr	r2, [r3, #32]
 8006e8a:	f240 4344 	movw	r3, #1092	; 0x444
 8006e8e:	4013      	ands	r3, r2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d107      	bne.n	8006ea4 <HAL_TIM_IC_Stop_IT+0xd4>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0201 	bic.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop

08006eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d122      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d11b      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f06f 0202 	mvn.w	r2, #2
 8006edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fa ff58 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8006ef8:	e005      	b.n	8006f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fbed 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fbf4 	bl	80076ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d122      	bne.n	8006f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d11b      	bne.n	8006f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f06f 0204 	mvn.w	r2, #4
 8006f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fa ff2e 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8006f4c:	e005      	b.n	8006f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fbc3 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fbca 	bl	80076ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b08      	cmp	r3, #8
 8006f6c:	d122      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d11b      	bne.n	8006fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f06f 0208 	mvn.w	r2, #8
 8006f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fa ff04 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8006fa0:	e005      	b.n	8006fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fb99 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fba0 	bl	80076ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	2b10      	cmp	r3, #16
 8006fc0:	d122      	bne.n	8007008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d11b      	bne.n	8007008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0210 	mvn.w	r2, #16
 8006fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fa feda 	bl	8001da8 <HAL_TIM_IC_CaptureCallback>
 8006ff4:	e005      	b.n	8007002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fb6f 	bl	80076da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fb76 	bl	80076ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b01      	cmp	r3, #1
 8007014:	d10e      	bne.n	8007034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b01      	cmp	r3, #1
 8007022:	d107      	bne.n	8007034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f06f 0201 	mvn.w	r2, #1
 800702c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fb49 	bl	80076c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b80      	cmp	r3, #128	; 0x80
 8007040:	d10e      	bne.n	8007060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704c:	2b80      	cmp	r3, #128	; 0x80
 800704e:	d107      	bne.n	8007060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 f9a8 	bl	80083b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706e:	d10e      	bne.n	800708e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707a:	2b80      	cmp	r3, #128	; 0x80
 800707c:	d107      	bne.n	800708e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f99b 	bl	80083c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007098:	2b40      	cmp	r3, #64	; 0x40
 800709a:	d10e      	bne.n	80070ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a6:	2b40      	cmp	r3, #64	; 0x40
 80070a8:	d107      	bne.n	80070ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fb24 	bl	8007702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d10e      	bne.n	80070e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d107      	bne.n	80070e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f06f 0220 	mvn.w	r2, #32
 80070de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 f95b 	bl	800839c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_TIM_OC_ConfigChannel+0x1a>
 8007106:	2302      	movs	r3, #2
 8007108:	e06c      	b.n	80071e4 <HAL_TIM_OC_ConfigChannel+0xf4>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2202      	movs	r2, #2
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b14      	cmp	r3, #20
 800711e:	d857      	bhi.n	80071d0 <HAL_TIM_OC_ConfigChannel+0xe0>
 8007120:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <HAL_TIM_OC_ConfigChannel+0x38>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	0800717d 	.word	0x0800717d
 800712c:	080071d1 	.word	0x080071d1
 8007130:	080071d1 	.word	0x080071d1
 8007134:	080071d1 	.word	0x080071d1
 8007138:	0800718b 	.word	0x0800718b
 800713c:	080071d1 	.word	0x080071d1
 8007140:	080071d1 	.word	0x080071d1
 8007144:	080071d1 	.word	0x080071d1
 8007148:	08007199 	.word	0x08007199
 800714c:	080071d1 	.word	0x080071d1
 8007150:	080071d1 	.word	0x080071d1
 8007154:	080071d1 	.word	0x080071d1
 8007158:	080071a7 	.word	0x080071a7
 800715c:	080071d1 	.word	0x080071d1
 8007160:	080071d1 	.word	0x080071d1
 8007164:	080071d1 	.word	0x080071d1
 8007168:	080071b5 	.word	0x080071b5
 800716c:	080071d1 	.word	0x080071d1
 8007170:	080071d1 	.word	0x080071d1
 8007174:	080071d1 	.word	0x080071d1
 8007178:	080071c3 	.word	0x080071c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fb58 	bl	8007838 <TIM_OC1_SetConfig>
      break;
 8007188:	e023      	b.n	80071d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fbe1 	bl	8007958 <TIM_OC2_SetConfig>
      break;
 8007196:	e01c      	b.n	80071d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fc64 	bl	8007a6c <TIM_OC3_SetConfig>
      break;
 80071a4:	e015      	b.n	80071d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fce5 	bl	8007b7c <TIM_OC4_SetConfig>
      break;
 80071b2:	e00e      	b.n	80071d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fd48 	bl	8007c50 <TIM_OC5_SetConfig>
      break;
 80071c0:	e007      	b.n	80071d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fda5 	bl	8007d18 <TIM_OC6_SetConfig>
      break;
 80071ce:	e000      	b.n	80071d2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80071d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007202:	2302      	movs	r3, #2
 8007204:	e08a      	b.n	800731c <HAL_TIM_IC_ConfigChannel+0x130>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2202      	movs	r2, #2
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d11b      	bne.n	8007254 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6818      	ldr	r0, [r3, #0]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	6819      	ldr	r1, [r3, #0]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f000 fdda 	bl	8007de4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 020c 	bic.w	r2, r2, #12
 800723e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6999      	ldr	r1, [r3, #24]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	619a      	str	r2, [r3, #24]
 8007252:	e05a      	b.n	800730a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b04      	cmp	r3, #4
 8007258:	d11c      	bne.n	8007294 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6819      	ldr	r1, [r3, #0]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f000 fe52 	bl	8007f12 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	699a      	ldr	r2, [r3, #24]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800727c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6999      	ldr	r1, [r3, #24]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	021a      	lsls	r2, r3, #8
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	619a      	str	r2, [r3, #24]
 8007292:	e03a      	b.n	800730a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b08      	cmp	r3, #8
 8007298:	d11b      	bne.n	80072d2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f000 fe9f 	bl	8007fec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 020c 	bic.w	r2, r2, #12
 80072bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69d9      	ldr	r1, [r3, #28]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	61da      	str	r2, [r3, #28]
 80072d0:	e01b      	b.n	800730a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6819      	ldr	r1, [r3, #0]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f000 febf 	bl	8008064 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69d9      	ldr	r1, [r3, #28]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	021a      	lsls	r2, r3, #8
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800733a:	2302      	movs	r3, #2
 800733c:	e105      	b.n	800754a <HAL_TIM_PWM_ConfigChannel+0x226>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2202      	movs	r2, #2
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b14      	cmp	r3, #20
 8007352:	f200 80f0 	bhi.w	8007536 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	080073b1 	.word	0x080073b1
 8007360:	08007537 	.word	0x08007537
 8007364:	08007537 	.word	0x08007537
 8007368:	08007537 	.word	0x08007537
 800736c:	080073f1 	.word	0x080073f1
 8007370:	08007537 	.word	0x08007537
 8007374:	08007537 	.word	0x08007537
 8007378:	08007537 	.word	0x08007537
 800737c:	08007433 	.word	0x08007433
 8007380:	08007537 	.word	0x08007537
 8007384:	08007537 	.word	0x08007537
 8007388:	08007537 	.word	0x08007537
 800738c:	08007473 	.word	0x08007473
 8007390:	08007537 	.word	0x08007537
 8007394:	08007537 	.word	0x08007537
 8007398:	08007537 	.word	0x08007537
 800739c:	080074b5 	.word	0x080074b5
 80073a0:	08007537 	.word	0x08007537
 80073a4:	08007537 	.word	0x08007537
 80073a8:	08007537 	.word	0x08007537
 80073ac:	080074f5 	.word	0x080074f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fa3e 	bl	8007838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0208 	orr.w	r2, r2, #8
 80073ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0204 	bic.w	r2, r2, #4
 80073da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6999      	ldr	r1, [r3, #24]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	619a      	str	r2, [r3, #24]
      break;
 80073ee:	e0a3      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68b9      	ldr	r1, [r7, #8]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 faae 	bl	8007958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800740a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699a      	ldr	r2, [r3, #24]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6999      	ldr	r1, [r3, #24]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	021a      	lsls	r2, r3, #8
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	619a      	str	r2, [r3, #24]
      break;
 8007430:	e082      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fb17 	bl	8007a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0208 	orr.w	r2, r2, #8
 800744c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69da      	ldr	r2, [r3, #28]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 0204 	bic.w	r2, r2, #4
 800745c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69d9      	ldr	r1, [r3, #28]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	61da      	str	r2, [r3, #28]
      break;
 8007470:	e062      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fb7f 	bl	8007b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800748c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69da      	ldr	r2, [r3, #28]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69d9      	ldr	r1, [r3, #28]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	021a      	lsls	r2, r3, #8
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	61da      	str	r2, [r3, #28]
      break;
 80074b2:	e041      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68b9      	ldr	r1, [r7, #8]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fbc8 	bl	8007c50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f042 0208 	orr.w	r2, r2, #8
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0204 	bic.w	r2, r2, #4
 80074de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074f2:	e021      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fc0c 	bl	8007d18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800750e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800751e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	021a      	lsls	r2, r3, #8
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007534:	e000      	b.n	8007538 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8007536:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop

08007554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_TIM_ConfigClockSource+0x18>
 8007568:	2302      	movs	r3, #2
 800756a:	e0a8      	b.n	80076be <HAL_TIM_ConfigClockSource+0x16a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800758a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800758e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007596:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d067      	beq.n	8007678 <HAL_TIM_ConfigClockSource+0x124>
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	d80b      	bhi.n	80075c4 <HAL_TIM_ConfigClockSource+0x70>
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d073      	beq.n	8007698 <HAL_TIM_ConfigClockSource+0x144>
 80075b0:	2b10      	cmp	r3, #16
 80075b2:	d802      	bhi.n	80075ba <HAL_TIM_ConfigClockSource+0x66>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d06f      	beq.n	8007698 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80075b8:	e078      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d06c      	beq.n	8007698 <HAL_TIM_ConfigClockSource+0x144>
 80075be:	2b30      	cmp	r3, #48	; 0x30
 80075c0:	d06a      	beq.n	8007698 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80075c2:	e073      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80075c4:	2b70      	cmp	r3, #112	; 0x70
 80075c6:	d00d      	beq.n	80075e4 <HAL_TIM_ConfigClockSource+0x90>
 80075c8:	2b70      	cmp	r3, #112	; 0x70
 80075ca:	d804      	bhi.n	80075d6 <HAL_TIM_ConfigClockSource+0x82>
 80075cc:	2b50      	cmp	r3, #80	; 0x50
 80075ce:	d033      	beq.n	8007638 <HAL_TIM_ConfigClockSource+0xe4>
 80075d0:	2b60      	cmp	r3, #96	; 0x60
 80075d2:	d041      	beq.n	8007658 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80075d4:	e06a      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80075d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075da:	d066      	beq.n	80076aa <HAL_TIM_ConfigClockSource+0x156>
 80075dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e0:	d017      	beq.n	8007612 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80075e2:	e063      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	6899      	ldr	r1, [r3, #8]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f000 fd8e 	bl	8008114 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007606:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	609a      	str	r2, [r3, #8]
      break;
 8007610:	e04c      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6899      	ldr	r1, [r3, #8]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f000 fd77 	bl	8008114 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007634:	609a      	str	r2, [r3, #8]
      break;
 8007636:	e039      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	6859      	ldr	r1, [r3, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	461a      	mov	r2, r3
 8007646:	f000 fc35 	bl	8007eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2150      	movs	r1, #80	; 0x50
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fd44 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007656:	e029      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6818      	ldr	r0, [r3, #0]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	6859      	ldr	r1, [r3, #4]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	461a      	mov	r2, r3
 8007666:	f000 fc91 	bl	8007f8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2160      	movs	r1, #96	; 0x60
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fd34 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007676:	e019      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	6859      	ldr	r1, [r3, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	461a      	mov	r2, r3
 8007686:	f000 fc15 	bl	8007eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2140      	movs	r1, #64	; 0x40
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fd24 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007696:	e009      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f000 fd1b 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 80076a8:	e000      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x158>
      break;
 80076aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
	...

08007718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a3c      	ldr	r2, [pc, #240]	; (800781c <TIM_Base_SetConfig+0x104>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00f      	beq.n	8007750 <TIM_Base_SetConfig+0x38>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007736:	d00b      	beq.n	8007750 <TIM_Base_SetConfig+0x38>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a39      	ldr	r2, [pc, #228]	; (8007820 <TIM_Base_SetConfig+0x108>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d007      	beq.n	8007750 <TIM_Base_SetConfig+0x38>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a38      	ldr	r2, [pc, #224]	; (8007824 <TIM_Base_SetConfig+0x10c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_Base_SetConfig+0x38>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a37      	ldr	r2, [pc, #220]	; (8007828 <TIM_Base_SetConfig+0x110>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d108      	bne.n	8007762 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2d      	ldr	r2, [pc, #180]	; (800781c <TIM_Base_SetConfig+0x104>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d01b      	beq.n	80077a2 <TIM_Base_SetConfig+0x8a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007770:	d017      	beq.n	80077a2 <TIM_Base_SetConfig+0x8a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2a      	ldr	r2, [pc, #168]	; (8007820 <TIM_Base_SetConfig+0x108>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <TIM_Base_SetConfig+0x8a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a29      	ldr	r2, [pc, #164]	; (8007824 <TIM_Base_SetConfig+0x10c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00f      	beq.n	80077a2 <TIM_Base_SetConfig+0x8a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a28      	ldr	r2, [pc, #160]	; (8007828 <TIM_Base_SetConfig+0x110>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00b      	beq.n	80077a2 <TIM_Base_SetConfig+0x8a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a27      	ldr	r2, [pc, #156]	; (800782c <TIM_Base_SetConfig+0x114>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <TIM_Base_SetConfig+0x8a>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a26      	ldr	r2, [pc, #152]	; (8007830 <TIM_Base_SetConfig+0x118>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_Base_SetConfig+0x8a>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a25      	ldr	r2, [pc, #148]	; (8007834 <TIM_Base_SetConfig+0x11c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d108      	bne.n	80077b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a10      	ldr	r2, [pc, #64]	; (800781c <TIM_Base_SetConfig+0x104>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00f      	beq.n	8007800 <TIM_Base_SetConfig+0xe8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a11      	ldr	r2, [pc, #68]	; (8007828 <TIM_Base_SetConfig+0x110>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d00b      	beq.n	8007800 <TIM_Base_SetConfig+0xe8>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a10      	ldr	r2, [pc, #64]	; (800782c <TIM_Base_SetConfig+0x114>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d007      	beq.n	8007800 <TIM_Base_SetConfig+0xe8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a0f      	ldr	r2, [pc, #60]	; (8007830 <TIM_Base_SetConfig+0x118>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d003      	beq.n	8007800 <TIM_Base_SetConfig+0xe8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a0e      	ldr	r2, [pc, #56]	; (8007834 <TIM_Base_SetConfig+0x11c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d103      	bne.n	8007808 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	615a      	str	r2, [r3, #20]
}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40012c00 	.word	0x40012c00
 8007820:	40000400 	.word	0x40000400
 8007824:	40000800 	.word	0x40000800
 8007828:	40013400 	.word	0x40013400
 800782c:	40014000 	.word	0x40014000
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800

08007838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	f023 0201 	bic.w	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f023 0302 	bic.w	r3, r3, #2
 8007884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a2c      	ldr	r2, [pc, #176]	; (8007944 <TIM_OC1_SetConfig+0x10c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00f      	beq.n	80078b8 <TIM_OC1_SetConfig+0x80>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a2b      	ldr	r2, [pc, #172]	; (8007948 <TIM_OC1_SetConfig+0x110>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00b      	beq.n	80078b8 <TIM_OC1_SetConfig+0x80>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a2a      	ldr	r2, [pc, #168]	; (800794c <TIM_OC1_SetConfig+0x114>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d007      	beq.n	80078b8 <TIM_OC1_SetConfig+0x80>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a29      	ldr	r2, [pc, #164]	; (8007950 <TIM_OC1_SetConfig+0x118>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_OC1_SetConfig+0x80>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a28      	ldr	r2, [pc, #160]	; (8007954 <TIM_OC1_SetConfig+0x11c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d10c      	bne.n	80078d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f023 0308 	bic.w	r3, r3, #8
 80078be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 0304 	bic.w	r3, r3, #4
 80078d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a1b      	ldr	r2, [pc, #108]	; (8007944 <TIM_OC1_SetConfig+0x10c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00f      	beq.n	80078fa <TIM_OC1_SetConfig+0xc2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a1a      	ldr	r2, [pc, #104]	; (8007948 <TIM_OC1_SetConfig+0x110>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00b      	beq.n	80078fa <TIM_OC1_SetConfig+0xc2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a19      	ldr	r2, [pc, #100]	; (800794c <TIM_OC1_SetConfig+0x114>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d007      	beq.n	80078fa <TIM_OC1_SetConfig+0xc2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a18      	ldr	r2, [pc, #96]	; (8007950 <TIM_OC1_SetConfig+0x118>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d003      	beq.n	80078fa <TIM_OC1_SetConfig+0xc2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a17      	ldr	r2, [pc, #92]	; (8007954 <TIM_OC1_SetConfig+0x11c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d111      	bne.n	800791e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	621a      	str	r2, [r3, #32]
}
 8007938:	bf00      	nop
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	40012c00 	.word	0x40012c00
 8007948:	40013400 	.word	0x40013400
 800794c:	40014000 	.word	0x40014000
 8007950:	40014400 	.word	0x40014400
 8007954:	40014800 	.word	0x40014800

08007958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f023 0210 	bic.w	r2, r3, #16
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0320 	bic.w	r3, r3, #32
 80079a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a28      	ldr	r2, [pc, #160]	; (8007a58 <TIM_OC2_SetConfig+0x100>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_OC2_SetConfig+0x6c>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a27      	ldr	r2, [pc, #156]	; (8007a5c <TIM_OC2_SetConfig+0x104>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d10d      	bne.n	80079e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a1d      	ldr	r2, [pc, #116]	; (8007a58 <TIM_OC2_SetConfig+0x100>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00f      	beq.n	8007a08 <TIM_OC2_SetConfig+0xb0>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a1c      	ldr	r2, [pc, #112]	; (8007a5c <TIM_OC2_SetConfig+0x104>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00b      	beq.n	8007a08 <TIM_OC2_SetConfig+0xb0>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a1b      	ldr	r2, [pc, #108]	; (8007a60 <TIM_OC2_SetConfig+0x108>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d007      	beq.n	8007a08 <TIM_OC2_SetConfig+0xb0>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <TIM_OC2_SetConfig+0x10c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d003      	beq.n	8007a08 <TIM_OC2_SetConfig+0xb0>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a19      	ldr	r2, [pc, #100]	; (8007a68 <TIM_OC2_SetConfig+0x110>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d113      	bne.n	8007a30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a0e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a16:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	621a      	str	r2, [r3, #32]
}
 8007a4a:	bf00      	nop
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40012c00 	.word	0x40012c00
 8007a5c:	40013400 	.word	0x40013400
 8007a60:	40014000 	.word	0x40014000
 8007a64:	40014400 	.word	0x40014400
 8007a68:	40014800 	.word	0x40014800

08007a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a27      	ldr	r2, [pc, #156]	; (8007b68 <TIM_OC3_SetConfig+0xfc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d003      	beq.n	8007ad6 <TIM_OC3_SetConfig+0x6a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a26      	ldr	r2, [pc, #152]	; (8007b6c <TIM_OC3_SetConfig+0x100>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d10d      	bne.n	8007af2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	021b      	lsls	r3, r3, #8
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007af0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a1c      	ldr	r2, [pc, #112]	; (8007b68 <TIM_OC3_SetConfig+0xfc>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00f      	beq.n	8007b1a <TIM_OC3_SetConfig+0xae>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a1b      	ldr	r2, [pc, #108]	; (8007b6c <TIM_OC3_SetConfig+0x100>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d00b      	beq.n	8007b1a <TIM_OC3_SetConfig+0xae>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1a      	ldr	r2, [pc, #104]	; (8007b70 <TIM_OC3_SetConfig+0x104>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d007      	beq.n	8007b1a <TIM_OC3_SetConfig+0xae>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a19      	ldr	r2, [pc, #100]	; (8007b74 <TIM_OC3_SetConfig+0x108>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d003      	beq.n	8007b1a <TIM_OC3_SetConfig+0xae>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <TIM_OC3_SetConfig+0x10c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d113      	bne.n	8007b42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	011b      	lsls	r3, r3, #4
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	621a      	str	r2, [r3, #32]
}
 8007b5c:	bf00      	nop
 8007b5e:	371c      	adds	r7, #28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	40012c00 	.word	0x40012c00
 8007b6c:	40013400 	.word	0x40013400
 8007b70:	40014000 	.word	0x40014000
 8007b74:	40014400 	.word	0x40014400
 8007b78:	40014800 	.word	0x40014800

08007b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	031b      	lsls	r3, r3, #12
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a18      	ldr	r2, [pc, #96]	; (8007c3c <TIM_OC4_SetConfig+0xc0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00f      	beq.n	8007c00 <TIM_OC4_SetConfig+0x84>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a17      	ldr	r2, [pc, #92]	; (8007c40 <TIM_OC4_SetConfig+0xc4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00b      	beq.n	8007c00 <TIM_OC4_SetConfig+0x84>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a16      	ldr	r2, [pc, #88]	; (8007c44 <TIM_OC4_SetConfig+0xc8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d007      	beq.n	8007c00 <TIM_OC4_SetConfig+0x84>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a15      	ldr	r2, [pc, #84]	; (8007c48 <TIM_OC4_SetConfig+0xcc>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d003      	beq.n	8007c00 <TIM_OC4_SetConfig+0x84>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a14      	ldr	r2, [pc, #80]	; (8007c4c <TIM_OC4_SetConfig+0xd0>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d109      	bne.n	8007c14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	019b      	lsls	r3, r3, #6
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40013400 	.word	0x40013400
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40014400 	.word	0x40014400
 8007c4c:	40014800 	.word	0x40014800

08007c50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	041b      	lsls	r3, r3, #16
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a17      	ldr	r2, [pc, #92]	; (8007d04 <TIM_OC5_SetConfig+0xb4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00f      	beq.n	8007cca <TIM_OC5_SetConfig+0x7a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a16      	ldr	r2, [pc, #88]	; (8007d08 <TIM_OC5_SetConfig+0xb8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d00b      	beq.n	8007cca <TIM_OC5_SetConfig+0x7a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a15      	ldr	r2, [pc, #84]	; (8007d0c <TIM_OC5_SetConfig+0xbc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d007      	beq.n	8007cca <TIM_OC5_SetConfig+0x7a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a14      	ldr	r2, [pc, #80]	; (8007d10 <TIM_OC5_SetConfig+0xc0>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d003      	beq.n	8007cca <TIM_OC5_SetConfig+0x7a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <TIM_OC5_SetConfig+0xc4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d109      	bne.n	8007cde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	021b      	lsls	r3, r3, #8
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	621a      	str	r2, [r3, #32]
}
 8007cf8:	bf00      	nop
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	40012c00 	.word	0x40012c00
 8007d08:	40013400 	.word	0x40013400
 8007d0c:	40014000 	.word	0x40014000
 8007d10:	40014400 	.word	0x40014400
 8007d14:	40014800 	.word	0x40014800

08007d18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	051b      	lsls	r3, r3, #20
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a18      	ldr	r2, [pc, #96]	; (8007dd0 <TIM_OC6_SetConfig+0xb8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00f      	beq.n	8007d94 <TIM_OC6_SetConfig+0x7c>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a17      	ldr	r2, [pc, #92]	; (8007dd4 <TIM_OC6_SetConfig+0xbc>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00b      	beq.n	8007d94 <TIM_OC6_SetConfig+0x7c>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <TIM_OC6_SetConfig+0xc0>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d007      	beq.n	8007d94 <TIM_OC6_SetConfig+0x7c>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <TIM_OC6_SetConfig+0xc4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d003      	beq.n	8007d94 <TIM_OC6_SetConfig+0x7c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a14      	ldr	r2, [pc, #80]	; (8007de0 <TIM_OC6_SetConfig+0xc8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d109      	bne.n	8007da8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	029b      	lsls	r3, r3, #10
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	621a      	str	r2, [r3, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40012c00 	.word	0x40012c00
 8007dd4:	40013400 	.word	0x40013400
 8007dd8:	40014000 	.word	0x40014000
 8007ddc:	40014400 	.word	0x40014400
 8007de0:	40014800 	.word	0x40014800

08007de4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	f023 0201 	bic.w	r2, r3, #1
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4a24      	ldr	r2, [pc, #144]	; (8007ea0 <TIM_TI1_SetConfig+0xbc>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d013      	beq.n	8007e3a <TIM_TI1_SetConfig+0x56>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e18:	d00f      	beq.n	8007e3a <TIM_TI1_SetConfig+0x56>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4a21      	ldr	r2, [pc, #132]	; (8007ea4 <TIM_TI1_SetConfig+0xc0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00b      	beq.n	8007e3a <TIM_TI1_SetConfig+0x56>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a20      	ldr	r2, [pc, #128]	; (8007ea8 <TIM_TI1_SetConfig+0xc4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d007      	beq.n	8007e3a <TIM_TI1_SetConfig+0x56>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a1f      	ldr	r2, [pc, #124]	; (8007eac <TIM_TI1_SetConfig+0xc8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d003      	beq.n	8007e3a <TIM_TI1_SetConfig+0x56>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a1e      	ldr	r2, [pc, #120]	; (8007eb0 <TIM_TI1_SetConfig+0xcc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d101      	bne.n	8007e3e <TIM_TI1_SetConfig+0x5a>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <TIM_TI1_SetConfig+0x5c>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f023 0303 	bic.w	r3, r3, #3
 8007e4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	e003      	b.n	8007e5e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f043 0301 	orr.w	r3, r3, #1
 8007e5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f023 030a 	bic.w	r3, r3, #10
 8007e78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f003 030a 	and.w	r3, r3, #10
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40012c00 	.word	0x40012c00
 8007ea4:	40000400 	.word	0x40000400
 8007ea8:	40000800 	.word	0x40000800
 8007eac:	40013400 	.word	0x40013400
 8007eb0:	40014000 	.word	0x40014000

08007eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f023 0201 	bic.w	r2, r3, #1
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	011b      	lsls	r3, r3, #4
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f023 030a 	bic.w	r3, r3, #10
 8007ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	621a      	str	r2, [r3, #32]
}
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b087      	sub	sp, #28
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	607a      	str	r2, [r7, #4]
 8007f1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	f023 0210 	bic.w	r2, r3, #16
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	031b      	lsls	r3, r3, #12
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	621a      	str	r2, [r3, #32]
}
 8007f80:	bf00      	nop
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	f023 0210 	bic.w	r2, r3, #16
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	031b      	lsls	r3, r3, #12
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	621a      	str	r2, [r3, #32]
}
 8007fe0:	bf00      	nop
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f023 0303 	bic.w	r3, r3, #3
 8008018:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008028:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	b2db      	uxtb	r3, r3
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800803c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	621a      	str	r2, [r3, #32]
}
 8008058:	bf00      	nop
 800805a:	371c      	adds	r7, #28
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008090:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	021b      	lsls	r3, r3, #8
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4313      	orrs	r3, r2
 800809a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	031b      	lsls	r3, r3, #12
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	031b      	lsls	r3, r3, #12
 80080bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	621a      	str	r2, [r3, #32]
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	f043 0307 	orr.w	r3, r3, #7
 8008100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	609a      	str	r2, [r3, #8]
}
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800812e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	021a      	lsls	r2, r3, #8
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	431a      	orrs	r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4313      	orrs	r3, r2
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	609a      	str	r2, [r3, #8]
}
 8008148:	bf00      	nop
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	2201      	movs	r2, #1
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6a1a      	ldr	r2, [r3, #32]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	43db      	mvns	r3, r3
 8008176:	401a      	ands	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6a1a      	ldr	r2, [r3, #32]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 031f 	and.w	r3, r3, #31
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	fa01 f303 	lsl.w	r3, r1, r3
 800818c:	431a      	orrs	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e063      	b.n	8008280 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a2b      	ldr	r2, [pc, #172]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d004      	beq.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a2a      	ldr	r2, [pc, #168]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d108      	bne.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a1b      	ldr	r2, [pc, #108]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d018      	beq.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822a:	d013      	beq.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a18      	ldr	r2, [pc, #96]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d00e      	beq.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a17      	ldr	r2, [pc, #92]	; (8008298 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d009      	beq.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a12      	ldr	r2, [pc, #72]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d004      	beq.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a13      	ldr	r2, [pc, #76]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d10c      	bne.n	800826e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800825a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	4313      	orrs	r3, r2
 8008264:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	40012c00 	.word	0x40012c00
 8008290:	40013400 	.word	0x40013400
 8008294:	40000400 	.word	0x40000400
 8008298:	40000800 	.word	0x40000800
 800829c:	40014000 	.word	0x40014000

080082a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d101      	bne.n	80082bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082b8:	2302      	movs	r3, #2
 80082ba:	e065      	b.n	8008388 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a16      	ldr	r2, [pc, #88]	; (8008394 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d004      	beq.n	800834a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a14      	ldr	r2, [pc, #80]	; (8008398 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d115      	bne.n	8008376 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	051b      	lsls	r3, r3, #20
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	4313      	orrs	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	40012c00 	.word	0x40012c00
 8008398:	40013400 	.word	0x40013400

0800839c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e040      	b.n	800846c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d106      	bne.n	8008400 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7fa f874 	bl	80024e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2224      	movs	r2, #36	; 0x24
 8008404:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0201 	bic.w	r2, r2, #1
 8008414:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 faa8 	bl	800896c <UART_SetConfig>
 800841c:	4603      	mov	r3, r0
 800841e:	2b01      	cmp	r3, #1
 8008420:	d101      	bne.n	8008426 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e022      	b.n	800846c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fcb6 	bl	8008da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fd3d 	bl	8008ee4 <UART_CheckIdleState>
 800846a:	4603      	mov	r3, r0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08a      	sub	sp, #40	; 0x28
 8008478:	af02      	add	r7, sp, #8
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	4613      	mov	r3, r2
 8008482:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008488:	2b20      	cmp	r3, #32
 800848a:	f040 8081 	bne.w	8008590 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <HAL_UART_Transmit+0x26>
 8008494:	88fb      	ldrh	r3, [r7, #6]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e079      	b.n	8008592 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d101      	bne.n	80084ac <HAL_UART_Transmit+0x38>
 80084a8:	2302      	movs	r3, #2
 80084aa:	e072      	b.n	8008592 <HAL_UART_Transmit+0x11e>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2221      	movs	r2, #33	; 0x21
 80084be:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80084c0:	f7fa fa9c 	bl	80029fc <HAL_GetTick>
 80084c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	88fa      	ldrh	r2, [r7, #6]
 80084ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	88fa      	ldrh	r2, [r7, #6]
 80084d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084de:	d108      	bne.n	80084f2 <HAL_UART_Transmit+0x7e>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	61bb      	str	r3, [r7, #24]
 80084f0:	e003      	b.n	80084fa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084fa:	e02d      	b.n	8008558 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2200      	movs	r2, #0
 8008504:	2180      	movs	r1, #128	; 0x80
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 fd31 	bl	8008f6e <UART_WaitOnFlagUntilTimeout>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e03d      	b.n	8008592 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	881a      	ldrh	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008528:	b292      	uxth	r2, r2
 800852a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	3302      	adds	r3, #2
 8008530:	61bb      	str	r3, [r7, #24]
 8008532:	e008      	b.n	8008546 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	781a      	ldrb	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	b292      	uxth	r2, r2
 800853e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	3301      	adds	r3, #1
 8008544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800854c:	b29b      	uxth	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	b29a      	uxth	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800855e:	b29b      	uxth	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1cb      	bne.n	80084fc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2200      	movs	r2, #0
 800856c:	2140      	movs	r1, #64	; 0x40
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 fcfd 	bl	8008f6e <UART_WaitOnFlagUntilTimeout>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e009      	b.n	8008592 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	e000      	b.n	8008592 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008590:	2302      	movs	r3, #2
  }
}
 8008592:	4618      	mov	r0, r3
 8008594:	3720      	adds	r7, #32
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	d16c      	bne.n	800868c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <HAL_UART_Receive_DMA+0x22>
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e065      	b.n	800868e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <HAL_UART_Receive_DMA+0x34>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e05e      	b.n	800868e <HAL_UART_Receive_DMA+0xf2>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	88fa      	ldrh	r2, [r7, #6]
 80085e2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2222      	movs	r2, #34	; 0x22
 80085f0:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d02a      	beq.n	8008650 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085fe:	4a26      	ldr	r2, [pc, #152]	; (8008698 <HAL_UART_Receive_DMA+0xfc>)
 8008600:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008606:	4a25      	ldr	r2, [pc, #148]	; (800869c <HAL_UART_Receive_DMA+0x100>)
 8008608:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800860e:	4a24      	ldr	r2, [pc, #144]	; (80086a0 <HAL_UART_Receive_DMA+0x104>)
 8008610:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008616:	2200      	movs	r2, #0
 8008618:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3324      	adds	r3, #36	; 0x24
 8008624:	4619      	mov	r1, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862a:	461a      	mov	r2, r3
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	f7fc fba2 	bl	8004d76 <HAL_DMA_Start_IT>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00b      	beq.n	8008650 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2210      	movs	r2, #16
 800863c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2220      	movs	r2, #32
 800864a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e01e      	b.n	800868e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008666:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008686:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	e000      	b.n	800868e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800868c:	2302      	movs	r3, #2
  }
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	080090cf 	.word	0x080090cf
 800869c:	08009131 	.word	0x08009131
 80086a0:	0800914d 	.word	0x0800914d

080086a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80086ca:	4013      	ands	r3, r2
 80086cc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d113      	bne.n	80086fc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00e      	beq.n	80086fc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d009      	beq.n	80086fc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8114 	beq.w	800891a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
      }
      return;
 80086fa:	e10e      	b.n	800891a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 80d6 	beq.w	80088b0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d105      	bne.n	800871a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 80cb 	beq.w	80088b0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00e      	beq.n	8008742 <HAL_UART_IRQHandler+0x9e>
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2201      	movs	r2, #1
 8008734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800873a:	f043 0201 	orr.w	r2, r3, #1
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00e      	beq.n	800876a <HAL_UART_IRQHandler+0xc6>
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d009      	beq.n	800876a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2202      	movs	r2, #2
 800875c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008762:	f043 0204 	orr.w	r2, r3, #4
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00e      	beq.n	8008792 <HAL_UART_IRQHandler+0xee>
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2204      	movs	r2, #4
 8008784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800878a:	f043 0202 	orr.w	r2, r3, #2
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d013      	beq.n	80087c4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	f003 0320 	and.w	r3, r3, #32
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d104      	bne.n	80087b0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d009      	beq.n	80087c4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2208      	movs	r2, #8
 80087b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087bc:	f043 0208 	orr.w	r2, r3, #8
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00f      	beq.n	80087ee <HAL_UART_IRQHandler+0x14a>
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e6:	f043 0220 	orr.w	r2, r3, #32
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 8093 	beq.w	800891e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	f003 0320 	and.w	r3, r3, #32
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00c      	beq.n	800881c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	f003 0320 	and.w	r3, r3, #32
 8008808:	2b00      	cmp	r3, #0
 800880a:	d007      	beq.n	800881c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008820:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882c:	2b40      	cmp	r3, #64	; 0x40
 800882e:	d004      	beq.n	800883a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008836:	2b00      	cmp	r3, #0
 8008838:	d031      	beq.n	800889e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fc27 	bl	800908e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884a:	2b40      	cmp	r3, #64	; 0x40
 800884c:	d123      	bne.n	8008896 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800885c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d013      	beq.n	800888e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886a:	4a30      	ldr	r2, [pc, #192]	; (800892c <HAL_UART_IRQHandler+0x288>)
 800886c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008872:	4618      	mov	r0, r3
 8008874:	f7fc fade 	bl	8004e34 <HAL_DMA_Abort_IT>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d016      	beq.n	80088ac <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800888c:	e00e      	b.n	80088ac <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f862 	bl	8008958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008894:	e00a      	b.n	80088ac <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f85e 	bl	8008958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889c:	e006      	b.n	80088ac <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f85a 	bl	8008958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80088aa:	e038      	b.n	800891e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ac:	bf00      	nop
    return;
 80088ae:	e036      	b.n	800891e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00d      	beq.n	80088d6 <HAL_UART_IRQHandler+0x232>
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d008      	beq.n	80088d6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80088cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fca7 	bl	8009222 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088d4:	e026      	b.n	8008924 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00d      	beq.n	80088fc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d008      	beq.n	80088fc <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d017      	beq.n	8008922 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
    }
    return;
 80088fa:	e012      	b.n	8008922 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00e      	beq.n	8008924 <HAL_UART_IRQHandler+0x280>
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fc6d 	bl	80091f0 <UART_EndTransmit_IT>
    return;
 8008916:	bf00      	nop
 8008918:	e004      	b.n	8008924 <HAL_UART_IRQHandler+0x280>
      return;
 800891a:	bf00      	nop
 800891c:	e002      	b.n	8008924 <HAL_UART_IRQHandler+0x280>
    return;
 800891e:	bf00      	nop
 8008920:	e000      	b.n	8008924 <HAL_UART_IRQHandler+0x280>
    return;
 8008922:	bf00      	nop
  }

}
 8008924:	3720      	adds	r7, #32
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	080091c5 	.word	0x080091c5

08008930 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008974:	2300      	movs	r3, #0
 8008976:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	431a      	orrs	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	4313      	orrs	r3, r2
 8008992:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800899e:	f023 030c 	bic.w	r3, r3, #12
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6812      	ldr	r2, [r2, #0]
 80089a6:	6939      	ldr	r1, [r7, #16]
 80089a8:	430b      	orrs	r3, r1
 80089aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4aa9      	ldr	r2, [pc, #676]	; (8008c90 <UART_SetConfig+0x324>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d121      	bne.n	8008a34 <UART_SetConfig+0xc8>
 80089f0:	4ba8      	ldr	r3, [pc, #672]	; (8008c94 <UART_SetConfig+0x328>)
 80089f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f4:	f003 0303 	and.w	r3, r3, #3
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d817      	bhi.n	8008a2c <UART_SetConfig+0xc0>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0x98>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008a15 	.word	0x08008a15
 8008a08:	08008a21 	.word	0x08008a21
 8008a0c:	08008a27 	.word	0x08008a27
 8008a10:	08008a1b 	.word	0x08008a1b
 8008a14:	2301      	movs	r3, #1
 8008a16:	77fb      	strb	r3, [r7, #31]
 8008a18:	e0b2      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	77fb      	strb	r3, [r7, #31]
 8008a1e:	e0af      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a20:	2304      	movs	r3, #4
 8008a22:	77fb      	strb	r3, [r7, #31]
 8008a24:	e0ac      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a26:	2308      	movs	r3, #8
 8008a28:	77fb      	strb	r3, [r7, #31]
 8008a2a:	e0a9      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	77fb      	strb	r3, [r7, #31]
 8008a30:	bf00      	nop
 8008a32:	e0a5      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a97      	ldr	r2, [pc, #604]	; (8008c98 <UART_SetConfig+0x32c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d123      	bne.n	8008a86 <UART_SetConfig+0x11a>
 8008a3e:	4b95      	ldr	r3, [pc, #596]	; (8008c94 <UART_SetConfig+0x328>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a4a:	d012      	beq.n	8008a72 <UART_SetConfig+0x106>
 8008a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a50:	d802      	bhi.n	8008a58 <UART_SetConfig+0xec>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d007      	beq.n	8008a66 <UART_SetConfig+0xfa>
 8008a56:	e012      	b.n	8008a7e <UART_SetConfig+0x112>
 8008a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a5c:	d00c      	beq.n	8008a78 <UART_SetConfig+0x10c>
 8008a5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a62:	d003      	beq.n	8008a6c <UART_SetConfig+0x100>
 8008a64:	e00b      	b.n	8008a7e <UART_SetConfig+0x112>
 8008a66:	2300      	movs	r3, #0
 8008a68:	77fb      	strb	r3, [r7, #31]
 8008a6a:	e089      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	77fb      	strb	r3, [r7, #31]
 8008a70:	e086      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a72:	2304      	movs	r3, #4
 8008a74:	77fb      	strb	r3, [r7, #31]
 8008a76:	e083      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a78:	2308      	movs	r3, #8
 8008a7a:	77fb      	strb	r3, [r7, #31]
 8008a7c:	e080      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a7e:	2310      	movs	r3, #16
 8008a80:	77fb      	strb	r3, [r7, #31]
 8008a82:	bf00      	nop
 8008a84:	e07c      	b.n	8008b80 <UART_SetConfig+0x214>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a84      	ldr	r2, [pc, #528]	; (8008c9c <UART_SetConfig+0x330>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d123      	bne.n	8008ad8 <UART_SetConfig+0x16c>
 8008a90:	4b80      	ldr	r3, [pc, #512]	; (8008c94 <UART_SetConfig+0x328>)
 8008a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008a98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a9c:	d012      	beq.n	8008ac4 <UART_SetConfig+0x158>
 8008a9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008aa2:	d802      	bhi.n	8008aaa <UART_SetConfig+0x13e>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d007      	beq.n	8008ab8 <UART_SetConfig+0x14c>
 8008aa8:	e012      	b.n	8008ad0 <UART_SetConfig+0x164>
 8008aaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008aae:	d00c      	beq.n	8008aca <UART_SetConfig+0x15e>
 8008ab0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008ab4:	d003      	beq.n	8008abe <UART_SetConfig+0x152>
 8008ab6:	e00b      	b.n	8008ad0 <UART_SetConfig+0x164>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	77fb      	strb	r3, [r7, #31]
 8008abc:	e060      	b.n	8008b80 <UART_SetConfig+0x214>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	77fb      	strb	r3, [r7, #31]
 8008ac2:	e05d      	b.n	8008b80 <UART_SetConfig+0x214>
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	77fb      	strb	r3, [r7, #31]
 8008ac8:	e05a      	b.n	8008b80 <UART_SetConfig+0x214>
 8008aca:	2308      	movs	r3, #8
 8008acc:	77fb      	strb	r3, [r7, #31]
 8008ace:	e057      	b.n	8008b80 <UART_SetConfig+0x214>
 8008ad0:	2310      	movs	r3, #16
 8008ad2:	77fb      	strb	r3, [r7, #31]
 8008ad4:	bf00      	nop
 8008ad6:	e053      	b.n	8008b80 <UART_SetConfig+0x214>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a70      	ldr	r2, [pc, #448]	; (8008ca0 <UART_SetConfig+0x334>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d123      	bne.n	8008b2a <UART_SetConfig+0x1be>
 8008ae2:	4b6c      	ldr	r3, [pc, #432]	; (8008c94 <UART_SetConfig+0x328>)
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aee:	d012      	beq.n	8008b16 <UART_SetConfig+0x1aa>
 8008af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008af4:	d802      	bhi.n	8008afc <UART_SetConfig+0x190>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d007      	beq.n	8008b0a <UART_SetConfig+0x19e>
 8008afa:	e012      	b.n	8008b22 <UART_SetConfig+0x1b6>
 8008afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b00:	d00c      	beq.n	8008b1c <UART_SetConfig+0x1b0>
 8008b02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b06:	d003      	beq.n	8008b10 <UART_SetConfig+0x1a4>
 8008b08:	e00b      	b.n	8008b22 <UART_SetConfig+0x1b6>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	77fb      	strb	r3, [r7, #31]
 8008b0e:	e037      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b10:	2302      	movs	r3, #2
 8008b12:	77fb      	strb	r3, [r7, #31]
 8008b14:	e034      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b16:	2304      	movs	r3, #4
 8008b18:	77fb      	strb	r3, [r7, #31]
 8008b1a:	e031      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b1c:	2308      	movs	r3, #8
 8008b1e:	77fb      	strb	r3, [r7, #31]
 8008b20:	e02e      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b22:	2310      	movs	r3, #16
 8008b24:	77fb      	strb	r3, [r7, #31]
 8008b26:	bf00      	nop
 8008b28:	e02a      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a5d      	ldr	r2, [pc, #372]	; (8008ca4 <UART_SetConfig+0x338>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d123      	bne.n	8008b7c <UART_SetConfig+0x210>
 8008b34:	4b57      	ldr	r3, [pc, #348]	; (8008c94 <UART_SetConfig+0x328>)
 8008b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b38:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b40:	d012      	beq.n	8008b68 <UART_SetConfig+0x1fc>
 8008b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b46:	d802      	bhi.n	8008b4e <UART_SetConfig+0x1e2>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d007      	beq.n	8008b5c <UART_SetConfig+0x1f0>
 8008b4c:	e012      	b.n	8008b74 <UART_SetConfig+0x208>
 8008b4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b52:	d00c      	beq.n	8008b6e <UART_SetConfig+0x202>
 8008b54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008b58:	d003      	beq.n	8008b62 <UART_SetConfig+0x1f6>
 8008b5a:	e00b      	b.n	8008b74 <UART_SetConfig+0x208>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	77fb      	strb	r3, [r7, #31]
 8008b60:	e00e      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b62:	2302      	movs	r3, #2
 8008b64:	77fb      	strb	r3, [r7, #31]
 8008b66:	e00b      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b68:	2304      	movs	r3, #4
 8008b6a:	77fb      	strb	r3, [r7, #31]
 8008b6c:	e008      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b6e:	2308      	movs	r3, #8
 8008b70:	77fb      	strb	r3, [r7, #31]
 8008b72:	e005      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b74:	2310      	movs	r3, #16
 8008b76:	77fb      	strb	r3, [r7, #31]
 8008b78:	bf00      	nop
 8008b7a:	e001      	b.n	8008b80 <UART_SetConfig+0x214>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b88:	f040 808e 	bne.w	8008ca8 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8008b8c:	7ffb      	ldrb	r3, [r7, #31]
 8008b8e:	2b08      	cmp	r3, #8
 8008b90:	d85e      	bhi.n	8008c50 <UART_SetConfig+0x2e4>
 8008b92:	a201      	add	r2, pc, #4	; (adr r2, 8008b98 <UART_SetConfig+0x22c>)
 8008b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b98:	08008bbd 	.word	0x08008bbd
 8008b9c:	08008bdd 	.word	0x08008bdd
 8008ba0:	08008bfd 	.word	0x08008bfd
 8008ba4:	08008c51 	.word	0x08008c51
 8008ba8:	08008c19 	.word	0x08008c19
 8008bac:	08008c51 	.word	0x08008c51
 8008bb0:	08008c51 	.word	0x08008c51
 8008bb4:	08008c51 	.word	0x08008c51
 8008bb8:	08008c39 	.word	0x08008c39
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bbc:	f7fd fd12 	bl	80065e4 <HAL_RCC_GetPCLK1Freq>
 8008bc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	005a      	lsls	r2, r3, #1
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	441a      	add	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	61bb      	str	r3, [r7, #24]
        break;
 8008bda:	e03c      	b.n	8008c56 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bdc:	f7fd fd24 	bl	8006628 <HAL_RCC_GetPCLK2Freq>
 8008be0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	005a      	lsls	r2, r3, #1
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	441a      	add	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	61bb      	str	r3, [r7, #24]
        break;
 8008bfa:	e02c      	b.n	8008c56 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8008c06:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6852      	ldr	r2, [r2, #4]
 8008c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	61bb      	str	r3, [r7, #24]
        break;
 8008c16:	e01e      	b.n	8008c56 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c18:	f7fd fc6e 	bl	80064f8 <HAL_RCC_GetSysClockFreq>
 8008c1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	005a      	lsls	r2, r3, #1
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	441a      	add	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	61bb      	str	r3, [r7, #24]
        break;
 8008c36:	e00e      	b.n	8008c56 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	085b      	lsrs	r3, r3, #1
 8008c3e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	61bb      	str	r3, [r7, #24]
        break;
 8008c4e:	e002      	b.n	8008c56 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]
        break;
 8008c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	2b0f      	cmp	r3, #15
 8008c5a:	d916      	bls.n	8008c8a <UART_SetConfig+0x31e>
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c62:	d212      	bcs.n	8008c8a <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f023 030f 	bic.w	r3, r3, #15
 8008c6c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	f003 0307 	and.w	r3, r3, #7
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	897b      	ldrh	r3, [r7, #10]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	897a      	ldrh	r2, [r7, #10]
 8008c86:	60da      	str	r2, [r3, #12]
 8008c88:	e07e      	b.n	8008d88 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	75fb      	strb	r3, [r7, #23]
 8008c8e:	e07b      	b.n	8008d88 <UART_SetConfig+0x41c>
 8008c90:	40013800 	.word	0x40013800
 8008c94:	40021000 	.word	0x40021000
 8008c98:	40004400 	.word	0x40004400
 8008c9c:	40004800 	.word	0x40004800
 8008ca0:	40004c00 	.word	0x40004c00
 8008ca4:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8008ca8:	7ffb      	ldrb	r3, [r7, #31]
 8008caa:	2b08      	cmp	r3, #8
 8008cac:	d85b      	bhi.n	8008d66 <UART_SetConfig+0x3fa>
 8008cae:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <UART_SetConfig+0x348>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008cf7 	.word	0x08008cf7
 8008cbc:	08008d15 	.word	0x08008d15
 8008cc0:	08008d67 	.word	0x08008d67
 8008cc4:	08008d31 	.word	0x08008d31
 8008cc8:	08008d67 	.word	0x08008d67
 8008ccc:	08008d67 	.word	0x08008d67
 8008cd0:	08008d67 	.word	0x08008d67
 8008cd4:	08008d4f 	.word	0x08008d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cd8:	f7fd fc84 	bl	80065e4 <HAL_RCC_GetPCLK1Freq>
 8008cdc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	085a      	lsrs	r2, r3, #1
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	441a      	add	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	61bb      	str	r3, [r7, #24]
        break;
 8008cf4:	e03a      	b.n	8008d6c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cf6:	f7fd fc97 	bl	8006628 <HAL_RCC_GetPCLK2Freq>
 8008cfa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	085a      	lsrs	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	441a      	add	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	61bb      	str	r3, [r7, #24]
        break;
 8008d12:	e02b      	b.n	8008d6c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	085b      	lsrs	r3, r3, #1
 8008d1a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8008d1e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6852      	ldr	r2, [r2, #4]
 8008d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	61bb      	str	r3, [r7, #24]
        break;
 8008d2e:	e01d      	b.n	8008d6c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d30:	f7fd fbe2 	bl	80064f8 <HAL_RCC_GetSysClockFreq>
 8008d34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	085a      	lsrs	r2, r3, #1
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	441a      	add	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	61bb      	str	r3, [r7, #24]
        break;
 8008d4c:	e00e      	b.n	8008d6c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	085b      	lsrs	r3, r3, #1
 8008d54:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	61bb      	str	r3, [r7, #24]
        break;
 8008d64:	e002      	b.n	8008d6c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	75fb      	strb	r3, [r7, #23]
        break;
 8008d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	2b0f      	cmp	r3, #15
 8008d70:	d908      	bls.n	8008d84 <UART_SetConfig+0x418>
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d78:	d204      	bcs.n	8008d84 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	60da      	str	r2, [r3, #12]
 8008d82:	e001      	b.n	8008d88 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3720      	adds	r7, #32
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop

08008da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00a      	beq.n	8008dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00a      	beq.n	8008e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	f003 0308 	and.w	r3, r3, #8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	f003 0310 	and.w	r3, r3, #16
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01a      	beq.n	8008eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e9e:	d10a      	bne.n	8008eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	605a      	str	r2, [r3, #4]
  }
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af02      	add	r7, sp, #8
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008ef2:	f7f9 fd83 	bl	80029fc <HAL_GetTick>
 8008ef6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0308 	and.w	r3, r3, #8
 8008f02:	2b08      	cmp	r3, #8
 8008f04:	d10e      	bne.n	8008f24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f82a 	bl	8008f6e <UART_WaitOnFlagUntilTimeout>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e020      	b.n	8008f66 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	d10e      	bne.n	8008f50 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f814 	bl	8008f6e <UART_WaitOnFlagUntilTimeout>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e00a      	b.n	8008f66 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	603b      	str	r3, [r7, #0]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f7e:	e05d      	b.n	800903c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f86:	d059      	beq.n	800903c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f88:	f7f9 fd38 	bl	80029fc <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d302      	bcc.n	8008f9e <UART_WaitOnFlagUntilTimeout+0x30>
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d11b      	bne.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008fac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0201 	bic.w	r2, r2, #1
 8008fbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e042      	b.n	800905c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d02b      	beq.n	800903c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ff2:	d123      	bne.n	800903c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ffc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800900c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689a      	ldr	r2, [r3, #8]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f022 0201 	bic.w	r2, r2, #1
 800901c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2220      	movs	r2, #32
 8009022:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2220      	movs	r2, #32
 800902e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e00f      	b.n	800905c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	69da      	ldr	r2, [r3, #28]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	4013      	ands	r3, r2
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	429a      	cmp	r2, r3
 800904a:	bf0c      	ite	eq
 800904c:	2301      	moveq	r3, #1
 800904e:	2300      	movne	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	461a      	mov	r2, r3
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	429a      	cmp	r2, r3
 8009058:	d092      	beq.n	8008f80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800907a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090a4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0201 	bic.w	r2, r2, #1
 80090b4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	d01e      	beq.n	8009122 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090fa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689a      	ldr	r2, [r3, #8]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 0201 	bic.w	r2, r2, #1
 800910a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800911a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2220      	movs	r2, #32
 8009120:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7f8 fdcc 	bl	8001cc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009128:	bf00      	nop
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff fc00 	bl	8008944 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800915e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009164:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009170:	2b80      	cmp	r3, #128	; 0x80
 8009172:	d109      	bne.n	8009188 <UART_DMAError+0x3c>
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	2b21      	cmp	r3, #33	; 0x21
 8009178:	d106      	bne.n	8009188 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2200      	movs	r2, #0
 800917e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009182:	6978      	ldr	r0, [r7, #20]
 8009184:	f7ff ff6e 	bl	8009064 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009192:	2b40      	cmp	r3, #64	; 0x40
 8009194:	d109      	bne.n	80091aa <UART_DMAError+0x5e>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b22      	cmp	r3, #34	; 0x22
 800919a:	d106      	bne.n	80091aa <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80091a4:	6978      	ldr	r0, [r7, #20]
 80091a6:	f7ff ff72 	bl	800908e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091ae:	f043 0210 	orr.w	r2, r3, #16
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091b6:	6978      	ldr	r0, [r7, #20]
 80091b8:	f7ff fbce 	bl	8008958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091bc:	bf00      	nop
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7ff fbb8 	bl	8008958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091e8:	bf00      	nop
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009206:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2220      	movs	r2, #32
 800920c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff fb8b 	bl	8008930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009222:	b480      	push	{r7}
 8009224:	b083      	sub	sp, #12
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800922a:	bf00      	nop
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <atoi>:
 8009236:	220a      	movs	r2, #10
 8009238:	2100      	movs	r1, #0
 800923a:	f000 bd3b 	b.w	8009cb4 <strtol>
	...

08009240 <__errno>:
 8009240:	4b01      	ldr	r3, [pc, #4]	; (8009248 <__errno+0x8>)
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20000024 	.word	0x20000024

0800924c <__libc_init_array>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4e0d      	ldr	r6, [pc, #52]	; (8009284 <__libc_init_array+0x38>)
 8009250:	4c0d      	ldr	r4, [pc, #52]	; (8009288 <__libc_init_array+0x3c>)
 8009252:	1ba4      	subs	r4, r4, r6
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	2500      	movs	r5, #0
 8009258:	42a5      	cmp	r5, r4
 800925a:	d109      	bne.n	8009270 <__libc_init_array+0x24>
 800925c:	4e0b      	ldr	r6, [pc, #44]	; (800928c <__libc_init_array+0x40>)
 800925e:	4c0c      	ldr	r4, [pc, #48]	; (8009290 <__libc_init_array+0x44>)
 8009260:	f002 f902 	bl	800b468 <_init>
 8009264:	1ba4      	subs	r4, r4, r6
 8009266:	10a4      	asrs	r4, r4, #2
 8009268:	2500      	movs	r5, #0
 800926a:	42a5      	cmp	r5, r4
 800926c:	d105      	bne.n	800927a <__libc_init_array+0x2e>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009274:	4798      	blx	r3
 8009276:	3501      	adds	r5, #1
 8009278:	e7ee      	b.n	8009258 <__libc_init_array+0xc>
 800927a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800927e:	4798      	blx	r3
 8009280:	3501      	adds	r5, #1
 8009282:	e7f2      	b.n	800926a <__libc_init_array+0x1e>
 8009284:	0800b798 	.word	0x0800b798
 8009288:	0800b798 	.word	0x0800b798
 800928c:	0800b798 	.word	0x0800b798
 8009290:	0800b79c 	.word	0x0800b79c

08009294 <memcmp>:
 8009294:	b530      	push	{r4, r5, lr}
 8009296:	2400      	movs	r4, #0
 8009298:	42a2      	cmp	r2, r4
 800929a:	d101      	bne.n	80092a0 <memcmp+0xc>
 800929c:	2000      	movs	r0, #0
 800929e:	e007      	b.n	80092b0 <memcmp+0x1c>
 80092a0:	5d03      	ldrb	r3, [r0, r4]
 80092a2:	3401      	adds	r4, #1
 80092a4:	190d      	adds	r5, r1, r4
 80092a6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80092aa:	42ab      	cmp	r3, r5
 80092ac:	d0f4      	beq.n	8009298 <memcmp+0x4>
 80092ae:	1b58      	subs	r0, r3, r5
 80092b0:	bd30      	pop	{r4, r5, pc}

080092b2 <memset>:
 80092b2:	4402      	add	r2, r0
 80092b4:	4603      	mov	r3, r0
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d100      	bne.n	80092bc <memset+0xa>
 80092ba:	4770      	bx	lr
 80092bc:	f803 1b01 	strb.w	r1, [r3], #1
 80092c0:	e7f9      	b.n	80092b6 <memset+0x4>

080092c2 <__cvt>:
 80092c2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c6:	ec55 4b10 	vmov	r4, r5, d0
 80092ca:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80092cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	460e      	mov	r6, r1
 80092d4:	4691      	mov	r9, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	bfb8      	it	lt
 80092da:	4622      	movlt	r2, r4
 80092dc:	462b      	mov	r3, r5
 80092de:	f027 0720 	bic.w	r7, r7, #32
 80092e2:	bfbb      	ittet	lt
 80092e4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092e8:	461d      	movlt	r5, r3
 80092ea:	2300      	movge	r3, #0
 80092ec:	232d      	movlt	r3, #45	; 0x2d
 80092ee:	bfb8      	it	lt
 80092f0:	4614      	movlt	r4, r2
 80092f2:	2f46      	cmp	r7, #70	; 0x46
 80092f4:	700b      	strb	r3, [r1, #0]
 80092f6:	d004      	beq.n	8009302 <__cvt+0x40>
 80092f8:	2f45      	cmp	r7, #69	; 0x45
 80092fa:	d100      	bne.n	80092fe <__cvt+0x3c>
 80092fc:	3601      	adds	r6, #1
 80092fe:	2102      	movs	r1, #2
 8009300:	e000      	b.n	8009304 <__cvt+0x42>
 8009302:	2103      	movs	r1, #3
 8009304:	ab03      	add	r3, sp, #12
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	ab02      	add	r3, sp, #8
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	4632      	mov	r2, r6
 800930e:	4653      	mov	r3, sl
 8009310:	ec45 4b10 	vmov	d0, r4, r5
 8009314:	f000 fd70 	bl	8009df8 <_dtoa_r>
 8009318:	2f47      	cmp	r7, #71	; 0x47
 800931a:	4680      	mov	r8, r0
 800931c:	d102      	bne.n	8009324 <__cvt+0x62>
 800931e:	f019 0f01 	tst.w	r9, #1
 8009322:	d026      	beq.n	8009372 <__cvt+0xb0>
 8009324:	2f46      	cmp	r7, #70	; 0x46
 8009326:	eb08 0906 	add.w	r9, r8, r6
 800932a:	d111      	bne.n	8009350 <__cvt+0x8e>
 800932c:	f898 3000 	ldrb.w	r3, [r8]
 8009330:	2b30      	cmp	r3, #48	; 0x30
 8009332:	d10a      	bne.n	800934a <__cvt+0x88>
 8009334:	2200      	movs	r2, #0
 8009336:	2300      	movs	r3, #0
 8009338:	4620      	mov	r0, r4
 800933a:	4629      	mov	r1, r5
 800933c:	f7f7 fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009340:	b918      	cbnz	r0, 800934a <__cvt+0x88>
 8009342:	f1c6 0601 	rsb	r6, r6, #1
 8009346:	f8ca 6000 	str.w	r6, [sl]
 800934a:	f8da 3000 	ldr.w	r3, [sl]
 800934e:	4499      	add	r9, r3
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	4620      	mov	r0, r4
 8009356:	4629      	mov	r1, r5
 8009358:	f7f7 fbb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800935c:	b938      	cbnz	r0, 800936e <__cvt+0xac>
 800935e:	2230      	movs	r2, #48	; 0x30
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	454b      	cmp	r3, r9
 8009364:	d205      	bcs.n	8009372 <__cvt+0xb0>
 8009366:	1c59      	adds	r1, r3, #1
 8009368:	9103      	str	r1, [sp, #12]
 800936a:	701a      	strb	r2, [r3, #0]
 800936c:	e7f8      	b.n	8009360 <__cvt+0x9e>
 800936e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009376:	eba3 0308 	sub.w	r3, r3, r8
 800937a:	4640      	mov	r0, r8
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	b004      	add	sp, #16
 8009380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009384 <__exponent>:
 8009384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009386:	2900      	cmp	r1, #0
 8009388:	4604      	mov	r4, r0
 800938a:	bfba      	itte	lt
 800938c:	4249      	neglt	r1, r1
 800938e:	232d      	movlt	r3, #45	; 0x2d
 8009390:	232b      	movge	r3, #43	; 0x2b
 8009392:	2909      	cmp	r1, #9
 8009394:	f804 2b02 	strb.w	r2, [r4], #2
 8009398:	7043      	strb	r3, [r0, #1]
 800939a:	dd20      	ble.n	80093de <__exponent+0x5a>
 800939c:	f10d 0307 	add.w	r3, sp, #7
 80093a0:	461f      	mov	r7, r3
 80093a2:	260a      	movs	r6, #10
 80093a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80093a8:	fb06 1115 	mls	r1, r6, r5, r1
 80093ac:	3130      	adds	r1, #48	; 0x30
 80093ae:	2d09      	cmp	r5, #9
 80093b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80093b4:	f103 32ff 	add.w	r2, r3, #4294967295
 80093b8:	4629      	mov	r1, r5
 80093ba:	dc09      	bgt.n	80093d0 <__exponent+0x4c>
 80093bc:	3130      	adds	r1, #48	; 0x30
 80093be:	3b02      	subs	r3, #2
 80093c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80093c4:	42bb      	cmp	r3, r7
 80093c6:	4622      	mov	r2, r4
 80093c8:	d304      	bcc.n	80093d4 <__exponent+0x50>
 80093ca:	1a10      	subs	r0, r2, r0
 80093cc:	b003      	add	sp, #12
 80093ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093d0:	4613      	mov	r3, r2
 80093d2:	e7e7      	b.n	80093a4 <__exponent+0x20>
 80093d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093d8:	f804 2b01 	strb.w	r2, [r4], #1
 80093dc:	e7f2      	b.n	80093c4 <__exponent+0x40>
 80093de:	2330      	movs	r3, #48	; 0x30
 80093e0:	4419      	add	r1, r3
 80093e2:	7083      	strb	r3, [r0, #2]
 80093e4:	1d02      	adds	r2, r0, #4
 80093e6:	70c1      	strb	r1, [r0, #3]
 80093e8:	e7ef      	b.n	80093ca <__exponent+0x46>
	...

080093ec <_printf_float>:
 80093ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f0:	b08d      	sub	sp, #52	; 0x34
 80093f2:	460c      	mov	r4, r1
 80093f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80093f8:	4616      	mov	r6, r2
 80093fa:	461f      	mov	r7, r3
 80093fc:	4605      	mov	r5, r0
 80093fe:	f001 fab7 	bl	800a970 <_localeconv_r>
 8009402:	6803      	ldr	r3, [r0, #0]
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	4618      	mov	r0, r3
 8009408:	f7f6 fee2 	bl	80001d0 <strlen>
 800940c:	2300      	movs	r3, #0
 800940e:	930a      	str	r3, [sp, #40]	; 0x28
 8009410:	f8d8 3000 	ldr.w	r3, [r8]
 8009414:	9005      	str	r0, [sp, #20]
 8009416:	3307      	adds	r3, #7
 8009418:	f023 0307 	bic.w	r3, r3, #7
 800941c:	f103 0208 	add.w	r2, r3, #8
 8009420:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009424:	f8d4 b000 	ldr.w	fp, [r4]
 8009428:	f8c8 2000 	str.w	r2, [r8]
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009434:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009438:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800943c:	9307      	str	r3, [sp, #28]
 800943e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009442:	f04f 32ff 	mov.w	r2, #4294967295
 8009446:	4ba7      	ldr	r3, [pc, #668]	; (80096e4 <_printf_float+0x2f8>)
 8009448:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800944c:	f7f7 fb6e 	bl	8000b2c <__aeabi_dcmpun>
 8009450:	bb70      	cbnz	r0, 80094b0 <_printf_float+0xc4>
 8009452:	f04f 32ff 	mov.w	r2, #4294967295
 8009456:	4ba3      	ldr	r3, [pc, #652]	; (80096e4 <_printf_float+0x2f8>)
 8009458:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800945c:	f7f7 fb48 	bl	8000af0 <__aeabi_dcmple>
 8009460:	bb30      	cbnz	r0, 80094b0 <_printf_float+0xc4>
 8009462:	2200      	movs	r2, #0
 8009464:	2300      	movs	r3, #0
 8009466:	4640      	mov	r0, r8
 8009468:	4649      	mov	r1, r9
 800946a:	f7f7 fb37 	bl	8000adc <__aeabi_dcmplt>
 800946e:	b110      	cbz	r0, 8009476 <_printf_float+0x8a>
 8009470:	232d      	movs	r3, #45	; 0x2d
 8009472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009476:	4a9c      	ldr	r2, [pc, #624]	; (80096e8 <_printf_float+0x2fc>)
 8009478:	4b9c      	ldr	r3, [pc, #624]	; (80096ec <_printf_float+0x300>)
 800947a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800947e:	bf8c      	ite	hi
 8009480:	4690      	movhi	r8, r2
 8009482:	4698      	movls	r8, r3
 8009484:	2303      	movs	r3, #3
 8009486:	f02b 0204 	bic.w	r2, fp, #4
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	6022      	str	r2, [r4, #0]
 800948e:	f04f 0900 	mov.w	r9, #0
 8009492:	9700      	str	r7, [sp, #0]
 8009494:	4633      	mov	r3, r6
 8009496:	aa0b      	add	r2, sp, #44	; 0x2c
 8009498:	4621      	mov	r1, r4
 800949a:	4628      	mov	r0, r5
 800949c:	f000 f9e6 	bl	800986c <_printf_common>
 80094a0:	3001      	adds	r0, #1
 80094a2:	f040 808d 	bne.w	80095c0 <_printf_float+0x1d4>
 80094a6:	f04f 30ff 	mov.w	r0, #4294967295
 80094aa:	b00d      	add	sp, #52	; 0x34
 80094ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b0:	4642      	mov	r2, r8
 80094b2:	464b      	mov	r3, r9
 80094b4:	4640      	mov	r0, r8
 80094b6:	4649      	mov	r1, r9
 80094b8:	f7f7 fb38 	bl	8000b2c <__aeabi_dcmpun>
 80094bc:	b110      	cbz	r0, 80094c4 <_printf_float+0xd8>
 80094be:	4a8c      	ldr	r2, [pc, #560]	; (80096f0 <_printf_float+0x304>)
 80094c0:	4b8c      	ldr	r3, [pc, #560]	; (80096f4 <_printf_float+0x308>)
 80094c2:	e7da      	b.n	800947a <_printf_float+0x8e>
 80094c4:	6861      	ldr	r1, [r4, #4]
 80094c6:	1c4b      	adds	r3, r1, #1
 80094c8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80094cc:	a80a      	add	r0, sp, #40	; 0x28
 80094ce:	d13e      	bne.n	800954e <_printf_float+0x162>
 80094d0:	2306      	movs	r3, #6
 80094d2:	6063      	str	r3, [r4, #4]
 80094d4:	2300      	movs	r3, #0
 80094d6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80094da:	ab09      	add	r3, sp, #36	; 0x24
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	ec49 8b10 	vmov	d0, r8, r9
 80094e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094e6:	6022      	str	r2, [r4, #0]
 80094e8:	f8cd a004 	str.w	sl, [sp, #4]
 80094ec:	6861      	ldr	r1, [r4, #4]
 80094ee:	4628      	mov	r0, r5
 80094f0:	f7ff fee7 	bl	80092c2 <__cvt>
 80094f4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80094f8:	2b47      	cmp	r3, #71	; 0x47
 80094fa:	4680      	mov	r8, r0
 80094fc:	d109      	bne.n	8009512 <_printf_float+0x126>
 80094fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009500:	1cd8      	adds	r0, r3, #3
 8009502:	db02      	blt.n	800950a <_printf_float+0x11e>
 8009504:	6862      	ldr	r2, [r4, #4]
 8009506:	4293      	cmp	r3, r2
 8009508:	dd47      	ble.n	800959a <_printf_float+0x1ae>
 800950a:	f1aa 0a02 	sub.w	sl, sl, #2
 800950e:	fa5f fa8a 	uxtb.w	sl, sl
 8009512:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009518:	d824      	bhi.n	8009564 <_printf_float+0x178>
 800951a:	3901      	subs	r1, #1
 800951c:	4652      	mov	r2, sl
 800951e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009522:	9109      	str	r1, [sp, #36]	; 0x24
 8009524:	f7ff ff2e 	bl	8009384 <__exponent>
 8009528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800952a:	1813      	adds	r3, r2, r0
 800952c:	2a01      	cmp	r2, #1
 800952e:	4681      	mov	r9, r0
 8009530:	6123      	str	r3, [r4, #16]
 8009532:	dc02      	bgt.n	800953a <_printf_float+0x14e>
 8009534:	6822      	ldr	r2, [r4, #0]
 8009536:	07d1      	lsls	r1, r2, #31
 8009538:	d501      	bpl.n	800953e <_printf_float+0x152>
 800953a:	3301      	adds	r3, #1
 800953c:	6123      	str	r3, [r4, #16]
 800953e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0a5      	beq.n	8009492 <_printf_float+0xa6>
 8009546:	232d      	movs	r3, #45	; 0x2d
 8009548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800954c:	e7a1      	b.n	8009492 <_printf_float+0xa6>
 800954e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009552:	f000 8177 	beq.w	8009844 <_printf_float+0x458>
 8009556:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800955a:	d1bb      	bne.n	80094d4 <_printf_float+0xe8>
 800955c:	2900      	cmp	r1, #0
 800955e:	d1b9      	bne.n	80094d4 <_printf_float+0xe8>
 8009560:	2301      	movs	r3, #1
 8009562:	e7b6      	b.n	80094d2 <_printf_float+0xe6>
 8009564:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009568:	d119      	bne.n	800959e <_printf_float+0x1b2>
 800956a:	2900      	cmp	r1, #0
 800956c:	6863      	ldr	r3, [r4, #4]
 800956e:	dd0c      	ble.n	800958a <_printf_float+0x19e>
 8009570:	6121      	str	r1, [r4, #16]
 8009572:	b913      	cbnz	r3, 800957a <_printf_float+0x18e>
 8009574:	6822      	ldr	r2, [r4, #0]
 8009576:	07d2      	lsls	r2, r2, #31
 8009578:	d502      	bpl.n	8009580 <_printf_float+0x194>
 800957a:	3301      	adds	r3, #1
 800957c:	440b      	add	r3, r1
 800957e:	6123      	str	r3, [r4, #16]
 8009580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009582:	65a3      	str	r3, [r4, #88]	; 0x58
 8009584:	f04f 0900 	mov.w	r9, #0
 8009588:	e7d9      	b.n	800953e <_printf_float+0x152>
 800958a:	b913      	cbnz	r3, 8009592 <_printf_float+0x1a6>
 800958c:	6822      	ldr	r2, [r4, #0]
 800958e:	07d0      	lsls	r0, r2, #31
 8009590:	d501      	bpl.n	8009596 <_printf_float+0x1aa>
 8009592:	3302      	adds	r3, #2
 8009594:	e7f3      	b.n	800957e <_printf_float+0x192>
 8009596:	2301      	movs	r3, #1
 8009598:	e7f1      	b.n	800957e <_printf_float+0x192>
 800959a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800959e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80095a2:	4293      	cmp	r3, r2
 80095a4:	db05      	blt.n	80095b2 <_printf_float+0x1c6>
 80095a6:	6822      	ldr	r2, [r4, #0]
 80095a8:	6123      	str	r3, [r4, #16]
 80095aa:	07d1      	lsls	r1, r2, #31
 80095ac:	d5e8      	bpl.n	8009580 <_printf_float+0x194>
 80095ae:	3301      	adds	r3, #1
 80095b0:	e7e5      	b.n	800957e <_printf_float+0x192>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	bfd4      	ite	le
 80095b6:	f1c3 0302 	rsble	r3, r3, #2
 80095ba:	2301      	movgt	r3, #1
 80095bc:	4413      	add	r3, r2
 80095be:	e7de      	b.n	800957e <_printf_float+0x192>
 80095c0:	6823      	ldr	r3, [r4, #0]
 80095c2:	055a      	lsls	r2, r3, #21
 80095c4:	d407      	bmi.n	80095d6 <_printf_float+0x1ea>
 80095c6:	6923      	ldr	r3, [r4, #16]
 80095c8:	4642      	mov	r2, r8
 80095ca:	4631      	mov	r1, r6
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b8      	blx	r7
 80095d0:	3001      	adds	r0, #1
 80095d2:	d12b      	bne.n	800962c <_printf_float+0x240>
 80095d4:	e767      	b.n	80094a6 <_printf_float+0xba>
 80095d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80095da:	f240 80dc 	bls.w	8009796 <_printf_float+0x3aa>
 80095de:	2200      	movs	r2, #0
 80095e0:	2300      	movs	r3, #0
 80095e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095e6:	f7f7 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d033      	beq.n	8009656 <_printf_float+0x26a>
 80095ee:	2301      	movs	r3, #1
 80095f0:	4a41      	ldr	r2, [pc, #260]	; (80096f8 <_printf_float+0x30c>)
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	f43f af54 	beq.w	80094a6 <_printf_float+0xba>
 80095fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009602:	429a      	cmp	r2, r3
 8009604:	db02      	blt.n	800960c <_printf_float+0x220>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	07d8      	lsls	r0, r3, #31
 800960a:	d50f      	bpl.n	800962c <_printf_float+0x240>
 800960c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009610:	4631      	mov	r1, r6
 8009612:	4628      	mov	r0, r5
 8009614:	47b8      	blx	r7
 8009616:	3001      	adds	r0, #1
 8009618:	f43f af45 	beq.w	80094a6 <_printf_float+0xba>
 800961c:	f04f 0800 	mov.w	r8, #0
 8009620:	f104 091a 	add.w	r9, r4, #26
 8009624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009626:	3b01      	subs	r3, #1
 8009628:	4543      	cmp	r3, r8
 800962a:	dc09      	bgt.n	8009640 <_printf_float+0x254>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	079b      	lsls	r3, r3, #30
 8009630:	f100 8103 	bmi.w	800983a <_printf_float+0x44e>
 8009634:	68e0      	ldr	r0, [r4, #12]
 8009636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009638:	4298      	cmp	r0, r3
 800963a:	bfb8      	it	lt
 800963c:	4618      	movlt	r0, r3
 800963e:	e734      	b.n	80094aa <_printf_float+0xbe>
 8009640:	2301      	movs	r3, #1
 8009642:	464a      	mov	r2, r9
 8009644:	4631      	mov	r1, r6
 8009646:	4628      	mov	r0, r5
 8009648:	47b8      	blx	r7
 800964a:	3001      	adds	r0, #1
 800964c:	f43f af2b 	beq.w	80094a6 <_printf_float+0xba>
 8009650:	f108 0801 	add.w	r8, r8, #1
 8009654:	e7e6      	b.n	8009624 <_printf_float+0x238>
 8009656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	dc2b      	bgt.n	80096b4 <_printf_float+0x2c8>
 800965c:	2301      	movs	r3, #1
 800965e:	4a26      	ldr	r2, [pc, #152]	; (80096f8 <_printf_float+0x30c>)
 8009660:	4631      	mov	r1, r6
 8009662:	4628      	mov	r0, r5
 8009664:	47b8      	blx	r7
 8009666:	3001      	adds	r0, #1
 8009668:	f43f af1d 	beq.w	80094a6 <_printf_float+0xba>
 800966c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800966e:	b923      	cbnz	r3, 800967a <_printf_float+0x28e>
 8009670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009672:	b913      	cbnz	r3, 800967a <_printf_float+0x28e>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	07d9      	lsls	r1, r3, #31
 8009678:	d5d8      	bpl.n	800962c <_printf_float+0x240>
 800967a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800967e:	4631      	mov	r1, r6
 8009680:	4628      	mov	r0, r5
 8009682:	47b8      	blx	r7
 8009684:	3001      	adds	r0, #1
 8009686:	f43f af0e 	beq.w	80094a6 <_printf_float+0xba>
 800968a:	f04f 0900 	mov.w	r9, #0
 800968e:	f104 0a1a 	add.w	sl, r4, #26
 8009692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009694:	425b      	negs	r3, r3
 8009696:	454b      	cmp	r3, r9
 8009698:	dc01      	bgt.n	800969e <_printf_float+0x2b2>
 800969a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800969c:	e794      	b.n	80095c8 <_printf_float+0x1dc>
 800969e:	2301      	movs	r3, #1
 80096a0:	4652      	mov	r2, sl
 80096a2:	4631      	mov	r1, r6
 80096a4:	4628      	mov	r0, r5
 80096a6:	47b8      	blx	r7
 80096a8:	3001      	adds	r0, #1
 80096aa:	f43f aefc 	beq.w	80094a6 <_printf_float+0xba>
 80096ae:	f109 0901 	add.w	r9, r9, #1
 80096b2:	e7ee      	b.n	8009692 <_printf_float+0x2a6>
 80096b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096b8:	429a      	cmp	r2, r3
 80096ba:	bfa8      	it	ge
 80096bc:	461a      	movge	r2, r3
 80096be:	2a00      	cmp	r2, #0
 80096c0:	4691      	mov	r9, r2
 80096c2:	dd07      	ble.n	80096d4 <_printf_float+0x2e8>
 80096c4:	4613      	mov	r3, r2
 80096c6:	4631      	mov	r1, r6
 80096c8:	4642      	mov	r2, r8
 80096ca:	4628      	mov	r0, r5
 80096cc:	47b8      	blx	r7
 80096ce:	3001      	adds	r0, #1
 80096d0:	f43f aee9 	beq.w	80094a6 <_printf_float+0xba>
 80096d4:	f104 031a 	add.w	r3, r4, #26
 80096d8:	f04f 0b00 	mov.w	fp, #0
 80096dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096e0:	9306      	str	r3, [sp, #24]
 80096e2:	e015      	b.n	8009710 <_printf_float+0x324>
 80096e4:	7fefffff 	.word	0x7fefffff
 80096e8:	0800b53c 	.word	0x0800b53c
 80096ec:	0800b538 	.word	0x0800b538
 80096f0:	0800b544 	.word	0x0800b544
 80096f4:	0800b540 	.word	0x0800b540
 80096f8:	0800b548 	.word	0x0800b548
 80096fc:	2301      	movs	r3, #1
 80096fe:	9a06      	ldr	r2, [sp, #24]
 8009700:	4631      	mov	r1, r6
 8009702:	4628      	mov	r0, r5
 8009704:	47b8      	blx	r7
 8009706:	3001      	adds	r0, #1
 8009708:	f43f aecd 	beq.w	80094a6 <_printf_float+0xba>
 800970c:	f10b 0b01 	add.w	fp, fp, #1
 8009710:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009714:	ebaa 0309 	sub.w	r3, sl, r9
 8009718:	455b      	cmp	r3, fp
 800971a:	dcef      	bgt.n	80096fc <_printf_float+0x310>
 800971c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009720:	429a      	cmp	r2, r3
 8009722:	44d0      	add	r8, sl
 8009724:	db15      	blt.n	8009752 <_printf_float+0x366>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	07da      	lsls	r2, r3, #31
 800972a:	d412      	bmi.n	8009752 <_printf_float+0x366>
 800972c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800972e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009730:	eba3 020a 	sub.w	r2, r3, sl
 8009734:	eba3 0a01 	sub.w	sl, r3, r1
 8009738:	4592      	cmp	sl, r2
 800973a:	bfa8      	it	ge
 800973c:	4692      	movge	sl, r2
 800973e:	f1ba 0f00 	cmp.w	sl, #0
 8009742:	dc0e      	bgt.n	8009762 <_printf_float+0x376>
 8009744:	f04f 0800 	mov.w	r8, #0
 8009748:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800974c:	f104 091a 	add.w	r9, r4, #26
 8009750:	e019      	b.n	8009786 <_printf_float+0x39a>
 8009752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009756:	4631      	mov	r1, r6
 8009758:	4628      	mov	r0, r5
 800975a:	47b8      	blx	r7
 800975c:	3001      	adds	r0, #1
 800975e:	d1e5      	bne.n	800972c <_printf_float+0x340>
 8009760:	e6a1      	b.n	80094a6 <_printf_float+0xba>
 8009762:	4653      	mov	r3, sl
 8009764:	4642      	mov	r2, r8
 8009766:	4631      	mov	r1, r6
 8009768:	4628      	mov	r0, r5
 800976a:	47b8      	blx	r7
 800976c:	3001      	adds	r0, #1
 800976e:	d1e9      	bne.n	8009744 <_printf_float+0x358>
 8009770:	e699      	b.n	80094a6 <_printf_float+0xba>
 8009772:	2301      	movs	r3, #1
 8009774:	464a      	mov	r2, r9
 8009776:	4631      	mov	r1, r6
 8009778:	4628      	mov	r0, r5
 800977a:	47b8      	blx	r7
 800977c:	3001      	adds	r0, #1
 800977e:	f43f ae92 	beq.w	80094a6 <_printf_float+0xba>
 8009782:	f108 0801 	add.w	r8, r8, #1
 8009786:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800978a:	1a9b      	subs	r3, r3, r2
 800978c:	eba3 030a 	sub.w	r3, r3, sl
 8009790:	4543      	cmp	r3, r8
 8009792:	dcee      	bgt.n	8009772 <_printf_float+0x386>
 8009794:	e74a      	b.n	800962c <_printf_float+0x240>
 8009796:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009798:	2a01      	cmp	r2, #1
 800979a:	dc01      	bgt.n	80097a0 <_printf_float+0x3b4>
 800979c:	07db      	lsls	r3, r3, #31
 800979e:	d53a      	bpl.n	8009816 <_printf_float+0x42a>
 80097a0:	2301      	movs	r3, #1
 80097a2:	4642      	mov	r2, r8
 80097a4:	4631      	mov	r1, r6
 80097a6:	4628      	mov	r0, r5
 80097a8:	47b8      	blx	r7
 80097aa:	3001      	adds	r0, #1
 80097ac:	f43f ae7b 	beq.w	80094a6 <_printf_float+0xba>
 80097b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	f108 0801 	add.w	r8, r8, #1
 80097c0:	f43f ae71 	beq.w	80094a6 <_printf_float+0xba>
 80097c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c6:	2200      	movs	r2, #0
 80097c8:	f103 3aff 	add.w	sl, r3, #4294967295
 80097cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097d0:	2300      	movs	r3, #0
 80097d2:	f7f7 f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80097d6:	b9c8      	cbnz	r0, 800980c <_printf_float+0x420>
 80097d8:	4653      	mov	r3, sl
 80097da:	4642      	mov	r2, r8
 80097dc:	4631      	mov	r1, r6
 80097de:	4628      	mov	r0, r5
 80097e0:	47b8      	blx	r7
 80097e2:	3001      	adds	r0, #1
 80097e4:	d10e      	bne.n	8009804 <_printf_float+0x418>
 80097e6:	e65e      	b.n	80094a6 <_printf_float+0xba>
 80097e8:	2301      	movs	r3, #1
 80097ea:	4652      	mov	r2, sl
 80097ec:	4631      	mov	r1, r6
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b8      	blx	r7
 80097f2:	3001      	adds	r0, #1
 80097f4:	f43f ae57 	beq.w	80094a6 <_printf_float+0xba>
 80097f8:	f108 0801 	add.w	r8, r8, #1
 80097fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097fe:	3b01      	subs	r3, #1
 8009800:	4543      	cmp	r3, r8
 8009802:	dcf1      	bgt.n	80097e8 <_printf_float+0x3fc>
 8009804:	464b      	mov	r3, r9
 8009806:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800980a:	e6de      	b.n	80095ca <_printf_float+0x1de>
 800980c:	f04f 0800 	mov.w	r8, #0
 8009810:	f104 0a1a 	add.w	sl, r4, #26
 8009814:	e7f2      	b.n	80097fc <_printf_float+0x410>
 8009816:	2301      	movs	r3, #1
 8009818:	e7df      	b.n	80097da <_printf_float+0x3ee>
 800981a:	2301      	movs	r3, #1
 800981c:	464a      	mov	r2, r9
 800981e:	4631      	mov	r1, r6
 8009820:	4628      	mov	r0, r5
 8009822:	47b8      	blx	r7
 8009824:	3001      	adds	r0, #1
 8009826:	f43f ae3e 	beq.w	80094a6 <_printf_float+0xba>
 800982a:	f108 0801 	add.w	r8, r8, #1
 800982e:	68e3      	ldr	r3, [r4, #12]
 8009830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009832:	1a9b      	subs	r3, r3, r2
 8009834:	4543      	cmp	r3, r8
 8009836:	dcf0      	bgt.n	800981a <_printf_float+0x42e>
 8009838:	e6fc      	b.n	8009634 <_printf_float+0x248>
 800983a:	f04f 0800 	mov.w	r8, #0
 800983e:	f104 0919 	add.w	r9, r4, #25
 8009842:	e7f4      	b.n	800982e <_printf_float+0x442>
 8009844:	2900      	cmp	r1, #0
 8009846:	f43f ae8b 	beq.w	8009560 <_printf_float+0x174>
 800984a:	2300      	movs	r3, #0
 800984c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009850:	ab09      	add	r3, sp, #36	; 0x24
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	ec49 8b10 	vmov	d0, r8, r9
 8009858:	6022      	str	r2, [r4, #0]
 800985a:	f8cd a004 	str.w	sl, [sp, #4]
 800985e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009862:	4628      	mov	r0, r5
 8009864:	f7ff fd2d 	bl	80092c2 <__cvt>
 8009868:	4680      	mov	r8, r0
 800986a:	e648      	b.n	80094fe <_printf_float+0x112>

0800986c <_printf_common>:
 800986c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009870:	4691      	mov	r9, r2
 8009872:	461f      	mov	r7, r3
 8009874:	688a      	ldr	r2, [r1, #8]
 8009876:	690b      	ldr	r3, [r1, #16]
 8009878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800987c:	4293      	cmp	r3, r2
 800987e:	bfb8      	it	lt
 8009880:	4613      	movlt	r3, r2
 8009882:	f8c9 3000 	str.w	r3, [r9]
 8009886:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800988a:	4606      	mov	r6, r0
 800988c:	460c      	mov	r4, r1
 800988e:	b112      	cbz	r2, 8009896 <_printf_common+0x2a>
 8009890:	3301      	adds	r3, #1
 8009892:	f8c9 3000 	str.w	r3, [r9]
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	0699      	lsls	r1, r3, #26
 800989a:	bf42      	ittt	mi
 800989c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80098a0:	3302      	addmi	r3, #2
 80098a2:	f8c9 3000 	strmi.w	r3, [r9]
 80098a6:	6825      	ldr	r5, [r4, #0]
 80098a8:	f015 0506 	ands.w	r5, r5, #6
 80098ac:	d107      	bne.n	80098be <_printf_common+0x52>
 80098ae:	f104 0a19 	add.w	sl, r4, #25
 80098b2:	68e3      	ldr	r3, [r4, #12]
 80098b4:	f8d9 2000 	ldr.w	r2, [r9]
 80098b8:	1a9b      	subs	r3, r3, r2
 80098ba:	42ab      	cmp	r3, r5
 80098bc:	dc28      	bgt.n	8009910 <_printf_common+0xa4>
 80098be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80098c2:	6822      	ldr	r2, [r4, #0]
 80098c4:	3300      	adds	r3, #0
 80098c6:	bf18      	it	ne
 80098c8:	2301      	movne	r3, #1
 80098ca:	0692      	lsls	r2, r2, #26
 80098cc:	d42d      	bmi.n	800992a <_printf_common+0xbe>
 80098ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098d2:	4639      	mov	r1, r7
 80098d4:	4630      	mov	r0, r6
 80098d6:	47c0      	blx	r8
 80098d8:	3001      	adds	r0, #1
 80098da:	d020      	beq.n	800991e <_printf_common+0xb2>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	68e5      	ldr	r5, [r4, #12]
 80098e0:	f8d9 2000 	ldr.w	r2, [r9]
 80098e4:	f003 0306 	and.w	r3, r3, #6
 80098e8:	2b04      	cmp	r3, #4
 80098ea:	bf08      	it	eq
 80098ec:	1aad      	subeq	r5, r5, r2
 80098ee:	68a3      	ldr	r3, [r4, #8]
 80098f0:	6922      	ldr	r2, [r4, #16]
 80098f2:	bf0c      	ite	eq
 80098f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098f8:	2500      	movne	r5, #0
 80098fa:	4293      	cmp	r3, r2
 80098fc:	bfc4      	itt	gt
 80098fe:	1a9b      	subgt	r3, r3, r2
 8009900:	18ed      	addgt	r5, r5, r3
 8009902:	f04f 0900 	mov.w	r9, #0
 8009906:	341a      	adds	r4, #26
 8009908:	454d      	cmp	r5, r9
 800990a:	d11a      	bne.n	8009942 <_printf_common+0xd6>
 800990c:	2000      	movs	r0, #0
 800990e:	e008      	b.n	8009922 <_printf_common+0xb6>
 8009910:	2301      	movs	r3, #1
 8009912:	4652      	mov	r2, sl
 8009914:	4639      	mov	r1, r7
 8009916:	4630      	mov	r0, r6
 8009918:	47c0      	blx	r8
 800991a:	3001      	adds	r0, #1
 800991c:	d103      	bne.n	8009926 <_printf_common+0xba>
 800991e:	f04f 30ff 	mov.w	r0, #4294967295
 8009922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009926:	3501      	adds	r5, #1
 8009928:	e7c3      	b.n	80098b2 <_printf_common+0x46>
 800992a:	18e1      	adds	r1, r4, r3
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	2030      	movs	r0, #48	; 0x30
 8009930:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009934:	4422      	add	r2, r4
 8009936:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800993a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800993e:	3302      	adds	r3, #2
 8009940:	e7c5      	b.n	80098ce <_printf_common+0x62>
 8009942:	2301      	movs	r3, #1
 8009944:	4622      	mov	r2, r4
 8009946:	4639      	mov	r1, r7
 8009948:	4630      	mov	r0, r6
 800994a:	47c0      	blx	r8
 800994c:	3001      	adds	r0, #1
 800994e:	d0e6      	beq.n	800991e <_printf_common+0xb2>
 8009950:	f109 0901 	add.w	r9, r9, #1
 8009954:	e7d8      	b.n	8009908 <_printf_common+0x9c>
	...

08009958 <_printf_i>:
 8009958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800995c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009960:	460c      	mov	r4, r1
 8009962:	7e09      	ldrb	r1, [r1, #24]
 8009964:	b085      	sub	sp, #20
 8009966:	296e      	cmp	r1, #110	; 0x6e
 8009968:	4617      	mov	r7, r2
 800996a:	4606      	mov	r6, r0
 800996c:	4698      	mov	r8, r3
 800996e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009970:	f000 80b3 	beq.w	8009ada <_printf_i+0x182>
 8009974:	d822      	bhi.n	80099bc <_printf_i+0x64>
 8009976:	2963      	cmp	r1, #99	; 0x63
 8009978:	d036      	beq.n	80099e8 <_printf_i+0x90>
 800997a:	d80a      	bhi.n	8009992 <_printf_i+0x3a>
 800997c:	2900      	cmp	r1, #0
 800997e:	f000 80b9 	beq.w	8009af4 <_printf_i+0x19c>
 8009982:	2958      	cmp	r1, #88	; 0x58
 8009984:	f000 8083 	beq.w	8009a8e <_printf_i+0x136>
 8009988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800998c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009990:	e032      	b.n	80099f8 <_printf_i+0xa0>
 8009992:	2964      	cmp	r1, #100	; 0x64
 8009994:	d001      	beq.n	800999a <_printf_i+0x42>
 8009996:	2969      	cmp	r1, #105	; 0x69
 8009998:	d1f6      	bne.n	8009988 <_printf_i+0x30>
 800999a:	6820      	ldr	r0, [r4, #0]
 800999c:	6813      	ldr	r3, [r2, #0]
 800999e:	0605      	lsls	r5, r0, #24
 80099a0:	f103 0104 	add.w	r1, r3, #4
 80099a4:	d52a      	bpl.n	80099fc <_printf_i+0xa4>
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6011      	str	r1, [r2, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	da03      	bge.n	80099b6 <_printf_i+0x5e>
 80099ae:	222d      	movs	r2, #45	; 0x2d
 80099b0:	425b      	negs	r3, r3
 80099b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80099b6:	486f      	ldr	r0, [pc, #444]	; (8009b74 <_printf_i+0x21c>)
 80099b8:	220a      	movs	r2, #10
 80099ba:	e039      	b.n	8009a30 <_printf_i+0xd8>
 80099bc:	2973      	cmp	r1, #115	; 0x73
 80099be:	f000 809d 	beq.w	8009afc <_printf_i+0x1a4>
 80099c2:	d808      	bhi.n	80099d6 <_printf_i+0x7e>
 80099c4:	296f      	cmp	r1, #111	; 0x6f
 80099c6:	d020      	beq.n	8009a0a <_printf_i+0xb2>
 80099c8:	2970      	cmp	r1, #112	; 0x70
 80099ca:	d1dd      	bne.n	8009988 <_printf_i+0x30>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	f043 0320 	orr.w	r3, r3, #32
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	e003      	b.n	80099de <_printf_i+0x86>
 80099d6:	2975      	cmp	r1, #117	; 0x75
 80099d8:	d017      	beq.n	8009a0a <_printf_i+0xb2>
 80099da:	2978      	cmp	r1, #120	; 0x78
 80099dc:	d1d4      	bne.n	8009988 <_printf_i+0x30>
 80099de:	2378      	movs	r3, #120	; 0x78
 80099e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099e4:	4864      	ldr	r0, [pc, #400]	; (8009b78 <_printf_i+0x220>)
 80099e6:	e055      	b.n	8009a94 <_printf_i+0x13c>
 80099e8:	6813      	ldr	r3, [r2, #0]
 80099ea:	1d19      	adds	r1, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6011      	str	r1, [r2, #0]
 80099f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099f8:	2301      	movs	r3, #1
 80099fa:	e08c      	b.n	8009b16 <_printf_i+0x1be>
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6011      	str	r1, [r2, #0]
 8009a00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a04:	bf18      	it	ne
 8009a06:	b21b      	sxthne	r3, r3
 8009a08:	e7cf      	b.n	80099aa <_printf_i+0x52>
 8009a0a:	6813      	ldr	r3, [r2, #0]
 8009a0c:	6825      	ldr	r5, [r4, #0]
 8009a0e:	1d18      	adds	r0, r3, #4
 8009a10:	6010      	str	r0, [r2, #0]
 8009a12:	0628      	lsls	r0, r5, #24
 8009a14:	d501      	bpl.n	8009a1a <_printf_i+0xc2>
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	e002      	b.n	8009a20 <_printf_i+0xc8>
 8009a1a:	0668      	lsls	r0, r5, #25
 8009a1c:	d5fb      	bpl.n	8009a16 <_printf_i+0xbe>
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	4854      	ldr	r0, [pc, #336]	; (8009b74 <_printf_i+0x21c>)
 8009a22:	296f      	cmp	r1, #111	; 0x6f
 8009a24:	bf14      	ite	ne
 8009a26:	220a      	movne	r2, #10
 8009a28:	2208      	moveq	r2, #8
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a30:	6865      	ldr	r5, [r4, #4]
 8009a32:	60a5      	str	r5, [r4, #8]
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	f2c0 8095 	blt.w	8009b64 <_printf_i+0x20c>
 8009a3a:	6821      	ldr	r1, [r4, #0]
 8009a3c:	f021 0104 	bic.w	r1, r1, #4
 8009a40:	6021      	str	r1, [r4, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d13d      	bne.n	8009ac2 <_printf_i+0x16a>
 8009a46:	2d00      	cmp	r5, #0
 8009a48:	f040 808e 	bne.w	8009b68 <_printf_i+0x210>
 8009a4c:	4665      	mov	r5, ip
 8009a4e:	2a08      	cmp	r2, #8
 8009a50:	d10b      	bne.n	8009a6a <_printf_i+0x112>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	07db      	lsls	r3, r3, #31
 8009a56:	d508      	bpl.n	8009a6a <_printf_i+0x112>
 8009a58:	6923      	ldr	r3, [r4, #16]
 8009a5a:	6862      	ldr	r2, [r4, #4]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	bfde      	ittt	le
 8009a60:	2330      	movle	r3, #48	; 0x30
 8009a62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a6a:	ebac 0305 	sub.w	r3, ip, r5
 8009a6e:	6123      	str	r3, [r4, #16]
 8009a70:	f8cd 8000 	str.w	r8, [sp]
 8009a74:	463b      	mov	r3, r7
 8009a76:	aa03      	add	r2, sp, #12
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff fef6 	bl	800986c <_printf_common>
 8009a80:	3001      	adds	r0, #1
 8009a82:	d14d      	bne.n	8009b20 <_printf_i+0x1c8>
 8009a84:	f04f 30ff 	mov.w	r0, #4294967295
 8009a88:	b005      	add	sp, #20
 8009a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a8e:	4839      	ldr	r0, [pc, #228]	; (8009b74 <_printf_i+0x21c>)
 8009a90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009a94:	6813      	ldr	r3, [r2, #0]
 8009a96:	6821      	ldr	r1, [r4, #0]
 8009a98:	1d1d      	adds	r5, r3, #4
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6015      	str	r5, [r2, #0]
 8009a9e:	060a      	lsls	r2, r1, #24
 8009aa0:	d50b      	bpl.n	8009aba <_printf_i+0x162>
 8009aa2:	07ca      	lsls	r2, r1, #31
 8009aa4:	bf44      	itt	mi
 8009aa6:	f041 0120 	orrmi.w	r1, r1, #32
 8009aaa:	6021      	strmi	r1, [r4, #0]
 8009aac:	b91b      	cbnz	r3, 8009ab6 <_printf_i+0x15e>
 8009aae:	6822      	ldr	r2, [r4, #0]
 8009ab0:	f022 0220 	bic.w	r2, r2, #32
 8009ab4:	6022      	str	r2, [r4, #0]
 8009ab6:	2210      	movs	r2, #16
 8009ab8:	e7b7      	b.n	8009a2a <_printf_i+0xd2>
 8009aba:	064d      	lsls	r5, r1, #25
 8009abc:	bf48      	it	mi
 8009abe:	b29b      	uxthmi	r3, r3
 8009ac0:	e7ef      	b.n	8009aa2 <_printf_i+0x14a>
 8009ac2:	4665      	mov	r5, ip
 8009ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ac8:	fb02 3311 	mls	r3, r2, r1, r3
 8009acc:	5cc3      	ldrb	r3, [r0, r3]
 8009ace:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	d1f5      	bne.n	8009ac4 <_printf_i+0x16c>
 8009ad8:	e7b9      	b.n	8009a4e <_printf_i+0xf6>
 8009ada:	6813      	ldr	r3, [r2, #0]
 8009adc:	6825      	ldr	r5, [r4, #0]
 8009ade:	6961      	ldr	r1, [r4, #20]
 8009ae0:	1d18      	adds	r0, r3, #4
 8009ae2:	6010      	str	r0, [r2, #0]
 8009ae4:	0628      	lsls	r0, r5, #24
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	d501      	bpl.n	8009aee <_printf_i+0x196>
 8009aea:	6019      	str	r1, [r3, #0]
 8009aec:	e002      	b.n	8009af4 <_printf_i+0x19c>
 8009aee:	066a      	lsls	r2, r5, #25
 8009af0:	d5fb      	bpl.n	8009aea <_printf_i+0x192>
 8009af2:	8019      	strh	r1, [r3, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	6123      	str	r3, [r4, #16]
 8009af8:	4665      	mov	r5, ip
 8009afa:	e7b9      	b.n	8009a70 <_printf_i+0x118>
 8009afc:	6813      	ldr	r3, [r2, #0]
 8009afe:	1d19      	adds	r1, r3, #4
 8009b00:	6011      	str	r1, [r2, #0]
 8009b02:	681d      	ldr	r5, [r3, #0]
 8009b04:	6862      	ldr	r2, [r4, #4]
 8009b06:	2100      	movs	r1, #0
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f7f6 fb69 	bl	80001e0 <memchr>
 8009b0e:	b108      	cbz	r0, 8009b14 <_printf_i+0x1bc>
 8009b10:	1b40      	subs	r0, r0, r5
 8009b12:	6060      	str	r0, [r4, #4]
 8009b14:	6863      	ldr	r3, [r4, #4]
 8009b16:	6123      	str	r3, [r4, #16]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b1e:	e7a7      	b.n	8009a70 <_printf_i+0x118>
 8009b20:	6923      	ldr	r3, [r4, #16]
 8009b22:	462a      	mov	r2, r5
 8009b24:	4639      	mov	r1, r7
 8009b26:	4630      	mov	r0, r6
 8009b28:	47c0      	blx	r8
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	d0aa      	beq.n	8009a84 <_printf_i+0x12c>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	079b      	lsls	r3, r3, #30
 8009b32:	d413      	bmi.n	8009b5c <_printf_i+0x204>
 8009b34:	68e0      	ldr	r0, [r4, #12]
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	4298      	cmp	r0, r3
 8009b3a:	bfb8      	it	lt
 8009b3c:	4618      	movlt	r0, r3
 8009b3e:	e7a3      	b.n	8009a88 <_printf_i+0x130>
 8009b40:	2301      	movs	r3, #1
 8009b42:	464a      	mov	r2, r9
 8009b44:	4639      	mov	r1, r7
 8009b46:	4630      	mov	r0, r6
 8009b48:	47c0      	blx	r8
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d09a      	beq.n	8009a84 <_printf_i+0x12c>
 8009b4e:	3501      	adds	r5, #1
 8009b50:	68e3      	ldr	r3, [r4, #12]
 8009b52:	9a03      	ldr	r2, [sp, #12]
 8009b54:	1a9b      	subs	r3, r3, r2
 8009b56:	42ab      	cmp	r3, r5
 8009b58:	dcf2      	bgt.n	8009b40 <_printf_i+0x1e8>
 8009b5a:	e7eb      	b.n	8009b34 <_printf_i+0x1dc>
 8009b5c:	2500      	movs	r5, #0
 8009b5e:	f104 0919 	add.w	r9, r4, #25
 8009b62:	e7f5      	b.n	8009b50 <_printf_i+0x1f8>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1ac      	bne.n	8009ac2 <_printf_i+0x16a>
 8009b68:	7803      	ldrb	r3, [r0, #0]
 8009b6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b72:	e76c      	b.n	8009a4e <_printf_i+0xf6>
 8009b74:	0800b54a 	.word	0x0800b54a
 8009b78:	0800b55b 	.word	0x0800b55b

08009b7c <siprintf>:
 8009b7c:	b40e      	push	{r1, r2, r3}
 8009b7e:	b500      	push	{lr}
 8009b80:	b09c      	sub	sp, #112	; 0x70
 8009b82:	ab1d      	add	r3, sp, #116	; 0x74
 8009b84:	9002      	str	r0, [sp, #8]
 8009b86:	9006      	str	r0, [sp, #24]
 8009b88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b8c:	4809      	ldr	r0, [pc, #36]	; (8009bb4 <siprintf+0x38>)
 8009b8e:	9107      	str	r1, [sp, #28]
 8009b90:	9104      	str	r1, [sp, #16]
 8009b92:	4909      	ldr	r1, [pc, #36]	; (8009bb8 <siprintf+0x3c>)
 8009b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b98:	9105      	str	r1, [sp, #20]
 8009b9a:	6800      	ldr	r0, [r0, #0]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	a902      	add	r1, sp, #8
 8009ba0:	f001 fb04 	bl	800b1ac <_svfiprintf_r>
 8009ba4:	9b02      	ldr	r3, [sp, #8]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	701a      	strb	r2, [r3, #0]
 8009baa:	b01c      	add	sp, #112	; 0x70
 8009bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bb0:	b003      	add	sp, #12
 8009bb2:	4770      	bx	lr
 8009bb4:	20000024 	.word	0x20000024
 8009bb8:	ffff0208 	.word	0xffff0208

08009bbc <_strtol_l.isra.0>:
 8009bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	4689      	mov	r9, r1
 8009bc4:	4692      	mov	sl, r2
 8009bc6:	461e      	mov	r6, r3
 8009bc8:	460f      	mov	r7, r1
 8009bca:	463d      	mov	r5, r7
 8009bcc:	9808      	ldr	r0, [sp, #32]
 8009bce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bd2:	f000 fec9 	bl	800a968 <__locale_ctype_ptr_l>
 8009bd6:	4420      	add	r0, r4
 8009bd8:	7843      	ldrb	r3, [r0, #1]
 8009bda:	f013 0308 	ands.w	r3, r3, #8
 8009bde:	d132      	bne.n	8009c46 <_strtol_l.isra.0+0x8a>
 8009be0:	2c2d      	cmp	r4, #45	; 0x2d
 8009be2:	d132      	bne.n	8009c4a <_strtol_l.isra.0+0x8e>
 8009be4:	787c      	ldrb	r4, [r7, #1]
 8009be6:	1cbd      	adds	r5, r7, #2
 8009be8:	2201      	movs	r2, #1
 8009bea:	2e00      	cmp	r6, #0
 8009bec:	d05d      	beq.n	8009caa <_strtol_l.isra.0+0xee>
 8009bee:	2e10      	cmp	r6, #16
 8009bf0:	d109      	bne.n	8009c06 <_strtol_l.isra.0+0x4a>
 8009bf2:	2c30      	cmp	r4, #48	; 0x30
 8009bf4:	d107      	bne.n	8009c06 <_strtol_l.isra.0+0x4a>
 8009bf6:	782b      	ldrb	r3, [r5, #0]
 8009bf8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bfc:	2b58      	cmp	r3, #88	; 0x58
 8009bfe:	d14f      	bne.n	8009ca0 <_strtol_l.isra.0+0xe4>
 8009c00:	786c      	ldrb	r4, [r5, #1]
 8009c02:	2610      	movs	r6, #16
 8009c04:	3502      	adds	r5, #2
 8009c06:	2a00      	cmp	r2, #0
 8009c08:	bf14      	ite	ne
 8009c0a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009c0e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009c12:	2700      	movs	r7, #0
 8009c14:	fbb1 fcf6 	udiv	ip, r1, r6
 8009c18:	4638      	mov	r0, r7
 8009c1a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009c1e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009c22:	2b09      	cmp	r3, #9
 8009c24:	d817      	bhi.n	8009c56 <_strtol_l.isra.0+0x9a>
 8009c26:	461c      	mov	r4, r3
 8009c28:	42a6      	cmp	r6, r4
 8009c2a:	dd23      	ble.n	8009c74 <_strtol_l.isra.0+0xb8>
 8009c2c:	1c7b      	adds	r3, r7, #1
 8009c2e:	d007      	beq.n	8009c40 <_strtol_l.isra.0+0x84>
 8009c30:	4584      	cmp	ip, r0
 8009c32:	d31c      	bcc.n	8009c6e <_strtol_l.isra.0+0xb2>
 8009c34:	d101      	bne.n	8009c3a <_strtol_l.isra.0+0x7e>
 8009c36:	45a6      	cmp	lr, r4
 8009c38:	db19      	blt.n	8009c6e <_strtol_l.isra.0+0xb2>
 8009c3a:	fb00 4006 	mla	r0, r0, r6, r4
 8009c3e:	2701      	movs	r7, #1
 8009c40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c44:	e7eb      	b.n	8009c1e <_strtol_l.isra.0+0x62>
 8009c46:	462f      	mov	r7, r5
 8009c48:	e7bf      	b.n	8009bca <_strtol_l.isra.0+0xe>
 8009c4a:	2c2b      	cmp	r4, #43	; 0x2b
 8009c4c:	bf04      	itt	eq
 8009c4e:	1cbd      	addeq	r5, r7, #2
 8009c50:	787c      	ldrbeq	r4, [r7, #1]
 8009c52:	461a      	mov	r2, r3
 8009c54:	e7c9      	b.n	8009bea <_strtol_l.isra.0+0x2e>
 8009c56:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009c5a:	2b19      	cmp	r3, #25
 8009c5c:	d801      	bhi.n	8009c62 <_strtol_l.isra.0+0xa6>
 8009c5e:	3c37      	subs	r4, #55	; 0x37
 8009c60:	e7e2      	b.n	8009c28 <_strtol_l.isra.0+0x6c>
 8009c62:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009c66:	2b19      	cmp	r3, #25
 8009c68:	d804      	bhi.n	8009c74 <_strtol_l.isra.0+0xb8>
 8009c6a:	3c57      	subs	r4, #87	; 0x57
 8009c6c:	e7dc      	b.n	8009c28 <_strtol_l.isra.0+0x6c>
 8009c6e:	f04f 37ff 	mov.w	r7, #4294967295
 8009c72:	e7e5      	b.n	8009c40 <_strtol_l.isra.0+0x84>
 8009c74:	1c7b      	adds	r3, r7, #1
 8009c76:	d108      	bne.n	8009c8a <_strtol_l.isra.0+0xce>
 8009c78:	2322      	movs	r3, #34	; 0x22
 8009c7a:	f8c8 3000 	str.w	r3, [r8]
 8009c7e:	4608      	mov	r0, r1
 8009c80:	f1ba 0f00 	cmp.w	sl, #0
 8009c84:	d107      	bne.n	8009c96 <_strtol_l.isra.0+0xda>
 8009c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8a:	b102      	cbz	r2, 8009c8e <_strtol_l.isra.0+0xd2>
 8009c8c:	4240      	negs	r0, r0
 8009c8e:	f1ba 0f00 	cmp.w	sl, #0
 8009c92:	d0f8      	beq.n	8009c86 <_strtol_l.isra.0+0xca>
 8009c94:	b10f      	cbz	r7, 8009c9a <_strtol_l.isra.0+0xde>
 8009c96:	f105 39ff 	add.w	r9, r5, #4294967295
 8009c9a:	f8ca 9000 	str.w	r9, [sl]
 8009c9e:	e7f2      	b.n	8009c86 <_strtol_l.isra.0+0xca>
 8009ca0:	2430      	movs	r4, #48	; 0x30
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d1af      	bne.n	8009c06 <_strtol_l.isra.0+0x4a>
 8009ca6:	2608      	movs	r6, #8
 8009ca8:	e7ad      	b.n	8009c06 <_strtol_l.isra.0+0x4a>
 8009caa:	2c30      	cmp	r4, #48	; 0x30
 8009cac:	d0a3      	beq.n	8009bf6 <_strtol_l.isra.0+0x3a>
 8009cae:	260a      	movs	r6, #10
 8009cb0:	e7a9      	b.n	8009c06 <_strtol_l.isra.0+0x4a>
	...

08009cb4 <strtol>:
 8009cb4:	4b08      	ldr	r3, [pc, #32]	; (8009cd8 <strtol+0x24>)
 8009cb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cb8:	681c      	ldr	r4, [r3, #0]
 8009cba:	4d08      	ldr	r5, [pc, #32]	; (8009cdc <strtol+0x28>)
 8009cbc:	6a23      	ldr	r3, [r4, #32]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	bf08      	it	eq
 8009cc2:	462b      	moveq	r3, r5
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	460a      	mov	r2, r1
 8009cca:	4601      	mov	r1, r0
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7ff ff75 	bl	8009bbc <_strtol_l.isra.0>
 8009cd2:	b003      	add	sp, #12
 8009cd4:	bd30      	pop	{r4, r5, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000024 	.word	0x20000024
 8009cdc:	20000088 	.word	0x20000088

08009ce0 <quorem>:
 8009ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	6903      	ldr	r3, [r0, #16]
 8009ce6:	690c      	ldr	r4, [r1, #16]
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	4680      	mov	r8, r0
 8009cec:	f2c0 8082 	blt.w	8009df4 <quorem+0x114>
 8009cf0:	3c01      	subs	r4, #1
 8009cf2:	f101 0714 	add.w	r7, r1, #20
 8009cf6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009cfa:	f100 0614 	add.w	r6, r0, #20
 8009cfe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009d02:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009d06:	eb06 030c 	add.w	r3, r6, ip
 8009d0a:	3501      	adds	r5, #1
 8009d0c:	eb07 090c 	add.w	r9, r7, ip
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	fbb0 f5f5 	udiv	r5, r0, r5
 8009d16:	b395      	cbz	r5, 8009d7e <quorem+0x9e>
 8009d18:	f04f 0a00 	mov.w	sl, #0
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	46b6      	mov	lr, r6
 8009d20:	46d3      	mov	fp, sl
 8009d22:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d26:	b293      	uxth	r3, r2
 8009d28:	fb05 a303 	mla	r3, r5, r3, sl
 8009d2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	ebab 0303 	sub.w	r3, fp, r3
 8009d36:	0c12      	lsrs	r2, r2, #16
 8009d38:	f8de b000 	ldr.w	fp, [lr]
 8009d3c:	fb05 a202 	mla	r2, r5, r2, sl
 8009d40:	fa13 f38b 	uxtah	r3, r3, fp
 8009d44:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009d48:	fa1f fb82 	uxth.w	fp, r2
 8009d4c:	f8de 2000 	ldr.w	r2, [lr]
 8009d50:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009d54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d5e:	4581      	cmp	r9, r0
 8009d60:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009d64:	f84e 3b04 	str.w	r3, [lr], #4
 8009d68:	d2db      	bcs.n	8009d22 <quorem+0x42>
 8009d6a:	f856 300c 	ldr.w	r3, [r6, ip]
 8009d6e:	b933      	cbnz	r3, 8009d7e <quorem+0x9e>
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	3b04      	subs	r3, #4
 8009d74:	429e      	cmp	r6, r3
 8009d76:	461a      	mov	r2, r3
 8009d78:	d330      	bcc.n	8009ddc <quorem+0xfc>
 8009d7a:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d7e:	4640      	mov	r0, r8
 8009d80:	f001 f83e 	bl	800ae00 <__mcmp>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	db25      	blt.n	8009dd4 <quorem+0xf4>
 8009d88:	3501      	adds	r5, #1
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f04f 0c00 	mov.w	ip, #0
 8009d90:	f857 2b04 	ldr.w	r2, [r7], #4
 8009d94:	f8d0 e000 	ldr.w	lr, [r0]
 8009d98:	b293      	uxth	r3, r2
 8009d9a:	ebac 0303 	sub.w	r3, ip, r3
 8009d9e:	0c12      	lsrs	r2, r2, #16
 8009da0:	fa13 f38e 	uxtah	r3, r3, lr
 8009da4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009da8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009db2:	45b9      	cmp	r9, r7
 8009db4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009db8:	f840 3b04 	str.w	r3, [r0], #4
 8009dbc:	d2e8      	bcs.n	8009d90 <quorem+0xb0>
 8009dbe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009dc2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009dc6:	b92a      	cbnz	r2, 8009dd4 <quorem+0xf4>
 8009dc8:	3b04      	subs	r3, #4
 8009dca:	429e      	cmp	r6, r3
 8009dcc:	461a      	mov	r2, r3
 8009dce:	d30b      	bcc.n	8009de8 <quorem+0x108>
 8009dd0:	f8c8 4010 	str.w	r4, [r8, #16]
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	b003      	add	sp, #12
 8009dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	3b04      	subs	r3, #4
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	d1ca      	bne.n	8009d7a <quorem+0x9a>
 8009de4:	3c01      	subs	r4, #1
 8009de6:	e7c5      	b.n	8009d74 <quorem+0x94>
 8009de8:	6812      	ldr	r2, [r2, #0]
 8009dea:	3b04      	subs	r3, #4
 8009dec:	2a00      	cmp	r2, #0
 8009dee:	d1ef      	bne.n	8009dd0 <quorem+0xf0>
 8009df0:	3c01      	subs	r4, #1
 8009df2:	e7ea      	b.n	8009dca <quorem+0xea>
 8009df4:	2000      	movs	r0, #0
 8009df6:	e7ee      	b.n	8009dd6 <quorem+0xf6>

08009df8 <_dtoa_r>:
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	ec57 6b10 	vmov	r6, r7, d0
 8009e00:	b097      	sub	sp, #92	; 0x5c
 8009e02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e04:	9106      	str	r1, [sp, #24]
 8009e06:	4604      	mov	r4, r0
 8009e08:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e0a:	9312      	str	r3, [sp, #72]	; 0x48
 8009e0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e10:	e9cd 6700 	strd	r6, r7, [sp]
 8009e14:	b93d      	cbnz	r5, 8009e26 <_dtoa_r+0x2e>
 8009e16:	2010      	movs	r0, #16
 8009e18:	f000 fdb8 	bl	800a98c <malloc>
 8009e1c:	6260      	str	r0, [r4, #36]	; 0x24
 8009e1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e22:	6005      	str	r5, [r0, #0]
 8009e24:	60c5      	str	r5, [r0, #12]
 8009e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e28:	6819      	ldr	r1, [r3, #0]
 8009e2a:	b151      	cbz	r1, 8009e42 <_dtoa_r+0x4a>
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	604a      	str	r2, [r1, #4]
 8009e30:	2301      	movs	r3, #1
 8009e32:	4093      	lsls	r3, r2
 8009e34:	608b      	str	r3, [r1, #8]
 8009e36:	4620      	mov	r0, r4
 8009e38:	f000 fe01 	bl	800aa3e <_Bfree>
 8009e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e3e:	2200      	movs	r2, #0
 8009e40:	601a      	str	r2, [r3, #0]
 8009e42:	1e3b      	subs	r3, r7, #0
 8009e44:	bfbb      	ittet	lt
 8009e46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e4a:	9301      	strlt	r3, [sp, #4]
 8009e4c:	2300      	movge	r3, #0
 8009e4e:	2201      	movlt	r2, #1
 8009e50:	bfac      	ite	ge
 8009e52:	f8c8 3000 	strge.w	r3, [r8]
 8009e56:	f8c8 2000 	strlt.w	r2, [r8]
 8009e5a:	4baf      	ldr	r3, [pc, #700]	; (800a118 <_dtoa_r+0x320>)
 8009e5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e60:	ea33 0308 	bics.w	r3, r3, r8
 8009e64:	d114      	bne.n	8009e90 <_dtoa_r+0x98>
 8009e66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e68:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	9b00      	ldr	r3, [sp, #0]
 8009e70:	b923      	cbnz	r3, 8009e7c <_dtoa_r+0x84>
 8009e72:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f000 8542 	beq.w	800a900 <_dtoa_r+0xb08>
 8009e7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e7e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a12c <_dtoa_r+0x334>
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 8544 	beq.w	800a910 <_dtoa_r+0xb18>
 8009e88:	f10b 0303 	add.w	r3, fp, #3
 8009e8c:	f000 bd3e 	b.w	800a90c <_dtoa_r+0xb14>
 8009e90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e94:	2200      	movs	r2, #0
 8009e96:	2300      	movs	r3, #0
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 fe14 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ea0:	4681      	mov	r9, r0
 8009ea2:	b168      	cbz	r0, 8009ec0 <_dtoa_r+0xc8>
 8009ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	6013      	str	r3, [r2, #0]
 8009eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f000 8524 	beq.w	800a8fa <_dtoa_r+0xb02>
 8009eb2:	4b9a      	ldr	r3, [pc, #616]	; (800a11c <_dtoa_r+0x324>)
 8009eb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009eb6:	f103 3bff 	add.w	fp, r3, #4294967295
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	f000 bd28 	b.w	800a910 <_dtoa_r+0xb18>
 8009ec0:	aa14      	add	r2, sp, #80	; 0x50
 8009ec2:	a915      	add	r1, sp, #84	; 0x54
 8009ec4:	ec47 6b10 	vmov	d0, r6, r7
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f001 f810 	bl	800aeee <__d2b>
 8009ece:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009ed2:	9004      	str	r0, [sp, #16]
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	d07c      	beq.n	8009fd2 <_dtoa_r+0x1da>
 8009ed8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009edc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009ee0:	46b2      	mov	sl, r6
 8009ee2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009ee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009eea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4b8b      	ldr	r3, [pc, #556]	; (800a120 <_dtoa_r+0x328>)
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	4659      	mov	r1, fp
 8009ef6:	f7f6 f9c7 	bl	8000288 <__aeabi_dsub>
 8009efa:	a381      	add	r3, pc, #516	; (adr r3, 800a100 <_dtoa_r+0x308>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 fb7a 	bl	80005f8 <__aeabi_dmul>
 8009f04:	a380      	add	r3, pc, #512	; (adr r3, 800a108 <_dtoa_r+0x310>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f9bf 	bl	800028c <__adddf3>
 8009f0e:	4606      	mov	r6, r0
 8009f10:	4628      	mov	r0, r5
 8009f12:	460f      	mov	r7, r1
 8009f14:	f7f6 fb06 	bl	8000524 <__aeabi_i2d>
 8009f18:	a37d      	add	r3, pc, #500	; (adr r3, 800a110 <_dtoa_r+0x318>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 fb6b 	bl	80005f8 <__aeabi_dmul>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4630      	mov	r0, r6
 8009f28:	4639      	mov	r1, r7
 8009f2a:	f7f6 f9af 	bl	800028c <__adddf3>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	460f      	mov	r7, r1
 8009f32:	f7f6 fe11 	bl	8000b58 <__aeabi_d2iz>
 8009f36:	2200      	movs	r2, #0
 8009f38:	4682      	mov	sl, r0
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	4639      	mov	r1, r7
 8009f40:	f7f6 fdcc 	bl	8000adc <__aeabi_dcmplt>
 8009f44:	b148      	cbz	r0, 8009f5a <_dtoa_r+0x162>
 8009f46:	4650      	mov	r0, sl
 8009f48:	f7f6 faec 	bl	8000524 <__aeabi_i2d>
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	463b      	mov	r3, r7
 8009f50:	f7f6 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f54:	b908      	cbnz	r0, 8009f5a <_dtoa_r+0x162>
 8009f56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f5a:	f1ba 0f16 	cmp.w	sl, #22
 8009f5e:	d859      	bhi.n	800a014 <_dtoa_r+0x21c>
 8009f60:	4970      	ldr	r1, [pc, #448]	; (800a124 <_dtoa_r+0x32c>)
 8009f62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f6e:	f7f6 fdd3 	bl	8000b18 <__aeabi_dcmpgt>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d050      	beq.n	800a018 <_dtoa_r+0x220>
 8009f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f80:	1b5d      	subs	r5, r3, r5
 8009f82:	f1b5 0801 	subs.w	r8, r5, #1
 8009f86:	bf49      	itett	mi
 8009f88:	f1c5 0301 	rsbmi	r3, r5, #1
 8009f8c:	2300      	movpl	r3, #0
 8009f8e:	9305      	strmi	r3, [sp, #20]
 8009f90:	f04f 0800 	movmi.w	r8, #0
 8009f94:	bf58      	it	pl
 8009f96:	9305      	strpl	r3, [sp, #20]
 8009f98:	f1ba 0f00 	cmp.w	sl, #0
 8009f9c:	db3e      	blt.n	800a01c <_dtoa_r+0x224>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	44d0      	add	r8, sl
 8009fa2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009fa6:	9307      	str	r3, [sp, #28]
 8009fa8:	9b06      	ldr	r3, [sp, #24]
 8009faa:	2b09      	cmp	r3, #9
 8009fac:	f200 8090 	bhi.w	800a0d0 <_dtoa_r+0x2d8>
 8009fb0:	2b05      	cmp	r3, #5
 8009fb2:	bfc4      	itt	gt
 8009fb4:	3b04      	subgt	r3, #4
 8009fb6:	9306      	strgt	r3, [sp, #24]
 8009fb8:	9b06      	ldr	r3, [sp, #24]
 8009fba:	f1a3 0302 	sub.w	r3, r3, #2
 8009fbe:	bfcc      	ite	gt
 8009fc0:	2500      	movgt	r5, #0
 8009fc2:	2501      	movle	r5, #1
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	f200 808f 	bhi.w	800a0e8 <_dtoa_r+0x2f0>
 8009fca:	e8df f003 	tbb	[pc, r3]
 8009fce:	7f7d      	.short	0x7f7d
 8009fd0:	7131      	.short	0x7131
 8009fd2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009fd6:	441d      	add	r5, r3
 8009fd8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009fdc:	2820      	cmp	r0, #32
 8009fde:	dd13      	ble.n	800a008 <_dtoa_r+0x210>
 8009fe0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009fe4:	9b00      	ldr	r3, [sp, #0]
 8009fe6:	fa08 f800 	lsl.w	r8, r8, r0
 8009fea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009fee:	fa23 f000 	lsr.w	r0, r3, r0
 8009ff2:	ea48 0000 	orr.w	r0, r8, r0
 8009ff6:	f7f6 fa85 	bl	8000504 <__aeabi_ui2d>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4682      	mov	sl, r0
 8009ffe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a002:	3d01      	subs	r5, #1
 800a004:	9313      	str	r3, [sp, #76]	; 0x4c
 800a006:	e772      	b.n	8009eee <_dtoa_r+0xf6>
 800a008:	9b00      	ldr	r3, [sp, #0]
 800a00a:	f1c0 0020 	rsb	r0, r0, #32
 800a00e:	fa03 f000 	lsl.w	r0, r3, r0
 800a012:	e7f0      	b.n	8009ff6 <_dtoa_r+0x1fe>
 800a014:	2301      	movs	r3, #1
 800a016:	e7b1      	b.n	8009f7c <_dtoa_r+0x184>
 800a018:	900f      	str	r0, [sp, #60]	; 0x3c
 800a01a:	e7b0      	b.n	8009f7e <_dtoa_r+0x186>
 800a01c:	9b05      	ldr	r3, [sp, #20]
 800a01e:	eba3 030a 	sub.w	r3, r3, sl
 800a022:	9305      	str	r3, [sp, #20]
 800a024:	f1ca 0300 	rsb	r3, sl, #0
 800a028:	9307      	str	r3, [sp, #28]
 800a02a:	2300      	movs	r3, #0
 800a02c:	930e      	str	r3, [sp, #56]	; 0x38
 800a02e:	e7bb      	b.n	8009fa8 <_dtoa_r+0x1b0>
 800a030:	2301      	movs	r3, #1
 800a032:	930a      	str	r3, [sp, #40]	; 0x28
 800a034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a036:	2b00      	cmp	r3, #0
 800a038:	dd59      	ble.n	800a0ee <_dtoa_r+0x2f6>
 800a03a:	9302      	str	r3, [sp, #8]
 800a03c:	4699      	mov	r9, r3
 800a03e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a040:	2200      	movs	r2, #0
 800a042:	6072      	str	r2, [r6, #4]
 800a044:	2204      	movs	r2, #4
 800a046:	f102 0014 	add.w	r0, r2, #20
 800a04a:	4298      	cmp	r0, r3
 800a04c:	6871      	ldr	r1, [r6, #4]
 800a04e:	d953      	bls.n	800a0f8 <_dtoa_r+0x300>
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fcc0 	bl	800a9d6 <_Balloc>
 800a056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a058:	6030      	str	r0, [r6, #0]
 800a05a:	f1b9 0f0e 	cmp.w	r9, #14
 800a05e:	f8d3 b000 	ldr.w	fp, [r3]
 800a062:	f200 80e6 	bhi.w	800a232 <_dtoa_r+0x43a>
 800a066:	2d00      	cmp	r5, #0
 800a068:	f000 80e3 	beq.w	800a232 <_dtoa_r+0x43a>
 800a06c:	ed9d 7b00 	vldr	d7, [sp]
 800a070:	f1ba 0f00 	cmp.w	sl, #0
 800a074:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a078:	dd74      	ble.n	800a164 <_dtoa_r+0x36c>
 800a07a:	4a2a      	ldr	r2, [pc, #168]	; (800a124 <_dtoa_r+0x32c>)
 800a07c:	f00a 030f 	and.w	r3, sl, #15
 800a080:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a084:	ed93 7b00 	vldr	d7, [r3]
 800a088:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a08c:	06f0      	lsls	r0, r6, #27
 800a08e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a092:	d565      	bpl.n	800a160 <_dtoa_r+0x368>
 800a094:	4b24      	ldr	r3, [pc, #144]	; (800a128 <_dtoa_r+0x330>)
 800a096:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a09a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a09e:	f7f6 fbd5 	bl	800084c <__aeabi_ddiv>
 800a0a2:	e9cd 0100 	strd	r0, r1, [sp]
 800a0a6:	f006 060f 	and.w	r6, r6, #15
 800a0aa:	2503      	movs	r5, #3
 800a0ac:	4f1e      	ldr	r7, [pc, #120]	; (800a128 <_dtoa_r+0x330>)
 800a0ae:	e04c      	b.n	800a14a <_dtoa_r+0x352>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b6:	4453      	add	r3, sl
 800a0b8:	f103 0901 	add.w	r9, r3, #1
 800a0bc:	9302      	str	r3, [sp, #8]
 800a0be:	464b      	mov	r3, r9
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	bfb8      	it	lt
 800a0c4:	2301      	movlt	r3, #1
 800a0c6:	e7ba      	b.n	800a03e <_dtoa_r+0x246>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e7b2      	b.n	800a032 <_dtoa_r+0x23a>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e7f0      	b.n	800a0b2 <_dtoa_r+0x2ba>
 800a0d0:	2501      	movs	r5, #1
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	9306      	str	r3, [sp, #24]
 800a0d6:	950a      	str	r5, [sp, #40]	; 0x28
 800a0d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0dc:	9302      	str	r3, [sp, #8]
 800a0de:	4699      	mov	r9, r3
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2312      	movs	r3, #18
 800a0e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a0e6:	e7aa      	b.n	800a03e <_dtoa_r+0x246>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a0ec:	e7f4      	b.n	800a0d8 <_dtoa_r+0x2e0>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	9302      	str	r3, [sp, #8]
 800a0f2:	4699      	mov	r9, r3
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	e7f5      	b.n	800a0e4 <_dtoa_r+0x2ec>
 800a0f8:	3101      	adds	r1, #1
 800a0fa:	6071      	str	r1, [r6, #4]
 800a0fc:	0052      	lsls	r2, r2, #1
 800a0fe:	e7a2      	b.n	800a046 <_dtoa_r+0x24e>
 800a100:	636f4361 	.word	0x636f4361
 800a104:	3fd287a7 	.word	0x3fd287a7
 800a108:	8b60c8b3 	.word	0x8b60c8b3
 800a10c:	3fc68a28 	.word	0x3fc68a28
 800a110:	509f79fb 	.word	0x509f79fb
 800a114:	3fd34413 	.word	0x3fd34413
 800a118:	7ff00000 	.word	0x7ff00000
 800a11c:	0800b549 	.word	0x0800b549
 800a120:	3ff80000 	.word	0x3ff80000
 800a124:	0800b5b0 	.word	0x0800b5b0
 800a128:	0800b588 	.word	0x0800b588
 800a12c:	0800b575 	.word	0x0800b575
 800a130:	07f1      	lsls	r1, r6, #31
 800a132:	d508      	bpl.n	800a146 <_dtoa_r+0x34e>
 800a134:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13c:	f7f6 fa5c 	bl	80005f8 <__aeabi_dmul>
 800a140:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a144:	3501      	adds	r5, #1
 800a146:	1076      	asrs	r6, r6, #1
 800a148:	3708      	adds	r7, #8
 800a14a:	2e00      	cmp	r6, #0
 800a14c:	d1f0      	bne.n	800a130 <_dtoa_r+0x338>
 800a14e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a152:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a156:	f7f6 fb79 	bl	800084c <__aeabi_ddiv>
 800a15a:	e9cd 0100 	strd	r0, r1, [sp]
 800a15e:	e01a      	b.n	800a196 <_dtoa_r+0x39e>
 800a160:	2502      	movs	r5, #2
 800a162:	e7a3      	b.n	800a0ac <_dtoa_r+0x2b4>
 800a164:	f000 80a0 	beq.w	800a2a8 <_dtoa_r+0x4b0>
 800a168:	f1ca 0600 	rsb	r6, sl, #0
 800a16c:	4b9f      	ldr	r3, [pc, #636]	; (800a3ec <_dtoa_r+0x5f4>)
 800a16e:	4fa0      	ldr	r7, [pc, #640]	; (800a3f0 <_dtoa_r+0x5f8>)
 800a170:	f006 020f 	and.w	r2, r6, #15
 800a174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a180:	f7f6 fa3a 	bl	80005f8 <__aeabi_dmul>
 800a184:	e9cd 0100 	strd	r0, r1, [sp]
 800a188:	1136      	asrs	r6, r6, #4
 800a18a:	2300      	movs	r3, #0
 800a18c:	2502      	movs	r5, #2
 800a18e:	2e00      	cmp	r6, #0
 800a190:	d17f      	bne.n	800a292 <_dtoa_r+0x49a>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1e1      	bne.n	800a15a <_dtoa_r+0x362>
 800a196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 8087 	beq.w	800a2ac <_dtoa_r+0x4b4>
 800a19e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4b93      	ldr	r3, [pc, #588]	; (800a3f4 <_dtoa_r+0x5fc>)
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	f7f6 fc97 	bl	8000adc <__aeabi_dcmplt>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d07c      	beq.n	800a2ac <_dtoa_r+0x4b4>
 800a1b2:	f1b9 0f00 	cmp.w	r9, #0
 800a1b6:	d079      	beq.n	800a2ac <_dtoa_r+0x4b4>
 800a1b8:	9b02      	ldr	r3, [sp, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dd35      	ble.n	800a22a <_dtoa_r+0x432>
 800a1be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1c2:	9308      	str	r3, [sp, #32]
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	4b8b      	ldr	r3, [pc, #556]	; (800a3f8 <_dtoa_r+0x600>)
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f7f6 fa14 	bl	80005f8 <__aeabi_dmul>
 800a1d0:	e9cd 0100 	strd	r0, r1, [sp]
 800a1d4:	9f02      	ldr	r7, [sp, #8]
 800a1d6:	3501      	adds	r5, #1
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f7f6 f9a3 	bl	8000524 <__aeabi_i2d>
 800a1de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1e2:	f7f6 fa09 	bl	80005f8 <__aeabi_dmul>
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	4b84      	ldr	r3, [pc, #528]	; (800a3fc <_dtoa_r+0x604>)
 800a1ea:	f7f6 f84f 	bl	800028c <__adddf3>
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a1f4:	2f00      	cmp	r7, #0
 800a1f6:	d15d      	bne.n	800a2b4 <_dtoa_r+0x4bc>
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	4b81      	ldr	r3, [pc, #516]	; (800a400 <_dtoa_r+0x608>)
 800a1fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a200:	f7f6 f842 	bl	8000288 <__aeabi_dsub>
 800a204:	462a      	mov	r2, r5
 800a206:	4633      	mov	r3, r6
 800a208:	e9cd 0100 	strd	r0, r1, [sp]
 800a20c:	f7f6 fc84 	bl	8000b18 <__aeabi_dcmpgt>
 800a210:	2800      	cmp	r0, #0
 800a212:	f040 8288 	bne.w	800a726 <_dtoa_r+0x92e>
 800a216:	462a      	mov	r2, r5
 800a218:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a21c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a220:	f7f6 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800a224:	2800      	cmp	r0, #0
 800a226:	f040 827c 	bne.w	800a722 <_dtoa_r+0x92a>
 800a22a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a22e:	e9cd 2300 	strd	r2, r3, [sp]
 800a232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a234:	2b00      	cmp	r3, #0
 800a236:	f2c0 8150 	blt.w	800a4da <_dtoa_r+0x6e2>
 800a23a:	f1ba 0f0e 	cmp.w	sl, #14
 800a23e:	f300 814c 	bgt.w	800a4da <_dtoa_r+0x6e2>
 800a242:	4b6a      	ldr	r3, [pc, #424]	; (800a3ec <_dtoa_r+0x5f4>)
 800a244:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a248:	ed93 7b00 	vldr	d7, [r3]
 800a24c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a254:	f280 80d8 	bge.w	800a408 <_dtoa_r+0x610>
 800a258:	f1b9 0f00 	cmp.w	r9, #0
 800a25c:	f300 80d4 	bgt.w	800a408 <_dtoa_r+0x610>
 800a260:	f040 825e 	bne.w	800a720 <_dtoa_r+0x928>
 800a264:	2200      	movs	r2, #0
 800a266:	4b66      	ldr	r3, [pc, #408]	; (800a400 <_dtoa_r+0x608>)
 800a268:	ec51 0b17 	vmov	r0, r1, d7
 800a26c:	f7f6 f9c4 	bl	80005f8 <__aeabi_dmul>
 800a270:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a274:	f7f6 fc46 	bl	8000b04 <__aeabi_dcmpge>
 800a278:	464f      	mov	r7, r9
 800a27a:	464e      	mov	r6, r9
 800a27c:	2800      	cmp	r0, #0
 800a27e:	f040 8234 	bne.w	800a6ea <_dtoa_r+0x8f2>
 800a282:	2331      	movs	r3, #49	; 0x31
 800a284:	f10b 0501 	add.w	r5, fp, #1
 800a288:	f88b 3000 	strb.w	r3, [fp]
 800a28c:	f10a 0a01 	add.w	sl, sl, #1
 800a290:	e22f      	b.n	800a6f2 <_dtoa_r+0x8fa>
 800a292:	07f2      	lsls	r2, r6, #31
 800a294:	d505      	bpl.n	800a2a2 <_dtoa_r+0x4aa>
 800a296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a29a:	f7f6 f9ad 	bl	80005f8 <__aeabi_dmul>
 800a29e:	3501      	adds	r5, #1
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	1076      	asrs	r6, r6, #1
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	e772      	b.n	800a18e <_dtoa_r+0x396>
 800a2a8:	2502      	movs	r5, #2
 800a2aa:	e774      	b.n	800a196 <_dtoa_r+0x39e>
 800a2ac:	f8cd a020 	str.w	sl, [sp, #32]
 800a2b0:	464f      	mov	r7, r9
 800a2b2:	e791      	b.n	800a1d8 <_dtoa_r+0x3e0>
 800a2b4:	4b4d      	ldr	r3, [pc, #308]	; (800a3ec <_dtoa_r+0x5f4>)
 800a2b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d047      	beq.n	800a354 <_dtoa_r+0x55c>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	494e      	ldr	r1, [pc, #312]	; (800a404 <_dtoa_r+0x60c>)
 800a2cc:	f7f6 fabe 	bl	800084c <__aeabi_ddiv>
 800a2d0:	462a      	mov	r2, r5
 800a2d2:	4633      	mov	r3, r6
 800a2d4:	f7f5 ffd8 	bl	8000288 <__aeabi_dsub>
 800a2d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a2dc:	465d      	mov	r5, fp
 800a2de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2e2:	f7f6 fc39 	bl	8000b58 <__aeabi_d2iz>
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	f7f6 f91c 	bl	8000524 <__aeabi_i2d>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2f4:	f7f5 ffc8 	bl	8000288 <__aeabi_dsub>
 800a2f8:	3630      	adds	r6, #48	; 0x30
 800a2fa:	f805 6b01 	strb.w	r6, [r5], #1
 800a2fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a302:	e9cd 0100 	strd	r0, r1, [sp]
 800a306:	f7f6 fbe9 	bl	8000adc <__aeabi_dcmplt>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d163      	bne.n	800a3d6 <_dtoa_r+0x5de>
 800a30e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a312:	2000      	movs	r0, #0
 800a314:	4937      	ldr	r1, [pc, #220]	; (800a3f4 <_dtoa_r+0x5fc>)
 800a316:	f7f5 ffb7 	bl	8000288 <__aeabi_dsub>
 800a31a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a31e:	f7f6 fbdd 	bl	8000adc <__aeabi_dcmplt>
 800a322:	2800      	cmp	r0, #0
 800a324:	f040 80b7 	bne.w	800a496 <_dtoa_r+0x69e>
 800a328:	eba5 030b 	sub.w	r3, r5, fp
 800a32c:	429f      	cmp	r7, r3
 800a32e:	f77f af7c 	ble.w	800a22a <_dtoa_r+0x432>
 800a332:	2200      	movs	r2, #0
 800a334:	4b30      	ldr	r3, [pc, #192]	; (800a3f8 <_dtoa_r+0x600>)
 800a336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a33a:	f7f6 f95d 	bl	80005f8 <__aeabi_dmul>
 800a33e:	2200      	movs	r2, #0
 800a340:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a344:	4b2c      	ldr	r3, [pc, #176]	; (800a3f8 <_dtoa_r+0x600>)
 800a346:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a34a:	f7f6 f955 	bl	80005f8 <__aeabi_dmul>
 800a34e:	e9cd 0100 	strd	r0, r1, [sp]
 800a352:	e7c4      	b.n	800a2de <_dtoa_r+0x4e6>
 800a354:	462a      	mov	r2, r5
 800a356:	4633      	mov	r3, r6
 800a358:	f7f6 f94e 	bl	80005f8 <__aeabi_dmul>
 800a35c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a360:	eb0b 0507 	add.w	r5, fp, r7
 800a364:	465e      	mov	r6, fp
 800a366:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a36a:	f7f6 fbf5 	bl	8000b58 <__aeabi_d2iz>
 800a36e:	4607      	mov	r7, r0
 800a370:	f7f6 f8d8 	bl	8000524 <__aeabi_i2d>
 800a374:	3730      	adds	r7, #48	; 0x30
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a37e:	f7f5 ff83 	bl	8000288 <__aeabi_dsub>
 800a382:	f806 7b01 	strb.w	r7, [r6], #1
 800a386:	42ae      	cmp	r6, r5
 800a388:	e9cd 0100 	strd	r0, r1, [sp]
 800a38c:	f04f 0200 	mov.w	r2, #0
 800a390:	d126      	bne.n	800a3e0 <_dtoa_r+0x5e8>
 800a392:	4b1c      	ldr	r3, [pc, #112]	; (800a404 <_dtoa_r+0x60c>)
 800a394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a398:	f7f5 ff78 	bl	800028c <__adddf3>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3a4:	f7f6 fbb8 	bl	8000b18 <__aeabi_dcmpgt>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d174      	bne.n	800a496 <_dtoa_r+0x69e>
 800a3ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	4914      	ldr	r1, [pc, #80]	; (800a404 <_dtoa_r+0x60c>)
 800a3b4:	f7f5 ff68 	bl	8000288 <__aeabi_dsub>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3c0:	f7f6 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f43f af30 	beq.w	800a22a <_dtoa_r+0x432>
 800a3ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3ce:	2b30      	cmp	r3, #48	; 0x30
 800a3d0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a3d4:	d002      	beq.n	800a3dc <_dtoa_r+0x5e4>
 800a3d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a3da:	e04a      	b.n	800a472 <_dtoa_r+0x67a>
 800a3dc:	4615      	mov	r5, r2
 800a3de:	e7f4      	b.n	800a3ca <_dtoa_r+0x5d2>
 800a3e0:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <_dtoa_r+0x600>)
 800a3e2:	f7f6 f909 	bl	80005f8 <__aeabi_dmul>
 800a3e6:	e9cd 0100 	strd	r0, r1, [sp]
 800a3ea:	e7bc      	b.n	800a366 <_dtoa_r+0x56e>
 800a3ec:	0800b5b0 	.word	0x0800b5b0
 800a3f0:	0800b588 	.word	0x0800b588
 800a3f4:	3ff00000 	.word	0x3ff00000
 800a3f8:	40240000 	.word	0x40240000
 800a3fc:	401c0000 	.word	0x401c0000
 800a400:	40140000 	.word	0x40140000
 800a404:	3fe00000 	.word	0x3fe00000
 800a408:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a40c:	465d      	mov	r5, fp
 800a40e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	f7f6 fa19 	bl	800084c <__aeabi_ddiv>
 800a41a:	f7f6 fb9d 	bl	8000b58 <__aeabi_d2iz>
 800a41e:	4680      	mov	r8, r0
 800a420:	f7f6 f880 	bl	8000524 <__aeabi_i2d>
 800a424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a428:	f7f6 f8e6 	bl	80005f8 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4630      	mov	r0, r6
 800a432:	4639      	mov	r1, r7
 800a434:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a438:	f7f5 ff26 	bl	8000288 <__aeabi_dsub>
 800a43c:	f805 6b01 	strb.w	r6, [r5], #1
 800a440:	eba5 060b 	sub.w	r6, r5, fp
 800a444:	45b1      	cmp	r9, r6
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	d139      	bne.n	800a4c0 <_dtoa_r+0x6c8>
 800a44c:	f7f5 ff1e 	bl	800028c <__adddf3>
 800a450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a454:	4606      	mov	r6, r0
 800a456:	460f      	mov	r7, r1
 800a458:	f7f6 fb5e 	bl	8000b18 <__aeabi_dcmpgt>
 800a45c:	b9c8      	cbnz	r0, 800a492 <_dtoa_r+0x69a>
 800a45e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a462:	4630      	mov	r0, r6
 800a464:	4639      	mov	r1, r7
 800a466:	f7f6 fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a46a:	b110      	cbz	r0, 800a472 <_dtoa_r+0x67a>
 800a46c:	f018 0f01 	tst.w	r8, #1
 800a470:	d10f      	bne.n	800a492 <_dtoa_r+0x69a>
 800a472:	9904      	ldr	r1, [sp, #16]
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fae2 	bl	800aa3e <_Bfree>
 800a47a:	2300      	movs	r3, #0
 800a47c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a47e:	702b      	strb	r3, [r5, #0]
 800a480:	f10a 0301 	add.w	r3, sl, #1
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 8241 	beq.w	800a910 <_dtoa_r+0xb18>
 800a48e:	601d      	str	r5, [r3, #0]
 800a490:	e23e      	b.n	800a910 <_dtoa_r+0xb18>
 800a492:	f8cd a020 	str.w	sl, [sp, #32]
 800a496:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a49a:	2a39      	cmp	r2, #57	; 0x39
 800a49c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a4a0:	d108      	bne.n	800a4b4 <_dtoa_r+0x6bc>
 800a4a2:	459b      	cmp	fp, r3
 800a4a4:	d10a      	bne.n	800a4bc <_dtoa_r+0x6c4>
 800a4a6:	9b08      	ldr	r3, [sp, #32]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	9308      	str	r3, [sp, #32]
 800a4ac:	2330      	movs	r3, #48	; 0x30
 800a4ae:	f88b 3000 	strb.w	r3, [fp]
 800a4b2:	465b      	mov	r3, fp
 800a4b4:	781a      	ldrb	r2, [r3, #0]
 800a4b6:	3201      	adds	r2, #1
 800a4b8:	701a      	strb	r2, [r3, #0]
 800a4ba:	e78c      	b.n	800a3d6 <_dtoa_r+0x5de>
 800a4bc:	461d      	mov	r5, r3
 800a4be:	e7ea      	b.n	800a496 <_dtoa_r+0x69e>
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	4b9b      	ldr	r3, [pc, #620]	; (800a730 <_dtoa_r+0x938>)
 800a4c4:	f7f6 f898 	bl	80005f8 <__aeabi_dmul>
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	460f      	mov	r7, r1
 800a4d0:	f7f6 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d09a      	beq.n	800a40e <_dtoa_r+0x616>
 800a4d8:	e7cb      	b.n	800a472 <_dtoa_r+0x67a>
 800a4da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4dc:	2a00      	cmp	r2, #0
 800a4de:	f000 808b 	beq.w	800a5f8 <_dtoa_r+0x800>
 800a4e2:	9a06      	ldr	r2, [sp, #24]
 800a4e4:	2a01      	cmp	r2, #1
 800a4e6:	dc6e      	bgt.n	800a5c6 <_dtoa_r+0x7ce>
 800a4e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4ea:	2a00      	cmp	r2, #0
 800a4ec:	d067      	beq.n	800a5be <_dtoa_r+0x7c6>
 800a4ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4f2:	9f07      	ldr	r7, [sp, #28]
 800a4f4:	9d05      	ldr	r5, [sp, #20]
 800a4f6:	9a05      	ldr	r2, [sp, #20]
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	441a      	add	r2, r3
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	9205      	str	r2, [sp, #20]
 800a500:	4498      	add	r8, r3
 800a502:	f000 fb3c 	bl	800ab7e <__i2b>
 800a506:	4606      	mov	r6, r0
 800a508:	2d00      	cmp	r5, #0
 800a50a:	dd0c      	ble.n	800a526 <_dtoa_r+0x72e>
 800a50c:	f1b8 0f00 	cmp.w	r8, #0
 800a510:	dd09      	ble.n	800a526 <_dtoa_r+0x72e>
 800a512:	4545      	cmp	r5, r8
 800a514:	9a05      	ldr	r2, [sp, #20]
 800a516:	462b      	mov	r3, r5
 800a518:	bfa8      	it	ge
 800a51a:	4643      	movge	r3, r8
 800a51c:	1ad2      	subs	r2, r2, r3
 800a51e:	9205      	str	r2, [sp, #20]
 800a520:	1aed      	subs	r5, r5, r3
 800a522:	eba8 0803 	sub.w	r8, r8, r3
 800a526:	9b07      	ldr	r3, [sp, #28]
 800a528:	b1eb      	cbz	r3, 800a566 <_dtoa_r+0x76e>
 800a52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d067      	beq.n	800a600 <_dtoa_r+0x808>
 800a530:	b18f      	cbz	r7, 800a556 <_dtoa_r+0x75e>
 800a532:	4631      	mov	r1, r6
 800a534:	463a      	mov	r2, r7
 800a536:	4620      	mov	r0, r4
 800a538:	f000 fbc0 	bl	800acbc <__pow5mult>
 800a53c:	9a04      	ldr	r2, [sp, #16]
 800a53e:	4601      	mov	r1, r0
 800a540:	4606      	mov	r6, r0
 800a542:	4620      	mov	r0, r4
 800a544:	f000 fb24 	bl	800ab90 <__multiply>
 800a548:	9904      	ldr	r1, [sp, #16]
 800a54a:	9008      	str	r0, [sp, #32]
 800a54c:	4620      	mov	r0, r4
 800a54e:	f000 fa76 	bl	800aa3e <_Bfree>
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	9b07      	ldr	r3, [sp, #28]
 800a558:	1bda      	subs	r2, r3, r7
 800a55a:	d004      	beq.n	800a566 <_dtoa_r+0x76e>
 800a55c:	9904      	ldr	r1, [sp, #16]
 800a55e:	4620      	mov	r0, r4
 800a560:	f000 fbac 	bl	800acbc <__pow5mult>
 800a564:	9004      	str	r0, [sp, #16]
 800a566:	2101      	movs	r1, #1
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 fb08 	bl	800ab7e <__i2b>
 800a56e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a570:	4607      	mov	r7, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 81d0 	beq.w	800a918 <_dtoa_r+0xb20>
 800a578:	461a      	mov	r2, r3
 800a57a:	4601      	mov	r1, r0
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 fb9d 	bl	800acbc <__pow5mult>
 800a582:	9b06      	ldr	r3, [sp, #24]
 800a584:	2b01      	cmp	r3, #1
 800a586:	4607      	mov	r7, r0
 800a588:	dc40      	bgt.n	800a60c <_dtoa_r+0x814>
 800a58a:	9b00      	ldr	r3, [sp, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d139      	bne.n	800a604 <_dtoa_r+0x80c>
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a596:	2b00      	cmp	r3, #0
 800a598:	d136      	bne.n	800a608 <_dtoa_r+0x810>
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5a0:	0d1b      	lsrs	r3, r3, #20
 800a5a2:	051b      	lsls	r3, r3, #20
 800a5a4:	b12b      	cbz	r3, 800a5b2 <_dtoa_r+0x7ba>
 800a5a6:	9b05      	ldr	r3, [sp, #20]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	9305      	str	r3, [sp, #20]
 800a5ac:	f108 0801 	add.w	r8, r8, #1
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	9307      	str	r3, [sp, #28]
 800a5b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d12a      	bne.n	800a610 <_dtoa_r+0x818>
 800a5ba:	2001      	movs	r0, #1
 800a5bc:	e030      	b.n	800a620 <_dtoa_r+0x828>
 800a5be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5c4:	e795      	b.n	800a4f2 <_dtoa_r+0x6fa>
 800a5c6:	9b07      	ldr	r3, [sp, #28]
 800a5c8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a5cc:	42bb      	cmp	r3, r7
 800a5ce:	bfbf      	itttt	lt
 800a5d0:	9b07      	ldrlt	r3, [sp, #28]
 800a5d2:	9707      	strlt	r7, [sp, #28]
 800a5d4:	1afa      	sublt	r2, r7, r3
 800a5d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a5d8:	bfbb      	ittet	lt
 800a5da:	189b      	addlt	r3, r3, r2
 800a5dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a5de:	1bdf      	subge	r7, r3, r7
 800a5e0:	2700      	movlt	r7, #0
 800a5e2:	f1b9 0f00 	cmp.w	r9, #0
 800a5e6:	bfb5      	itete	lt
 800a5e8:	9b05      	ldrlt	r3, [sp, #20]
 800a5ea:	9d05      	ldrge	r5, [sp, #20]
 800a5ec:	eba3 0509 	sublt.w	r5, r3, r9
 800a5f0:	464b      	movge	r3, r9
 800a5f2:	bfb8      	it	lt
 800a5f4:	2300      	movlt	r3, #0
 800a5f6:	e77e      	b.n	800a4f6 <_dtoa_r+0x6fe>
 800a5f8:	9f07      	ldr	r7, [sp, #28]
 800a5fa:	9d05      	ldr	r5, [sp, #20]
 800a5fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a5fe:	e783      	b.n	800a508 <_dtoa_r+0x710>
 800a600:	9a07      	ldr	r2, [sp, #28]
 800a602:	e7ab      	b.n	800a55c <_dtoa_r+0x764>
 800a604:	2300      	movs	r3, #0
 800a606:	e7d4      	b.n	800a5b2 <_dtoa_r+0x7ba>
 800a608:	9b00      	ldr	r3, [sp, #0]
 800a60a:	e7d2      	b.n	800a5b2 <_dtoa_r+0x7ba>
 800a60c:	2300      	movs	r3, #0
 800a60e:	9307      	str	r3, [sp, #28]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a616:	6918      	ldr	r0, [r3, #16]
 800a618:	f000 fa63 	bl	800aae2 <__hi0bits>
 800a61c:	f1c0 0020 	rsb	r0, r0, #32
 800a620:	4440      	add	r0, r8
 800a622:	f010 001f 	ands.w	r0, r0, #31
 800a626:	d047      	beq.n	800a6b8 <_dtoa_r+0x8c0>
 800a628:	f1c0 0320 	rsb	r3, r0, #32
 800a62c:	2b04      	cmp	r3, #4
 800a62e:	dd3b      	ble.n	800a6a8 <_dtoa_r+0x8b0>
 800a630:	9b05      	ldr	r3, [sp, #20]
 800a632:	f1c0 001c 	rsb	r0, r0, #28
 800a636:	4403      	add	r3, r0
 800a638:	9305      	str	r3, [sp, #20]
 800a63a:	4405      	add	r5, r0
 800a63c:	4480      	add	r8, r0
 800a63e:	9b05      	ldr	r3, [sp, #20]
 800a640:	2b00      	cmp	r3, #0
 800a642:	dd05      	ble.n	800a650 <_dtoa_r+0x858>
 800a644:	461a      	mov	r2, r3
 800a646:	9904      	ldr	r1, [sp, #16]
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 fb85 	bl	800ad58 <__lshift>
 800a64e:	9004      	str	r0, [sp, #16]
 800a650:	f1b8 0f00 	cmp.w	r8, #0
 800a654:	dd05      	ble.n	800a662 <_dtoa_r+0x86a>
 800a656:	4639      	mov	r1, r7
 800a658:	4642      	mov	r2, r8
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 fb7c 	bl	800ad58 <__lshift>
 800a660:	4607      	mov	r7, r0
 800a662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a664:	b353      	cbz	r3, 800a6bc <_dtoa_r+0x8c4>
 800a666:	4639      	mov	r1, r7
 800a668:	9804      	ldr	r0, [sp, #16]
 800a66a:	f000 fbc9 	bl	800ae00 <__mcmp>
 800a66e:	2800      	cmp	r0, #0
 800a670:	da24      	bge.n	800a6bc <_dtoa_r+0x8c4>
 800a672:	2300      	movs	r3, #0
 800a674:	220a      	movs	r2, #10
 800a676:	9904      	ldr	r1, [sp, #16]
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 f9f7 	bl	800aa6c <__multadd>
 800a67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a680:	9004      	str	r0, [sp, #16]
 800a682:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 814d 	beq.w	800a926 <_dtoa_r+0xb2e>
 800a68c:	2300      	movs	r3, #0
 800a68e:	4631      	mov	r1, r6
 800a690:	220a      	movs	r2, #10
 800a692:	4620      	mov	r0, r4
 800a694:	f000 f9ea 	bl	800aa6c <__multadd>
 800a698:	9b02      	ldr	r3, [sp, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	4606      	mov	r6, r0
 800a69e:	dc4f      	bgt.n	800a740 <_dtoa_r+0x948>
 800a6a0:	9b06      	ldr	r3, [sp, #24]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	dd4c      	ble.n	800a740 <_dtoa_r+0x948>
 800a6a6:	e011      	b.n	800a6cc <_dtoa_r+0x8d4>
 800a6a8:	d0c9      	beq.n	800a63e <_dtoa_r+0x846>
 800a6aa:	9a05      	ldr	r2, [sp, #20]
 800a6ac:	331c      	adds	r3, #28
 800a6ae:	441a      	add	r2, r3
 800a6b0:	9205      	str	r2, [sp, #20]
 800a6b2:	441d      	add	r5, r3
 800a6b4:	4498      	add	r8, r3
 800a6b6:	e7c2      	b.n	800a63e <_dtoa_r+0x846>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	e7f6      	b.n	800a6aa <_dtoa_r+0x8b2>
 800a6bc:	f1b9 0f00 	cmp.w	r9, #0
 800a6c0:	dc38      	bgt.n	800a734 <_dtoa_r+0x93c>
 800a6c2:	9b06      	ldr	r3, [sp, #24]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	dd35      	ble.n	800a734 <_dtoa_r+0x93c>
 800a6c8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a6cc:	9b02      	ldr	r3, [sp, #8]
 800a6ce:	b963      	cbnz	r3, 800a6ea <_dtoa_r+0x8f2>
 800a6d0:	4639      	mov	r1, r7
 800a6d2:	2205      	movs	r2, #5
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f000 f9c9 	bl	800aa6c <__multadd>
 800a6da:	4601      	mov	r1, r0
 800a6dc:	4607      	mov	r7, r0
 800a6de:	9804      	ldr	r0, [sp, #16]
 800a6e0:	f000 fb8e 	bl	800ae00 <__mcmp>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	f73f adcc 	bgt.w	800a282 <_dtoa_r+0x48a>
 800a6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ec:	465d      	mov	r5, fp
 800a6ee:	ea6f 0a03 	mvn.w	sl, r3
 800a6f2:	f04f 0900 	mov.w	r9, #0
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 f9a0 	bl	800aa3e <_Bfree>
 800a6fe:	2e00      	cmp	r6, #0
 800a700:	f43f aeb7 	beq.w	800a472 <_dtoa_r+0x67a>
 800a704:	f1b9 0f00 	cmp.w	r9, #0
 800a708:	d005      	beq.n	800a716 <_dtoa_r+0x91e>
 800a70a:	45b1      	cmp	r9, r6
 800a70c:	d003      	beq.n	800a716 <_dtoa_r+0x91e>
 800a70e:	4649      	mov	r1, r9
 800a710:	4620      	mov	r0, r4
 800a712:	f000 f994 	bl	800aa3e <_Bfree>
 800a716:	4631      	mov	r1, r6
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 f990 	bl	800aa3e <_Bfree>
 800a71e:	e6a8      	b.n	800a472 <_dtoa_r+0x67a>
 800a720:	2700      	movs	r7, #0
 800a722:	463e      	mov	r6, r7
 800a724:	e7e1      	b.n	800a6ea <_dtoa_r+0x8f2>
 800a726:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a72a:	463e      	mov	r6, r7
 800a72c:	e5a9      	b.n	800a282 <_dtoa_r+0x48a>
 800a72e:	bf00      	nop
 800a730:	40240000 	.word	0x40240000
 800a734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a736:	f8cd 9008 	str.w	r9, [sp, #8]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 80fa 	beq.w	800a934 <_dtoa_r+0xb3c>
 800a740:	2d00      	cmp	r5, #0
 800a742:	dd05      	ble.n	800a750 <_dtoa_r+0x958>
 800a744:	4631      	mov	r1, r6
 800a746:	462a      	mov	r2, r5
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 fb05 	bl	800ad58 <__lshift>
 800a74e:	4606      	mov	r6, r0
 800a750:	9b07      	ldr	r3, [sp, #28]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d04c      	beq.n	800a7f0 <_dtoa_r+0x9f8>
 800a756:	6871      	ldr	r1, [r6, #4]
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 f93c 	bl	800a9d6 <_Balloc>
 800a75e:	6932      	ldr	r2, [r6, #16]
 800a760:	3202      	adds	r2, #2
 800a762:	4605      	mov	r5, r0
 800a764:	0092      	lsls	r2, r2, #2
 800a766:	f106 010c 	add.w	r1, r6, #12
 800a76a:	300c      	adds	r0, #12
 800a76c:	f000 f928 	bl	800a9c0 <memcpy>
 800a770:	2201      	movs	r2, #1
 800a772:	4629      	mov	r1, r5
 800a774:	4620      	mov	r0, r4
 800a776:	f000 faef 	bl	800ad58 <__lshift>
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	f8cd b014 	str.w	fp, [sp, #20]
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	46b1      	mov	r9, r6
 800a786:	9307      	str	r3, [sp, #28]
 800a788:	4606      	mov	r6, r0
 800a78a:	4639      	mov	r1, r7
 800a78c:	9804      	ldr	r0, [sp, #16]
 800a78e:	f7ff faa7 	bl	8009ce0 <quorem>
 800a792:	4649      	mov	r1, r9
 800a794:	4605      	mov	r5, r0
 800a796:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a79a:	9804      	ldr	r0, [sp, #16]
 800a79c:	f000 fb30 	bl	800ae00 <__mcmp>
 800a7a0:	4632      	mov	r2, r6
 800a7a2:	9000      	str	r0, [sp, #0]
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 fb44 	bl	800ae34 <__mdiff>
 800a7ac:	68c3      	ldr	r3, [r0, #12]
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	bb03      	cbnz	r3, 800a7f4 <_dtoa_r+0x9fc>
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	9008      	str	r0, [sp, #32]
 800a7b6:	9804      	ldr	r0, [sp, #16]
 800a7b8:	f000 fb22 	bl	800ae00 <__mcmp>
 800a7bc:	9a08      	ldr	r2, [sp, #32]
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	9308      	str	r3, [sp, #32]
 800a7c6:	f000 f93a 	bl	800aa3e <_Bfree>
 800a7ca:	9b08      	ldr	r3, [sp, #32]
 800a7cc:	b9a3      	cbnz	r3, 800a7f8 <_dtoa_r+0xa00>
 800a7ce:	9a06      	ldr	r2, [sp, #24]
 800a7d0:	b992      	cbnz	r2, 800a7f8 <_dtoa_r+0xa00>
 800a7d2:	9a07      	ldr	r2, [sp, #28]
 800a7d4:	b982      	cbnz	r2, 800a7f8 <_dtoa_r+0xa00>
 800a7d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a7da:	d029      	beq.n	800a830 <_dtoa_r+0xa38>
 800a7dc:	9b00      	ldr	r3, [sp, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	dd01      	ble.n	800a7e6 <_dtoa_r+0x9ee>
 800a7e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a7e6:	9b05      	ldr	r3, [sp, #20]
 800a7e8:	1c5d      	adds	r5, r3, #1
 800a7ea:	f883 8000 	strb.w	r8, [r3]
 800a7ee:	e782      	b.n	800a6f6 <_dtoa_r+0x8fe>
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	e7c2      	b.n	800a77a <_dtoa_r+0x982>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e7e3      	b.n	800a7c0 <_dtoa_r+0x9c8>
 800a7f8:	9a00      	ldr	r2, [sp, #0]
 800a7fa:	2a00      	cmp	r2, #0
 800a7fc:	db04      	blt.n	800a808 <_dtoa_r+0xa10>
 800a7fe:	d125      	bne.n	800a84c <_dtoa_r+0xa54>
 800a800:	9a06      	ldr	r2, [sp, #24]
 800a802:	bb1a      	cbnz	r2, 800a84c <_dtoa_r+0xa54>
 800a804:	9a07      	ldr	r2, [sp, #28]
 800a806:	bb0a      	cbnz	r2, 800a84c <_dtoa_r+0xa54>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	ddec      	ble.n	800a7e6 <_dtoa_r+0x9ee>
 800a80c:	2201      	movs	r2, #1
 800a80e:	9904      	ldr	r1, [sp, #16]
 800a810:	4620      	mov	r0, r4
 800a812:	f000 faa1 	bl	800ad58 <__lshift>
 800a816:	4639      	mov	r1, r7
 800a818:	9004      	str	r0, [sp, #16]
 800a81a:	f000 faf1 	bl	800ae00 <__mcmp>
 800a81e:	2800      	cmp	r0, #0
 800a820:	dc03      	bgt.n	800a82a <_dtoa_r+0xa32>
 800a822:	d1e0      	bne.n	800a7e6 <_dtoa_r+0x9ee>
 800a824:	f018 0f01 	tst.w	r8, #1
 800a828:	d0dd      	beq.n	800a7e6 <_dtoa_r+0x9ee>
 800a82a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a82e:	d1d8      	bne.n	800a7e2 <_dtoa_r+0x9ea>
 800a830:	9b05      	ldr	r3, [sp, #20]
 800a832:	9a05      	ldr	r2, [sp, #20]
 800a834:	1c5d      	adds	r5, r3, #1
 800a836:	2339      	movs	r3, #57	; 0x39
 800a838:	7013      	strb	r3, [r2, #0]
 800a83a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a83e:	2b39      	cmp	r3, #57	; 0x39
 800a840:	f105 32ff 	add.w	r2, r5, #4294967295
 800a844:	d04f      	beq.n	800a8e6 <_dtoa_r+0xaee>
 800a846:	3301      	adds	r3, #1
 800a848:	7013      	strb	r3, [r2, #0]
 800a84a:	e754      	b.n	800a6f6 <_dtoa_r+0x8fe>
 800a84c:	9a05      	ldr	r2, [sp, #20]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f102 0501 	add.w	r5, r2, #1
 800a854:	dd06      	ble.n	800a864 <_dtoa_r+0xa6c>
 800a856:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a85a:	d0e9      	beq.n	800a830 <_dtoa_r+0xa38>
 800a85c:	f108 0801 	add.w	r8, r8, #1
 800a860:	9b05      	ldr	r3, [sp, #20]
 800a862:	e7c2      	b.n	800a7ea <_dtoa_r+0x9f2>
 800a864:	9a02      	ldr	r2, [sp, #8]
 800a866:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a86a:	eba5 030b 	sub.w	r3, r5, fp
 800a86e:	4293      	cmp	r3, r2
 800a870:	d021      	beq.n	800a8b6 <_dtoa_r+0xabe>
 800a872:	2300      	movs	r3, #0
 800a874:	220a      	movs	r2, #10
 800a876:	9904      	ldr	r1, [sp, #16]
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 f8f7 	bl	800aa6c <__multadd>
 800a87e:	45b1      	cmp	r9, r6
 800a880:	9004      	str	r0, [sp, #16]
 800a882:	f04f 0300 	mov.w	r3, #0
 800a886:	f04f 020a 	mov.w	r2, #10
 800a88a:	4649      	mov	r1, r9
 800a88c:	4620      	mov	r0, r4
 800a88e:	d105      	bne.n	800a89c <_dtoa_r+0xaa4>
 800a890:	f000 f8ec 	bl	800aa6c <__multadd>
 800a894:	4681      	mov	r9, r0
 800a896:	4606      	mov	r6, r0
 800a898:	9505      	str	r5, [sp, #20]
 800a89a:	e776      	b.n	800a78a <_dtoa_r+0x992>
 800a89c:	f000 f8e6 	bl	800aa6c <__multadd>
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	4681      	mov	r9, r0
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	220a      	movs	r2, #10
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 f8df 	bl	800aa6c <__multadd>
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	e7f2      	b.n	800a898 <_dtoa_r+0xaa0>
 800a8b2:	f04f 0900 	mov.w	r9, #0
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	9904      	ldr	r1, [sp, #16]
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 fa4c 	bl	800ad58 <__lshift>
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	9004      	str	r0, [sp, #16]
 800a8c4:	f000 fa9c 	bl	800ae00 <__mcmp>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	dcb6      	bgt.n	800a83a <_dtoa_r+0xa42>
 800a8cc:	d102      	bne.n	800a8d4 <_dtoa_r+0xadc>
 800a8ce:	f018 0f01 	tst.w	r8, #1
 800a8d2:	d1b2      	bne.n	800a83a <_dtoa_r+0xa42>
 800a8d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8d8:	2b30      	cmp	r3, #48	; 0x30
 800a8da:	f105 32ff 	add.w	r2, r5, #4294967295
 800a8de:	f47f af0a 	bne.w	800a6f6 <_dtoa_r+0x8fe>
 800a8e2:	4615      	mov	r5, r2
 800a8e4:	e7f6      	b.n	800a8d4 <_dtoa_r+0xadc>
 800a8e6:	4593      	cmp	fp, r2
 800a8e8:	d105      	bne.n	800a8f6 <_dtoa_r+0xafe>
 800a8ea:	2331      	movs	r3, #49	; 0x31
 800a8ec:	f10a 0a01 	add.w	sl, sl, #1
 800a8f0:	f88b 3000 	strb.w	r3, [fp]
 800a8f4:	e6ff      	b.n	800a6f6 <_dtoa_r+0x8fe>
 800a8f6:	4615      	mov	r5, r2
 800a8f8:	e79f      	b.n	800a83a <_dtoa_r+0xa42>
 800a8fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a960 <_dtoa_r+0xb68>
 800a8fe:	e007      	b.n	800a910 <_dtoa_r+0xb18>
 800a900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a902:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a964 <_dtoa_r+0xb6c>
 800a906:	b11b      	cbz	r3, 800a910 <_dtoa_r+0xb18>
 800a908:	f10b 0308 	add.w	r3, fp, #8
 800a90c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a90e:	6013      	str	r3, [r2, #0]
 800a910:	4658      	mov	r0, fp
 800a912:	b017      	add	sp, #92	; 0x5c
 800a914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a918:	9b06      	ldr	r3, [sp, #24]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	f77f ae35 	ble.w	800a58a <_dtoa_r+0x792>
 800a920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	e649      	b.n	800a5ba <_dtoa_r+0x7c2>
 800a926:	9b02      	ldr	r3, [sp, #8]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dc03      	bgt.n	800a934 <_dtoa_r+0xb3c>
 800a92c:	9b06      	ldr	r3, [sp, #24]
 800a92e:	2b02      	cmp	r3, #2
 800a930:	f73f aecc 	bgt.w	800a6cc <_dtoa_r+0x8d4>
 800a934:	465d      	mov	r5, fp
 800a936:	4639      	mov	r1, r7
 800a938:	9804      	ldr	r0, [sp, #16]
 800a93a:	f7ff f9d1 	bl	8009ce0 <quorem>
 800a93e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a942:	f805 8b01 	strb.w	r8, [r5], #1
 800a946:	9a02      	ldr	r2, [sp, #8]
 800a948:	eba5 030b 	sub.w	r3, r5, fp
 800a94c:	429a      	cmp	r2, r3
 800a94e:	ddb0      	ble.n	800a8b2 <_dtoa_r+0xaba>
 800a950:	2300      	movs	r3, #0
 800a952:	220a      	movs	r2, #10
 800a954:	9904      	ldr	r1, [sp, #16]
 800a956:	4620      	mov	r0, r4
 800a958:	f000 f888 	bl	800aa6c <__multadd>
 800a95c:	9004      	str	r0, [sp, #16]
 800a95e:	e7ea      	b.n	800a936 <_dtoa_r+0xb3e>
 800a960:	0800b548 	.word	0x0800b548
 800a964:	0800b56c 	.word	0x0800b56c

0800a968 <__locale_ctype_ptr_l>:
 800a968:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a96c:	4770      	bx	lr
	...

0800a970 <_localeconv_r>:
 800a970:	4b04      	ldr	r3, [pc, #16]	; (800a984 <_localeconv_r+0x14>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6a18      	ldr	r0, [r3, #32]
 800a976:	4b04      	ldr	r3, [pc, #16]	; (800a988 <_localeconv_r+0x18>)
 800a978:	2800      	cmp	r0, #0
 800a97a:	bf08      	it	eq
 800a97c:	4618      	moveq	r0, r3
 800a97e:	30f0      	adds	r0, #240	; 0xf0
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	20000024 	.word	0x20000024
 800a988:	20000088 	.word	0x20000088

0800a98c <malloc>:
 800a98c:	4b02      	ldr	r3, [pc, #8]	; (800a998 <malloc+0xc>)
 800a98e:	4601      	mov	r1, r0
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	f000 bb57 	b.w	800b044 <_malloc_r>
 800a996:	bf00      	nop
 800a998:	20000024 	.word	0x20000024

0800a99c <__ascii_mbtowc>:
 800a99c:	b082      	sub	sp, #8
 800a99e:	b901      	cbnz	r1, 800a9a2 <__ascii_mbtowc+0x6>
 800a9a0:	a901      	add	r1, sp, #4
 800a9a2:	b142      	cbz	r2, 800a9b6 <__ascii_mbtowc+0x1a>
 800a9a4:	b14b      	cbz	r3, 800a9ba <__ascii_mbtowc+0x1e>
 800a9a6:	7813      	ldrb	r3, [r2, #0]
 800a9a8:	600b      	str	r3, [r1, #0]
 800a9aa:	7812      	ldrb	r2, [r2, #0]
 800a9ac:	1c10      	adds	r0, r2, #0
 800a9ae:	bf18      	it	ne
 800a9b0:	2001      	movne	r0, #1
 800a9b2:	b002      	add	sp, #8
 800a9b4:	4770      	bx	lr
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	e7fb      	b.n	800a9b2 <__ascii_mbtowc+0x16>
 800a9ba:	f06f 0001 	mvn.w	r0, #1
 800a9be:	e7f8      	b.n	800a9b2 <__ascii_mbtowc+0x16>

0800a9c0 <memcpy>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	1e43      	subs	r3, r0, #1
 800a9c4:	440a      	add	r2, r1
 800a9c6:	4291      	cmp	r1, r2
 800a9c8:	d100      	bne.n	800a9cc <memcpy+0xc>
 800a9ca:	bd10      	pop	{r4, pc}
 800a9cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9d4:	e7f7      	b.n	800a9c6 <memcpy+0x6>

0800a9d6 <_Balloc>:
 800a9d6:	b570      	push	{r4, r5, r6, lr}
 800a9d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9da:	4604      	mov	r4, r0
 800a9dc:	460e      	mov	r6, r1
 800a9de:	b93d      	cbnz	r5, 800a9f0 <_Balloc+0x1a>
 800a9e0:	2010      	movs	r0, #16
 800a9e2:	f7ff ffd3 	bl	800a98c <malloc>
 800a9e6:	6260      	str	r0, [r4, #36]	; 0x24
 800a9e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9ec:	6005      	str	r5, [r0, #0]
 800a9ee:	60c5      	str	r5, [r0, #12]
 800a9f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a9f2:	68eb      	ldr	r3, [r5, #12]
 800a9f4:	b183      	cbz	r3, 800aa18 <_Balloc+0x42>
 800a9f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a9fe:	b9b8      	cbnz	r0, 800aa30 <_Balloc+0x5a>
 800aa00:	2101      	movs	r1, #1
 800aa02:	fa01 f506 	lsl.w	r5, r1, r6
 800aa06:	1d6a      	adds	r2, r5, #5
 800aa08:	0092      	lsls	r2, r2, #2
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 fabe 	bl	800af8c <_calloc_r>
 800aa10:	b160      	cbz	r0, 800aa2c <_Balloc+0x56>
 800aa12:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aa16:	e00e      	b.n	800aa36 <_Balloc+0x60>
 800aa18:	2221      	movs	r2, #33	; 0x21
 800aa1a:	2104      	movs	r1, #4
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fab5 	bl	800af8c <_calloc_r>
 800aa22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa24:	60e8      	str	r0, [r5, #12]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e4      	bne.n	800a9f6 <_Balloc+0x20>
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
 800aa30:	6802      	ldr	r2, [r0, #0]
 800aa32:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aa36:	2300      	movs	r3, #0
 800aa38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa3c:	e7f7      	b.n	800aa2e <_Balloc+0x58>

0800aa3e <_Bfree>:
 800aa3e:	b570      	push	{r4, r5, r6, lr}
 800aa40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aa42:	4606      	mov	r6, r0
 800aa44:	460d      	mov	r5, r1
 800aa46:	b93c      	cbnz	r4, 800aa58 <_Bfree+0x1a>
 800aa48:	2010      	movs	r0, #16
 800aa4a:	f7ff ff9f 	bl	800a98c <malloc>
 800aa4e:	6270      	str	r0, [r6, #36]	; 0x24
 800aa50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa54:	6004      	str	r4, [r0, #0]
 800aa56:	60c4      	str	r4, [r0, #12]
 800aa58:	b13d      	cbz	r5, 800aa6a <_Bfree+0x2c>
 800aa5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aa5c:	686a      	ldr	r2, [r5, #4]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa64:	6029      	str	r1, [r5, #0]
 800aa66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}

0800aa6c <__multadd>:
 800aa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa70:	690d      	ldr	r5, [r1, #16]
 800aa72:	461f      	mov	r7, r3
 800aa74:	4606      	mov	r6, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	f101 0c14 	add.w	ip, r1, #20
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	f8dc 0000 	ldr.w	r0, [ip]
 800aa82:	b281      	uxth	r1, r0
 800aa84:	fb02 7101 	mla	r1, r2, r1, r7
 800aa88:	0c0f      	lsrs	r7, r1, #16
 800aa8a:	0c00      	lsrs	r0, r0, #16
 800aa8c:	fb02 7000 	mla	r0, r2, r0, r7
 800aa90:	b289      	uxth	r1, r1
 800aa92:	3301      	adds	r3, #1
 800aa94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800aa98:	429d      	cmp	r5, r3
 800aa9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800aa9e:	f84c 1b04 	str.w	r1, [ip], #4
 800aaa2:	dcec      	bgt.n	800aa7e <__multadd+0x12>
 800aaa4:	b1d7      	cbz	r7, 800aadc <__multadd+0x70>
 800aaa6:	68a3      	ldr	r3, [r4, #8]
 800aaa8:	42ab      	cmp	r3, r5
 800aaaa:	dc12      	bgt.n	800aad2 <__multadd+0x66>
 800aaac:	6861      	ldr	r1, [r4, #4]
 800aaae:	4630      	mov	r0, r6
 800aab0:	3101      	adds	r1, #1
 800aab2:	f7ff ff90 	bl	800a9d6 <_Balloc>
 800aab6:	6922      	ldr	r2, [r4, #16]
 800aab8:	3202      	adds	r2, #2
 800aaba:	f104 010c 	add.w	r1, r4, #12
 800aabe:	4680      	mov	r8, r0
 800aac0:	0092      	lsls	r2, r2, #2
 800aac2:	300c      	adds	r0, #12
 800aac4:	f7ff ff7c 	bl	800a9c0 <memcpy>
 800aac8:	4621      	mov	r1, r4
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7ff ffb7 	bl	800aa3e <_Bfree>
 800aad0:	4644      	mov	r4, r8
 800aad2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aad6:	3501      	adds	r5, #1
 800aad8:	615f      	str	r7, [r3, #20]
 800aada:	6125      	str	r5, [r4, #16]
 800aadc:	4620      	mov	r0, r4
 800aade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aae2 <__hi0bits>:
 800aae2:	0c02      	lsrs	r2, r0, #16
 800aae4:	0412      	lsls	r2, r2, #16
 800aae6:	4603      	mov	r3, r0
 800aae8:	b9b2      	cbnz	r2, 800ab18 <__hi0bits+0x36>
 800aaea:	0403      	lsls	r3, r0, #16
 800aaec:	2010      	movs	r0, #16
 800aaee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aaf2:	bf04      	itt	eq
 800aaf4:	021b      	lsleq	r3, r3, #8
 800aaf6:	3008      	addeq	r0, #8
 800aaf8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aafc:	bf04      	itt	eq
 800aafe:	011b      	lsleq	r3, r3, #4
 800ab00:	3004      	addeq	r0, #4
 800ab02:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ab06:	bf04      	itt	eq
 800ab08:	009b      	lsleq	r3, r3, #2
 800ab0a:	3002      	addeq	r0, #2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	db06      	blt.n	800ab1e <__hi0bits+0x3c>
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	d503      	bpl.n	800ab1c <__hi0bits+0x3a>
 800ab14:	3001      	adds	r0, #1
 800ab16:	4770      	bx	lr
 800ab18:	2000      	movs	r0, #0
 800ab1a:	e7e8      	b.n	800aaee <__hi0bits+0xc>
 800ab1c:	2020      	movs	r0, #32
 800ab1e:	4770      	bx	lr

0800ab20 <__lo0bits>:
 800ab20:	6803      	ldr	r3, [r0, #0]
 800ab22:	f013 0207 	ands.w	r2, r3, #7
 800ab26:	4601      	mov	r1, r0
 800ab28:	d00b      	beq.n	800ab42 <__lo0bits+0x22>
 800ab2a:	07da      	lsls	r2, r3, #31
 800ab2c:	d423      	bmi.n	800ab76 <__lo0bits+0x56>
 800ab2e:	0798      	lsls	r0, r3, #30
 800ab30:	bf49      	itett	mi
 800ab32:	085b      	lsrmi	r3, r3, #1
 800ab34:	089b      	lsrpl	r3, r3, #2
 800ab36:	2001      	movmi	r0, #1
 800ab38:	600b      	strmi	r3, [r1, #0]
 800ab3a:	bf5c      	itt	pl
 800ab3c:	600b      	strpl	r3, [r1, #0]
 800ab3e:	2002      	movpl	r0, #2
 800ab40:	4770      	bx	lr
 800ab42:	b298      	uxth	r0, r3
 800ab44:	b9a8      	cbnz	r0, 800ab72 <__lo0bits+0x52>
 800ab46:	0c1b      	lsrs	r3, r3, #16
 800ab48:	2010      	movs	r0, #16
 800ab4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab4e:	bf04      	itt	eq
 800ab50:	0a1b      	lsreq	r3, r3, #8
 800ab52:	3008      	addeq	r0, #8
 800ab54:	071a      	lsls	r2, r3, #28
 800ab56:	bf04      	itt	eq
 800ab58:	091b      	lsreq	r3, r3, #4
 800ab5a:	3004      	addeq	r0, #4
 800ab5c:	079a      	lsls	r2, r3, #30
 800ab5e:	bf04      	itt	eq
 800ab60:	089b      	lsreq	r3, r3, #2
 800ab62:	3002      	addeq	r0, #2
 800ab64:	07da      	lsls	r2, r3, #31
 800ab66:	d402      	bmi.n	800ab6e <__lo0bits+0x4e>
 800ab68:	085b      	lsrs	r3, r3, #1
 800ab6a:	d006      	beq.n	800ab7a <__lo0bits+0x5a>
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	600b      	str	r3, [r1, #0]
 800ab70:	4770      	bx	lr
 800ab72:	4610      	mov	r0, r2
 800ab74:	e7e9      	b.n	800ab4a <__lo0bits+0x2a>
 800ab76:	2000      	movs	r0, #0
 800ab78:	4770      	bx	lr
 800ab7a:	2020      	movs	r0, #32
 800ab7c:	4770      	bx	lr

0800ab7e <__i2b>:
 800ab7e:	b510      	push	{r4, lr}
 800ab80:	460c      	mov	r4, r1
 800ab82:	2101      	movs	r1, #1
 800ab84:	f7ff ff27 	bl	800a9d6 <_Balloc>
 800ab88:	2201      	movs	r2, #1
 800ab8a:	6144      	str	r4, [r0, #20]
 800ab8c:	6102      	str	r2, [r0, #16]
 800ab8e:	bd10      	pop	{r4, pc}

0800ab90 <__multiply>:
 800ab90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	4614      	mov	r4, r2
 800ab96:	690a      	ldr	r2, [r1, #16]
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	bfb8      	it	lt
 800ab9e:	460b      	movlt	r3, r1
 800aba0:	4688      	mov	r8, r1
 800aba2:	bfbc      	itt	lt
 800aba4:	46a0      	movlt	r8, r4
 800aba6:	461c      	movlt	r4, r3
 800aba8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800abb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800abb8:	eb07 0609 	add.w	r6, r7, r9
 800abbc:	42b3      	cmp	r3, r6
 800abbe:	bfb8      	it	lt
 800abc0:	3101      	addlt	r1, #1
 800abc2:	f7ff ff08 	bl	800a9d6 <_Balloc>
 800abc6:	f100 0514 	add.w	r5, r0, #20
 800abca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800abce:	462b      	mov	r3, r5
 800abd0:	2200      	movs	r2, #0
 800abd2:	4573      	cmp	r3, lr
 800abd4:	d316      	bcc.n	800ac04 <__multiply+0x74>
 800abd6:	f104 0214 	add.w	r2, r4, #20
 800abda:	f108 0114 	add.w	r1, r8, #20
 800abde:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800abe2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	9b00      	ldr	r3, [sp, #0]
 800abea:	9201      	str	r2, [sp, #4]
 800abec:	4293      	cmp	r3, r2
 800abee:	d80c      	bhi.n	800ac0a <__multiply+0x7a>
 800abf0:	2e00      	cmp	r6, #0
 800abf2:	dd03      	ble.n	800abfc <__multiply+0x6c>
 800abf4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d05d      	beq.n	800acb8 <__multiply+0x128>
 800abfc:	6106      	str	r6, [r0, #16]
 800abfe:	b003      	add	sp, #12
 800ac00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac04:	f843 2b04 	str.w	r2, [r3], #4
 800ac08:	e7e3      	b.n	800abd2 <__multiply+0x42>
 800ac0a:	f8b2 b000 	ldrh.w	fp, [r2]
 800ac0e:	f1bb 0f00 	cmp.w	fp, #0
 800ac12:	d023      	beq.n	800ac5c <__multiply+0xcc>
 800ac14:	4689      	mov	r9, r1
 800ac16:	46ac      	mov	ip, r5
 800ac18:	f04f 0800 	mov.w	r8, #0
 800ac1c:	f859 4b04 	ldr.w	r4, [r9], #4
 800ac20:	f8dc a000 	ldr.w	sl, [ip]
 800ac24:	b2a3      	uxth	r3, r4
 800ac26:	fa1f fa8a 	uxth.w	sl, sl
 800ac2a:	fb0b a303 	mla	r3, fp, r3, sl
 800ac2e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ac32:	f8dc 4000 	ldr.w	r4, [ip]
 800ac36:	4443      	add	r3, r8
 800ac38:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ac3c:	fb0b 840a 	mla	r4, fp, sl, r8
 800ac40:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ac44:	46e2      	mov	sl, ip
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac4c:	454f      	cmp	r7, r9
 800ac4e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ac52:	f84a 3b04 	str.w	r3, [sl], #4
 800ac56:	d82b      	bhi.n	800acb0 <__multiply+0x120>
 800ac58:	f8cc 8004 	str.w	r8, [ip, #4]
 800ac5c:	9b01      	ldr	r3, [sp, #4]
 800ac5e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ac62:	3204      	adds	r2, #4
 800ac64:	f1ba 0f00 	cmp.w	sl, #0
 800ac68:	d020      	beq.n	800acac <__multiply+0x11c>
 800ac6a:	682b      	ldr	r3, [r5, #0]
 800ac6c:	4689      	mov	r9, r1
 800ac6e:	46a8      	mov	r8, r5
 800ac70:	f04f 0b00 	mov.w	fp, #0
 800ac74:	f8b9 c000 	ldrh.w	ip, [r9]
 800ac78:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ac7c:	fb0a 440c 	mla	r4, sl, ip, r4
 800ac80:	445c      	add	r4, fp
 800ac82:	46c4      	mov	ip, r8
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ac8a:	f84c 3b04 	str.w	r3, [ip], #4
 800ac8e:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac92:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ac96:	0c1b      	lsrs	r3, r3, #16
 800ac98:	fb0a b303 	mla	r3, sl, r3, fp
 800ac9c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aca0:	454f      	cmp	r7, r9
 800aca2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aca6:	d805      	bhi.n	800acb4 <__multiply+0x124>
 800aca8:	f8c8 3004 	str.w	r3, [r8, #4]
 800acac:	3504      	adds	r5, #4
 800acae:	e79b      	b.n	800abe8 <__multiply+0x58>
 800acb0:	46d4      	mov	ip, sl
 800acb2:	e7b3      	b.n	800ac1c <__multiply+0x8c>
 800acb4:	46e0      	mov	r8, ip
 800acb6:	e7dd      	b.n	800ac74 <__multiply+0xe4>
 800acb8:	3e01      	subs	r6, #1
 800acba:	e799      	b.n	800abf0 <__multiply+0x60>

0800acbc <__pow5mult>:
 800acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	4615      	mov	r5, r2
 800acc2:	f012 0203 	ands.w	r2, r2, #3
 800acc6:	4606      	mov	r6, r0
 800acc8:	460f      	mov	r7, r1
 800acca:	d007      	beq.n	800acdc <__pow5mult+0x20>
 800accc:	3a01      	subs	r2, #1
 800acce:	4c21      	ldr	r4, [pc, #132]	; (800ad54 <__pow5mult+0x98>)
 800acd0:	2300      	movs	r3, #0
 800acd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acd6:	f7ff fec9 	bl	800aa6c <__multadd>
 800acda:	4607      	mov	r7, r0
 800acdc:	10ad      	asrs	r5, r5, #2
 800acde:	d035      	beq.n	800ad4c <__pow5mult+0x90>
 800ace0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ace2:	b93c      	cbnz	r4, 800acf4 <__pow5mult+0x38>
 800ace4:	2010      	movs	r0, #16
 800ace6:	f7ff fe51 	bl	800a98c <malloc>
 800acea:	6270      	str	r0, [r6, #36]	; 0x24
 800acec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acf0:	6004      	str	r4, [r0, #0]
 800acf2:	60c4      	str	r4, [r0, #12]
 800acf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acfc:	b94c      	cbnz	r4, 800ad12 <__pow5mult+0x56>
 800acfe:	f240 2171 	movw	r1, #625	; 0x271
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7ff ff3b 	bl	800ab7e <__i2b>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad0e:	4604      	mov	r4, r0
 800ad10:	6003      	str	r3, [r0, #0]
 800ad12:	f04f 0800 	mov.w	r8, #0
 800ad16:	07eb      	lsls	r3, r5, #31
 800ad18:	d50a      	bpl.n	800ad30 <__pow5mult+0x74>
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7ff ff36 	bl	800ab90 <__multiply>
 800ad24:	4639      	mov	r1, r7
 800ad26:	4681      	mov	r9, r0
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f7ff fe88 	bl	800aa3e <_Bfree>
 800ad2e:	464f      	mov	r7, r9
 800ad30:	106d      	asrs	r5, r5, #1
 800ad32:	d00b      	beq.n	800ad4c <__pow5mult+0x90>
 800ad34:	6820      	ldr	r0, [r4, #0]
 800ad36:	b938      	cbnz	r0, 800ad48 <__pow5mult+0x8c>
 800ad38:	4622      	mov	r2, r4
 800ad3a:	4621      	mov	r1, r4
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f7ff ff27 	bl	800ab90 <__multiply>
 800ad42:	6020      	str	r0, [r4, #0]
 800ad44:	f8c0 8000 	str.w	r8, [r0]
 800ad48:	4604      	mov	r4, r0
 800ad4a:	e7e4      	b.n	800ad16 <__pow5mult+0x5a>
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad52:	bf00      	nop
 800ad54:	0800b678 	.word	0x0800b678

0800ad58 <__lshift>:
 800ad58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	6849      	ldr	r1, [r1, #4]
 800ad66:	eb0a 0903 	add.w	r9, sl, r3
 800ad6a:	68a3      	ldr	r3, [r4, #8]
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	4616      	mov	r6, r2
 800ad70:	f109 0501 	add.w	r5, r9, #1
 800ad74:	42ab      	cmp	r3, r5
 800ad76:	db32      	blt.n	800adde <__lshift+0x86>
 800ad78:	4638      	mov	r0, r7
 800ad7a:	f7ff fe2c 	bl	800a9d6 <_Balloc>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	4680      	mov	r8, r0
 800ad82:	f100 0114 	add.w	r1, r0, #20
 800ad86:	461a      	mov	r2, r3
 800ad88:	4553      	cmp	r3, sl
 800ad8a:	db2b      	blt.n	800ade4 <__lshift+0x8c>
 800ad8c:	6920      	ldr	r0, [r4, #16]
 800ad8e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad92:	f104 0314 	add.w	r3, r4, #20
 800ad96:	f016 021f 	ands.w	r2, r6, #31
 800ad9a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad9e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ada2:	d025      	beq.n	800adf0 <__lshift+0x98>
 800ada4:	f1c2 0e20 	rsb	lr, r2, #32
 800ada8:	2000      	movs	r0, #0
 800adaa:	681e      	ldr	r6, [r3, #0]
 800adac:	468a      	mov	sl, r1
 800adae:	4096      	lsls	r6, r2
 800adb0:	4330      	orrs	r0, r6
 800adb2:	f84a 0b04 	str.w	r0, [sl], #4
 800adb6:	f853 0b04 	ldr.w	r0, [r3], #4
 800adba:	459c      	cmp	ip, r3
 800adbc:	fa20 f00e 	lsr.w	r0, r0, lr
 800adc0:	d814      	bhi.n	800adec <__lshift+0x94>
 800adc2:	6048      	str	r0, [r1, #4]
 800adc4:	b108      	cbz	r0, 800adca <__lshift+0x72>
 800adc6:	f109 0502 	add.w	r5, r9, #2
 800adca:	3d01      	subs	r5, #1
 800adcc:	4638      	mov	r0, r7
 800adce:	f8c8 5010 	str.w	r5, [r8, #16]
 800add2:	4621      	mov	r1, r4
 800add4:	f7ff fe33 	bl	800aa3e <_Bfree>
 800add8:	4640      	mov	r0, r8
 800adda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adde:	3101      	adds	r1, #1
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	e7c7      	b.n	800ad74 <__lshift+0x1c>
 800ade4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ade8:	3301      	adds	r3, #1
 800adea:	e7cd      	b.n	800ad88 <__lshift+0x30>
 800adec:	4651      	mov	r1, sl
 800adee:	e7dc      	b.n	800adaa <__lshift+0x52>
 800adf0:	3904      	subs	r1, #4
 800adf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf6:	f841 2f04 	str.w	r2, [r1, #4]!
 800adfa:	459c      	cmp	ip, r3
 800adfc:	d8f9      	bhi.n	800adf2 <__lshift+0x9a>
 800adfe:	e7e4      	b.n	800adca <__lshift+0x72>

0800ae00 <__mcmp>:
 800ae00:	6903      	ldr	r3, [r0, #16]
 800ae02:	690a      	ldr	r2, [r1, #16]
 800ae04:	1a9b      	subs	r3, r3, r2
 800ae06:	b530      	push	{r4, r5, lr}
 800ae08:	d10c      	bne.n	800ae24 <__mcmp+0x24>
 800ae0a:	0092      	lsls	r2, r2, #2
 800ae0c:	3014      	adds	r0, #20
 800ae0e:	3114      	adds	r1, #20
 800ae10:	1884      	adds	r4, r0, r2
 800ae12:	4411      	add	r1, r2
 800ae14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae1c:	4295      	cmp	r5, r2
 800ae1e:	d003      	beq.n	800ae28 <__mcmp+0x28>
 800ae20:	d305      	bcc.n	800ae2e <__mcmp+0x2e>
 800ae22:	2301      	movs	r3, #1
 800ae24:	4618      	mov	r0, r3
 800ae26:	bd30      	pop	{r4, r5, pc}
 800ae28:	42a0      	cmp	r0, r4
 800ae2a:	d3f3      	bcc.n	800ae14 <__mcmp+0x14>
 800ae2c:	e7fa      	b.n	800ae24 <__mcmp+0x24>
 800ae2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae32:	e7f7      	b.n	800ae24 <__mcmp+0x24>

0800ae34 <__mdiff>:
 800ae34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae38:	460d      	mov	r5, r1
 800ae3a:	4607      	mov	r7, r0
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	4628      	mov	r0, r5
 800ae40:	4614      	mov	r4, r2
 800ae42:	f7ff ffdd 	bl	800ae00 <__mcmp>
 800ae46:	1e06      	subs	r6, r0, #0
 800ae48:	d108      	bne.n	800ae5c <__mdiff+0x28>
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4638      	mov	r0, r7
 800ae4e:	f7ff fdc2 	bl	800a9d6 <_Balloc>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ae58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5c:	bfa4      	itt	ge
 800ae5e:	4623      	movge	r3, r4
 800ae60:	462c      	movge	r4, r5
 800ae62:	4638      	mov	r0, r7
 800ae64:	6861      	ldr	r1, [r4, #4]
 800ae66:	bfa6      	itte	ge
 800ae68:	461d      	movge	r5, r3
 800ae6a:	2600      	movge	r6, #0
 800ae6c:	2601      	movlt	r6, #1
 800ae6e:	f7ff fdb2 	bl	800a9d6 <_Balloc>
 800ae72:	692b      	ldr	r3, [r5, #16]
 800ae74:	60c6      	str	r6, [r0, #12]
 800ae76:	6926      	ldr	r6, [r4, #16]
 800ae78:	f105 0914 	add.w	r9, r5, #20
 800ae7c:	f104 0214 	add.w	r2, r4, #20
 800ae80:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ae84:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ae88:	f100 0514 	add.w	r5, r0, #20
 800ae8c:	f04f 0e00 	mov.w	lr, #0
 800ae90:	f852 ab04 	ldr.w	sl, [r2], #4
 800ae94:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae98:	fa1e f18a 	uxtah	r1, lr, sl
 800ae9c:	b2a3      	uxth	r3, r4
 800ae9e:	1ac9      	subs	r1, r1, r3
 800aea0:	0c23      	lsrs	r3, r4, #16
 800aea2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800aea6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aeaa:	b289      	uxth	r1, r1
 800aeac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800aeb0:	45c8      	cmp	r8, r9
 800aeb2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800aeb6:	4694      	mov	ip, r2
 800aeb8:	f845 3b04 	str.w	r3, [r5], #4
 800aebc:	d8e8      	bhi.n	800ae90 <__mdiff+0x5c>
 800aebe:	45bc      	cmp	ip, r7
 800aec0:	d304      	bcc.n	800aecc <__mdiff+0x98>
 800aec2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800aec6:	b183      	cbz	r3, 800aeea <__mdiff+0xb6>
 800aec8:	6106      	str	r6, [r0, #16]
 800aeca:	e7c5      	b.n	800ae58 <__mdiff+0x24>
 800aecc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aed0:	fa1e f381 	uxtah	r3, lr, r1
 800aed4:	141a      	asrs	r2, r3, #16
 800aed6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aee0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800aee4:	f845 3b04 	str.w	r3, [r5], #4
 800aee8:	e7e9      	b.n	800aebe <__mdiff+0x8a>
 800aeea:	3e01      	subs	r6, #1
 800aeec:	e7e9      	b.n	800aec2 <__mdiff+0x8e>

0800aeee <__d2b>:
 800aeee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aef2:	460e      	mov	r6, r1
 800aef4:	2101      	movs	r1, #1
 800aef6:	ec59 8b10 	vmov	r8, r9, d0
 800aefa:	4615      	mov	r5, r2
 800aefc:	f7ff fd6b 	bl	800a9d6 <_Balloc>
 800af00:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800af04:	4607      	mov	r7, r0
 800af06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af0a:	bb34      	cbnz	r4, 800af5a <__d2b+0x6c>
 800af0c:	9301      	str	r3, [sp, #4]
 800af0e:	f1b8 0300 	subs.w	r3, r8, #0
 800af12:	d027      	beq.n	800af64 <__d2b+0x76>
 800af14:	a802      	add	r0, sp, #8
 800af16:	f840 3d08 	str.w	r3, [r0, #-8]!
 800af1a:	f7ff fe01 	bl	800ab20 <__lo0bits>
 800af1e:	9900      	ldr	r1, [sp, #0]
 800af20:	b1f0      	cbz	r0, 800af60 <__d2b+0x72>
 800af22:	9a01      	ldr	r2, [sp, #4]
 800af24:	f1c0 0320 	rsb	r3, r0, #32
 800af28:	fa02 f303 	lsl.w	r3, r2, r3
 800af2c:	430b      	orrs	r3, r1
 800af2e:	40c2      	lsrs	r2, r0
 800af30:	617b      	str	r3, [r7, #20]
 800af32:	9201      	str	r2, [sp, #4]
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	61bb      	str	r3, [r7, #24]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	bf14      	ite	ne
 800af3c:	2102      	movne	r1, #2
 800af3e:	2101      	moveq	r1, #1
 800af40:	6139      	str	r1, [r7, #16]
 800af42:	b1c4      	cbz	r4, 800af76 <__d2b+0x88>
 800af44:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800af48:	4404      	add	r4, r0
 800af4a:	6034      	str	r4, [r6, #0]
 800af4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af50:	6028      	str	r0, [r5, #0]
 800af52:	4638      	mov	r0, r7
 800af54:	b003      	add	sp, #12
 800af56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af5e:	e7d5      	b.n	800af0c <__d2b+0x1e>
 800af60:	6179      	str	r1, [r7, #20]
 800af62:	e7e7      	b.n	800af34 <__d2b+0x46>
 800af64:	a801      	add	r0, sp, #4
 800af66:	f7ff fddb 	bl	800ab20 <__lo0bits>
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	617b      	str	r3, [r7, #20]
 800af6e:	2101      	movs	r1, #1
 800af70:	6139      	str	r1, [r7, #16]
 800af72:	3020      	adds	r0, #32
 800af74:	e7e5      	b.n	800af42 <__d2b+0x54>
 800af76:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800af7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af7e:	6030      	str	r0, [r6, #0]
 800af80:	6918      	ldr	r0, [r3, #16]
 800af82:	f7ff fdae 	bl	800aae2 <__hi0bits>
 800af86:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800af8a:	e7e1      	b.n	800af50 <__d2b+0x62>

0800af8c <_calloc_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	fb02 f401 	mul.w	r4, r2, r1
 800af92:	4621      	mov	r1, r4
 800af94:	f000 f856 	bl	800b044 <_malloc_r>
 800af98:	4605      	mov	r5, r0
 800af9a:	b118      	cbz	r0, 800afa4 <_calloc_r+0x18>
 800af9c:	4622      	mov	r2, r4
 800af9e:	2100      	movs	r1, #0
 800afa0:	f7fe f987 	bl	80092b2 <memset>
 800afa4:	4628      	mov	r0, r5
 800afa6:	bd38      	pop	{r3, r4, r5, pc}

0800afa8 <_free_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4605      	mov	r5, r0
 800afac:	2900      	cmp	r1, #0
 800afae:	d045      	beq.n	800b03c <_free_r+0x94>
 800afb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afb4:	1f0c      	subs	r4, r1, #4
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	bfb8      	it	lt
 800afba:	18e4      	addlt	r4, r4, r3
 800afbc:	f000 fa24 	bl	800b408 <__malloc_lock>
 800afc0:	4a1f      	ldr	r2, [pc, #124]	; (800b040 <_free_r+0x98>)
 800afc2:	6813      	ldr	r3, [r2, #0]
 800afc4:	4610      	mov	r0, r2
 800afc6:	b933      	cbnz	r3, 800afd6 <_free_r+0x2e>
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	6014      	str	r4, [r2, #0]
 800afcc:	4628      	mov	r0, r5
 800afce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afd2:	f000 ba1a 	b.w	800b40a <__malloc_unlock>
 800afd6:	42a3      	cmp	r3, r4
 800afd8:	d90c      	bls.n	800aff4 <_free_r+0x4c>
 800afda:	6821      	ldr	r1, [r4, #0]
 800afdc:	1862      	adds	r2, r4, r1
 800afde:	4293      	cmp	r3, r2
 800afe0:	bf04      	itt	eq
 800afe2:	681a      	ldreq	r2, [r3, #0]
 800afe4:	685b      	ldreq	r3, [r3, #4]
 800afe6:	6063      	str	r3, [r4, #4]
 800afe8:	bf04      	itt	eq
 800afea:	1852      	addeq	r2, r2, r1
 800afec:	6022      	streq	r2, [r4, #0]
 800afee:	6004      	str	r4, [r0, #0]
 800aff0:	e7ec      	b.n	800afcc <_free_r+0x24>
 800aff2:	4613      	mov	r3, r2
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	b10a      	cbz	r2, 800affc <_free_r+0x54>
 800aff8:	42a2      	cmp	r2, r4
 800affa:	d9fa      	bls.n	800aff2 <_free_r+0x4a>
 800affc:	6819      	ldr	r1, [r3, #0]
 800affe:	1858      	adds	r0, r3, r1
 800b000:	42a0      	cmp	r0, r4
 800b002:	d10b      	bne.n	800b01c <_free_r+0x74>
 800b004:	6820      	ldr	r0, [r4, #0]
 800b006:	4401      	add	r1, r0
 800b008:	1858      	adds	r0, r3, r1
 800b00a:	4282      	cmp	r2, r0
 800b00c:	6019      	str	r1, [r3, #0]
 800b00e:	d1dd      	bne.n	800afcc <_free_r+0x24>
 800b010:	6810      	ldr	r0, [r2, #0]
 800b012:	6852      	ldr	r2, [r2, #4]
 800b014:	605a      	str	r2, [r3, #4]
 800b016:	4401      	add	r1, r0
 800b018:	6019      	str	r1, [r3, #0]
 800b01a:	e7d7      	b.n	800afcc <_free_r+0x24>
 800b01c:	d902      	bls.n	800b024 <_free_r+0x7c>
 800b01e:	230c      	movs	r3, #12
 800b020:	602b      	str	r3, [r5, #0]
 800b022:	e7d3      	b.n	800afcc <_free_r+0x24>
 800b024:	6820      	ldr	r0, [r4, #0]
 800b026:	1821      	adds	r1, r4, r0
 800b028:	428a      	cmp	r2, r1
 800b02a:	bf04      	itt	eq
 800b02c:	6811      	ldreq	r1, [r2, #0]
 800b02e:	6852      	ldreq	r2, [r2, #4]
 800b030:	6062      	str	r2, [r4, #4]
 800b032:	bf04      	itt	eq
 800b034:	1809      	addeq	r1, r1, r0
 800b036:	6021      	streq	r1, [r4, #0]
 800b038:	605c      	str	r4, [r3, #4]
 800b03a:	e7c7      	b.n	800afcc <_free_r+0x24>
 800b03c:	bd38      	pop	{r3, r4, r5, pc}
 800b03e:	bf00      	nop
 800b040:	20000270 	.word	0x20000270

0800b044 <_malloc_r>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	1ccd      	adds	r5, r1, #3
 800b048:	f025 0503 	bic.w	r5, r5, #3
 800b04c:	3508      	adds	r5, #8
 800b04e:	2d0c      	cmp	r5, #12
 800b050:	bf38      	it	cc
 800b052:	250c      	movcc	r5, #12
 800b054:	2d00      	cmp	r5, #0
 800b056:	4606      	mov	r6, r0
 800b058:	db01      	blt.n	800b05e <_malloc_r+0x1a>
 800b05a:	42a9      	cmp	r1, r5
 800b05c:	d903      	bls.n	800b066 <_malloc_r+0x22>
 800b05e:	230c      	movs	r3, #12
 800b060:	6033      	str	r3, [r6, #0]
 800b062:	2000      	movs	r0, #0
 800b064:	bd70      	pop	{r4, r5, r6, pc}
 800b066:	f000 f9cf 	bl	800b408 <__malloc_lock>
 800b06a:	4a21      	ldr	r2, [pc, #132]	; (800b0f0 <_malloc_r+0xac>)
 800b06c:	6814      	ldr	r4, [r2, #0]
 800b06e:	4621      	mov	r1, r4
 800b070:	b991      	cbnz	r1, 800b098 <_malloc_r+0x54>
 800b072:	4c20      	ldr	r4, [pc, #128]	; (800b0f4 <_malloc_r+0xb0>)
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	b91b      	cbnz	r3, 800b080 <_malloc_r+0x3c>
 800b078:	4630      	mov	r0, r6
 800b07a:	f000 f98f 	bl	800b39c <_sbrk_r>
 800b07e:	6020      	str	r0, [r4, #0]
 800b080:	4629      	mov	r1, r5
 800b082:	4630      	mov	r0, r6
 800b084:	f000 f98a 	bl	800b39c <_sbrk_r>
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d124      	bne.n	800b0d6 <_malloc_r+0x92>
 800b08c:	230c      	movs	r3, #12
 800b08e:	6033      	str	r3, [r6, #0]
 800b090:	4630      	mov	r0, r6
 800b092:	f000 f9ba 	bl	800b40a <__malloc_unlock>
 800b096:	e7e4      	b.n	800b062 <_malloc_r+0x1e>
 800b098:	680b      	ldr	r3, [r1, #0]
 800b09a:	1b5b      	subs	r3, r3, r5
 800b09c:	d418      	bmi.n	800b0d0 <_malloc_r+0x8c>
 800b09e:	2b0b      	cmp	r3, #11
 800b0a0:	d90f      	bls.n	800b0c2 <_malloc_r+0x7e>
 800b0a2:	600b      	str	r3, [r1, #0]
 800b0a4:	50cd      	str	r5, [r1, r3]
 800b0a6:	18cc      	adds	r4, r1, r3
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f000 f9ae 	bl	800b40a <__malloc_unlock>
 800b0ae:	f104 000b 	add.w	r0, r4, #11
 800b0b2:	1d23      	adds	r3, r4, #4
 800b0b4:	f020 0007 	bic.w	r0, r0, #7
 800b0b8:	1ac3      	subs	r3, r0, r3
 800b0ba:	d0d3      	beq.n	800b064 <_malloc_r+0x20>
 800b0bc:	425a      	negs	r2, r3
 800b0be:	50e2      	str	r2, [r4, r3]
 800b0c0:	e7d0      	b.n	800b064 <_malloc_r+0x20>
 800b0c2:	428c      	cmp	r4, r1
 800b0c4:	684b      	ldr	r3, [r1, #4]
 800b0c6:	bf16      	itet	ne
 800b0c8:	6063      	strne	r3, [r4, #4]
 800b0ca:	6013      	streq	r3, [r2, #0]
 800b0cc:	460c      	movne	r4, r1
 800b0ce:	e7eb      	b.n	800b0a8 <_malloc_r+0x64>
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	6849      	ldr	r1, [r1, #4]
 800b0d4:	e7cc      	b.n	800b070 <_malloc_r+0x2c>
 800b0d6:	1cc4      	adds	r4, r0, #3
 800b0d8:	f024 0403 	bic.w	r4, r4, #3
 800b0dc:	42a0      	cmp	r0, r4
 800b0de:	d005      	beq.n	800b0ec <_malloc_r+0xa8>
 800b0e0:	1a21      	subs	r1, r4, r0
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f000 f95a 	bl	800b39c <_sbrk_r>
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	d0cf      	beq.n	800b08c <_malloc_r+0x48>
 800b0ec:	6025      	str	r5, [r4, #0]
 800b0ee:	e7db      	b.n	800b0a8 <_malloc_r+0x64>
 800b0f0:	20000270 	.word	0x20000270
 800b0f4:	20000274 	.word	0x20000274

0800b0f8 <__ssputs_r>:
 800b0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	688e      	ldr	r6, [r1, #8]
 800b0fe:	429e      	cmp	r6, r3
 800b100:	4682      	mov	sl, r0
 800b102:	460c      	mov	r4, r1
 800b104:	4690      	mov	r8, r2
 800b106:	4699      	mov	r9, r3
 800b108:	d837      	bhi.n	800b17a <__ssputs_r+0x82>
 800b10a:	898a      	ldrh	r2, [r1, #12]
 800b10c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b110:	d031      	beq.n	800b176 <__ssputs_r+0x7e>
 800b112:	6825      	ldr	r5, [r4, #0]
 800b114:	6909      	ldr	r1, [r1, #16]
 800b116:	1a6f      	subs	r7, r5, r1
 800b118:	6965      	ldr	r5, [r4, #20]
 800b11a:	2302      	movs	r3, #2
 800b11c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b120:	fb95 f5f3 	sdiv	r5, r5, r3
 800b124:	f109 0301 	add.w	r3, r9, #1
 800b128:	443b      	add	r3, r7
 800b12a:	429d      	cmp	r5, r3
 800b12c:	bf38      	it	cc
 800b12e:	461d      	movcc	r5, r3
 800b130:	0553      	lsls	r3, r2, #21
 800b132:	d530      	bpl.n	800b196 <__ssputs_r+0x9e>
 800b134:	4629      	mov	r1, r5
 800b136:	f7ff ff85 	bl	800b044 <_malloc_r>
 800b13a:	4606      	mov	r6, r0
 800b13c:	b950      	cbnz	r0, 800b154 <__ssputs_r+0x5c>
 800b13e:	230c      	movs	r3, #12
 800b140:	f8ca 3000 	str.w	r3, [sl]
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b154:	463a      	mov	r2, r7
 800b156:	6921      	ldr	r1, [r4, #16]
 800b158:	f7ff fc32 	bl	800a9c0 <memcpy>
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	6126      	str	r6, [r4, #16]
 800b16a:	6165      	str	r5, [r4, #20]
 800b16c:	443e      	add	r6, r7
 800b16e:	1bed      	subs	r5, r5, r7
 800b170:	6026      	str	r6, [r4, #0]
 800b172:	60a5      	str	r5, [r4, #8]
 800b174:	464e      	mov	r6, r9
 800b176:	454e      	cmp	r6, r9
 800b178:	d900      	bls.n	800b17c <__ssputs_r+0x84>
 800b17a:	464e      	mov	r6, r9
 800b17c:	4632      	mov	r2, r6
 800b17e:	4641      	mov	r1, r8
 800b180:	6820      	ldr	r0, [r4, #0]
 800b182:	f000 f928 	bl	800b3d6 <memmove>
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	1b9b      	subs	r3, r3, r6
 800b18a:	60a3      	str	r3, [r4, #8]
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	441e      	add	r6, r3
 800b190:	6026      	str	r6, [r4, #0]
 800b192:	2000      	movs	r0, #0
 800b194:	e7dc      	b.n	800b150 <__ssputs_r+0x58>
 800b196:	462a      	mov	r2, r5
 800b198:	f000 f938 	bl	800b40c <_realloc_r>
 800b19c:	4606      	mov	r6, r0
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d1e2      	bne.n	800b168 <__ssputs_r+0x70>
 800b1a2:	6921      	ldr	r1, [r4, #16]
 800b1a4:	4650      	mov	r0, sl
 800b1a6:	f7ff feff 	bl	800afa8 <_free_r>
 800b1aa:	e7c8      	b.n	800b13e <__ssputs_r+0x46>

0800b1ac <_svfiprintf_r>:
 800b1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b0:	461d      	mov	r5, r3
 800b1b2:	898b      	ldrh	r3, [r1, #12]
 800b1b4:	061f      	lsls	r7, r3, #24
 800b1b6:	b09d      	sub	sp, #116	; 0x74
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	4616      	mov	r6, r2
 800b1be:	d50f      	bpl.n	800b1e0 <_svfiprintf_r+0x34>
 800b1c0:	690b      	ldr	r3, [r1, #16]
 800b1c2:	b96b      	cbnz	r3, 800b1e0 <_svfiprintf_r+0x34>
 800b1c4:	2140      	movs	r1, #64	; 0x40
 800b1c6:	f7ff ff3d 	bl	800b044 <_malloc_r>
 800b1ca:	6020      	str	r0, [r4, #0]
 800b1cc:	6120      	str	r0, [r4, #16]
 800b1ce:	b928      	cbnz	r0, 800b1dc <_svfiprintf_r+0x30>
 800b1d0:	230c      	movs	r3, #12
 800b1d2:	f8c8 3000 	str.w	r3, [r8]
 800b1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1da:	e0c8      	b.n	800b36e <_svfiprintf_r+0x1c2>
 800b1dc:	2340      	movs	r3, #64	; 0x40
 800b1de:	6163      	str	r3, [r4, #20]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e4:	2320      	movs	r3, #32
 800b1e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ea:	2330      	movs	r3, #48	; 0x30
 800b1ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1f0:	9503      	str	r5, [sp, #12]
 800b1f2:	f04f 0b01 	mov.w	fp, #1
 800b1f6:	4637      	mov	r7, r6
 800b1f8:	463d      	mov	r5, r7
 800b1fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b1fe:	b10b      	cbz	r3, 800b204 <_svfiprintf_r+0x58>
 800b200:	2b25      	cmp	r3, #37	; 0x25
 800b202:	d13e      	bne.n	800b282 <_svfiprintf_r+0xd6>
 800b204:	ebb7 0a06 	subs.w	sl, r7, r6
 800b208:	d00b      	beq.n	800b222 <_svfiprintf_r+0x76>
 800b20a:	4653      	mov	r3, sl
 800b20c:	4632      	mov	r2, r6
 800b20e:	4621      	mov	r1, r4
 800b210:	4640      	mov	r0, r8
 800b212:	f7ff ff71 	bl	800b0f8 <__ssputs_r>
 800b216:	3001      	adds	r0, #1
 800b218:	f000 80a4 	beq.w	800b364 <_svfiprintf_r+0x1b8>
 800b21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b21e:	4453      	add	r3, sl
 800b220:	9309      	str	r3, [sp, #36]	; 0x24
 800b222:	783b      	ldrb	r3, [r7, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 809d 	beq.w	800b364 <_svfiprintf_r+0x1b8>
 800b22a:	2300      	movs	r3, #0
 800b22c:	f04f 32ff 	mov.w	r2, #4294967295
 800b230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b234:	9304      	str	r3, [sp, #16]
 800b236:	9307      	str	r3, [sp, #28]
 800b238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b23c:	931a      	str	r3, [sp, #104]	; 0x68
 800b23e:	462f      	mov	r7, r5
 800b240:	2205      	movs	r2, #5
 800b242:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b246:	4850      	ldr	r0, [pc, #320]	; (800b388 <_svfiprintf_r+0x1dc>)
 800b248:	f7f4 ffca 	bl	80001e0 <memchr>
 800b24c:	9b04      	ldr	r3, [sp, #16]
 800b24e:	b9d0      	cbnz	r0, 800b286 <_svfiprintf_r+0xda>
 800b250:	06d9      	lsls	r1, r3, #27
 800b252:	bf44      	itt	mi
 800b254:	2220      	movmi	r2, #32
 800b256:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b25a:	071a      	lsls	r2, r3, #28
 800b25c:	bf44      	itt	mi
 800b25e:	222b      	movmi	r2, #43	; 0x2b
 800b260:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b264:	782a      	ldrb	r2, [r5, #0]
 800b266:	2a2a      	cmp	r2, #42	; 0x2a
 800b268:	d015      	beq.n	800b296 <_svfiprintf_r+0xea>
 800b26a:	9a07      	ldr	r2, [sp, #28]
 800b26c:	462f      	mov	r7, r5
 800b26e:	2000      	movs	r0, #0
 800b270:	250a      	movs	r5, #10
 800b272:	4639      	mov	r1, r7
 800b274:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b278:	3b30      	subs	r3, #48	; 0x30
 800b27a:	2b09      	cmp	r3, #9
 800b27c:	d94d      	bls.n	800b31a <_svfiprintf_r+0x16e>
 800b27e:	b1b8      	cbz	r0, 800b2b0 <_svfiprintf_r+0x104>
 800b280:	e00f      	b.n	800b2a2 <_svfiprintf_r+0xf6>
 800b282:	462f      	mov	r7, r5
 800b284:	e7b8      	b.n	800b1f8 <_svfiprintf_r+0x4c>
 800b286:	4a40      	ldr	r2, [pc, #256]	; (800b388 <_svfiprintf_r+0x1dc>)
 800b288:	1a80      	subs	r0, r0, r2
 800b28a:	fa0b f000 	lsl.w	r0, fp, r0
 800b28e:	4318      	orrs	r0, r3
 800b290:	9004      	str	r0, [sp, #16]
 800b292:	463d      	mov	r5, r7
 800b294:	e7d3      	b.n	800b23e <_svfiprintf_r+0x92>
 800b296:	9a03      	ldr	r2, [sp, #12]
 800b298:	1d11      	adds	r1, r2, #4
 800b29a:	6812      	ldr	r2, [r2, #0]
 800b29c:	9103      	str	r1, [sp, #12]
 800b29e:	2a00      	cmp	r2, #0
 800b2a0:	db01      	blt.n	800b2a6 <_svfiprintf_r+0xfa>
 800b2a2:	9207      	str	r2, [sp, #28]
 800b2a4:	e004      	b.n	800b2b0 <_svfiprintf_r+0x104>
 800b2a6:	4252      	negs	r2, r2
 800b2a8:	f043 0302 	orr.w	r3, r3, #2
 800b2ac:	9207      	str	r2, [sp, #28]
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	783b      	ldrb	r3, [r7, #0]
 800b2b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b4:	d10c      	bne.n	800b2d0 <_svfiprintf_r+0x124>
 800b2b6:	787b      	ldrb	r3, [r7, #1]
 800b2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ba:	d133      	bne.n	800b324 <_svfiprintf_r+0x178>
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	1d1a      	adds	r2, r3, #4
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	9203      	str	r2, [sp, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bfb8      	it	lt
 800b2c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2cc:	3702      	adds	r7, #2
 800b2ce:	9305      	str	r3, [sp, #20]
 800b2d0:	4d2e      	ldr	r5, [pc, #184]	; (800b38c <_svfiprintf_r+0x1e0>)
 800b2d2:	7839      	ldrb	r1, [r7, #0]
 800b2d4:	2203      	movs	r2, #3
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f7f4 ff82 	bl	80001e0 <memchr>
 800b2dc:	b138      	cbz	r0, 800b2ee <_svfiprintf_r+0x142>
 800b2de:	2340      	movs	r3, #64	; 0x40
 800b2e0:	1b40      	subs	r0, r0, r5
 800b2e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b2e6:	9b04      	ldr	r3, [sp, #16]
 800b2e8:	4303      	orrs	r3, r0
 800b2ea:	3701      	adds	r7, #1
 800b2ec:	9304      	str	r3, [sp, #16]
 800b2ee:	7839      	ldrb	r1, [r7, #0]
 800b2f0:	4827      	ldr	r0, [pc, #156]	; (800b390 <_svfiprintf_r+0x1e4>)
 800b2f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2f6:	2206      	movs	r2, #6
 800b2f8:	1c7e      	adds	r6, r7, #1
 800b2fa:	f7f4 ff71 	bl	80001e0 <memchr>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d038      	beq.n	800b374 <_svfiprintf_r+0x1c8>
 800b302:	4b24      	ldr	r3, [pc, #144]	; (800b394 <_svfiprintf_r+0x1e8>)
 800b304:	bb13      	cbnz	r3, 800b34c <_svfiprintf_r+0x1a0>
 800b306:	9b03      	ldr	r3, [sp, #12]
 800b308:	3307      	adds	r3, #7
 800b30a:	f023 0307 	bic.w	r3, r3, #7
 800b30e:	3308      	adds	r3, #8
 800b310:	9303      	str	r3, [sp, #12]
 800b312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b314:	444b      	add	r3, r9
 800b316:	9309      	str	r3, [sp, #36]	; 0x24
 800b318:	e76d      	b.n	800b1f6 <_svfiprintf_r+0x4a>
 800b31a:	fb05 3202 	mla	r2, r5, r2, r3
 800b31e:	2001      	movs	r0, #1
 800b320:	460f      	mov	r7, r1
 800b322:	e7a6      	b.n	800b272 <_svfiprintf_r+0xc6>
 800b324:	2300      	movs	r3, #0
 800b326:	3701      	adds	r7, #1
 800b328:	9305      	str	r3, [sp, #20]
 800b32a:	4619      	mov	r1, r3
 800b32c:	250a      	movs	r5, #10
 800b32e:	4638      	mov	r0, r7
 800b330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b334:	3a30      	subs	r2, #48	; 0x30
 800b336:	2a09      	cmp	r2, #9
 800b338:	d903      	bls.n	800b342 <_svfiprintf_r+0x196>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0c8      	beq.n	800b2d0 <_svfiprintf_r+0x124>
 800b33e:	9105      	str	r1, [sp, #20]
 800b340:	e7c6      	b.n	800b2d0 <_svfiprintf_r+0x124>
 800b342:	fb05 2101 	mla	r1, r5, r1, r2
 800b346:	2301      	movs	r3, #1
 800b348:	4607      	mov	r7, r0
 800b34a:	e7f0      	b.n	800b32e <_svfiprintf_r+0x182>
 800b34c:	ab03      	add	r3, sp, #12
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	4622      	mov	r2, r4
 800b352:	4b11      	ldr	r3, [pc, #68]	; (800b398 <_svfiprintf_r+0x1ec>)
 800b354:	a904      	add	r1, sp, #16
 800b356:	4640      	mov	r0, r8
 800b358:	f7fe f848 	bl	80093ec <_printf_float>
 800b35c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b360:	4681      	mov	r9, r0
 800b362:	d1d6      	bne.n	800b312 <_svfiprintf_r+0x166>
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	065b      	lsls	r3, r3, #25
 800b368:	f53f af35 	bmi.w	800b1d6 <_svfiprintf_r+0x2a>
 800b36c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b36e:	b01d      	add	sp, #116	; 0x74
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b374:	ab03      	add	r3, sp, #12
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	4622      	mov	r2, r4
 800b37a:	4b07      	ldr	r3, [pc, #28]	; (800b398 <_svfiprintf_r+0x1ec>)
 800b37c:	a904      	add	r1, sp, #16
 800b37e:	4640      	mov	r0, r8
 800b380:	f7fe faea 	bl	8009958 <_printf_i>
 800b384:	e7ea      	b.n	800b35c <_svfiprintf_r+0x1b0>
 800b386:	bf00      	nop
 800b388:	0800b684 	.word	0x0800b684
 800b38c:	0800b68a 	.word	0x0800b68a
 800b390:	0800b68e 	.word	0x0800b68e
 800b394:	080093ed 	.word	0x080093ed
 800b398:	0800b0f9 	.word	0x0800b0f9

0800b39c <_sbrk_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4c06      	ldr	r4, [pc, #24]	; (800b3b8 <_sbrk_r+0x1c>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	6023      	str	r3, [r4, #0]
 800b3a8:	f7f7 fa58 	bl	800285c <_sbrk>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_sbrk_r+0x1a>
 800b3b0:	6823      	ldr	r3, [r4, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_sbrk_r+0x1a>
 800b3b4:	602b      	str	r3, [r5, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	20000784 	.word	0x20000784

0800b3bc <__ascii_wctomb>:
 800b3bc:	b149      	cbz	r1, 800b3d2 <__ascii_wctomb+0x16>
 800b3be:	2aff      	cmp	r2, #255	; 0xff
 800b3c0:	bf85      	ittet	hi
 800b3c2:	238a      	movhi	r3, #138	; 0x8a
 800b3c4:	6003      	strhi	r3, [r0, #0]
 800b3c6:	700a      	strbls	r2, [r1, #0]
 800b3c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3cc:	bf98      	it	ls
 800b3ce:	2001      	movls	r0, #1
 800b3d0:	4770      	bx	lr
 800b3d2:	4608      	mov	r0, r1
 800b3d4:	4770      	bx	lr

0800b3d6 <memmove>:
 800b3d6:	4288      	cmp	r0, r1
 800b3d8:	b510      	push	{r4, lr}
 800b3da:	eb01 0302 	add.w	r3, r1, r2
 800b3de:	d807      	bhi.n	800b3f0 <memmove+0x1a>
 800b3e0:	1e42      	subs	r2, r0, #1
 800b3e2:	4299      	cmp	r1, r3
 800b3e4:	d00a      	beq.n	800b3fc <memmove+0x26>
 800b3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b3ee:	e7f8      	b.n	800b3e2 <memmove+0xc>
 800b3f0:	4283      	cmp	r3, r0
 800b3f2:	d9f5      	bls.n	800b3e0 <memmove+0xa>
 800b3f4:	1881      	adds	r1, r0, r2
 800b3f6:	1ad2      	subs	r2, r2, r3
 800b3f8:	42d3      	cmn	r3, r2
 800b3fa:	d100      	bne.n	800b3fe <memmove+0x28>
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b402:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b406:	e7f7      	b.n	800b3f8 <memmove+0x22>

0800b408 <__malloc_lock>:
 800b408:	4770      	bx	lr

0800b40a <__malloc_unlock>:
 800b40a:	4770      	bx	lr

0800b40c <_realloc_r>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	4607      	mov	r7, r0
 800b410:	4614      	mov	r4, r2
 800b412:	460e      	mov	r6, r1
 800b414:	b921      	cbnz	r1, 800b420 <_realloc_r+0x14>
 800b416:	4611      	mov	r1, r2
 800b418:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b41c:	f7ff be12 	b.w	800b044 <_malloc_r>
 800b420:	b922      	cbnz	r2, 800b42c <_realloc_r+0x20>
 800b422:	f7ff fdc1 	bl	800afa8 <_free_r>
 800b426:	4625      	mov	r5, r4
 800b428:	4628      	mov	r0, r5
 800b42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b42c:	f000 f814 	bl	800b458 <_malloc_usable_size_r>
 800b430:	42a0      	cmp	r0, r4
 800b432:	d20f      	bcs.n	800b454 <_realloc_r+0x48>
 800b434:	4621      	mov	r1, r4
 800b436:	4638      	mov	r0, r7
 800b438:	f7ff fe04 	bl	800b044 <_malloc_r>
 800b43c:	4605      	mov	r5, r0
 800b43e:	2800      	cmp	r0, #0
 800b440:	d0f2      	beq.n	800b428 <_realloc_r+0x1c>
 800b442:	4631      	mov	r1, r6
 800b444:	4622      	mov	r2, r4
 800b446:	f7ff fabb 	bl	800a9c0 <memcpy>
 800b44a:	4631      	mov	r1, r6
 800b44c:	4638      	mov	r0, r7
 800b44e:	f7ff fdab 	bl	800afa8 <_free_r>
 800b452:	e7e9      	b.n	800b428 <_realloc_r+0x1c>
 800b454:	4635      	mov	r5, r6
 800b456:	e7e7      	b.n	800b428 <_realloc_r+0x1c>

0800b458 <_malloc_usable_size_r>:
 800b458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b45c:	1f18      	subs	r0, r3, #4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	bfbc      	itt	lt
 800b462:	580b      	ldrlt	r3, [r1, r0]
 800b464:	18c0      	addlt	r0, r0, r3
 800b466:	4770      	bx	lr

0800b468 <_init>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	bf00      	nop
 800b46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46e:	bc08      	pop	{r3}
 800b470:	469e      	mov	lr, r3
 800b472:	4770      	bx	lr

0800b474 <_fini>:
 800b474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b476:	bf00      	nop
 800b478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b47a:	bc08      	pop	{r3}
 800b47c:	469e      	mov	lr, r3
 800b47e:	4770      	bx	lr
