
F303-ECOPENS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800ba48  0800ba48  0001ba48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd68  0800bd68  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd68  0800bd68  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd68  0800bd68  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800bd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  200001f8  0800bf68  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  0800bf68  00020810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001455d  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002992  00000000  00000000  00034785  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001220  00000000  00000000  00037118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c8  00000000  00000000  00038338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d16d  00000000  00000000  00039400  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa54  00000000  00000000  0005656d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae5f9  00000000  00000000  00065fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001145ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  00114638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba30 	.word	0x0800ba30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800ba30 	.word	0x0800ba30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <DWT_Init+0x38>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10e      	bne.n	8000c76 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <DWT_Init+0x38>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <DWT_Init+0x38>)
 8000c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c62:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <DWT_Init+0x3c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <DWT_Init+0x3c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <DWT_Init+0x3c>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6013      	str	r3, [r2, #0]
    }
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000edf0 	.word	0xe000edf0
 8000c84:	e0001000 	.word	0xe0001000

08000c88 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <DWT_Delay+0x40>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <DWT_Delay+0x44>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <DWT_Delay+0x48>)
 8000c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca0:	0c9a      	lsrs	r2, r3, #18
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	fb02 f303 	mul.w	r3, r2, r3
 8000ca8:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000caa:	bf00      	nop
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <DWT_Delay+0x40>)
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d8f8      	bhi.n	8000cac <DWT_Delay+0x24>
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e0001000 	.word	0xe0001000
 8000ccc:	2000001c 	.word	0x2000001c
 8000cd0:	431bde83 	.word	0x431bde83

08000cd4 <getUSARTData>:
	TIM1->CCR1 = setPWM;
	TIM1->CCR5 = setPWM + compWindowOffset;

}

void getUSARTData(){
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
	 if(USART1DataFlag){
 8000cda:	4b91      	ldr	r3, [pc, #580]	; (8000f20 <getUSARTData+0x24c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 811a 	beq.w	8000f18 <getUSARTData+0x244>
		 USART1DataFlag = false;
 8000ce4:	4b8e      	ldr	r3, [pc, #568]	; (8000f20 <getUSARTData+0x24c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
		 if(data[0] == '#'){
 8000cea:	4b8e      	ldr	r3, [pc, #568]	; (8000f24 <getUSARTData+0x250>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b23      	cmp	r3, #35	; 0x23
 8000cf0:	f040 8112 	bne.w	8000f18 <getUSARTData+0x244>
			 if(memcmp(data + 1, "PWM=", 4) == 0 || memcmp(data + 1, "pwm=", 4) == 0){
 8000cf4:	4b8c      	ldr	r3, [pc, #560]	; (8000f28 <getUSARTData+0x254>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	498c      	ldr	r1, [pc, #560]	; (8000f2c <getUSARTData+0x258>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f008 fdae 	bl	800985c <memcmp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d008      	beq.n	8000d18 <getUSARTData+0x44>
 8000d06:	4b88      	ldr	r3, [pc, #544]	; (8000f28 <getUSARTData+0x254>)
 8000d08:	2204      	movs	r2, #4
 8000d0a:	4989      	ldr	r1, [pc, #548]	; (8000f30 <getUSARTData+0x25c>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f008 fda5 	bl	800985c <memcmp>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d155      	bne.n	8000dc4 <getUSARTData+0xf0>
				uint8_t value[4];
				memcpy(value, data + 5, 4);
 8000d18:	4b86      	ldr	r3, [pc, #536]	; (8000f34 <getUSARTData+0x260>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60bb      	str	r3, [r7, #8]
				uint16_t x = atoi(value);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 fd6b 	bl	80097fe <atoi>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	81bb      	strh	r3, [r7, #12]
				if(x){
 8000d2c:	89bb      	ldrh	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 80f1 	beq.w	8000f16 <getUSARTData+0x242>
					x = constrain(x, 1000, 2000);
 8000d34:	89bb      	ldrh	r3, [r7, #12]
 8000d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d3a:	d307      	bcc.n	8000d4c <getUSARTData+0x78>
 8000d3c:	89bb      	ldrh	r3, [r7, #12]
 8000d3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d42:	bf28      	it	cs
 8000d44:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	e001      	b.n	8000d50 <getUSARTData+0x7c>
 8000d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d50:	81bb      	strh	r3, [r7, #12]
					newPWM = map(x, 1000, 2000, PWM_MIN, PWM_MAX);
 8000d52:	89bb      	ldrh	r3, [r7, #12]
 8000d54:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d5c:	fb02 f303 	mul.w	r3, r2, r3
 8000d60:	4a75      	ldr	r2, [pc, #468]	; (8000f38 <getUSARTData+0x264>)
 8000d62:	fb82 1203 	smull	r1, r2, r2, r3
 8000d66:	1192      	asrs	r2, r2, #6
 8000d68:	17db      	asrs	r3, r3, #31
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b73      	ldr	r3, [pc, #460]	; (8000f3c <getUSARTData+0x268>)
 8000d70:	801a      	strh	r2, [r3, #0]
					setPWM = newPWM;
 8000d72:	4b72      	ldr	r3, [pc, #456]	; (8000f3c <getUSARTData+0x268>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	4b71      	ldr	r3, [pc, #452]	; (8000f40 <getUSARTData+0x26c>)
 8000d7a:	801a      	strh	r2, [r3, #0]

					TIM1->CCR1 = setPWM;
 8000d7c:	4b70      	ldr	r3, [pc, #448]	; (8000f40 <getUSARTData+0x26c>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	4b70      	ldr	r3, [pc, #448]	; (8000f44 <getUSARTData+0x270>)
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR5 = setPWM + compWindowOffset;
 8000d86:	4b6e      	ldr	r3, [pc, #440]	; (8000f40 <getUSARTData+0x26c>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b6e      	ldr	r3, [pc, #440]	; (8000f48 <getUSARTData+0x274>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	441a      	add	r2, r3
 8000d96:	4b6b      	ldr	r3, [pc, #428]	; (8000f44 <getUSARTData+0x270>)
 8000d98:	659a      	str	r2, [r3, #88]	; 0x58

					strSize = sprintf((char*)buffer, "PWM: %d\r\n", newPWM);
 8000d9a:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <getUSARTData+0x268>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	496a      	ldr	r1, [pc, #424]	; (8000f4c <getUSARTData+0x278>)
 8000da4:	486a      	ldr	r0, [pc, #424]	; (8000f50 <getUSARTData+0x27c>)
 8000da6:	f009 f9cd 	bl	800a144 <siprintf>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b69      	ldr	r3, [pc, #420]	; (8000f54 <getUSARTData+0x280>)
 8000db0:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 8000db2:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <getUSARTData+0x280>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	2332      	movs	r3, #50	; 0x32
 8000dba:	4965      	ldr	r1, [pc, #404]	; (8000f50 <getUSARTData+0x27c>)
 8000dbc:	4866      	ldr	r0, [pc, #408]	; (8000f58 <getUSARTData+0x284>)
 8000dbe:	f007 fe3d 	bl	8008a3c <HAL_UART_Transmit>
			 if(memcmp(data + 1, "PWM=", 4) == 0 || memcmp(data + 1, "pwm=", 4) == 0){
 8000dc2:	e0a8      	b.n	8000f16 <getUSARTData+0x242>
				}
			}
			else if(memcmp(data + 1, "OCO=", 4) == 0 || memcmp(data + 1, "oco=", 4) == 0){
 8000dc4:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <getUSARTData+0x254>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	4964      	ldr	r1, [pc, #400]	; (8000f5c <getUSARTData+0x288>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f008 fd46 	bl	800985c <memcmp>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d008      	beq.n	8000de8 <getUSARTData+0x114>
 8000dd6:	4b54      	ldr	r3, [pc, #336]	; (8000f28 <getUSARTData+0x254>)
 8000dd8:	2204      	movs	r2, #4
 8000dda:	4961      	ldr	r1, [pc, #388]	; (8000f60 <getUSARTData+0x28c>)
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f008 fd3d 	bl	800985c <memcmp>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d12a      	bne.n	8000e3e <getUSARTData+0x16a>
				uint8_t value[3];
				memcpy(value, data + 5, 3);
 8000de8:	4a52      	ldr	r2, [pc, #328]	; (8000f34 <getUSARTData+0x260>)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	8811      	ldrh	r1, [r2, #0]
 8000dee:	7892      	ldrb	r2, [r2, #2]
 8000df0:	8019      	strh	r1, [r3, #0]
 8000df2:	709a      	strb	r2, [r3, #2]
				uint16_t x = atoi(value);
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4618      	mov	r0, r3
 8000df8:	f008 fd01 	bl	80097fe <atoi>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	81fb      	strh	r3, [r7, #14]
				if(x) oc5Value  = constrain(x, 0, 255);
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <getUSARTData+0x140>
 8000e06:	89fb      	ldrh	r3, [r7, #14]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	bf28      	it	cs
 8000e0c:	23ff      	movcs	r3, #255	; 0xff
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b54      	ldr	r3, [pc, #336]	; (8000f64 <getUSARTData+0x290>)
 8000e12:	801a      	strh	r2, [r3, #0]
				strSize = sprintf((char*)buffer, "oc5: %d\r\n", oc5Value);
 8000e14:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <getUSARTData+0x290>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4952      	ldr	r1, [pc, #328]	; (8000f68 <getUSARTData+0x294>)
 8000e1e:	484c      	ldr	r0, [pc, #304]	; (8000f50 <getUSARTData+0x27c>)
 8000e20:	f009 f990 	bl	800a144 <siprintf>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	4b4a      	ldr	r3, [pc, #296]	; (8000f54 <getUSARTData+0x280>)
 8000e2a:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 8000e2c:	4b49      	ldr	r3, [pc, #292]	; (8000f54 <getUSARTData+0x280>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	2332      	movs	r3, #50	; 0x32
 8000e34:	4946      	ldr	r1, [pc, #280]	; (8000f50 <getUSARTData+0x27c>)
 8000e36:	4848      	ldr	r0, [pc, #288]	; (8000f58 <getUSARTData+0x284>)
 8000e38:	f007 fe00 	bl	8008a3c <HAL_UART_Transmit>
			else if(memcmp(data + 1, "OCO=", 4) == 0 || memcmp(data + 1, "oco=", 4) == 0){
 8000e3c:	e06c      	b.n	8000f18 <getUSARTData+0x244>
			}
			else if(memcmp(data + 1, "STA", 3) == 0 || memcmp(data + 1, "sta", 3) == 0){
 8000e3e:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <getUSARTData+0x254>)
 8000e40:	2203      	movs	r2, #3
 8000e42:	494a      	ldr	r1, [pc, #296]	; (8000f6c <getUSARTData+0x298>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f008 fd09 	bl	800985c <memcmp>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d008      	beq.n	8000e62 <getUSARTData+0x18e>
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <getUSARTData+0x254>)
 8000e52:	2203      	movs	r2, #3
 8000e54:	4946      	ldr	r1, [pc, #280]	; (8000f70 <getUSARTData+0x29c>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f008 fd00 	bl	800985c <memcmp>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d118      	bne.n	8000e94 <getUSARTData+0x1c0>
				motorGotStarted = 1;
 8000e62:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <getUSARTData+0x2a0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
				strSize = sprintf((char*)buffer, "Start Motor\r\n");
 8000e68:	4a39      	ldr	r2, [pc, #228]	; (8000f50 <getUSARTData+0x27c>)
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <getUSARTData+0x2a4>)
 8000e6c:	4614      	mov	r4, r2
 8000e6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e70:	6020      	str	r0, [r4, #0]
 8000e72:	6061      	str	r1, [r4, #4]
 8000e74:	60a2      	str	r2, [r4, #8]
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	81a3      	strh	r3, [r4, #12]
 8000e7a:	230d      	movs	r3, #13
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <getUSARTData+0x280>)
 8000e80:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 8000e82:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <getUSARTData+0x280>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	2332      	movs	r3, #50	; 0x32
 8000e8a:	4931      	ldr	r1, [pc, #196]	; (8000f50 <getUSARTData+0x27c>)
 8000e8c:	4832      	ldr	r0, [pc, #200]	; (8000f58 <getUSARTData+0x284>)
 8000e8e:	f007 fdd5 	bl	8008a3c <HAL_UART_Transmit>
 8000e92:	e041      	b.n	8000f18 <getUSARTData+0x244>
			}
			else if(memcmp(data + 1, "STO", 3) == 0 || memcmp(data + 1, "sto", 3) == 0){
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <getUSARTData+0x254>)
 8000e96:	2203      	movs	r2, #3
 8000e98:	4938      	ldr	r1, [pc, #224]	; (8000f7c <getUSARTData+0x2a8>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f008 fcde 	bl	800985c <memcmp>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d008      	beq.n	8000eb8 <getUSARTData+0x1e4>
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <getUSARTData+0x254>)
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	4935      	ldr	r1, [pc, #212]	; (8000f80 <getUSARTData+0x2ac>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f008 fcd5 	bl	800985c <memcmp>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d12f      	bne.n	8000f18 <getUSARTData+0x244>
				newPWM = setPWM = 0;
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <getUSARTData+0x26c>)
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	801a      	strh	r2, [r3, #0]
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <getUSARTData+0x268>)
 8000ec2:	460a      	mov	r2, r1
 8000ec4:	801a      	strh	r2, [r3, #0]
				TIM1->CCR1 = setPWM;
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <getUSARTData+0x26c>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <getUSARTData+0x270>)
 8000ece:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR5 = setPWM + compWindowOffset;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <getUSARTData+0x26c>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <getUSARTData+0x274>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	441a      	add	r2, r3
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <getUSARTData+0x270>)
 8000ee2:	659a      	str	r2, [r3, #88]	; 0x58
				motorGotStarted = 0;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <getUSARTData+0x2a0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
				strSize = sprintf((char*)buffer, "Stop Motor\r\n");
 8000eea:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <getUSARTData+0x27c>)
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <getUSARTData+0x2b0>)
 8000eee:	4614      	mov	r4, r2
 8000ef0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ef2:	6020      	str	r0, [r4, #0]
 8000ef4:	6061      	str	r1, [r4, #4]
 8000ef6:	60a2      	str	r2, [r4, #8]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	7323      	strb	r3, [r4, #12]
 8000efc:	230c      	movs	r3, #12
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <getUSARTData+0x280>)
 8000f02:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, buffer, strSize, 50);
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <getUSARTData+0x280>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	2332      	movs	r3, #50	; 0x32
 8000f0c:	4910      	ldr	r1, [pc, #64]	; (8000f50 <getUSARTData+0x27c>)
 8000f0e:	4812      	ldr	r0, [pc, #72]	; (8000f58 <getUSARTData+0x284>)
 8000f10:	f007 fd94 	bl	8008a3c <HAL_UART_Transmit>
			}
		}
	 }
}
 8000f14:	e000      	b.n	8000f18 <getUSARTData+0x244>
			 if(memcmp(data + 1, "PWM=", 4) == 0 || memcmp(data + 1, "pwm=", 4) == 0){
 8000f16:	bf00      	nop
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd90      	pop	{r4, r7, pc}
 8000f20:	20000214 	.word	0x20000214
 8000f24:	2000022c 	.word	0x2000022c
 8000f28:	2000022d 	.word	0x2000022d
 8000f2c:	0800ba48 	.word	0x0800ba48
 8000f30:	0800ba50 	.word	0x0800ba50
 8000f34:	20000231 	.word	0x20000231
 8000f38:	10624dd3 	.word	0x10624dd3
 8000f3c:	20000002 	.word	0x20000002
 8000f40:	20000004 	.word	0x20000004
 8000f44:	40012c00 	.word	0x40012c00
 8000f48:	20000006 	.word	0x20000006
 8000f4c:	0800ba58 	.word	0x0800ba58
 8000f50:	200004c4 	.word	0x200004c4
 8000f54:	200007d0 	.word	0x200007d0
 8000f58:	20000430 	.word	0x20000430
 8000f5c:	0800ba64 	.word	0x0800ba64
 8000f60:	0800ba6c 	.word	0x0800ba6c
 8000f64:	20000008 	.word	0x20000008
 8000f68:	0800ba74 	.word	0x0800ba74
 8000f6c:	0800ba80 	.word	0x0800ba80
 8000f70:	0800ba84 	.word	0x0800ba84
 8000f74:	20000215 	.word	0x20000215
 8000f78:	0800ba88 	.word	0x0800ba88
 8000f7c:	0800ba98 	.word	0x0800ba98
 8000f80:	0800ba9c 	.word	0x0800ba9c
 8000f84:	0800baa0 	.word	0x0800baa0

08000f88 <commutateNow_0>:
void commutateNow_0(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2140      	movs	r1, #64	; 0x40
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <commutateNow_0+0x28>)
 8000f92:	f004 fd47 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <commutateNow_0+0x28>)
 8000f9c:	f004 fd42 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa6:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <commutateNow_0+0x28>)
 8000fa8:	f004 fd3c 	bl	8005a24 <HAL_GPIO_WritePin>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <commutateNow_1>:

void commutateNow_1(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <commutateNow_1+0x28>)
 8000fbe:	f004 fd31 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <commutateNow_1+0x28>)
 8000fc8:	f004 fd2c 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2140      	movs	r1, #64	; 0x40
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <commutateNow_1+0x28>)
 8000fd2:	f004 fd27 	bl	8005a24 <HAL_GPIO_WritePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	48000400 	.word	0x48000400

08000fe0 <commutateNow_2>:

void commutateNow_2(void){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <commutateNow_2+0x28>)
 8000fea:	f004 fd1b 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2110      	movs	r1, #16
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <commutateNow_2+0x28>)
 8000ff4:	f004 fd16 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffe:	4802      	ldr	r0, [pc, #8]	; (8001008 <commutateNow_2+0x28>)
 8001000:	f004 fd10 	bl	8005a24 <HAL_GPIO_WritePin>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	48000400 	.word	0x48000400

0800100c <commutateNow_3>:

void commutateNow_3(void){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_RESET); //INH_B connected to ground, IC B Sleep Mode
 8001010:	2200      	movs	r2, #0
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <commutateNow_3+0x28>)
 8001016:	f004 fd05 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_C_GPIO_Port, IN_C_Pin, GPIO_PIN_SET); //IN_C floating, pwm mode
 800101a:	2201      	movs	r2, #1
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <commutateNow_3+0x28>)
 8001020:	f004 fd00 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_SET); //INH_C is high, IC C Active Mode
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <commutateNow_3+0x28>)
 800102c:	f004 fcfa 	bl	8005a24 <HAL_GPIO_WritePin>

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	48000400 	.word	0x48000400

08001038 <commutateNow_4>:

void commutateNow_4(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_RESET); //INH_A connected to ground, IC A Sleep Mode
 800103c:	2200      	movs	r2, #0
 800103e:	2110      	movs	r1, #16
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <commutateNow_4+0x28>)
 8001042:	f004 fcef 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_B_GPIO_Port, IN_B_Pin, GPIO_PIN_RESET); //IN_B connected to ground
 8001046:	2200      	movs	r2, #0
 8001048:	2120      	movs	r1, #32
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <commutateNow_4+0x28>)
 800104c:	f004 fcea 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_B_GPIO_Port, INH_B_Pin, GPIO_PIN_SET); //INH_B is high, IC B Active Mode
 8001050:	2201      	movs	r2, #1
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <commutateNow_4+0x28>)
 8001056:	f004 fce5 	bl	8005a24 <HAL_GPIO_WritePin>

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	48000400 	.word	0x48000400

08001064 <commutateNow_5>:
void commutateNow_5(void){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_A_GPIO_Port, IN_A_Pin, GPIO_PIN_SET); //IN_A connected to ground, PWM Mode
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <commutateNow_5+0x28>)
 800106e:	f004 fcd9 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_A_GPIO_Port, INH_A_Pin, GPIO_PIN_SET); //INH_A is HIGH, IC A Active Mode
 8001072:	2201      	movs	r2, #1
 8001074:	2110      	movs	r1, #16
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <commutateNow_5+0x28>)
 8001078:	f004 fcd4 	bl	8005a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH_C_GPIO_Port, INH_C_Pin, GPIO_PIN_RESET); //INH_C connected to ground, IC C Sleep Mode
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4802      	ldr	r0, [pc, #8]	; (800108c <commutateNow_5+0x28>)
 8001084:	f004 fcce 	bl	8005a24 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	48000400 	.word	0x48000400

08001090 <commutationPattern>:

void commutationPattern(uint8_t step){
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	if (step == NEXT && waitForCommutation == 1) {
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b09      	cmp	r3, #9
 800109e:	f040 80bc 	bne.w	800121a <commutationPattern+0x18a>
 80010a2:	4b77      	ldr	r3, [pc, #476]	; (8001280 <commutationPattern+0x1f0>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80b6 	bne.w	800121a <commutationPattern+0x18a>
		if (commutationStepCounter < STEP_5)
 80010ae:	4b75      	ldr	r3, [pc, #468]	; (8001284 <commutationPattern+0x1f4>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d807      	bhi.n	80010c8 <commutationPattern+0x38>
			commutationStepCounter++;
 80010b8:	4b72      	ldr	r3, [pc, #456]	; (8001284 <commutationPattern+0x1f4>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3301      	adds	r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b70      	ldr	r3, [pc, #448]	; (8001284 <commutationPattern+0x1f4>)
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e026      	b.n	8001116 <commutationPattern+0x86>
		else{
			tim2cnt = __HAL_TIM_GET_COUNTER(&htim2);
 80010c8:	4b6f      	ldr	r3, [pc, #444]	; (8001288 <commutationPattern+0x1f8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	4a6f      	ldr	r2, [pc, #444]	; (800128c <commutationPattern+0x1fc>)
 80010d0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80010d2:	4b6d      	ldr	r3, [pc, #436]	; (8001288 <commutationPattern+0x1f8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
			measuredRPM = getRPM(tim2cnt);
 80010da:	4b6c      	ldr	r3, [pc, #432]	; (800128c <commutationPattern+0x1fc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6c      	ldr	r2, [pc, #432]	; (8001290 <commutationPattern+0x200>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	0e9b      	lsrs	r3, r3, #26
 80010e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa08 	bl	8000504 <__aeabi_ui2d>
 80010f4:	a360      	add	r3, pc, #384	; (adr r3, 8001278 <commutationPattern+0x1e8>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fa7d 	bl	80005f8 <__aeabi_dmul>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	4618      	mov	r0, r3
 8001104:	4621      	mov	r1, r4
 8001106:	f7ff fd4f 	bl	8000ba8 <__aeabi_d2f>
 800110a:	4602      	mov	r2, r0
 800110c:	4b61      	ldr	r3, [pc, #388]	; (8001294 <commutationPattern+0x204>)
 800110e:	601a      	str	r2, [r3, #0]
			commutationStepCounter = STEP_0;
 8001110:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <commutationPattern+0x1f4>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
			//Controller();
		}
		switch (commutationStepCounter) {
 8001116:	4b5b      	ldr	r3, [pc, #364]	; (8001284 <commutationPattern+0x1f4>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b05      	cmp	r3, #5
 800111e:	f200 80a3 	bhi.w	8001268 <commutationPattern+0x1d8>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <commutationPattern+0x98>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	08001141 	.word	0x08001141
 800112c:	08001165 	.word	0x08001165
 8001130:	08001189 	.word	0x08001189
 8001134:	080011ad 	.word	0x080011ad
 8001138:	080011d1 	.word	0x080011d1
 800113c:	080011f5 	.word	0x080011f5
		case STEP_0:
			commutateNow_0();
 8001140:	f7ff ff22 	bl	8000f88 <commutateNow_0>
			COMPDELAY;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	e002      	b.n	8001150 <commutationPattern+0xc0>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3301      	adds	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	2bf9      	cmp	r3, #249	; 0xf9
 8001154:	d9f9      	bls.n	800114a <commutationPattern+0xba>
			waitForCommutation = 0;
 8001156:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <commutationPattern+0x1f0>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 800115c:	484e      	ldr	r0, [pc, #312]	; (8001298 <commutationPattern+0x208>)
 800115e:	f003 fc8d 	bl	8004a7c <HAL_COMP_Start_IT>
			break;
 8001162:	e059      	b.n	8001218 <commutationPattern+0x188>
		case STEP_1:
			commutateNow_1();
 8001164:	f7ff ff26 	bl	8000fb4 <commutateNow_1>
			COMPDELAY;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	e002      	b.n	8001174 <commutationPattern+0xe4>
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	3301      	adds	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bf9      	cmp	r3, #249	; 0xf9
 8001178:	d9f9      	bls.n	800116e <commutationPattern+0xde>
			waitForCommutation = 0;
 800117a:	4b41      	ldr	r3, [pc, #260]	; (8001280 <commutationPattern+0x1f0>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 8001180:	4846      	ldr	r0, [pc, #280]	; (800129c <commutationPattern+0x20c>)
 8001182:	f003 fc7b 	bl	8004a7c <HAL_COMP_Start_IT>
			break;
 8001186:	e047      	b.n	8001218 <commutationPattern+0x188>
		case STEP_2:
			commutateNow_2();
 8001188:	f7ff ff2a 	bl	8000fe0 <commutateNow_2>
			COMPDELAY;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e002      	b.n	8001198 <commutationPattern+0x108>
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2bf9      	cmp	r3, #249	; 0xf9
 800119c:	d9f9      	bls.n	8001192 <commutationPattern+0x102>
			waitForCommutation = 0;
 800119e:	4b38      	ldr	r3, [pc, #224]	; (8001280 <commutationPattern+0x1f0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 80011a4:	483e      	ldr	r0, [pc, #248]	; (80012a0 <commutationPattern+0x210>)
 80011a6:	f003 fc69 	bl	8004a7c <HAL_COMP_Start_IT>
			break;
 80011aa:	e035      	b.n	8001218 <commutationPattern+0x188>
		case STEP_3:
			commutateNow_3();
 80011ac:	f7ff ff2e 	bl	800100c <commutateNow_3>
			COMPDELAY;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	e002      	b.n	80011bc <commutationPattern+0x12c>
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	3301      	adds	r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	2bf9      	cmp	r3, #249	; 0xf9
 80011c0:	d9f9      	bls.n	80011b6 <commutationPattern+0x126>
			waitForCommutation = 0;
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <commutationPattern+0x1f0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp2);
 80011c8:	4833      	ldr	r0, [pc, #204]	; (8001298 <commutationPattern+0x208>)
 80011ca:	f003 fc57 	bl	8004a7c <HAL_COMP_Start_IT>
			break;
 80011ce:	e023      	b.n	8001218 <commutationPattern+0x188>
		case STEP_4:
			commutateNow_4();
 80011d0:	f7ff ff32 	bl	8001038 <commutateNow_4>
			COMPDELAY;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e002      	b.n	80011e0 <commutationPattern+0x150>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2bf9      	cmp	r3, #249	; 0xf9
 80011e4:	d9f9      	bls.n	80011da <commutationPattern+0x14a>
			waitForCommutation = 0;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <commutationPattern+0x1f0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp1);
 80011ec:	482b      	ldr	r0, [pc, #172]	; (800129c <commutationPattern+0x20c>)
 80011ee:	f003 fc45 	bl	8004a7c <HAL_COMP_Start_IT>
			break;
 80011f2:	e011      	b.n	8001218 <commutationPattern+0x188>
		case STEP_5:
			commutateNow_5();
 80011f4:	f7ff ff36 	bl	8001064 <commutateNow_5>
			COMPDELAY;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	e002      	b.n	8001204 <commutationPattern+0x174>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3301      	adds	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2bf9      	cmp	r3, #249	; 0xf9
 8001208:	d9f9      	bls.n	80011fe <commutationPattern+0x16e>
			waitForCommutation = 0;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <commutationPattern+0x1f0>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
			HAL_COMP_Start_IT(&hcomp3);
 8001210:	4823      	ldr	r0, [pc, #140]	; (80012a0 <commutationPattern+0x210>)
 8001212:	f003 fc33 	bl	8004a7c <HAL_COMP_Start_IT>
			break;
 8001216:	bf00      	nop
		}
	} else {
 8001218:	e026      	b.n	8001268 <commutationPattern+0x1d8>
		waitForCommutation = 0;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <commutationPattern+0x1f0>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
		switch (step) {
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b05      	cmp	r3, #5
 8001224:	d821      	bhi.n	800126a <commutationPattern+0x1da>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <commutationPattern+0x19c>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	08001245 	.word	0x08001245
 8001230:	0800124b 	.word	0x0800124b
 8001234:	08001251 	.word	0x08001251
 8001238:	08001257 	.word	0x08001257
 800123c:	0800125d 	.word	0x0800125d
 8001240:	08001263 	.word	0x08001263
		case STEP_0:
			commutateNow_0();
 8001244:	f7ff fea0 	bl	8000f88 <commutateNow_0>
			break;
 8001248:	e00f      	b.n	800126a <commutationPattern+0x1da>
		case STEP_1:
			commutateNow_1();
 800124a:	f7ff feb3 	bl	8000fb4 <commutateNow_1>
			break;
 800124e:	e00c      	b.n	800126a <commutationPattern+0x1da>
		case STEP_2:
			commutateNow_2();
 8001250:	f7ff fec6 	bl	8000fe0 <commutateNow_2>
			break;
 8001254:	e009      	b.n	800126a <commutationPattern+0x1da>
		case STEP_3:
			commutateNow_3();
 8001256:	f7ff fed9 	bl	800100c <commutateNow_3>
			break;
 800125a:	e006      	b.n	800126a <commutationPattern+0x1da>
		case STEP_4:
			commutateNow_4();
 800125c:	f7ff feec 	bl	8001038 <commutateNow_4>
			break;
 8001260:	e003      	b.n	800126a <commutationPattern+0x1da>
		case STEP_5:
			commutateNow_5();
 8001262:	f7ff feff 	bl	8001064 <commutateNow_5>
			break;
 8001266:	e000      	b.n	800126a <commutationPattern+0x1da>
	} else {
 8001268:	bf00      	nop
		}
	}
	//Controller();
}
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	9cea86f2 	.word	0x9cea86f2
 800127c:	3fc55555 	.word	0x3fc55555
 8001280:	20000000 	.word	0x20000000
 8001284:	20000284 	.word	0x20000284
 8001288:	20000750 	.word	0x20000750
 800128c:	200005cc 	.word	0x200005cc
 8001290:	ee9bfab5 	.word	0xee9bfab5
 8001294:	2000021c 	.word	0x2000021c
 8001298:	20000610 	.word	0x20000610
 800129c:	20000324 	.word	0x20000324
 80012a0:	20000640 	.word	0x20000640

080012a4 <startMotor>:
	}
	HAL_Delay(150);
	motorGotStarted = 2;
}*/

void startMotor(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	mode_motor = MODE_MOTOR_START;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <startMotor+0xb0>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
	newPWM = setPWM = 200;
 80012b0:	21c8      	movs	r1, #200	; 0xc8
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <startMotor+0xb4>)
 80012b4:	460a      	mov	r2, r1
 80012b6:	801a      	strh	r2, [r3, #0]
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <startMotor+0xb8>)
 80012ba:	460a      	mov	r2, r1
 80012bc:	801a      	strh	r2, [r3, #0]

	TIM1->CCR1 = setPWM;
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <startMotor+0xb4>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <startMotor+0xbc>)
 80012c6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR5 = setPWM + compWindowOffset;
 80012c8:	4b23      	ldr	r3, [pc, #140]	; (8001358 <startMotor+0xb4>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <startMotor+0xc0>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	441a      	add	r2, r3
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <startMotor+0xbc>)
 80012da:	659a      	str	r2, [r3, #88]	; 0x58

	uint8_t step = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	71fb      	strb	r3, [r7, #7]
	uint16_t i = 2020;
 80012e0:	f240 73e4 	movw	r3, #2020	; 0x7e4
 80012e4:	80bb      	strh	r3, [r7, #4]

	while(i > 1300){
 80012e6:	e018      	b.n	800131a <startMotor+0x76>
		DWT_Delay(i);
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fccc 	bl	8000c88 <DWT_Delay>
		commutationPattern(step);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fecc 	bl	8001090 <commutationPattern>
		step += 1;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	3301      	adds	r3, #1
 80012fc:	71fb      	strb	r3, [r7, #7]
		step %= 6;
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <startMotor+0xc4>)
 8001302:	fba3 1302 	umull	r1, r3, r3, r2
 8001306:	0899      	lsrs	r1, r3, #2
 8001308:	460b      	mov	r3, r1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	440b      	add	r3, r1
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	71fb      	strb	r3, [r7, #7]
		i -= 10;
 8001314:	88bb      	ldrh	r3, [r7, #4]
 8001316:	3b0a      	subs	r3, #10
 8001318:	80bb      	strh	r3, [r7, #4]
	while(i > 1300){
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	f240 5214 	movw	r2, #1300	; 0x514
 8001320:	4293      	cmp	r3, r2
 8001322:	d8e1      	bhi.n	80012e8 <startMotor+0x44>
	HAL_Delay(20);
	commutateNow_4();
	HAL_Delay(20);
	commutateNow_5();
	HAL_Delay(20);*/
	commutationStepCounter = STEP_0;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <startMotor+0xc8>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
	waitForCommutation = 1;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <startMotor+0xcc>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <startMotor+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
	commutationPattern(NEXT);
 8001338:	2009      	movs	r0, #9
 800133a:	f7ff fea9 	bl	8001090 <commutationPattern>
	waitForCommutation = 1;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <startMotor+0xcc>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
	motorGotStarted = 2;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <startMotor+0xd4>)
 8001346:	2202      	movs	r2, #2
 8001348:	701a      	strb	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000228 	.word	0x20000228
 8001358:	20000004 	.word	0x20000004
 800135c:	20000002 	.word	0x20000002
 8001360:	40012c00 	.word	0x40012c00
 8001364:	20000006 	.word	0x20000006
 8001368:	aaaaaaab 	.word	0xaaaaaaab
 800136c:	20000284 	.word	0x20000284
 8001370:	20000000 	.word	0x20000000
 8001374:	20000750 	.word	0x20000750
 8001378:	20000215 	.word	0x20000215

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b598      	push	{r3, r4, r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001380:	f001 fc90 	bl	8002ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001384:	f000 f8fc 	bl	8001580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001388:	f000 fd8c 	bl	8001ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 800138c:	f000 fd6c 	bl	8001e68 <MX_DMA_Init>
  MX_ADC1_Init();
 8001390:	f000 f956 	bl	8001640 <MX_ADC1_Init>
  MX_COMP1_Init();
 8001394:	f000 fa22 	bl	80017dc <MX_COMP1_Init>
  MX_COMP2_Init();
 8001398:	f000 fa50 	bl	800183c <MX_COMP2_Init>
  MX_COMP3_Init();
 800139c:	f000 fa7e 	bl	800189c <MX_COMP3_Init>
  MX_DAC_Init();
 80013a0:	f000 faac 	bl	80018fc <MX_DAC_Init>
  MX_TIM1_Init();
 80013a4:	f000 fad4 	bl	8001950 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013a8:	f000 fbda 	bl	8001b60 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80013ac:	f000 fd2c 	bl	8001e08 <MX_USART1_UART_Init>
  MX_ADC2_Init();
 80013b0:	f000 f9b6 	bl	8001720 <MX_ADC2_Init>
  MX_TIM15_Init();
 80013b4:	f000 fca4 	bl	8001d00 <MX_TIM15_Init>
  MX_TIM2_Init();
 80013b8:	f000 fb84 	bl	8001ac4 <MX_TIM2_Init>
  MX_TIM6_Init();
 80013bc:	f000 fc34 	bl	8001c28 <MX_TIM6_Init>
  MX_TIM7_Init();
 80013c0:	f000 fc68 	bl	8001c94 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80013c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013c8:	f001 fcd2 	bl	8002d70 <HAL_Delay>
  DWT_Init();
 80013cc:	f7ff fc3c 	bl	8000c48 <DWT_Init>

  HAL_TIM_Base_Start(&htim2);
 80013d0:	4856      	ldr	r0, [pc, #344]	; (800152c <main+0x1b0>)
 80013d2:	f005 fe5b 	bl	800708c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80013d6:	4856      	ldr	r0, [pc, #344]	; (8001530 <main+0x1b4>)
 80013d8:	f005 fe82 	bl	80070e0 <HAL_TIM_Base_Start_IT>

  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013dc:	4b55      	ldr	r3, [pc, #340]	; (8001534 <main+0x1b8>)
 80013de:	2201      	movs	r2, #1
 80013e0:	605a      	str	r2, [r3, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013e2:	4b54      	ldr	r3, [pc, #336]	; (8001534 <main+0x1b8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80013e8:	4b52      	ldr	r3, [pc, #328]	; (8001534 <main+0x1b8>)
 80013ea:	2203      	movs	r2, #3
 80013ec:	609a      	str	r2, [r3, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ee:	4b51      	ldr	r3, [pc, #324]	; (8001534 <main+0x1b8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  sConfig.Offset = 0;
 80013f4:	4b4f      	ldr	r3, [pc, #316]	; (8001534 <main+0x1b8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]

  //HAL_ADC_Start(&hadc2);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013fa:	2100      	movs	r1, #0
 80013fc:	484e      	ldr	r0, [pc, #312]	; (8001538 <main+0x1bc>)
 80013fe:	f005 ff49 	bl	8007294 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_5);
 8001402:	2110      	movs	r1, #16
 8001404:	484c      	ldr	r0, [pc, #304]	; (8001538 <main+0x1bc>)
 8001406:	f005 ff45 	bl	8007294 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 800140a:	2104      	movs	r1, #4
 800140c:	484a      	ldr	r0, [pc, #296]	; (8001538 <main+0x1bc>)
 800140e:	f005 febd 	bl	800718c <HAL_TIM_OC_Start>
  HAL_TIM_Base_Start(&htim7);
 8001412:	484a      	ldr	r0, [pc, #296]	; (800153c <main+0x1c0>)
 8001414:	f005 fe3a 	bl	800708c <HAL_TIM_Base_Start>

  //HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001418:	2100      	movs	r1, #0
 800141a:	4849      	ldr	r0, [pc, #292]	; (8001540 <main+0x1c4>)
 800141c:	f003 fe9a 	bl	8005154 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001420:	2300      	movs	r3, #0
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	4846      	ldr	r0, [pc, #280]	; (8001540 <main+0x1c4>)
 8001428:	f003 fe6f 	bl	800510a <HAL_DAC_SetValue>
  newPWM = setPWM = TIM1->CCR1 = TIM1->CCR5 = 0;
 800142c:	4a45      	ldr	r2, [pc, #276]	; (8001544 <main+0x1c8>)
 800142e:	2300      	movs	r3, #0
 8001430:	6593      	str	r3, [r2, #88]	; 0x58
 8001432:	4a44      	ldr	r2, [pc, #272]	; (8001544 <main+0x1c8>)
 8001434:	6353      	str	r3, [r2, #52]	; 0x34
 8001436:	b21a      	sxth	r2, r3
 8001438:	4b43      	ldr	r3, [pc, #268]	; (8001548 <main+0x1cc>)
 800143a:	4611      	mov	r1, r2
 800143c:	8019      	strh	r1, [r3, #0]
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <main+0x1d0>)
 8001440:	801a      	strh	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001442:	4b43      	ldr	r3, [pc, #268]	; (8001550 <main+0x1d4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b41      	ldr	r3, [pc, #260]	; (8001550 <main+0x1d4>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0210 	orr.w	r2, r2, #16
 8001450:	601a      	str	r2, [r3, #0]

  if(HAL_UART_Receive_DMA(&huart1, dma_rx_buf, DMA_BUF_SIZE) != HAL_OK){
 8001452:	2232      	movs	r2, #50	; 0x32
 8001454:	493f      	ldr	r1, [pc, #252]	; (8001554 <main+0x1d8>)
 8001456:	483e      	ldr	r0, [pc, #248]	; (8001550 <main+0x1d4>)
 8001458:	f007 fb84 	bl	8008b64 <HAL_UART_Receive_DMA>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <main+0xea>
	  Error_Handler();
 8001462:	f000 ff27 	bl	80022b4 <Error_Handler>
  }

  __HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <main+0x1d4>)
 8001468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <main+0x1d4>)
 8001470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0204 	bic.w	r2, r2, #4
 8001478:	601a      	str	r2, [r3, #0]

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800147a:	2100      	movs	r1, #0
 800147c:	4836      	ldr	r0, [pc, #216]	; (8001558 <main+0x1dc>)
 800147e:	f005 ff97 	bl	80073b0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 8001482:	2104      	movs	r1, #4
 8001484:	4834      	ldr	r0, [pc, #208]	; (8001558 <main+0x1dc>)
 8001486:	f005 ff93 	bl	80073b0 <HAL_TIM_IC_Start_IT>

  strSize = sprintf((char*)buffer, "Test\r\n");
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <main+0x1e0>)
 800148c:	4a34      	ldr	r2, [pc, #208]	; (8001560 <main+0x1e4>)
 800148e:	6810      	ldr	r0, [r2, #0]
 8001490:	6018      	str	r0, [r3, #0]
 8001492:	8891      	ldrh	r1, [r2, #4]
 8001494:	7992      	ldrb	r2, [r2, #6]
 8001496:	8099      	strh	r1, [r3, #4]
 8001498:	719a      	strb	r2, [r3, #6]
 800149a:	2306      	movs	r3, #6
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <main+0x1e8>)
 80014a0:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <main+0x1e8>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	230a      	movs	r3, #10
 80014aa:	492c      	ldr	r1, [pc, #176]	; (800155c <main+0x1e0>)
 80014ac:	4828      	ldr	r0, [pc, #160]	; (8001550 <main+0x1d4>)
 80014ae:	f007 fac5 	bl	8008a3c <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b8:	482b      	ldr	r0, [pc, #172]	; (8001568 <main+0x1ec>)
 80014ba:	f004 fab3 	bl	8005a24 <HAL_GPIO_WritePin>
  motorGotStarted = 0;
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <main+0x1f0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(motorGotStarted == 1){
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <main+0x1f0>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d104      	bne.n	80014d8 <main+0x15c>
		  startMotor();
 80014ce:	f7ff fee9 	bl	80012a4 <startMotor>
		  HAL_ADC_Start(&hadc1);
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <main+0x1f4>)
 80014d4:	f001 fe6c 	bl	80031b0 <HAL_ADC_Start>
	  }

	  strSize = sprintf((char*)buffer, "%f\r\n", measuredRPM);
 80014d8:	4b26      	ldr	r3, [pc, #152]	; (8001574 <main+0x1f8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f833 	bl	8000548 <__aeabi_f2d>
 80014e2:	4603      	mov	r3, r0
 80014e4:	460c      	mov	r4, r1
 80014e6:	461a      	mov	r2, r3
 80014e8:	4623      	mov	r3, r4
 80014ea:	4923      	ldr	r1, [pc, #140]	; (8001578 <main+0x1fc>)
 80014ec:	481b      	ldr	r0, [pc, #108]	; (800155c <main+0x1e0>)
 80014ee:	f008 fe29 	bl	800a144 <siprintf>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <main+0x1e8>)
 80014f8:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <main+0x1e8>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	b29a      	uxth	r2, r3
 8001500:	230a      	movs	r3, #10
 8001502:	4916      	ldr	r1, [pc, #88]	; (800155c <main+0x1e0>)
 8001504:	4812      	ldr	r0, [pc, #72]	; (8001550 <main+0x1d4>)
 8001506:	f007 fa99 	bl	8008a3c <HAL_UART_Transmit>
	  //uint32_t x = adcIntegral;
	  getUSARTData();
 800150a:	f7ff fbe3 	bl	8000cd4 <getUSARTData>
		  rpm = getRPM(xyz);
		  //strSize = sprintf((char*)buffer, "%f\r\n", rpm);
		  //HAL_UART_Transmit_IT(&huart1, buffer, strSize);
		  readRotation = false;
	  }*/
		if(__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) == SET){
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <main+0x1f4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b04      	cmp	r3, #4
 800151a:	d1d3      	bne.n	80014c4 <main+0x148>
			current_senseADC = HAL_ADC_GetValue(&hadc1);
 800151c:	4814      	ldr	r0, [pc, #80]	; (8001570 <main+0x1f4>)
 800151e:	f002 f8da 	bl	80036d6 <HAL_ADC_GetValue>
 8001522:	4602      	mov	r2, r0
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <main+0x200>)
 8001526:	601a      	str	r2, [r3, #0]
	  if(motorGotStarted == 1){
 8001528:	e7cc      	b.n	80014c4 <main+0x148>
 800152a:	bf00      	nop
 800152c:	20000750 	.word	0x20000750
 8001530:	2000058c 	.word	0x2000058c
 8001534:	20000670 	.word	0x20000670
 8001538:	200005d0 	.word	0x200005d0
 800153c:	20000790 	.word	0x20000790
 8001540:	200004b0 	.word	0x200004b0
 8001544:	40012c00 	.word	0x40012c00
 8001548:	20000004 	.word	0x20000004
 800154c:	20000002 	.word	0x20000002
 8001550:	20000430 	.word	0x20000430
 8001554:	200007d4 	.word	0x200007d4
 8001558:	200002dc 	.word	0x200002dc
 800155c:	200004c4 	.word	0x200004c4
 8001560:	0800bab0 	.word	0x0800bab0
 8001564:	200007d0 	.word	0x200007d0
 8001568:	48000400 	.word	0x48000400
 800156c:	20000215 	.word	0x20000215
 8001570:	20000398 	.word	0x20000398
 8001574:	2000021c 	.word	0x2000021c
 8001578:	0800bab8 	.word	0x0800bab8
 800157c:	20000320 	.word	0x20000320

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b09e      	sub	sp, #120	; 0x78
 8001584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800158a:	2228      	movs	r2, #40	; 0x28
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f008 f973 	bl	800987a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001594:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a4:	463b      	mov	r3, r7
 80015a6:	223c      	movs	r2, #60	; 0x3c
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f008 f965 	bl	800987a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80015ba:	2301      	movs	r3, #1
 80015bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015be:	2301      	movs	r3, #1
 80015c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 fa3c 	bl	8005a54 <HAL_RCC_OscConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015e2:	f000 fe67 	bl	80022b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e6:	230f      	movs	r3, #15
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ea:	2302      	movs	r3, #2
 80015ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001600:	2102      	movs	r1, #2
 8001602:	4618      	mov	r0, r3
 8001604:	f005 f92e 	bl	8006864 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800160e:	f000 fe51 	bl	80022b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8001612:	f241 0381 	movw	r3, #4225	; 0x1081
 8001616:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV10;
 800161c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	4618      	mov	r0, r3
 800162a:	f005 fb53 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001634:	f000 fe3e 	bl	80022b4 <Error_Handler>
  }
}
 8001638:	bf00      	nop
 800163a:	3778      	adds	r7, #120	; 0x78
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001662:	4b2e      	ldr	r3, [pc, #184]	; (800171c <MX_ADC1_Init+0xdc>)
 8001664:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <MX_ADC1_Init+0xdc>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001670:	4b2a      	ldr	r3, [pc, #168]	; (800171c <MX_ADC1_Init+0xdc>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001676:	4b29      	ldr	r3, [pc, #164]	; (800171c <MX_ADC1_Init+0xdc>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <MX_ADC1_Init+0xdc>)
 800167e:	2201      	movs	r2, #1
 8001680:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <MX_ADC1_Init+0xdc>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168a:	4b24      	ldr	r3, [pc, #144]	; (800171c <MX_ADC1_Init+0xdc>)
 800168c:	2200      	movs	r2, #0
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <MX_ADC1_Init+0xdc>)
 8001692:	2201      	movs	r2, #1
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_ADC1_Init+0xdc>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_ADC1_Init+0xdc>)
 800169e:	2201      	movs	r2, #1
 80016a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_ADC1_Init+0xdc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_ADC1_Init+0xdc>)
 80016ac:	2204      	movs	r2, #4
 80016ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_ADC1_Init+0xdc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_ADC1_Init+0xdc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016bc:	4817      	ldr	r0, [pc, #92]	; (800171c <MX_ADC1_Init+0xdc>)
 80016be:	f001 fb97 	bl	8002df0 <HAL_ADC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80016c8:	f000 fdf4 	bl	80022b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_ADC1_Init+0xdc>)
 80016d8:	f002 fe2a 	bl	8004330 <HAL_ADCEx_MultiModeConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80016e2:	f000 fde7 	bl	80022b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016f2:	2301      	movs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_ADC1_Init+0xdc>)
 8001704:	f002 fb28 	bl	8003d58 <HAL_ADC_ConfigChannel>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800170e:	f000 fdd1 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000398 	.word	0x20000398

08001720 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <MX_ADC2_Init+0xb4>)
 8001738:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <MX_ADC2_Init+0xb8>)
 800173a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <MX_ADC2_Init+0xb4>)
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <MX_ADC2_Init+0xb4>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <MX_ADC2_Init+0xb4>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800174e:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_ADC2_Init+0xb4>)
 8001750:	2201      	movs	r2, #1
 8001752:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <MX_ADC2_Init+0xb4>)
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <MX_ADC2_Init+0xb4>)
 800175e:	2200      	movs	r2, #0
 8001760:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_ADC2_Init+0xb4>)
 8001764:	2201      	movs	r2, #1
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_ADC2_Init+0xb4>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_ADC2_Init+0xb4>)
 8001770:	2201      	movs	r2, #1
 8001772:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_ADC2_Init+0xb4>)
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_ADC2_Init+0xb4>)
 800177e:	2204      	movs	r2, #4
 8001780:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_ADC2_Init+0xb4>)
 8001784:	2200      	movs	r2, #0
 8001786:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_ADC2_Init+0xb4>)
 800178a:	2200      	movs	r2, #0
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800178e:	4811      	ldr	r0, [pc, #68]	; (80017d4 <MX_ADC2_Init+0xb4>)
 8001790:	f001 fb2e 	bl	8002df0 <HAL_ADC_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800179a:	f000 fd8b 	bl	80022b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800179e:	2302      	movs	r3, #2
 80017a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017aa:	2301      	movs	r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	4619      	mov	r1, r3
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <MX_ADC2_Init+0xb4>)
 80017bc:	f002 facc 	bl	8003d58 <HAL_ADC_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80017c6:	f000 fd75 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000288 	.word	0x20000288
 80017d8:	50000100 	.word	0x50000100

080017dc <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_COMP1_Init+0x58>)
 80017e2:	4a15      	ldr	r2, [pc, #84]	; (8001838 <MX_COMP1_Init+0x5c>)
 80017e4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_COMP1_Init+0x58>)
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	605a      	str	r2, [r3, #4]
  hcomp1.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_COMP1_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Output = COMP_OUTPUT_NONE;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_COMP1_Init+0x58>)
 80017f4:	227f      	movs	r2, #127	; 0x7f
 80017f6:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_COMP1_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <MX_COMP1_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_COMP1_Init+0x58>)
 8001806:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800180a:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_MODE_HIGHSPEED;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_COMP1_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_COMP1_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_COMP1_Init+0x58>)
 800181a:	2203      	movs	r2, #3
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_COMP1_Init+0x58>)
 8001820:	f002 ffe4 	bl	80047ec <HAL_COMP_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_COMP1_Init+0x52>
  {
    Error_Handler();
 800182a:	f000 fd43 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000324 	.word	0x20000324
 8001838:	4001001c 	.word	0x4001001c

0800183c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_COMP2_Init+0x58>)
 8001842:	4a15      	ldr	r2, [pc, #84]	; (8001898 <MX_COMP2_Init+0x5c>)
 8001844:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <MX_COMP2_Init+0x58>)
 8001848:	2240      	movs	r2, #64	; 0x40
 800184a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_COMP2_Init+0x58>)
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_NONE;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <MX_COMP2_Init+0x58>)
 8001854:	227f      	movs	r2, #127	; 0x7f
 8001856:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <MX_COMP2_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <MX_COMP2_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MX_COMP2_Init+0x58>)
 8001866:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800186a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <MX_COMP2_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <MX_COMP2_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <MX_COMP2_Init+0x58>)
 800187a:	2203      	movs	r2, #3
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800187e:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_COMP2_Init+0x58>)
 8001880:	f002 ffb4 	bl	80047ec <HAL_COMP_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 800188a:	f000 fd13 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000610 	.word	0x20000610
 8001898:	40010020 	.word	0x40010020

0800189c <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018a2:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <MX_COMP3_Init+0x5c>)
 80018a4:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InvertingInput = COMP_INVERTINGINPUT_DAC1_CH1;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018a8:	2240      	movs	r2, #64	; 0x40
 80018aa:	605a      	str	r2, [r3, #4]
  hcomp3.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hcomp3.Init.Output = COMP_OUTPUT_NONE;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018b4:	227f      	movs	r2, #127	; 0x7f
 80018b6:	60da      	str	r2, [r3, #12]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRCE_TIM1OC5;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018ca:	619a      	str	r2, [r3, #24]
  hcomp3.Init.Mode = COMP_MODE_HIGHSPEED;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  hcomp3.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018da:	2203      	movs	r2, #3
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_COMP3_Init+0x58>)
 80018e0:	f002 ff84 	bl	80047ec <HAL_COMP_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_COMP3_Init+0x52>
  {
    Error_Handler();
 80018ea:	f000 fce3 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000640 	.word	0x20000640
 80018f8:	40010024 	.word	0x40010024

080018fc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_DAC_Init+0x4c>)
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <MX_DAC_Init+0x50>)
 8001910:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <MX_DAC_Init+0x4c>)
 8001914:	f003 fbcd 	bl	80050b2 <HAL_DAC_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800191e:	f000 fcc9 	bl	80022b4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_DAC_Init+0x4c>)
 8001932:	f003 fcb4 	bl	800529e <HAL_DAC_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 800193c:	f000 fcba 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200004b0 	.word	0x200004b0
 800194c:	40007400 	.word	0x40007400

08001950 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b096      	sub	sp, #88	; 0x58
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001956:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	615a      	str	r2, [r3, #20]
 8001974:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	222c      	movs	r2, #44	; 0x2c
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f007 ff7c 	bl	800987a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <MX_TIM1_Init+0x16c>)
 8001984:	4a4e      	ldr	r2, [pc, #312]	; (8001ac0 <MX_TIM1_Init+0x170>)
 8001986:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2 - 1;
 8001988:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <MX_TIM1_Init+0x16c>)
 800198a:	2201      	movs	r2, #1
 800198c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <MX_TIM1_Init+0x16c>)
 8001990:	2260      	movs	r2, #96	; 0x60
 8001992:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1800 - 1;
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <MX_TIM1_Init+0x16c>)
 8001996:	f240 7207 	movw	r2, #1799	; 0x707
 800199a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <MX_TIM1_Init+0x16c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019a2:	4b46      	ldr	r3, [pc, #280]	; (8001abc <MX_TIM1_Init+0x16c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b44      	ldr	r3, [pc, #272]	; (8001abc <MX_TIM1_Init+0x16c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019ae:	4843      	ldr	r0, [pc, #268]	; (8001abc <MX_TIM1_Init+0x16c>)
 80019b0:	f005 fc44 	bl	800723c <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80019ba:	f000 fc7b 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80019be:	483f      	ldr	r0, [pc, #252]	; (8001abc <MX_TIM1_Init+0x16c>)
 80019c0:	f005 fbb8 	bl	8007134 <HAL_TIM_OC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80019ca:	f000 fc73 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019de:	4619      	mov	r1, r3
 80019e0:	4836      	ldr	r0, [pc, #216]	; (8001abc <MX_TIM1_Init+0x16c>)
 80019e2:	f006 fec1 	bl	8008768 <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80019ec:	f000 fc62 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f0:	2360      	movs	r3, #96	; 0x60
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100;
 80019f4:	2364      	movs	r3, #100	; 0x64
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001a00:	2304      	movs	r3, #4
 8001a02:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8001a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a12:	2200      	movs	r2, #0
 8001a14:	4619      	mov	r1, r3
 8001a16:	4829      	ldr	r0, [pc, #164]	; (8001abc <MX_TIM1_Init+0x16c>)
 8001a18:	f005 ff72 	bl	8007900 <HAL_TIM_PWM_ConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001a22:	f000 fc47 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001a26:	2330      	movs	r3, #48	; 0x30
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a32:	2204      	movs	r2, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4821      	ldr	r0, [pc, #132]	; (8001abc <MX_TIM1_Init+0x16c>)
 8001a38:	f005 fe48 	bl	80076cc <HAL_TIM_OC_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001a42:	f000 fc37 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a46:	2360      	movs	r3, #96	; 0x60
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 120;
 8001a4a:	2378      	movs	r3, #120	; 0x78
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8001a52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a56:	2210      	movs	r2, #16
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4818      	ldr	r0, [pc, #96]	; (8001abc <MX_TIM1_Init+0x16c>)
 8001a5c:	f005 ff50 	bl	8007900 <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001a66:	f000 fc25 	bl	80022b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4807      	ldr	r0, [pc, #28]	; (8001abc <MX_TIM1_Init+0x16c>)
 8001aa0:	f006 fee2 	bl	8008868 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8001aaa:	f000 fc03 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aae:	4803      	ldr	r0, [pc, #12]	; (8001abc <MX_TIM1_Init+0x16c>)
 8001ab0:	f000 fe6e 	bl	8002790 <HAL_TIM_MspPostInit>

}
 8001ab4:	bf00      	nop
 8001ab6:	3758      	adds	r7, #88	; 0x58
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200005d0 	.word	0x200005d0
 8001ac0:	40012c00 	.word	0x40012c00

08001ac4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b0a:	4814      	ldr	r0, [pc, #80]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001b0c:	f005 fa92 	bl	8007034 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b16:	f000 fbcd 	bl	80022b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001b28:	f006 f802 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b32:	f000 fbbf 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <MX_TIM2_Init+0x98>)
 8001b44:	f006 fe10 	bl	8008768 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b4e:	f000 fbb1 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000750 	.word	0x20000750

08001b60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b72:	463b      	mov	r3, r7
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
 8001b80:	615a      	str	r2, [r3, #20]
 8001b82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001b86:	4a27      	ldr	r2, [pc, #156]	; (8001c24 <MX_TIM3_Init+0xc4>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000;
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001b98:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001b9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001baa:	481d      	ldr	r0, [pc, #116]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001bac:	f005 fac2 	bl	8007134 <HAL_TIM_OC_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001bb6:	f000 fb7d 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4815      	ldr	r0, [pc, #84]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001bca:	f006 fdcd 	bl	8008768 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001bd4:	f000 fb6e 	bl	80022b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001bdc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001be0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001bf2:	f005 fd6b 	bl	80076cc <HAL_TIM_OC_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001bfc:	f000 fb5a 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c00:	463b      	mov	r3, r7
 8001c02:	2204      	movs	r2, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <MX_TIM3_Init+0xc0>)
 8001c08:	f005 fd60 	bl	80076cc <HAL_TIM_OC_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001c12:	f000 fb4f 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	; 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000354 	.word	0x20000354
 8001c24:	40000400 	.word	0x40000400

08001c28 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c40:	2247      	movs	r2, #71	; 0x47
 8001c42:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c50:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c5a:	f005 f9eb 	bl	8007034 <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c64:	f000 fb26 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c76:	f006 fd77 	bl	8008768 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c80:	f000 fb18 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000058c 	.word	0x2000058c
 8001c90:	40001000 	.word	0x40001000

08001c94 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001ca6:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <MX_TIM7_Init+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72 - 1;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cac:	2247      	movs	r2, #71	; 0x47
 8001cae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cbc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cc6:	f005 f9b5 	bl	8007034 <HAL_TIM_Base_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001cd0:	f000 faf0 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001ce2:	f006 fd41 	bl	8008768 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001cec:	f000 fae2 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000790 	.word	0x20000790
 8001cfc:	40001400 	.word	0x40001400

08001d00 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d2c:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d2e:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <MX_TIM15_Init+0x104>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72 - 1;
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d34:	2247      	movs	r2, #71	; 0x47
 8001d36:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d44:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001d58:	4829      	ldr	r0, [pc, #164]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d5a:	f005 f96b 	bl	8007034 <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8001d64:	f000 faa6 	bl	80022b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	4619      	mov	r1, r3
 8001d74:	4822      	ldr	r0, [pc, #136]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d76:	f005 fedb 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8001d80:	f000 fa98 	bl	80022b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001d84:	481e      	ldr	r0, [pc, #120]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001d86:	f005 fadd 	bl	8007344 <HAL_TIM_IC_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001d90:	f000 fa90 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4817      	ldr	r0, [pc, #92]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001da4:	f006 fce0 	bl	8008768 <HAL_TIMEx_MasterConfigSynchronization>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8001dae:	f000 fa81 	bl	80022b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001db6:	2301      	movs	r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001dca:	f005 fcfd 	bl	80077c8 <HAL_TIM_IC_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001dd4:	f000 fa6e 	bl	80022b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2204      	movs	r2, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4806      	ldr	r0, [pc, #24]	; (8001e00 <MX_TIM15_Init+0x100>)
 8001de8:	f005 fcee 	bl	80077c8 <HAL_TIM_IC_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001df2:	f000 fa5f 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	3730      	adds	r7, #48	; 0x30
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200002dc 	.word	0x200002dc
 8001e04:	40014000 	.word	0x40014000

08001e08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e0e:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <MX_USART1_UART_Init+0x5c>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_USART1_UART_Init+0x58>)
 8001e4c:	f006 fda8 	bl	80089a0 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e56:	f000 fa2d 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000430 	.word	0x20000430
 8001e64:	40013800 	.word	0x40013800

08001e68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_DMA_Init+0x38>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <MX_DMA_Init+0x38>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6153      	str	r3, [r2, #20]
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_DMA_Init+0x38>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f003 f8db 	bl	8005046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e90:	200f      	movs	r0, #15
 8001e92:	f003 f8f4 	bl	800507e <HAL_NVIC_EnableIRQ>

}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <MX_GPIO_Init+0xc8>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <MX_GPIO_Init+0xc8>)
 8001ec0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ec4:	6153      	str	r3, [r2, #20]
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <MX_GPIO_Init+0xc8>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <MX_GPIO_Init+0xc8>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4a25      	ldr	r2, [pc, #148]	; (8001f6c <MX_GPIO_Init+0xc8>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	6153      	str	r3, [r2, #20]
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <MX_GPIO_Init+0xc8>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <MX_GPIO_Init+0xc8>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <MX_GPIO_Init+0xc8>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef4:	6153      	str	r3, [r2, #20]
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <MX_GPIO_Init+0xc8>)
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|LED1_Pin
 8001f02:	2200      	movs	r2, #0
 8001f04:	f243 51fb 	movw	r1, #13819	; 0x35fb
 8001f08:	4819      	ldr	r0, [pc, #100]	; (8001f70 <MX_GPIO_Init+0xcc>)
 8001f0a:	f003 fd8b 	bl	8005a24 <HAL_GPIO_WritePin>
                          |LED2_Pin|IN_A_Pin|INH_A_Pin|IN_B_Pin
                          |INH_B_Pin|IN_C_Pin|INH_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ADC_PHASEA_Pin */
  GPIO_InitStruct.Pin = ADC_PHASEA_Pin;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f12:	2303      	movs	r3, #3
 8001f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ADC_PHASEA_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f24:	f003 fc04 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_A_Pin OUT_B_Pin OUT_C_Pin IN_A_Pin
                           IN_B_Pin IN_C_Pin */
  GPIO_InitStruct.Pin = OUT_A_Pin|OUT_B_Pin|OUT_C_Pin|IN_A_Pin
 8001f28:	f240 43ab 	movw	r3, #1195	; 0x4ab
 8001f2c:	60fb      	str	r3, [r7, #12]
                          |IN_B_Pin|IN_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f2e:	2311      	movs	r3, #17
 8001f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480b      	ldr	r0, [pc, #44]	; (8001f70 <MX_GPIO_Init+0xcc>)
 8001f42:	f003 fbf5 	bl	8005730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin INH_A_Pin INH_B_Pin
                           INH_C_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|INH_A_Pin|INH_B_Pin
 8001f46:	f243 1350 	movw	r3, #12624	; 0x3150
 8001f4a:	60fb      	str	r3, [r7, #12]
                          |INH_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4804      	ldr	r0, [pc, #16]	; (8001f70 <MX_GPIO_Init+0xcc>)
 8001f60:	f003 fbe6 	bl	8005730 <HAL_GPIO_Init>

}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	48000400 	.word	0x48000400

08001f74 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    uint16_t i, pos, start, length;
    uint16_t currCNDTR = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	823b      	strh	r3, [r7, #16]

    /* Ignore IDLE Timeout when the received characters exactly filled up the DMA buffer and DMA Rx Complete IT is generated, but there is no new character during timeout */
    if(dma_uart_rx.flag && currCNDTR == DMA_BUF_SIZE)
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_UART_RxCpltCallback+0x2a>
 8001f90:	8a3b      	ldrh	r3, [r7, #16]
 8001f92:	2b32      	cmp	r3, #50	; 0x32
 8001f94:	d103      	bne.n	8001f9e <HAL_UART_RxCpltCallback+0x2a>
    {
        dma_uart_rx.flag = 0;
 8001f96:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
        return;
 8001f9c:	e045      	b.n	800202a <HAL_UART_RxCpltCallback+0xb6>
    }

    /* Determine start position in DMA buffer based on previous CNDTR value */
    start = (dma_uart_rx.prevCNDTR < DMA_BUF_SIZE) ? (DMA_BUF_SIZE - dma_uart_rx.prevCNDTR) : 0;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001fa0:	889b      	ldrh	r3, [r3, #4]
 8001fa2:	2b31      	cmp	r3, #49	; 0x31
 8001fa4:	d805      	bhi.n	8001fb2 <HAL_UART_RxCpltCallback+0x3e>
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001fa8:	889b      	ldrh	r3, [r3, #4]
 8001faa:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	e000      	b.n	8001fb4 <HAL_UART_RxCpltCallback+0x40>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	81fb      	strh	r3, [r7, #14]

    if(dma_uart_rx.flag)    /* Timeout event */
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d015      	beq.n	8001fec <HAL_UART_RxCpltCallback+0x78>
    {
        /* Determine new data length based on previous DMA_CNDTR value:
         *  If previous CNDTR is less than DMA buffer size: there is old data in DMA buffer (from previous timeout) that has to be ignored.
         *  If CNDTR == DMA buffer size: entire buffer content is new and has to be processed.
        */
        length = (dma_uart_rx.prevCNDTR < DMA_BUF_SIZE) ? (dma_uart_rx.prevCNDTR - currCNDTR) : (DMA_BUF_SIZE - currCNDTR);
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001fc2:	889b      	ldrh	r3, [r3, #4]
 8001fc4:	2b31      	cmp	r3, #49	; 0x31
 8001fc6:	d805      	bhi.n	8001fd4 <HAL_UART_RxCpltCallback+0x60>
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001fca:	889a      	ldrh	r2, [r3, #4]
 8001fcc:	8a3b      	ldrh	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	e003      	b.n	8001fdc <HAL_UART_RxCpltCallback+0x68>
 8001fd4:	8a3b      	ldrh	r3, [r7, #16]
 8001fd6:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	827b      	strh	r3, [r7, #18]
        dma_uart_rx.prevCNDTR = currCNDTR;
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001fe0:	8a3b      	ldrh	r3, [r7, #16]
 8001fe2:	8093      	strh	r3, [r2, #4]
        dma_uart_rx.flag = 0;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e006      	b.n	8001ffa <HAL_UART_RxCpltCallback+0x86>
    }
    else                /* DMA Rx Complete event */
    {
        length = DMA_BUF_SIZE - start;
 8001fec:	89fb      	ldrh	r3, [r7, #14]
 8001fee:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001ff2:	827b      	strh	r3, [r7, #18]
        dma_uart_rx.prevCNDTR = DMA_BUF_SIZE;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_UART_RxCpltCallback+0xc0>)
 8001ff6:	2232      	movs	r2, #50	; 0x32
 8001ff8:	809a      	strh	r2, [r3, #4]
    }

    /* Copy and Process new data */
    for(i=0,pos=start; i<length; ++i,++pos)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	82fb      	strh	r3, [r7, #22]
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	82bb      	strh	r3, [r7, #20]
 8002002:	e00b      	b.n	800201c <HAL_UART_RxCpltCallback+0xa8>
    {
        data[i] = dma_rx_buf[pos];
 8002004:	8aba      	ldrh	r2, [r7, #20]
 8002006:	8afb      	ldrh	r3, [r7, #22]
 8002008:	490b      	ldr	r1, [pc, #44]	; (8002038 <HAL_UART_RxCpltCallback+0xc4>)
 800200a:	5c89      	ldrb	r1, [r1, r2]
 800200c:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_UART_RxCpltCallback+0xc8>)
 800200e:	54d1      	strb	r1, [r2, r3]
    for(i=0,pos=start; i<length; ++i,++pos)
 8002010:	8afb      	ldrh	r3, [r7, #22]
 8002012:	3301      	adds	r3, #1
 8002014:	82fb      	strh	r3, [r7, #22]
 8002016:	8abb      	ldrh	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	82bb      	strh	r3, [r7, #20]
 800201c:	8afa      	ldrh	r2, [r7, #22]
 800201e:	8a7b      	ldrh	r3, [r7, #18]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3ef      	bcc.n	8002004 <HAL_UART_RxCpltCallback+0x90>
    }
    USART1DataFlag = true;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_UART_RxCpltCallback+0xcc>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]

}
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	20000014 	.word	0x20000014
 8002038:	200007d4 	.word	0x200007d4
 800203c:	2000022c 	.word	0x2000022c
 8002040:	20000214 	.word	0x20000214

08002044 <HAL_COMP_TriggerCallback>:
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){

	}
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	0000      	movs	r0, r0
	...

08002070 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	static uint32_t Count_FallingEdge;
	static uint32_t Count_Freq1;
	static uint32_t Count_Freq2;
	static bool Freq_State;

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7f1b      	ldrb	r3, [r3, #28]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d13d      	bne.n	80020fc <HAL_TIM_IC_CaptureCallback+0x8c>
		Count_RisingEdge = TIM15->CCR1;
 8002080:	4b77      	ldr	r3, [pc, #476]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	4a77      	ldr	r2, [pc, #476]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8002086:	6013      	str	r3, [r2, #0]

		if(Freq_State == 0){
 8002088:	4b77      	ldr	r3, [pc, #476]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f083 0301 	eor.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_TIM_IC_CaptureCallback+0x36>
			Freq_State = 1;
 8002096:	4b74      	ldr	r3, [pc, #464]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
			Count_Freq1 = Count_RisingEdge;
 800209c:	4b71      	ldr	r3, [pc, #452]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a72      	ldr	r2, [pc, #456]	; (800226c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e074      	b.n	8002190 <HAL_TIM_IC_CaptureCallback+0x120>

		}
		else if(Freq_State == 1){
 80020a6:	4b70      	ldr	r3, [pc, #448]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d070      	beq.n	8002190 <HAL_TIM_IC_CaptureCallback+0x120>
			Freq_State = 0;
 80020ae:	4b6e      	ldr	r3, [pc, #440]	; (8002268 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
			Count_Freq2 = Count_RisingEdge;
 80020b4:	4b6b      	ldr	r3, [pc, #428]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a6d      	ldr	r2, [pc, #436]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x200>)
 80020ba:	6013      	str	r3, [r2, #0]
			if(Count_Freq2 > Count_Freq1) inputFrequency = 1/((float)Count_Freq2 - (float)Count_Freq1) * 1000000; //in kHz;
 80020bc:	4b6c      	ldr	r3, [pc, #432]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x200>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d963      	bls.n	8002190 <HAL_TIM_IC_CaptureCallback+0x120>
 80020c8:	4b69      	ldr	r3, [pc, #420]	; (8002270 <HAL_TIM_IC_CaptureCallback+0x200>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020d4:	4b65      	ldr	r3, [pc, #404]	; (800226c <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ec:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002274 <HAL_TIM_IC_CaptureCallback+0x204>
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	4b60      	ldr	r3, [pc, #384]	; (8002278 <HAL_TIM_IC_CaptureCallback+0x208>)
 80020f6:	edc3 7a00 	vstr	s15, [r3]
 80020fa:	e049      	b.n	8002190 <HAL_TIM_IC_CaptureCallback+0x120>
		}
	}

	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7f1b      	ldrb	r3, [r3, #28]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d145      	bne.n	8002190 <HAL_TIM_IC_CaptureCallback+0x120>
		Count_FallingEdge = TIM15->CCR2;
 8002104:	4b56      	ldr	r3, [pc, #344]	; (8002260 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8002106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002108:	4a5c      	ldr	r2, [pc, #368]	; (800227c <HAL_TIM_IC_CaptureCallback+0x20c>)
 800210a:	6013      	str	r3, [r2, #0]

		if(Count_RisingEdge < Count_FallingEdge){
 800210c:	4b55      	ldr	r3, [pc, #340]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b5a      	ldr	r3, [pc, #360]	; (800227c <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d23b      	bcs.n	8002190 <HAL_TIM_IC_CaptureCallback+0x120>
			inputDutyCycle = Count_FallingEdge - Count_RisingEdge;
 8002118:	4b58      	ldr	r3, [pc, #352]	; (800227c <HAL_TIM_IC_CaptureCallback+0x20c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b51      	ldr	r3, [pc, #324]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	4a57      	ldr	r2, [pc, #348]	; (8002280 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002124:	6013      	str	r3, [r2, #0]
			input_pwm_min = inputDutyCycle < input_pwm_min ? inputDutyCycle : input_pwm_min;
 8002126:	4b57      	ldr	r3, [pc, #348]	; (8002284 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	4b54      	ldr	r3, [pc, #336]	; (8002280 <HAL_TIM_IC_CaptureCallback+0x210>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4293      	cmp	r3, r2
 8002132:	bf28      	it	cs
 8002134:	4613      	movcs	r3, r2
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b52      	ldr	r3, [pc, #328]	; (8002284 <HAL_TIM_IC_CaptureCallback+0x214>)
 800213a:	801a      	strh	r2, [r3, #0]
			input_pwm_max = inputDutyCycle > input_pwm_max ? inputDutyCycle : input_pwm_max;
 800213c:	4b52      	ldr	r3, [pc, #328]	; (8002288 <HAL_TIM_IC_CaptureCallback+0x218>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4293      	cmp	r3, r2
 8002148:	bf38      	it	cc
 800214a:	4613      	movcc	r3, r2
 800214c:	b29a      	uxth	r2, r3
 800214e:	4b4e      	ldr	r3, [pc, #312]	; (8002288 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002150:	801a      	strh	r2, [r3, #0]

			//strSize = sprintf((char*)buffer, "DutyCycle: %lu, Frequency: %f\r\n", inputDutyCycle, inputFrequency);
			//HAL_UART_Transmit(&huart1, buffer, strSize, 10);

			newPWM = map(inputDutyCycle, input_pwm_min, input_pwm_max, PWM_MIN, PWM_MAX);
 8002152:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a4b      	ldr	r2, [pc, #300]	; (8002284 <HAL_TIM_IC_CaptureCallback+0x214>)
 8002158:	8812      	ldrh	r2, [r2, #0]
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	4a48      	ldr	r2, [pc, #288]	; (8002288 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002166:	8812      	ldrh	r2, [r2, #0]
 8002168:	4611      	mov	r1, r2
 800216a:	4a46      	ldr	r2, [pc, #280]	; (8002284 <HAL_TIM_IC_CaptureCallback+0x214>)
 800216c:	8812      	ldrh	r2, [r2, #0]
 800216e:	1a8a      	subs	r2, r1, r2
 8002170:	fbb3 f3f2 	udiv	r3, r3, r2
 8002174:	b21a      	sxth	r2, r3
 8002176:	4b45      	ldr	r3, [pc, #276]	; (800228c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002178:	801a      	strh	r2, [r3, #0]
			setPWM = newPWM;
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_TIM_IC_CaptureCallback+0x21c>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b21a      	sxth	r2, r3
 8002180:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002182:	801a      	strh	r2, [r3, #0]

			//inputRPM = map(inputDutyCycle, input_pwm_min, input_pwm_max, 0, 7000);

			Count_RisingEdge = 0;
 8002184:	4b37      	ldr	r3, [pc, #220]	; (8002264 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
			Count_FallingEdge = 0;
 800218a:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_TIM_IC_CaptureCallback+0x20c>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
		}
	}

	if(inputFrequency >= FREQ_INPUT_PWM_MIN && inputFrequency <= FREQ_INPUT_PWM_MAX){
 8002190:	4b39      	ldr	r3, [pc, #228]	; (8002278 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002294 <HAL_TIM_IC_CaptureCallback+0x224>
 800219a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a2:	da00      	bge.n	80021a6 <HAL_TIM_IC_CaptureCallback+0x136>
			//Controller();
			TIM1->CCR1 = setPWM;
			TIM1->CCR5 = setPWM + compWindowOffset;
		}*/
	}
}
 80021a4:	e053      	b.n	800224e <HAL_TIM_IC_CaptureCallback+0x1de>
	if(inputFrequency >= FREQ_INPUT_PWM_MIN && inputFrequency <= FREQ_INPUT_PWM_MAX){
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_TIM_IC_CaptureCallback+0x208>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f9cc 	bl	8000548 <__aeabi_f2d>
 80021b0:	a329      	add	r3, pc, #164	; (adr r3, 8002258 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe fc9b 	bl	8000af0 <__aeabi_dcmple>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d100      	bne.n	80021c2 <HAL_TIM_IC_CaptureCallback+0x152>
}
 80021c0:	e045      	b.n	800224e <HAL_TIM_IC_CaptureCallback+0x1de>
		if(setPWM >= 200 && motorGotStarted == 0){
 80021c2:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_TIM_IC_CaptureCallback+0x220>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	2bc7      	cmp	r3, #199	; 0xc7
 80021ca:	dd1c      	ble.n	8002206 <HAL_TIM_IC_CaptureCallback+0x196>
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_TIM_IC_CaptureCallback+0x228>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d117      	bne.n	8002206 <HAL_TIM_IC_CaptureCallback+0x196>
			motorGotStarted = 1;
 80021d6:	4b30      	ldr	r3, [pc, #192]	; (8002298 <HAL_TIM_IC_CaptureCallback+0x228>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
			strSize = sprintf((char*)buffer, "Motor Started\r\n");
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <HAL_TIM_IC_CaptureCallback+0x22c>)
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <HAL_TIM_IC_CaptureCallback+0x230>)
 80021e0:	4614      	mov	r4, r2
 80021e2:	461d      	mov	r5, r3
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	6020      	str	r0, [r4, #0]
 80021e8:	6061      	str	r1, [r4, #4]
 80021ea:	60a2      	str	r2, [r4, #8]
 80021ec:	60e3      	str	r3, [r4, #12]
 80021ee:	230f      	movs	r3, #15
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80021f4:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, buffer, strSize, 10);
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	230a      	movs	r3, #10
 80021fe:	4927      	ldr	r1, [pc, #156]	; (800229c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002200:	4829      	ldr	r0, [pc, #164]	; (80022a8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002202:	f006 fc1b 	bl	8008a3c <HAL_UART_Transmit>
		if(setPWM <= 50 && motorGotStarted != 0) {
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b21b      	sxth	r3, r3
 800220c:	2b32      	cmp	r3, #50	; 0x32
 800220e:	dc0a      	bgt.n	8002226 <HAL_TIM_IC_CaptureCallback+0x1b6>
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_TIM_IC_CaptureCallback+0x1b6>
			TIM1->CCR1 = 0;
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_TIM_IC_CaptureCallback+0x23c>)
 800221c:	2200      	movs	r2, #0
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR5 = 0;
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002222:	2200      	movs	r2, #0
 8002224:	659a      	str	r2, [r3, #88]	; 0x58
		if(motorGotStarted == 2){
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d10e      	bne.n	800224e <HAL_TIM_IC_CaptureCallback+0x1de>
			TIM1->CCR1 = setPWM;
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b21a      	sxth	r2, r3
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR5 = setPWM + compWindowOffset;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_TIM_IC_CaptureCallback+0x220>)
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b21b      	sxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b21b      	sxth	r3, r3
 8002248:	441a      	add	r2, r3
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_TIM_IC_CaptureCallback+0x23c>)
 800224c:	659a      	str	r2, [r3, #88]	; 0x58
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bdb0      	pop	{r4, r5, r7, pc}
 8002256:	bf00      	nop
 8002258:	9999999a 	.word	0x9999999a
 800225c:	40489999 	.word	0x40489999
 8002260:	40014000 	.word	0x40014000
 8002264:	20000260 	.word	0x20000260
 8002268:	20000264 	.word	0x20000264
 800226c:	20000268 	.word	0x20000268
 8002270:	2000026c 	.word	0x2000026c
 8002274:	49742400 	.word	0x49742400
 8002278:	20000224 	.word	0x20000224
 800227c:	20000270 	.word	0x20000270
 8002280:	20000220 	.word	0x20000220
 8002284:	20000010 	.word	0x20000010
 8002288:	20000012 	.word	0x20000012
 800228c:	20000002 	.word	0x20000002
 8002290:	20000004 	.word	0x20000004
 8002294:	42440000 	.word	0x42440000
 8002298:	20000215 	.word	0x20000215
 800229c:	200004c4 	.word	0x200004c4
 80022a0:	0800bac0 	.word	0x0800bac0
 80022a4:	200007d0 	.word	0x200007d0
 80022a8:	20000430 	.word	0x20000430
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	20000006 	.word	0x20000006

080022b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_MspInit+0x44>)
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_MspInit+0x44>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6193      	str	r3, [r2, #24]
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_MspInit+0x44>)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_MspInit+0x44>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <HAL_MspInit+0x44>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	61d3      	str	r3, [r2, #28]
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_MspInit+0x44>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	; 0x30
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800232c:	d136      	bne.n	800239c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_ADC_MspInit+0x110>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	4a39      	ldr	r2, [pc, #228]	; (800241c <HAL_ADC_MspInit+0x110>)
 8002336:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002338:	4b38      	ldr	r3, [pc, #224]	; (800241c <HAL_ADC_MspInit+0x110>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10b      	bne.n	8002358 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002340:	4b37      	ldr	r3, [pc, #220]	; (8002420 <HAL_ADC_MspInit+0x114>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	4a36      	ldr	r2, [pc, #216]	; (8002420 <HAL_ADC_MspInit+0x114>)
 8002346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234a:	6153      	str	r3, [r2, #20]
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <HAL_ADC_MspInit+0x114>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b31      	ldr	r3, [pc, #196]	; (8002420 <HAL_ADC_MspInit+0x114>)
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4a30      	ldr	r2, [pc, #192]	; (8002420 <HAL_ADC_MspInit+0x114>)
 800235e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002362:	6153      	str	r3, [r2, #20]
 8002364:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_ADC_MspInit+0x114>)
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_CS_Pin;
 8002370:	2301      	movs	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002374:	2303      	movs	r3, #3
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002386:	f003 f9d3 	bl	8005730 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	2012      	movs	r0, #18
 8002390:	f002 fe59 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002394:	2012      	movs	r0, #18
 8002396:	f002 fe72 	bl	800507e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800239a:	e03a      	b.n	8002412 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a20      	ldr	r2, [pc, #128]	; (8002424 <HAL_ADC_MspInit+0x118>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d135      	bne.n	8002412 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_ADC_MspInit+0x110>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	4a1b      	ldr	r2, [pc, #108]	; (800241c <HAL_ADC_MspInit+0x110>)
 80023ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_ADC_MspInit+0x110>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d10b      	bne.n	80023d0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_ADC_MspInit+0x114>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	4a18      	ldr	r2, [pc, #96]	; (8002420 <HAL_ADC_MspInit+0x114>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6153      	str	r3, [r2, #20]
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <HAL_ADC_MspInit+0x114>)
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_ADC_MspInit+0x114>)
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_ADC_MspInit+0x114>)
 80023d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023da:	6153      	str	r3, [r2, #20]
 80023dc:	4b10      	ldr	r3, [pc, #64]	; (8002420 <HAL_ADC_MspInit+0x114>)
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_PHASEA_Pin|ADC_PHASEB_Pin|ADC_PHASEC_Pin;
 80023e8:	23e0      	movs	r3, #224	; 0xe0
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ec:	2303      	movs	r3, #3
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4619      	mov	r1, r3
 80023fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fe:	f003 f997 	bl	8005730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	2012      	movs	r0, #18
 8002408:	f002 fe1d 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800240c:	2012      	movs	r0, #18
 800240e:	f002 fe36 	bl	800507e <HAL_NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3730      	adds	r7, #48	; 0x30
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000274 	.word	0x20000274
 8002420:	40021000 	.word	0x40021000
 8002424:	50000100 	.word	0x50000100

08002428 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <HAL_COMP_MspInit+0x108>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d121      	bne.n	800248e <HAL_COMP_MspInit+0x66>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_COMP_MspInit+0x10c>)
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4a39      	ldr	r2, [pc, #228]	; (8002534 <HAL_COMP_MspInit+0x10c>)
 8002450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002454:	6153      	str	r3, [r2, #20]
 8002456:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_COMP_MspInit+0x10c>)
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PA1     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = COMP_PHASEA_Pin;
 8002462:	2302      	movs	r3, #2
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002466:	2303      	movs	r3, #3
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEA_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002478:	f003 f95a 	bl	8005730 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	2040      	movs	r0, #64	; 0x40
 8002482:	f002 fde0 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8002486:	2040      	movs	r0, #64	; 0x40
 8002488:	f002 fdf9 	bl	800507e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP3_MspInit 1 */

  /* USER CODE END COMP3_MspInit 1 */
  }

}
 800248c:	e04c      	b.n	8002528 <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a29      	ldr	r2, [pc, #164]	; (8002538 <HAL_COMP_MspInit+0x110>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d121      	bne.n	80024dc <HAL_COMP_MspInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_COMP_MspInit+0x10c>)
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	4a25      	ldr	r2, [pc, #148]	; (8002534 <HAL_COMP_MspInit+0x10c>)
 800249e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a2:	6153      	str	r3, [r2, #20]
 80024a4:	4b23      	ldr	r3, [pc, #140]	; (8002534 <HAL_COMP_MspInit+0x10c>)
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = COMP_PHASEB_Pin;
 80024b0:	2308      	movs	r3, #8
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b4:	2303      	movs	r3, #3
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEB_GPIO_Port, &GPIO_InitStruct);
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4619      	mov	r1, r3
 80024c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c6:	f003 f933 	bl	8005730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2040      	movs	r0, #64	; 0x40
 80024d0:	f002 fdb9 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80024d4:	2040      	movs	r0, #64	; 0x40
 80024d6:	f002 fdd2 	bl	800507e <HAL_NVIC_EnableIRQ>
}
 80024da:	e025      	b.n	8002528 <HAL_COMP_MspInit+0x100>
  else if(hcomp->Instance==COMP3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a16      	ldr	r2, [pc, #88]	; (800253c <HAL_COMP_MspInit+0x114>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d120      	bne.n	8002528 <HAL_COMP_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_COMP_MspInit+0x10c>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <HAL_COMP_MspInit+0x10c>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f0:	6153      	str	r3, [r2, #20]
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_COMP_MspInit+0x10c>)
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = COMP_PHASEC_Pin;
 80024fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002504:	2303      	movs	r3, #3
 8002506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(COMP_PHASEC_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	480b      	ldr	r0, [pc, #44]	; (8002540 <HAL_COMP_MspInit+0x118>)
 8002514:	f003 f90c 	bl	8005730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	2040      	movs	r0, #64	; 0x40
 800251e:	f002 fd92 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8002522:	2040      	movs	r0, #64	; 0x40
 8002524:	f002 fdab 	bl	800507e <HAL_NVIC_EnableIRQ>
}
 8002528:	bf00      	nop
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	4001001c 	.word	0x4001001c
 8002534:	40021000 	.word	0x40021000
 8002538:	40010020 	.word	0x40010020
 800253c:	40010024 	.word	0x40010024
 8002540:	48000400 	.word	0x48000400

08002544 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_DAC_MspInit+0x84>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d12c      	bne.n	80025c0 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_DAC_MspInit+0x88>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a18      	ldr	r2, [pc, #96]	; (80025cc <HAL_DAC_MspInit+0x88>)
 800256c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_DAC_MspInit+0x88>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_DAC_MspInit+0x88>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <HAL_DAC_MspInit+0x88>)
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	6153      	str	r3, [r2, #20]
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_DAC_MspInit+0x88>)
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002596:	2310      	movs	r3, #16
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800259a:	2303      	movs	r3, #3
 800259c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f003 f8c0 	bl	8005730 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2102      	movs	r1, #2
 80025b4:	2036      	movs	r0, #54	; 0x36
 80025b6:	f002 fd46 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025ba:	2036      	movs	r0, #54	; 0x36
 80025bc:	f002 fd5f 	bl	800507e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	; 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40007400 	.word	0x40007400
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_TIM_PWM_MspInit+0x54>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d11b      	bne.n	800261a <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_TIM_PWM_MspInit+0x58>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <HAL_TIM_PWM_MspInit+0x58>)
 80025e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025ec:	6193      	str	r3, [r2, #24]
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_TIM_PWM_MspInit+0x58>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	2018      	movs	r0, #24
 8002600:	f002 fd21 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002604:	2018      	movs	r0, #24
 8002606:	f002 fd3a 	bl	800507e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	201b      	movs	r0, #27
 8002610:	f002 fd19 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002614:	201b      	movs	r0, #27
 8002616:	f002 fd32 	bl	800507e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264c:	d10c      	bne.n	8002668 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800264e:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a38      	ldr	r2, [pc, #224]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	61d3      	str	r3, [r2, #28]
 800265a:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002666:	e061      	b.n	800272c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM6)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a32      	ldr	r2, [pc, #200]	; (8002738 <HAL_TIM_Base_MspInit+0x10c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d114      	bne.n	800269c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4a2f      	ldr	r2, [pc, #188]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 8002678:	f043 0310 	orr.w	r3, r3, #16
 800267c:	61d3      	str	r3, [r2, #28]
 800267e:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2102      	movs	r1, #2
 800268e:	2036      	movs	r0, #54	; 0x36
 8002690:	f002 fcd9 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002694:	2036      	movs	r0, #54	; 0x36
 8002696:	f002 fcf2 	bl	800507e <HAL_NVIC_EnableIRQ>
}
 800269a:	e047      	b.n	800272c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM7)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a26      	ldr	r2, [pc, #152]	; (800273c <HAL_TIM_Base_MspInit+0x110>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10c      	bne.n	80026c0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	4a22      	ldr	r2, [pc, #136]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 80026ac:	f043 0320 	orr.w	r3, r3, #32
 80026b0:	61d3      	str	r3, [r2, #28]
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
}
 80026be:	e035      	b.n	800272c <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM15)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1e      	ldr	r2, [pc, #120]	; (8002740 <HAL_TIM_Base_MspInit+0x114>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d130      	bne.n	800272c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80026ca:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	4a19      	ldr	r2, [pc, #100]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6193      	str	r3, [r2, #24]
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4a13      	ldr	r2, [pc, #76]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	6153      	str	r3, [r2, #20]
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_TIM_Base_MspInit+0x108>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMIN_Pin;
 80026fa:	2304      	movs	r3, #4
 80026fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002702:	2302      	movs	r3, #2
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800270a:	2309      	movs	r3, #9
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWMIN_GPIO_Port, &GPIO_InitStruct);
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002718:	f003 f80a 	bl	8005730 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	2018      	movs	r0, #24
 8002722:	f002 fc90 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002726:	2018      	movs	r0, #24
 8002728:	f002 fca9 	bl	800507e <HAL_NVIC_EnableIRQ>
}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	40001000 	.word	0x40001000
 800273c:	40001400 	.word	0x40001400
 8002740:	40014000 	.word	0x40014000

08002744 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0d      	ldr	r2, [pc, #52]	; (8002788 <HAL_TIM_OC_MspInit+0x44>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d113      	bne.n	800277e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_TIM_OC_MspInit+0x48>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_TIM_OC_MspInit+0x48>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	61d3      	str	r3, [r2, #28]
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_TIM_OC_MspInit+0x48>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	201d      	movs	r0, #29
 8002774:	f002 fc67 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002778:	201d      	movs	r0, #29
 800277a:	f002 fc80 	bl	800507e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40000400 	.word	0x40000400
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <HAL_TIM_MspPostInit+0x68>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d11d      	bne.n	80027ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_TIM_MspPostInit+0x6c>)
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	4a11      	ldr	r2, [pc, #68]	; (80027fc <HAL_TIM_MspPostInit+0x6c>)
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	6153      	str	r3, [r2, #20]
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_TIM_MspPostInit+0x6c>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMOUT_Pin;
 80027ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027d4:	2302      	movs	r3, #2
 80027d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80027d8:	2301      	movs	r3, #1
 80027da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80027dc:	2306      	movs	r3, #6
 80027de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWMOUT_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 030c 	add.w	r3, r7, #12
 80027e4:	4619      	mov	r1, r3
 80027e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ea:	f002 ffa1 	bl	8005730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027ee:	bf00      	nop
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40021000 	.word	0x40021000

08002800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <HAL_UART_MspInit+0xdc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d157      	bne.n	80028d2 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002822:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_UART_MspInit+0xe0>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	4a2e      	ldr	r2, [pc, #184]	; (80028e0 <HAL_UART_MspInit+0xe0>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282c:	6193      	str	r3, [r2, #24]
 800282e:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <HAL_UART_MspInit+0xe0>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_UART_MspInit+0xe0>)
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4a28      	ldr	r2, [pc, #160]	; (80028e0 <HAL_UART_MspInit+0xe0>)
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	6153      	str	r3, [r2, #20]
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <HAL_UART_MspInit+0xe0>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002852:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002860:	2303      	movs	r3, #3
 8002862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002864:	2307      	movs	r3, #7
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002872:	f002 ff5d 	bl	8005730 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 8002878:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_UART_MspInit+0xe8>)
 800287a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 8002896:	2200      	movs	r2, #0
 8002898:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 800289c:	2220      	movs	r2, #32
 800289e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028a6:	480f      	ldr	r0, [pc, #60]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 80028a8:	f002 fd50 	bl	800534c <HAL_DMA_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80028b2:	f7ff fcff 	bl	80022b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 80028ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80028bc:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_UART_MspInit+0xe4>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2101      	movs	r1, #1
 80028c6:	2025      	movs	r0, #37	; 0x25
 80028c8:	f002 fbbd 	bl	8005046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028cc:	2025      	movs	r0, #37	; 0x25
 80028ce:	f002 fbd6 	bl	800507e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	; 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40013800 	.word	0x40013800
 80028e0:	40021000 	.word	0x40021000
 80028e4:	200003e8 	.word	0x200003e8
 80028e8:	40020058 	.word	0x40020058

080028ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <HardFault_Handler+0x4>

08002900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <MemManage_Handler+0x4>

08002906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <BusFault_Handler+0x4>

0800290c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <UsageFault_Handler+0x4>

08002912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002940:	f000 f9f6 	bl	8002d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(dma_uart_rx.timer == 1)
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <SysTick_Handler+0x38>)
 8002946:	885b      	ldrh	r3, [r3, #2]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <SysTick_Handler+0x1e>
     {
         /* DMA Timeout event: set Timeout Flag and call DMA Rx Complete Callback */
         dma_uart_rx.flag = 1;
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <SysTick_Handler+0x38>)
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
         hdma_usart1_rx.XferCpltCallback(&hdma_usart1_rx);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <SysTick_Handler+0x3c>)
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	4808      	ldr	r0, [pc, #32]	; (8002978 <SysTick_Handler+0x3c>)
 8002958:	4798      	blx	r3
     }
     if(dma_uart_rx.timer) { --dma_uart_rx.timer; }
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <SysTick_Handler+0x38>)
 800295c:	885b      	ldrh	r3, [r3, #2]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <SysTick_Handler+0x32>
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <SysTick_Handler+0x38>)
 8002964:	885b      	ldrh	r3, [r3, #2]
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	4b02      	ldr	r3, [pc, #8]	; (8002974 <SysTick_Handler+0x38>)
 800296c:	805a      	strh	r2, [r3, #2]
  /* USER CODE END SysTick_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000014 	.word	0x20000014
 8002978:	200003e8 	.word	0x200003e8

0800297c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <DMA1_Channel5_IRQHandler+0x10>)
 8002982:	f002 fdc7 	bl	8005514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200003e8 	.word	0x200003e8

08002990 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	if(__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) == SET){
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <ADC1_2_IRQHandler+0x94>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d123      	bne.n	80029ea <ADC1_2_IRQHandler+0x5a>
		if(__HAL_TIM_GET_COUNTER(&htim1) > __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1)){
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <ADC1_2_IRQHandler+0x98>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a8:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <ADC1_2_IRQHandler+0x98>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d91b      	bls.n	80029ea <ADC1_2_IRQHandler+0x5a>
			adcIntegral += HAL_ADC_GetValue(&hadc2) * ((float)__HAL_TIM_GET_COUNTER(&htim7) * 0.000001f);
 80029b2:	481c      	ldr	r0, [pc, #112]	; (8002a24 <ADC1_2_IRQHandler+0x94>)
 80029b4:	f000 fe8f 	bl	80036d6 <HAL_ADC_GetValue>
 80029b8:	ee07 0a90 	vmov	s15, r0
 80029bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <ADC1_2_IRQHandler+0x9c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ce:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002a30 <ADC1_2_IRQHandler+0xa0>
 80029d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <ADC1_2_IRQHandler+0xa4>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <ADC1_2_IRQHandler+0xa4>)
 80029e6:	edc3 7a00 	vstr	s15, [r3]
		}
	}
	if(adcIntegral >= adcOffset){
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <ADC1_2_IRQHandler+0xa4>)
 80029ec:	ed93 7a00 	vldr	s14, [r3]
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <ADC1_2_IRQHandler+0xa8>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fe:	db09      	blt.n	8002a14 <ADC1_2_IRQHandler+0x84>
		HAL_ADC_Stop_IT(&hadc2);
 8002a00:	4808      	ldr	r0, [pc, #32]	; (8002a24 <ADC1_2_IRQHandler+0x94>)
 8002a02:	f000 fe2b 	bl	800365c <HAL_ADC_Stop_IT>
		adcIntegral = 0;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <ADC1_2_IRQHandler+0xa4>)
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
		commutationPattern(NEXT);
 8002a0e:	2009      	movs	r0, #9
 8002a10:	f7fe fb3e 	bl	8001090 <commutationPattern>
	}
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a14:	4809      	ldr	r0, [pc, #36]	; (8002a3c <ADC1_2_IRQHandler+0xac>)
 8002a16:	f000 fe6b 	bl	80036f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002a1a:	4802      	ldr	r0, [pc, #8]	; (8002a24 <ADC1_2_IRQHandler+0x94>)
 8002a1c:	f000 fe68 	bl	80036f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000288 	.word	0x20000288
 8002a28:	200005d0 	.word	0x200005d0
 8002a2c:	20000790 	.word	0x20000790
 8002a30:	358637bd 	.word	0x358637bd
 8002a34:	20000218 	.word	0x20000218
 8002a38:	2000000c 	.word	0x2000000c
 8002a3c:	20000398 	.word	0x20000398

08002a40 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a44:	4803      	ldr	r0, [pc, #12]	; (8002a54 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8002a46:	f004 fd21 	bl	800748c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002a4a:	4803      	ldr	r0, [pc, #12]	; (8002a58 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002a4c:	f004 fd1e 	bl	800748c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	200005d0 	.word	0x200005d0
 8002a58:	200002dc 	.word	0x200002dc

08002a5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
		//HAL_ADC_Stop(&hadc2);
		commutationPattern(NEXT);
	}*/

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <TIM1_CC_IRQHandler+0x10>)
 8002a62:	f004 fd13 	bl	800748c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200005d0 	.word	0x200005d0

08002a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	//if((__HAL_TIM_GET_FLAG(&htim3,TIM_FLAG_CC1)== SET) && waitForCommutation == 1)
	//{
		//commutationPattern(NEXT);
	//}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <TIM3_IRQHandler+0x10>)
 8002a76:	f004 fd09 	bl	800748c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000354 	.word	0x20000354

08002a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    if((USART1->ISR & USART_ISR_IDLE) != RESET)
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <USART1_IRQHandler+0x28>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <USART1_IRQHandler+0x1c>
    {
        USART1->ICR = UART_CLEAR_IDLEF;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <USART1_IRQHandler+0x28>)
 8002a96:	2210      	movs	r2, #16
 8002a98:	621a      	str	r2, [r3, #32]
        /* Start DMA timer */
        dma_uart_rx.timer = DMA_TIMEOUT_MS;
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <USART1_IRQHandler+0x2c>)
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	805a      	strh	r2, [r3, #2]
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aa0:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <USART1_IRQHandler+0x30>)
 8002aa2:	f006 f8e3 	bl	8008c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	20000014 	.word	0x20000014
 8002ab4:	20000430 	.word	0x20000430

08002ab8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002abc:	4803      	ldr	r0, [pc, #12]	; (8002acc <TIM6_DAC_IRQHandler+0x14>)
 8002abe:	f004 fce5 	bl	800748c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8002ac2:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <TIM6_DAC_IRQHandler+0x18>)
 8002ac4:	f002 fb91 	bl	80051ea <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	2000058c 	.word	0x2000058c
 8002ad0:	200004b0 	.word	0x200004b0

08002ad4 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */
	TIM1->CCR5 = setPWM + compWindowOffset;
 8002ad8:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <COMP1_2_3_IRQHandler+0xb8>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <COMP1_2_3_IRQHandler+0xbc>)
 8002ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae4:	441a      	add	r2, r3
 8002ae6:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <COMP1_2_3_IRQHandler+0xc0>)
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58

	if(__HAL_COMP_COMP1_EXTI_GET_FLAG() && waitForCommutation == 0){
 8002aea:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <COMP1_2_3_IRQHandler+0xc4>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00d      	beq.n	8002b12 <COMP1_2_3_IRQHandler+0x3e>
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <COMP1_2_3_IRQHandler+0xc8>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <COMP1_2_3_IRQHandler+0x3e>
		HAL_COMP_Stop_IT(&hcomp1);
 8002afe:	4828      	ldr	r0, [pc, #160]	; (8002ba0 <COMP1_2_3_IRQHandler+0xcc>)
 8002b00:	f002 f8b0 	bl	8004c64 <HAL_COMP_Stop_IT>
		sConfig.Channel = ADC_CHANNEL_2;
 8002b04:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <COMP1_2_3_IRQHandler+0xd0>)
 8002b06:	2202      	movs	r2, #2
 8002b08:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutationTimerCounterAverage + commutationTimerOffset);
		__HAL_TIM_SET_COUNTER(&htim3, 0);

		for(uint8_t i = 0; i<5; i++) commutationTimerCounterArray[i] = commutationTimerCounterArray[i+1];*/

		waitForCommutation = 1;
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <COMP1_2_3_IRQHandler+0xc8>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e026      	b.n	8002b60 <COMP1_2_3_IRQHandler+0x8c>

	}

	else if(__HAL_COMP_COMP2_EXTI_GET_FLAG() && waitForCommutation == 0){
 8002b12:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <COMP1_2_3_IRQHandler+0xc4>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <COMP1_2_3_IRQHandler+0x66>
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <COMP1_2_3_IRQHandler+0xc8>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <COMP1_2_3_IRQHandler+0x66>
		HAL_COMP_Stop_IT(&hcomp2);
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <COMP1_2_3_IRQHandler+0xd4>)
 8002b28:	f002 f89c 	bl	8004c64 <HAL_COMP_Stop_IT>
		sConfig.Channel = ADC_CHANNEL_3;
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <COMP1_2_3_IRQHandler+0xd0>)
 8002b2e:	2203      	movs	r2, #3
 8002b30:	601a      	str	r2, [r3, #0]
		commutationTimerCounterAverage = (commutationTimerCounterArray[0]+commutationTimerCounterArray[1]+commutationTimerCounterArray[2]+commutationTimerCounterArray[3]+commutationTimerCounterArray[4]+commutationTimerCounterArray[5])/12;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutationTimerCounterAverage + commutationTimerOffset);
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		for(uint8_t i = 0; i<5; i++) commutationTimerCounterArray[i] = commutationTimerCounterArray[i+1];*/

		waitForCommutation = 1;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <COMP1_2_3_IRQHandler+0xc8>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e012      	b.n	8002b60 <COMP1_2_3_IRQHandler+0x8c>
	}

	else if(__HAL_COMP_COMP3_EXTI_GET_FLAG() && waitForCommutation == 0){
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <COMP1_2_3_IRQHandler+0xc4>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00c      	beq.n	8002b60 <COMP1_2_3_IRQHandler+0x8c>
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <COMP1_2_3_IRQHandler+0xc8>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d108      	bne.n	8002b60 <COMP1_2_3_IRQHandler+0x8c>
		HAL_COMP_Stop_IT(&hcomp3);
 8002b4e:	4817      	ldr	r0, [pc, #92]	; (8002bac <COMP1_2_3_IRQHandler+0xd8>)
 8002b50:	f002 f888 	bl	8004c64 <HAL_COMP_Stop_IT>
		sConfig.Channel = ADC_CHANNEL_4;
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <COMP1_2_3_IRQHandler+0xd0>)
 8002b56:	2204      	movs	r2, #4
 8002b58:	601a      	str	r2, [r3, #0]
		commutationTimerCounterAverage = (commutationTimerCounterArray[0]+commutationTimerCounterArray[1]+commutationTimerCounterArray[2]+commutationTimerCounterArray[3]+commutationTimerCounterArray[4]+commutationTimerCounterArray[5])/12;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutationTimerCounterAverage + commutationTimerOffset);
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		for(uint8_t i = 0; i<5; i++) commutationTimerCounterArray[i] = commutationTimerCounterArray[i+1];*/

		waitForCommutation = 1;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <COMP1_2_3_IRQHandler+0xc8>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
	}

	//TIM1->CCR5 = setPWM + compWindowOffset;
	//TIM1->CCR1 = setPWM;

	HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8002b60:	4910      	ldr	r1, [pc, #64]	; (8002ba4 <COMP1_2_3_IRQHandler+0xd0>)
 8002b62:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <COMP1_2_3_IRQHandler+0xdc>)
 8002b64:	f001 f8f8 	bl	8003d58 <HAL_ADC_ConfigChannel>
	__HAL_TIM_SET_COUNTER(&htim7, 0);
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <COMP1_2_3_IRQHandler+0xe0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start_IT(&hadc2);
 8002b70:	480f      	ldr	r0, [pc, #60]	; (8002bb0 <COMP1_2_3_IRQHandler+0xdc>)
 8002b72:	f000 fc33 	bl	80033dc <HAL_ADC_Start_IT>
	HAL_ADC_Stop(&hadc2);
	adcIntegral = 0;
	commutationPattern(NEXT);*/

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8002b76:	480a      	ldr	r0, [pc, #40]	; (8002ba0 <COMP1_2_3_IRQHandler+0xcc>)
 8002b78:	f002 f91a 	bl	8004db0 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 8002b7c:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <COMP1_2_3_IRQHandler+0xd4>)
 8002b7e:	f002 f917 	bl	8004db0 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp3);
 8002b82:	480a      	ldr	r0, [pc, #40]	; (8002bac <COMP1_2_3_IRQHandler+0xd8>)
 8002b84:	f002 f914 	bl	8004db0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000004 	.word	0x20000004
 8002b90:	20000006 	.word	0x20000006
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40010400 	.word	0x40010400
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	20000324 	.word	0x20000324
 8002ba4:	20000670 	.word	0x20000670
 8002ba8:	20000610 	.word	0x20000610
 8002bac:	20000640 	.word	0x20000640
 8002bb0:	20000288 	.word	0x20000288
 8002bb4:	20000790 	.word	0x20000790

08002bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <_sbrk+0x5c>)
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <_sbrk+0x60>)
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <_sbrk+0x64>)
 8002bd6:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <_sbrk+0x68>)
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d207      	bcs.n	8002bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be8:	f006 fe0e 	bl	8009808 <__errno>
 8002bec:	4602      	mov	r2, r0
 8002bee:	230c      	movs	r3, #12
 8002bf0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	e009      	b.n	8002c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <_sbrk+0x64>)
 8002c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	2000a000 	.word	0x2000a000
 8002c18:	00000400 	.word	0x00000400
 8002c1c:	20000278 	.word	0x20000278
 8002c20:	20000810 	.word	0x20000810

08002c24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <SystemInit+0x28>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <SystemInit+0x28>)
 8002c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <SystemInit+0x28>)
 8002c3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c3e:	609a      	str	r2, [r3, #8]
#endif
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c56:	e003      	b.n	8002c60 <LoopCopyDataInit>

08002c58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c5e:	3104      	adds	r1, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c68:	d3f6      	bcc.n	8002c58 <CopyDataInit>
	ldr	r2, =_sbss
 8002c6a:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c6c:	e002      	b.n	8002c74 <LoopFillZerobss>

08002c6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c70:	f842 3b04 	str.w	r3, [r2], #4

08002c74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <LoopForever+0x16>)
	cmp	r2, r3
 8002c76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c78:	d3f9      	bcc.n	8002c6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c7a:	f7ff ffd3 	bl	8002c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c7e:	f006 fdc9 	bl	8009814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c82:	f7fe fb7b 	bl	800137c <main>

08002c86 <LoopForever>:

LoopForever:
    b LoopForever
 8002c86:	e7fe      	b.n	8002c86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c88:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002c8c:	0800bd70 	.word	0x0800bd70
	ldr	r0, =_sdata
 8002c90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c94:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8002c98:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8002c9c:	20000810 	.word	0x20000810

08002ca0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ca0:	e7fe      	b.n	8002ca0 <ADC3_IRQHandler>
	...

08002ca4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_Init+0x28>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <HAL_Init+0x28>)
 8002cae:	f043 0310 	orr.w	r3, r3, #16
 8002cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f002 f9bb 	bl	8005030 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f000 f808 	bl	8002cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc0:	f7ff fb00 	bl	80022c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40022000 	.word	0x40022000

08002cd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_InitTick+0x54>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_InitTick+0x58>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f002 f9d3 	bl	800509a <HAL_SYSTICK_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00e      	b.n	8002d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d80a      	bhi.n	8002d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d04:	2200      	movs	r2, #0
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	f002 f99b 	bl	8005046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d10:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <HAL_InitTick+0x5c>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	2000001c 	.word	0x2000001c
 8002d28:	20000024 	.word	0x20000024
 8002d2c:	20000020 	.word	0x20000020

08002d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x20>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_IncTick+0x24>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_IncTick+0x24>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000024 	.word	0x20000024
 8002d54:	20000808 	.word	0x20000808

08002d58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_GetTick+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000808 	.word	0x20000808

08002d70 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7ff ffee 	bl	8002d58 <HAL_GetTick>
 8002d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d005      	beq.n	8002d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_Delay+0x40>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002d96:	bf00      	nop
 8002d98:	f7ff ffde 	bl	8002d58 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d8f7      	bhi.n	8002d98 <HAL_Delay+0x28>
  {
  }
}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000024 	.word	0x20000024

08002db4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b09a      	sub	sp, #104	; 0x68
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e1c9      	b.n	80031a4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d176      	bne.n	8002f10 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d152      	bne.n	8002ed0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fa61 	bl	800230c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d13b      	bne.n	8002ed0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f001 fbb9 	bl	80045d0 <ADC_Disable>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d12f      	bne.n	8002ed0 <HAL_ADC_Init+0xe0>
 8002e70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d12b      	bne.n	8002ed0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e80:	f023 0302 	bic.w	r3, r3, #2
 8002e84:	f043 0202 	orr.w	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e9a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002eaa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eac:	4b86      	ldr	r3, [pc, #536]	; (80030c8 <HAL_ADC_Init+0x2d8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a86      	ldr	r2, [pc, #536]	; (80030cc <HAL_ADC_Init+0x2dc>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9a      	lsrs	r2, r3, #18
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ec2:	e002      	b.n	8002eca <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f9      	bne.n	8002ec4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eec:	d110      	bne.n	8002f10 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f023 0312 	bic.w	r3, r3, #18
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 8136 	bne.w	800318a <HAL_ADC_Init+0x39a>
 8002f1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 8131 	bne.w	800318a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 8129 	bne.w	800318a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f40:	f043 0202 	orr.w	r2, r3, #2
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f50:	d004      	beq.n	8002f5c <HAL_ADC_Init+0x16c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5e      	ldr	r2, [pc, #376]	; (80030d0 <HAL_ADC_Init+0x2e0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_Init+0x170>
 8002f5c:	4b5d      	ldr	r3, [pc, #372]	; (80030d4 <HAL_ADC_Init+0x2e4>)
 8002f5e:	e000      	b.n	8002f62 <HAL_ADC_Init+0x172>
 8002f60:	4b5d      	ldr	r3, [pc, #372]	; (80030d8 <HAL_ADC_Init+0x2e8>)
 8002f62:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f6c:	d102      	bne.n	8002f74 <HAL_ADC_Init+0x184>
 8002f6e:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <HAL_ADC_Init+0x2e0>)
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e01a      	b.n	8002faa <HAL_ADC_Init+0x1ba>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a55      	ldr	r2, [pc, #340]	; (80030d0 <HAL_ADC_Init+0x2e0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d103      	bne.n	8002f86 <HAL_ADC_Init+0x196>
 8002f7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e011      	b.n	8002faa <HAL_ADC_Init+0x1ba>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a54      	ldr	r2, [pc, #336]	; (80030dc <HAL_ADC_Init+0x2ec>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d102      	bne.n	8002f96 <HAL_ADC_Init+0x1a6>
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_ADC_Init+0x2f0>)
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e009      	b.n	8002faa <HAL_ADC_Init+0x1ba>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <HAL_ADC_Init+0x2f0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d102      	bne.n	8002fa6 <HAL_ADC_Init+0x1b6>
 8002fa0:	4b4e      	ldr	r3, [pc, #312]	; (80030dc <HAL_ADC_Init+0x2ec>)
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e001      	b.n	8002faa <HAL_ADC_Init+0x1ba>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_ADC_Init+0x1da>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Init+0x1da>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_ADC_Init+0x1dc>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11c      	bne.n	800300a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d010      	beq.n	8002ff8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_ADC_Init+0x202>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_Init+0x202>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_ADC_Init+0x204>
 8002ff2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d108      	bne.n	800300a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	431a      	orrs	r2, r3
 8003006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003008:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7e5b      	ldrb	r3, [r3, #25]
 800300e:	035b      	lsls	r3, r3, #13
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003014:	2a01      	cmp	r2, #1
 8003016:	d002      	beq.n	800301e <HAL_ADC_Init+0x22e>
 8003018:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800301c:	e000      	b.n	8003020 <HAL_ADC_Init+0x230>
 800301e:	2200      	movs	r2, #0
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4313      	orrs	r3, r2
 800302e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003030:	4313      	orrs	r3, r2
 8003032:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d11b      	bne.n	8003076 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7e5b      	ldrb	r3, [r3, #25]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	3b01      	subs	r3, #1
 800304c:	045a      	lsls	r2, r3, #17
 800304e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003050:	4313      	orrs	r3, r2
 8003052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003056:	663b      	str	r3, [r7, #96]	; 0x60
 8003058:	e00d      	b.n	8003076 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	2b01      	cmp	r3, #1
 800307c:	d03a      	beq.n	80030f4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_ADC_Init+0x2ec>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d004      	beq.n	8003092 <HAL_ADC_Init+0x2a2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <HAL_ADC_Init+0x2f0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d128      	bne.n	80030e4 <HAL_ADC_Init+0x2f4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800309a:	d012      	beq.n	80030c2 <HAL_ADC_Init+0x2d2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a4:	d00a      	beq.n	80030bc <HAL_ADC_Init+0x2cc>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80030ae:	d002      	beq.n	80030b6 <HAL_ADC_Init+0x2c6>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	e018      	b.n	80030e8 <HAL_ADC_Init+0x2f8>
 80030b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ba:	e015      	b.n	80030e8 <HAL_ADC_Init+0x2f8>
 80030bc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80030c0:	e012      	b.n	80030e8 <HAL_ADC_Init+0x2f8>
 80030c2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80030c6:	e00f      	b.n	80030e8 <HAL_ADC_Init+0x2f8>
 80030c8:	2000001c 	.word	0x2000001c
 80030cc:	431bde83 	.word	0x431bde83
 80030d0:	50000100 	.word	0x50000100
 80030d4:	50000300 	.word	0x50000300
 80030d8:	50000700 	.word	0x50000700
 80030dc:	50000400 	.word	0x50000400
 80030e0:	50000500 	.word	0x50000500
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030ec:	4313      	orrs	r3, r2
 80030ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030f0:	4313      	orrs	r3, r2
 80030f2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d114      	bne.n	800312c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003110:	f023 0302 	bic.w	r3, r3, #2
 8003114:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7e1b      	ldrb	r3, [r3, #24]
 800311a:	039a      	lsls	r2, r3, #14
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4313      	orrs	r3, r2
 8003126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003128:	4313      	orrs	r3, r2
 800312a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_ADC_Init+0x3bc>)
 8003134:	4013      	ands	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800313c:	430b      	orrs	r3, r1
 800313e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d10c      	bne.n	8003162 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f023 010f 	bic.w	r1, r3, #15
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
 8003160:	e007      	b.n	8003172 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 020f 	bic.w	r2, r2, #15
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f023 0303 	bic.w	r3, r3, #3
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	641a      	str	r2, [r3, #64]	; 0x40
 8003188:	e00a      	b.n	80031a0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f023 0312 	bic.w	r3, r3, #18
 8003192:	f043 0210 	orr.w	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80031a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3768      	adds	r7, #104	; 0x68
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	fff0c007 	.word	0xfff0c007

080031b0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f040 80f9 	bne.w	80033be <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_ADC_Start+0x2a>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e0f4      	b.n	80033c4 <HAL_ADC_Start+0x214>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f001 f996 	bl	8004514 <ADC_Enable>
 80031e8:	4603      	mov	r3, r0
 80031ea:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 80e0 	bne.w	80033b4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADC_Start+0x6c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6d      	ldr	r2, [pc, #436]	; (80033cc <HAL_ADC_Start+0x21c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d106      	bne.n	800322a <HAL_ADC_Start+0x7a>
 800321c:	4b6c      	ldr	r3, [pc, #432]	; (80033d0 <HAL_ADC_Start+0x220>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <HAL_ADC_Start+0x9a>
 8003228:	e005      	b.n	8003236 <HAL_ADC_Start+0x86>
 800322a:	4b6a      	ldr	r3, [pc, #424]	; (80033d4 <HAL_ADC_Start+0x224>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_ADC_Start+0x9a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800323e:	d004      	beq.n	800324a <HAL_ADC_Start+0x9a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a64      	ldr	r2, [pc, #400]	; (80033d8 <HAL_ADC_Start+0x228>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d115      	bne.n	8003276 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d036      	beq.n	80032d2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800326c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003274:	e02d      	b.n	80032d2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800328a:	d004      	beq.n	8003296 <HAL_ADC_Start+0xe6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a4e      	ldr	r2, [pc, #312]	; (80033cc <HAL_ADC_Start+0x21c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10a      	bne.n	80032ac <HAL_ADC_Start+0xfc>
 8003296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e008      	b.n	80032be <HAL_ADC_Start+0x10e>
 80032ac:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <HAL_ADC_Start+0x228>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d106      	bne.n	80032ee <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e4:	f023 0206 	bic.w	r2, r3, #6
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	645a      	str	r2, [r3, #68]	; 0x44
 80032ec:	e002      	b.n	80032f4 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	221c      	movs	r2, #28
 8003302:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800330c:	d004      	beq.n	8003318 <HAL_ADC_Start+0x168>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <HAL_ADC_Start+0x21c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d106      	bne.n	8003326 <HAL_ADC_Start+0x176>
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_ADC_Start+0x220>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2b00      	cmp	r3, #0
 8003322:	d03e      	beq.n	80033a2 <HAL_ADC_Start+0x1f2>
 8003324:	e005      	b.n	8003332 <HAL_ADC_Start+0x182>
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_ADC_Start+0x224>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2b00      	cmp	r3, #0
 8003330:	d037      	beq.n	80033a2 <HAL_ADC_Start+0x1f2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333a:	d004      	beq.n	8003346 <HAL_ADC_Start+0x196>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_ADC_Start+0x21c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d106      	bne.n	8003354 <HAL_ADC_Start+0x1a4>
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_ADC_Start+0x220>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2b05      	cmp	r3, #5
 8003350:	d027      	beq.n	80033a2 <HAL_ADC_Start+0x1f2>
 8003352:	e005      	b.n	8003360 <HAL_ADC_Start+0x1b0>
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_ADC_Start+0x224>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2b05      	cmp	r3, #5
 800335e:	d020      	beq.n	80033a2 <HAL_ADC_Start+0x1f2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003368:	d004      	beq.n	8003374 <HAL_ADC_Start+0x1c4>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a17      	ldr	r2, [pc, #92]	; (80033cc <HAL_ADC_Start+0x21c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d106      	bne.n	8003382 <HAL_ADC_Start+0x1d2>
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_ADC_Start+0x220>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2b09      	cmp	r3, #9
 800337e:	d010      	beq.n	80033a2 <HAL_ADC_Start+0x1f2>
 8003380:	e005      	b.n	800338e <HAL_ADC_Start+0x1de>
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <HAL_ADC_Start+0x224>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2b09      	cmp	r3, #9
 800338c:	d009      	beq.n	80033a2 <HAL_ADC_Start+0x1f2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003396:	d004      	beq.n	80033a2 <HAL_ADC_Start+0x1f2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <HAL_ADC_Start+0x228>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10f      	bne.n	80033c2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0204 	orr.w	r2, r2, #4
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	e006      	b.n	80033c2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033bc:	e001      	b.n	80033c2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033be:	2302      	movs	r3, #2
 80033c0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	50000100 	.word	0x50000100
 80033d0:	50000300 	.word	0x50000300
 80033d4:	50000700 	.word	0x50000700
 80033d8:	50000400 	.word	0x50000400

080033dc <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 8123 	bne.w	800363e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_ADC_Start_IT+0x2a>
 8003402:	2302      	movs	r3, #2
 8003404:	e11e      	b.n	8003644 <HAL_ADC_Start_IT+0x268>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 f880 	bl	8004514 <ADC_Enable>
 8003414:	4603      	mov	r3, r0
 8003416:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 810a 	bne.w	8003634 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800343c:	d004      	beq.n	8003448 <HAL_ADC_Start_IT+0x6c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a82      	ldr	r2, [pc, #520]	; (800364c <HAL_ADC_Start_IT+0x270>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d106      	bne.n	8003456 <HAL_ADC_Start_IT+0x7a>
 8003448:	4b81      	ldr	r3, [pc, #516]	; (8003650 <HAL_ADC_Start_IT+0x274>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_ADC_Start_IT+0x9a>
 8003454:	e005      	b.n	8003462 <HAL_ADC_Start_IT+0x86>
 8003456:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <HAL_ADC_Start_IT+0x278>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HAL_ADC_Start_IT+0x9a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800346a:	d004      	beq.n	8003476 <HAL_ADC_Start_IT+0x9a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a79      	ldr	r2, [pc, #484]	; (8003658 <HAL_ADC_Start_IT+0x27c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d115      	bne.n	80034a2 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d036      	beq.n	80034fe <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003498:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80034a0:	e02d      	b.n	80034fe <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034b6:	d004      	beq.n	80034c2 <HAL_ADC_Start_IT+0xe6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a63      	ldr	r2, [pc, #396]	; (800364c <HAL_ADC_Start_IT+0x270>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10a      	bne.n	80034d8 <HAL_ADC_Start_IT+0xfc>
 80034c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e008      	b.n	80034ea <HAL_ADC_Start_IT+0x10e>
 80034d8:	4b5f      	ldr	r3, [pc, #380]	; (8003658 <HAL_ADC_Start_IT+0x27c>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d007      	beq.n	80034fe <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350a:	d106      	bne.n	800351a <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f023 0206 	bic.w	r2, r3, #6
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
 8003518:	e002      	b.n	8003520 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	221c      	movs	r2, #28
 800352e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d110      	bne.n	800355a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0208 	orr.w	r2, r2, #8
 8003556:	605a      	str	r2, [r3, #4]
          break;
 8003558:	e008      	b.n	800356c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 020c 	orr.w	r2, r2, #12
 8003568:	605a      	str	r2, [r3, #4]
          break;
 800356a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0210 	bic.w	r2, r2, #16
 8003582:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800358c:	d004      	beq.n	8003598 <HAL_ADC_Start_IT+0x1bc>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2e      	ldr	r2, [pc, #184]	; (800364c <HAL_ADC_Start_IT+0x270>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d106      	bne.n	80035a6 <HAL_ADC_Start_IT+0x1ca>
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <HAL_ADC_Start_IT+0x274>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d03e      	beq.n	8003622 <HAL_ADC_Start_IT+0x246>
 80035a4:	e005      	b.n	80035b2 <HAL_ADC_Start_IT+0x1d6>
 80035a6:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <HAL_ADC_Start_IT+0x278>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d037      	beq.n	8003622 <HAL_ADC_Start_IT+0x246>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ba:	d004      	beq.n	80035c6 <HAL_ADC_Start_IT+0x1ea>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a22      	ldr	r2, [pc, #136]	; (800364c <HAL_ADC_Start_IT+0x270>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d106      	bne.n	80035d4 <HAL_ADC_Start_IT+0x1f8>
 80035c6:	4b22      	ldr	r3, [pc, #136]	; (8003650 <HAL_ADC_Start_IT+0x274>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d027      	beq.n	8003622 <HAL_ADC_Start_IT+0x246>
 80035d2:	e005      	b.n	80035e0 <HAL_ADC_Start_IT+0x204>
 80035d4:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <HAL_ADC_Start_IT+0x278>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d020      	beq.n	8003622 <HAL_ADC_Start_IT+0x246>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035e8:	d004      	beq.n	80035f4 <HAL_ADC_Start_IT+0x218>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <HAL_ADC_Start_IT+0x270>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d106      	bne.n	8003602 <HAL_ADC_Start_IT+0x226>
 80035f4:	4b16      	ldr	r3, [pc, #88]	; (8003650 <HAL_ADC_Start_IT+0x274>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2b09      	cmp	r3, #9
 80035fe:	d010      	beq.n	8003622 <HAL_ADC_Start_IT+0x246>
 8003600:	e005      	b.n	800360e <HAL_ADC_Start_IT+0x232>
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_ADC_Start_IT+0x278>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2b09      	cmp	r3, #9
 800360c:	d009      	beq.n	8003622 <HAL_ADC_Start_IT+0x246>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003616:	d004      	beq.n	8003622 <HAL_ADC_Start_IT+0x246>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <HAL_ADC_Start_IT+0x27c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10f      	bne.n	8003642 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0204 	orr.w	r2, r2, #4
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	e006      	b.n	8003642 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800363c:	e001      	b.n	8003642 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800363e:	2302      	movs	r3, #2
 8003640:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	50000100 	.word	0x50000100
 8003650:	50000300 	.word	0x50000300
 8003654:	50000700 	.word	0x50000700
 8003658:	50000400 	.word	0x50000400

0800365c <HAL_ADC_Stop_IT>:
  *         use function @ref HAL_ADCEx_RegularStop_IT().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_ADC_Stop_IT+0x1a>
 8003672:	2302      	movs	r3, #2
 8003674:	e02b      	b.n	80036ce <HAL_ADC_Stop_IT+0x72>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800367e:	216c      	movs	r1, #108	; 0x6c
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f001 f805 	bl	8004690 <ADC_ConversionStop>
 8003686:	4603      	mov	r3, r0
 8003688:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d119      	bne.n	80036c4 <HAL_ADC_Stop_IT+0x68>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 021c 	bic.w	r2, r2, #28
 800369e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 ff95 	bl	80045d0 <ADC_Disable>
 80036a6:	4603      	mov	r3, r0
 80036a8:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <HAL_ADC_Stop_IT+0x68>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d106      	bne.n	8003720 <HAL_ADC_IRQHandler+0x30>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d00f      	beq.n	8003740 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800372a:	2b08      	cmp	r3, #8
 800372c:	f040 80c0 	bne.w	80038b0 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b08      	cmp	r3, #8
 800373c:	f040 80b8 	bne.w	80038b0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d105      	bne.n	8003758 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003760:	d004      	beq.n	800376c <HAL_ADC_IRQHandler+0x7c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a95      	ldr	r2, [pc, #596]	; (80039bc <HAL_ADC_IRQHandler+0x2cc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d106      	bne.n	800377a <HAL_ADC_IRQHandler+0x8a>
 800376c:	4b94      	ldr	r3, [pc, #592]	; (80039c0 <HAL_ADC_IRQHandler+0x2d0>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2b00      	cmp	r3, #0
 8003776:	d03e      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x106>
 8003778:	e005      	b.n	8003786 <HAL_ADC_IRQHandler+0x96>
 800377a:	4b92      	ldr	r3, [pc, #584]	; (80039c4 <HAL_ADC_IRQHandler+0x2d4>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2b00      	cmp	r3, #0
 8003784:	d037      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x106>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800378e:	d004      	beq.n	800379a <HAL_ADC_IRQHandler+0xaa>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a89      	ldr	r2, [pc, #548]	; (80039bc <HAL_ADC_IRQHandler+0x2cc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d106      	bne.n	80037a8 <HAL_ADC_IRQHandler+0xb8>
 800379a:	4b89      	ldr	r3, [pc, #548]	; (80039c0 <HAL_ADC_IRQHandler+0x2d0>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d027      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x106>
 80037a6:	e005      	b.n	80037b4 <HAL_ADC_IRQHandler+0xc4>
 80037a8:	4b86      	ldr	r3, [pc, #536]	; (80039c4 <HAL_ADC_IRQHandler+0x2d4>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d020      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x106>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037bc:	d004      	beq.n	80037c8 <HAL_ADC_IRQHandler+0xd8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a7e      	ldr	r2, [pc, #504]	; (80039bc <HAL_ADC_IRQHandler+0x2cc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d106      	bne.n	80037d6 <HAL_ADC_IRQHandler+0xe6>
 80037c8:	4b7d      	ldr	r3, [pc, #500]	; (80039c0 <HAL_ADC_IRQHandler+0x2d0>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2b09      	cmp	r3, #9
 80037d2:	d010      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x106>
 80037d4:	e005      	b.n	80037e2 <HAL_ADC_IRQHandler+0xf2>
 80037d6:	4b7b      	ldr	r3, [pc, #492]	; (80039c4 <HAL_ADC_IRQHandler+0x2d4>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	2b09      	cmp	r3, #9
 80037e0:	d009      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x106>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ea:	d004      	beq.n	80037f6 <HAL_ADC_IRQHandler+0x106>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a75      	ldr	r2, [pc, #468]	; (80039c8 <HAL_ADC_IRQHandler+0x2d8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d104      	bne.n	8003800 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e00f      	b.n	8003820 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003808:	d004      	beq.n	8003814 <HAL_ADC_IRQHandler+0x124>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6b      	ldr	r2, [pc, #428]	; (80039bc <HAL_ADC_IRQHandler+0x2cc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d102      	bne.n	800381a <HAL_ADC_IRQHandler+0x12a>
 8003814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003818:	e000      	b.n	800381c <HAL_ADC_IRQHandler+0x12c>
 800381a:	4b6b      	ldr	r3, [pc, #428]	; (80039c8 <HAL_ADC_IRQHandler+0x2d8>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800382a:	2b00      	cmp	r3, #0
 800382c:	d139      	bne.n	80038a2 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003834:	2b00      	cmp	r3, #0
 8003836:	d134      	bne.n	80038a2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b08      	cmp	r3, #8
 8003844:	d12d      	bne.n	80038a2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11a      	bne.n	800388a <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 020c 	bic.w	r2, r2, #12
 8003862:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d112      	bne.n	80038a2 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0201 	orr.w	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
 8003888:	e00b      	b.n	80038a2 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0210 	orr.w	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fa86 	bl	8002db4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	220c      	movs	r2, #12
 80038ae:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d106      	bne.n	80038cc <HAL_ADC_IRQHandler+0x1dc>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d00f      	beq.n	80038ec <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	f040 813c 	bne.w	8003b54 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	f040 8134 	bne.w	8003b54 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003900:	d004      	beq.n	800390c <HAL_ADC_IRQHandler+0x21c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2d      	ldr	r2, [pc, #180]	; (80039bc <HAL_ADC_IRQHandler+0x2cc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d106      	bne.n	800391a <HAL_ADC_IRQHandler+0x22a>
 800390c:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <HAL_ADC_IRQHandler+0x2d0>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2b00      	cmp	r3, #0
 8003916:	d03e      	beq.n	8003996 <HAL_ADC_IRQHandler+0x2a6>
 8003918:	e005      	b.n	8003926 <HAL_ADC_IRQHandler+0x236>
 800391a:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <HAL_ADC_IRQHandler+0x2d4>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2b00      	cmp	r3, #0
 8003924:	d037      	beq.n	8003996 <HAL_ADC_IRQHandler+0x2a6>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800392e:	d004      	beq.n	800393a <HAL_ADC_IRQHandler+0x24a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a21      	ldr	r2, [pc, #132]	; (80039bc <HAL_ADC_IRQHandler+0x2cc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d106      	bne.n	8003948 <HAL_ADC_IRQHandler+0x258>
 800393a:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <HAL_ADC_IRQHandler+0x2d0>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2b05      	cmp	r3, #5
 8003944:	d027      	beq.n	8003996 <HAL_ADC_IRQHandler+0x2a6>
 8003946:	e005      	b.n	8003954 <HAL_ADC_IRQHandler+0x264>
 8003948:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <HAL_ADC_IRQHandler+0x2d4>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2b05      	cmp	r3, #5
 8003952:	d020      	beq.n	8003996 <HAL_ADC_IRQHandler+0x2a6>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800395c:	d004      	beq.n	8003968 <HAL_ADC_IRQHandler+0x278>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a16      	ldr	r2, [pc, #88]	; (80039bc <HAL_ADC_IRQHandler+0x2cc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d106      	bne.n	8003976 <HAL_ADC_IRQHandler+0x286>
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <HAL_ADC_IRQHandler+0x2d0>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2b09      	cmp	r3, #9
 8003972:	d010      	beq.n	8003996 <HAL_ADC_IRQHandler+0x2a6>
 8003974:	e005      	b.n	8003982 <HAL_ADC_IRQHandler+0x292>
 8003976:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_ADC_IRQHandler+0x2d4>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2b09      	cmp	r3, #9
 8003980:	d009      	beq.n	8003996 <HAL_ADC_IRQHandler+0x2a6>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800398a:	d004      	beq.n	8003996 <HAL_ADC_IRQHandler+0x2a6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <HAL_ADC_IRQHandler+0x2d8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d104      	bne.n	80039a0 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e018      	b.n	80039d2 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a8:	d004      	beq.n	80039b4 <HAL_ADC_IRQHandler+0x2c4>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a03      	ldr	r2, [pc, #12]	; (80039bc <HAL_ADC_IRQHandler+0x2cc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10b      	bne.n	80039cc <HAL_ADC_IRQHandler+0x2dc>
 80039b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039b8:	e009      	b.n	80039ce <HAL_ADC_IRQHandler+0x2de>
 80039ba:	bf00      	nop
 80039bc:	50000100 	.word	0x50000100
 80039c0:	50000300 	.word	0x50000300
 80039c4:	50000700 	.word	0x50000700
 80039c8:	50000400 	.word	0x50000400
 80039cc:	4b9d      	ldr	r3, [pc, #628]	; (8003c44 <HAL_ADC_IRQHandler+0x554>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d013      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x318>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 80ad 	bne.w	8003b46 <HAL_ADC_IRQHandler+0x456>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 80a5 	bne.w	8003b46 <HAL_ADC_IRQHandler+0x456>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 809f 	bne.w	8003b46 <HAL_ADC_IRQHandler+0x456>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	f040 8097 	bne.w	8003b46 <HAL_ADC_IRQHandler+0x456>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a20:	d004      	beq.n	8003a2c <HAL_ADC_IRQHandler+0x33c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a88      	ldr	r2, [pc, #544]	; (8003c48 <HAL_ADC_IRQHandler+0x558>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d106      	bne.n	8003a3a <HAL_ADC_IRQHandler+0x34a>
 8003a2c:	4b87      	ldr	r3, [pc, #540]	; (8003c4c <HAL_ADC_IRQHandler+0x55c>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03e      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x3c6>
 8003a38:	e005      	b.n	8003a46 <HAL_ADC_IRQHandler+0x356>
 8003a3a:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_ADC_IRQHandler+0x560>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d037      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x3c6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a4e:	d004      	beq.n	8003a5a <HAL_ADC_IRQHandler+0x36a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a7c      	ldr	r2, [pc, #496]	; (8003c48 <HAL_ADC_IRQHandler+0x558>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d106      	bne.n	8003a68 <HAL_ADC_IRQHandler+0x378>
 8003a5a:	4b7c      	ldr	r3, [pc, #496]	; (8003c4c <HAL_ADC_IRQHandler+0x55c>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d027      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x3c6>
 8003a66:	e005      	b.n	8003a74 <HAL_ADC_IRQHandler+0x384>
 8003a68:	4b79      	ldr	r3, [pc, #484]	; (8003c50 <HAL_ADC_IRQHandler+0x560>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2b06      	cmp	r3, #6
 8003a72:	d020      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x3c6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a7c:	d004      	beq.n	8003a88 <HAL_ADC_IRQHandler+0x398>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a71      	ldr	r2, [pc, #452]	; (8003c48 <HAL_ADC_IRQHandler+0x558>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d106      	bne.n	8003a96 <HAL_ADC_IRQHandler+0x3a6>
 8003a88:	4b70      	ldr	r3, [pc, #448]	; (8003c4c <HAL_ADC_IRQHandler+0x55c>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2b07      	cmp	r3, #7
 8003a92:	d010      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x3c6>
 8003a94:	e005      	b.n	8003aa2 <HAL_ADC_IRQHandler+0x3b2>
 8003a96:	4b6e      	ldr	r3, [pc, #440]	; (8003c50 <HAL_ADC_IRQHandler+0x560>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	2b07      	cmp	r3, #7
 8003aa0:	d009      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x3c6>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aaa:	d004      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x3c6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a64      	ldr	r2, [pc, #400]	; (8003c44 <HAL_ADC_IRQHandler+0x554>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d104      	bne.n	8003ac0 <HAL_ADC_IRQHandler+0x3d0>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e00f      	b.n	8003ae0 <HAL_ADC_IRQHandler+0x3f0>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac8:	d004      	beq.n	8003ad4 <HAL_ADC_IRQHandler+0x3e4>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a5e      	ldr	r2, [pc, #376]	; (8003c48 <HAL_ADC_IRQHandler+0x558>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d102      	bne.n	8003ada <HAL_ADC_IRQHandler+0x3ea>
 8003ad4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ad8:	e000      	b.n	8003adc <HAL_ADC_IRQHandler+0x3ec>
 8003ada:	4b5a      	ldr	r3, [pc, #360]	; (8003c44 <HAL_ADC_IRQHandler+0x554>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d12d      	bne.n	8003b46 <HAL_ADC_IRQHandler+0x456>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d11a      	bne.n	8003b2e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b06:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d112      	bne.n	8003b46 <HAL_ADC_IRQHandler+0x456>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b2c:	e00b      	b.n	8003b46 <HAL_ADC_IRQHandler+0x456>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0210 	orr.w	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f8de 	bl	8003d08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2260      	movs	r2, #96	; 0x60
 8003b52:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	2b80      	cmp	r3, #128	; 0x80
 8003b60:	d113      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x49a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d10c      	bne.n	8003b8a <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff f923 	bl	8002dc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b98:	d115      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0x4d6>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba8:	d10d      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8ba 	bl	8003d30 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bc4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd4:	d115      	bne.n	8003c02 <HAL_ADC_IRQHandler+0x512>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be4:	d10d      	bne.n	8003c02 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8a6 	bl	8003d44 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c00:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d151      	bne.n	8003cb4 <HAL_ADC_IRQHandler+0x5c4>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b10      	cmp	r3, #16
 8003c1c:	d14a      	bne.n	8003cb4 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8003c26:	2301      	movs	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e02d      	b.n	8003c88 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c34:	d004      	beq.n	8003c40 <HAL_ADC_IRQHandler+0x550>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a03      	ldr	r2, [pc, #12]	; (8003c48 <HAL_ADC_IRQHandler+0x558>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d109      	bne.n	8003c54 <HAL_ADC_IRQHandler+0x564>
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <HAL_ADC_IRQHandler+0x55c>)
 8003c42:	e008      	b.n	8003c56 <HAL_ADC_IRQHandler+0x566>
 8003c44:	50000400 	.word	0x50000400
 8003c48:	50000100 	.word	0x50000100
 8003c4c:	50000300 	.word	0x50000300
 8003c50:	50000700 	.word	0x50000700
 8003c54:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <HAL_ADC_IRQHandler+0x614>)
 8003c56:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d10a      	bne.n	8003c88 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003c72:	2301      	movs	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e007      	b.n	8003c88 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8003c84:	2301      	movs	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d10e      	bne.n	8003cac <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f043 0202 	orr.w	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff f898 	bl	8002ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc2:	d11b      	bne.n	8003cfc <HAL_ADC_IRQHandler+0x60c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	d113      	bne.n	8003cfc <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce4:	f043 0208 	orr.w	r2, r3, #8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cf4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f810 	bl	8003d1c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003cfc:	bf00      	nop
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	50000700 	.word	0x50000700

08003d08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b09b      	sub	sp, #108	; 0x6c
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x22>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e2cb      	b.n	8004312 <HAL_ADC_ConfigChannel+0x5ba>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f040 82af 	bne.w	80042f0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d81c      	bhi.n	8003dd4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4413      	add	r3, r2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	461a      	mov	r2, r3
 8003dae:	231f      	movs	r3, #31
 8003db0:	4093      	lsls	r3, r2
 8003db2:	43db      	mvns	r3, r3
 8003db4:	4019      	ands	r1, r3
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8003dd2:	e063      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b09      	cmp	r3, #9
 8003dda:	d81e      	bhi.n	8003e1a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4413      	add	r3, r2
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	3b1e      	subs	r3, #30
 8003df0:	221f      	movs	r2, #31
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	4019      	ands	r1, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	3b1e      	subs	r3, #30
 8003e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34
 8003e18:	e040      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b0e      	cmp	r3, #14
 8003e20:	d81e      	bhi.n	8003e60 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	3b3c      	subs	r3, #60	; 0x3c
 8003e36:	221f      	movs	r2, #31
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	4019      	ands	r1, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	3b3c      	subs	r3, #60	; 0x3c
 8003e52:	fa00 f203 	lsl.w	r2, r0, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8003e5e:	e01d      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	3b5a      	subs	r3, #90	; 0x5a
 8003e74:	221f      	movs	r2, #31
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	4019      	ands	r1, r3
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	3b5a      	subs	r3, #90	; 0x5a
 8003e90:	fa00 f203 	lsl.w	r2, r0, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 80e5 	bne.w	8004076 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b09      	cmp	r3, #9
 8003eb2:	d91c      	bls.n	8003eee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6999      	ldr	r1, [r3, #24]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3b1e      	subs	r3, #30
 8003ec6:	2207      	movs	r2, #7
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	4019      	ands	r1, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6898      	ldr	r0, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	3b1e      	subs	r3, #30
 8003ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	619a      	str	r2, [r3, #24]
 8003eec:	e019      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6959      	ldr	r1, [r3, #20]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	2207      	movs	r2, #7
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	4019      	ands	r1, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6898      	ldr	r0, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	fa00 f203 	lsl.w	r2, r0, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	08db      	lsrs	r3, r3, #3
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d84f      	bhi.n	8003fe4 <HAL_ADC_ConfigChannel+0x28c>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_ADC_ConfigChannel+0x1f4>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003fa1 	.word	0x08003fa1
 8003f58:	08003fc3 	.word	0x08003fc3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f62:	4b9f      	ldr	r3, [pc, #636]	; (80041e0 <HAL_ADC_ConfigChannel+0x488>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	0691      	lsls	r1, r2, #26
 8003f6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f7a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f7c:	e07e      	b.n	800407c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f84:	4b96      	ldr	r3, [pc, #600]	; (80041e0 <HAL_ADC_ConfigChannel+0x488>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	0691      	lsls	r1, r2, #26
 8003f8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f90:	430a      	orrs	r2, r1
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f9c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f9e:	e06d      	b.n	800407c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003fa6:	4b8e      	ldr	r3, [pc, #568]	; (80041e0 <HAL_ADC_ConfigChannel+0x488>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	0691      	lsls	r1, r2, #26
 8003fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fbe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003fc0:	e05c      	b.n	800407c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fc8:	4b85      	ldr	r3, [pc, #532]	; (80041e0 <HAL_ADC_ConfigChannel+0x488>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	0691      	lsls	r1, r2, #26
 8003fd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fe0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003fe2:	e04b      	b.n	800407c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	069b      	lsls	r3, r3, #26
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d107      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004006:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800400e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	069b      	lsls	r3, r3, #26
 8004018:	429a      	cmp	r2, r3
 800401a:	d107      	bne.n	800402c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800402a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004032:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	069b      	lsls	r3, r3, #26
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800404e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004056:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	069b      	lsls	r3, r3, #26
 8004060:	429a      	cmp	r2, r3
 8004062:	d10a      	bne.n	800407a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004072:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004074:	e001      	b.n	800407a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004076:	bf00      	nop
 8004078:	e000      	b.n	800407c <HAL_ADC_ConfigChannel+0x324>
      break;
 800407a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d108      	bne.n	800409c <HAL_ADC_ConfigChannel+0x344>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x344>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_ADC_ConfigChannel+0x346>
 800409c:	2300      	movs	r3, #0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 8131 	bne.w	8004306 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d00f      	beq.n	80040cc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2201      	movs	r2, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43da      	mvns	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	400a      	ands	r2, r1
 80040c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80040ca:	e049      	b.n	8004160 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2201      	movs	r2, #1
 80040da:	409a      	lsls	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b09      	cmp	r3, #9
 80040ec:	d91c      	bls.n	8004128 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6999      	ldr	r1, [r3, #24]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	3b1b      	subs	r3, #27
 8004100:	2207      	movs	r2, #7
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	4019      	ands	r1, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6898      	ldr	r0, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	3b1b      	subs	r3, #27
 800411a:	fa00 f203 	lsl.w	r2, r0, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	619a      	str	r2, [r3, #24]
 8004126:	e01b      	b.n	8004160 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6959      	ldr	r1, [r3, #20]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	2207      	movs	r2, #7
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	4019      	ands	r1, r3
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	6898      	ldr	r0, [r3, #8]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	fa00 f203 	lsl.w	r2, r0, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004168:	d004      	beq.n	8004174 <HAL_ADC_ConfigChannel+0x41c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <HAL_ADC_ConfigChannel+0x48c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x420>
 8004174:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <HAL_ADC_ConfigChannel+0x490>)
 8004176:	e000      	b.n	800417a <HAL_ADC_ConfigChannel+0x422>
 8004178:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <HAL_ADC_ConfigChannel+0x494>)
 800417a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b10      	cmp	r3, #16
 8004182:	d105      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800418c:	2b00      	cmp	r3, #0
 800418e:	d015      	beq.n	80041bc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004194:	2b11      	cmp	r3, #17
 8004196:	d105      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80041a8:	2b12      	cmp	r3, #18
 80041aa:	f040 80ac 	bne.w	8004306 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80041ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f040 80a5 	bne.w	8004306 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c4:	d102      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x474>
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_ADC_ConfigChannel+0x48c>)
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	e023      	b.n	8004214 <HAL_ADC_ConfigChannel+0x4bc>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <HAL_ADC_ConfigChannel+0x48c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d10c      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x498>
 80041d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e01a      	b.n	8004214 <HAL_ADC_ConfigChannel+0x4bc>
 80041de:	bf00      	nop
 80041e0:	83fff000 	.word	0x83fff000
 80041e4:	50000100 	.word	0x50000100
 80041e8:	50000300 	.word	0x50000300
 80041ec:	50000700 	.word	0x50000700
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4a      	ldr	r2, [pc, #296]	; (8004320 <HAL_ADC_ConfigChannel+0x5c8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d102      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x4a8>
 80041fa:	4b4a      	ldr	r3, [pc, #296]	; (8004324 <HAL_ADC_ConfigChannel+0x5cc>)
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e009      	b.n	8004214 <HAL_ADC_ConfigChannel+0x4bc>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a47      	ldr	r2, [pc, #284]	; (8004324 <HAL_ADC_ConfigChannel+0x5cc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d102      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x4b8>
 800420a:	4b45      	ldr	r3, [pc, #276]	; (8004320 <HAL_ADC_ConfigChannel+0x5c8>)
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	e001      	b.n	8004214 <HAL_ADC_ConfigChannel+0x4bc>
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d108      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x4dc>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x4dc>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <HAL_ADC_ConfigChannel+0x4de>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d150      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800423a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800423c:	2b00      	cmp	r3, #0
 800423e:	d010      	beq.n	8004262 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d107      	bne.n	800425c <HAL_ADC_ConfigChannel+0x504>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_ADC_ConfigChannel+0x504>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_ADC_ConfigChannel+0x506>
 800425c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800425e:	2b00      	cmp	r3, #0
 8004260:	d13c      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b10      	cmp	r3, #16
 8004268:	d11d      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x54e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004272:	d118      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800427c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004280:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_ADC_ConfigChannel+0x5d0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a29      	ldr	r2, [pc, #164]	; (800432c <HAL_ADC_ConfigChannel+0x5d4>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	0c9a      	lsrs	r2, r3, #18
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004296:	e002      	b.n	800429e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	3b01      	subs	r3, #1
 800429c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f9      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042a4:	e02e      	b.n	8004304 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b11      	cmp	r3, #17
 80042ac:	d10b      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x56e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b6:	d106      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80042b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80042c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042c4:	e01e      	b.n	8004304 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b12      	cmp	r3, #18
 80042cc:	d11a      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80042ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042da:	e013      	b.n	8004304 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80042ee:	e00a      	b.n	8004306 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004302:	e000      	b.n	8004306 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004304:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800430e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004312:	4618      	mov	r0, r3
 8004314:	376c      	adds	r7, #108	; 0x6c
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	50000400 	.word	0x50000400
 8004324:	50000500 	.word	0x50000500
 8004328:	2000001c 	.word	0x2000001c
 800432c:	431bde83 	.word	0x431bde83

08004330 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004330:	b480      	push	{r7}
 8004332:	b099      	sub	sp, #100	; 0x64
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004348:	d102      	bne.n	8004350 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800434a:	4b6d      	ldr	r3, [pc, #436]	; (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	e01a      	b.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a6a      	ldr	r2, [pc, #424]	; (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d103      	bne.n	8004362 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800435a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	e011      	b.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a67      	ldr	r2, [pc, #412]	; (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d102      	bne.n	8004372 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800436c:	4b66      	ldr	r3, [pc, #408]	; (8004508 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	e009      	b.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a64      	ldr	r2, [pc, #400]	; (8004508 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d102      	bne.n	8004382 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800437c:	4b61      	ldr	r3, [pc, #388]	; (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	e001      	b.n	8004386 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0b0      	b.n	80044f2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800439a:	2302      	movs	r3, #2
 800439c:	e0a9      	b.n	80044f2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 808d 	bne.w	80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f040 8086 	bne.w	80044d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043cc:	d004      	beq.n	80043d8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a4b      	ldr	r2, [pc, #300]	; (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d101      	bne.n	80043dc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80043d8:	4b4c      	ldr	r3, [pc, #304]	; (800450c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80043da:	e000      	b.n	80043de <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80043dc:	4b4c      	ldr	r3, [pc, #304]	; (8004510 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80043de:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d040      	beq.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80043e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043fa:	035b      	lsls	r3, r3, #13
 80043fc:	430b      	orrs	r3, r1
 80043fe:	431a      	orrs	r2, r3
 8004400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004402:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d108      	bne.n	8004424 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d15c      	bne.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b01      	cmp	r3, #1
 8004434:	d107      	bne.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004446:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004448:	2b00      	cmp	r3, #0
 800444a:	d14b      	bne.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800444c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004454:	f023 030f 	bic.w	r3, r3, #15
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	6811      	ldr	r1, [r2, #0]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	430a      	orrs	r2, r1
 8004462:	431a      	orrs	r2, r3
 8004464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004466:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004468:	e03c      	b.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800446a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004474:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d108      	bne.n	8004496 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d123      	bne.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d107      	bne.n	80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80044b8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d112      	bne.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80044be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044c6:	f023 030f 	bic.w	r3, r3, #15
 80044ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044cc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80044ce:	e009      	b.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80044e2:	e000      	b.n	80044e6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80044ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80044f2:	4618      	mov	r0, r3
 80044f4:	3764      	adds	r7, #100	; 0x64
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	50000100 	.word	0x50000100
 8004504:	50000400 	.word	0x50000400
 8004508:	50000500 	.word	0x50000500
 800450c:	50000300 	.word	0x50000300
 8004510:	50000700 	.word	0x50000700

08004514 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d108      	bne.n	8004540 <ADC_Enable+0x2c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <ADC_Enable+0x2c>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <ADC_Enable+0x2e>
 8004540:	2300      	movs	r3, #0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d13c      	bne.n	80045c0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <ADC_Enable+0xb8>)
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00d      	beq.n	8004570 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	f043 0210 	orr.w	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	f043 0201 	orr.w	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e028      	b.n	80045c2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004580:	f7fe fbea 	bl	8002d58 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004586:	e014      	b.n	80045b2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004588:	f7fe fbe6 	bl	8002d58 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d90d      	bls.n	80045b2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f043 0210 	orr.w	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e007      	b.n	80045c2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d1e3      	bne.n	8004588 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	8000003f 	.word	0x8000003f

080045d0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d108      	bne.n	80045fc <ADC_Disable+0x2c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <ADC_Disable+0x2c>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <ADC_Disable+0x2e>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d040      	beq.n	8004684 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 030d 	and.w	r3, r3, #13
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10f      	bne.n	8004630 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0202 	orr.w	r2, r2, #2
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2203      	movs	r2, #3
 8004626:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004628:	f7fe fb96 	bl	8002d58 <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800462e:	e022      	b.n	8004676 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	f043 0210 	orr.w	r2, r3, #16
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	f043 0201 	orr.w	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e01c      	b.n	8004686 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800464c:	f7fe fb84 	bl	8002d58 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d90d      	bls.n	8004676 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f043 0210 	orr.w	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f043 0201 	orr.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e007      	b.n	8004686 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d0e3      	beq.n	800464c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 030c 	and.w	r3, r3, #12
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8093 	beq.w	80047dc <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c4:	d12a      	bne.n	800471c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d126      	bne.n	800471c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d122      	bne.n	800471c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80046d6:	230c      	movs	r3, #12
 80046d8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80046da:	e014      	b.n	8004706 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4a42      	ldr	r2, [pc, #264]	; (80047e8 <ADC_ConversionStop+0x158>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d90d      	bls.n	8004700 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f043 0210 	orr.w	r2, r3, #16
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e06e      	b.n	80047de <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	3301      	adds	r3, #1
 8004704:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d1e3      	bne.n	80046dc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2240      	movs	r2, #64	; 0x40
 800471a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b60      	cmp	r3, #96	; 0x60
 8004720:	d015      	beq.n	800474e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d10e      	bne.n	800474e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800473a:	2b00      	cmp	r3, #0
 800473c:	d107      	bne.n	800474e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0210 	orr.w	r2, r2, #16
 800474c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d015      	beq.n	8004780 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b08      	cmp	r3, #8
 8004760:	d10e      	bne.n	8004780 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800476c:	2b00      	cmp	r3, #0
 800476e:	d107      	bne.n	8004780 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0220 	orr.w	r2, r2, #32
 800477e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b60      	cmp	r3, #96	; 0x60
 8004784:	d004      	beq.n	8004790 <ADC_ConversionStop+0x100>
 8004786:	2b6c      	cmp	r3, #108	; 0x6c
 8004788:	d105      	bne.n	8004796 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800478a:	230c      	movs	r3, #12
 800478c:	617b      	str	r3, [r7, #20]
        break;
 800478e:	e005      	b.n	800479c <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004790:	2308      	movs	r3, #8
 8004792:	617b      	str	r3, [r7, #20]
        break;
 8004794:	e002      	b.n	800479c <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004796:	2304      	movs	r3, #4
 8004798:	617b      	str	r3, [r7, #20]
        break;
 800479a:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800479c:	f7fe fadc 	bl	8002d58 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80047a2:	e014      	b.n	80047ce <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80047a4:	f7fe fad8 	bl	8002d58 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b0b      	cmp	r3, #11
 80047b0:	d90d      	bls.n	80047ce <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f043 0210 	orr.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f043 0201 	orr.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e007      	b.n	80047de <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e3      	bne.n	80047a4 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	000993ff 	.word	0x000993ff

080047ec <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <HAL_COMP_Init+0x22>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	75fb      	strb	r3, [r7, #23]
 8004812:	e064      	b.n	80048de <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004814:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <HAL_COMP_Init+0xfc>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	4a33      	ldr	r2, [pc, #204]	; (80048e8 <HAL_COMP_Init+0xfc>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6193      	str	r3, [r2, #24]
 8004820:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <HAL_COMP_Init+0xfc>)
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7fd fdfb 	bl	8002428 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f023 020c 	bic.w	r2, r3, #12
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 80048de:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000

080048ec <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <HAL_COMP_Stop+0x22>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_COMP_Stop+0x28>
  {
    status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
 8004912:	e09d      	b.n	8004a50 <HAL_COMP_Stop+0x164>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_BUSY)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	f040 8095 	bne.w	8004a4c <HAL_COMP_Stop+0x160>
    {
      /* Disable the EXTI Line event mode if any */
      COMP_EXTI_DISABLE_EVENT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a4e      	ldr	r2, [pc, #312]	; (8004a60 <HAL_COMP_Stop+0x174>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d04b      	beq.n	80049c4 <HAL_COMP_Stop+0xd8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a4c      	ldr	r2, [pc, #304]	; (8004a64 <HAL_COMP_Stop+0x178>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d046      	beq.n	80049c4 <HAL_COMP_Stop+0xd8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4b      	ldr	r2, [pc, #300]	; (8004a68 <HAL_COMP_Stop+0x17c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d041      	beq.n	80049c4 <HAL_COMP_Stop+0xd8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a49      	ldr	r2, [pc, #292]	; (8004a6c <HAL_COMP_Stop+0x180>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d03c      	beq.n	80049c4 <HAL_COMP_Stop+0xd8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a48      	ldr	r2, [pc, #288]	; (8004a70 <HAL_COMP_Stop+0x184>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d037      	beq.n	80049c4 <HAL_COMP_Stop+0xd8>
 8004954:	4b47      	ldr	r3, [pc, #284]	; (8004a74 <HAL_COMP_Stop+0x188>)
 8004956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4940      	ldr	r1, [pc, #256]	; (8004a60 <HAL_COMP_Stop+0x174>)
 800495e:	428b      	cmp	r3, r1
 8004960:	d02a      	beq.n	80049b8 <HAL_COMP_Stop+0xcc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	493f      	ldr	r1, [pc, #252]	; (8004a64 <HAL_COMP_Stop+0x178>)
 8004968:	428b      	cmp	r3, r1
 800496a:	d022      	beq.n	80049b2 <HAL_COMP_Stop+0xc6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	493d      	ldr	r1, [pc, #244]	; (8004a68 <HAL_COMP_Stop+0x17c>)
 8004972:	428b      	cmp	r3, r1
 8004974:	d01a      	beq.n	80049ac <HAL_COMP_Stop+0xc0>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	493c      	ldr	r1, [pc, #240]	; (8004a6c <HAL_COMP_Stop+0x180>)
 800497c:	428b      	cmp	r3, r1
 800497e:	d012      	beq.n	80049a6 <HAL_COMP_Stop+0xba>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	493a      	ldr	r1, [pc, #232]	; (8004a70 <HAL_COMP_Stop+0x184>)
 8004986:	428b      	cmp	r3, r1
 8004988:	d00a      	beq.n	80049a0 <HAL_COMP_Stop+0xb4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	493a      	ldr	r1, [pc, #232]	; (8004a78 <HAL_COMP_Stop+0x18c>)
 8004990:	428b      	cmp	r3, r1
 8004992:	d102      	bne.n	800499a <HAL_COMP_Stop+0xae>
 8004994:	f06f 0301 	mvn.w	r3, #1
 8004998:	e010      	b.n	80049bc <HAL_COMP_Stop+0xd0>
 800499a:	f06f 0302 	mvn.w	r3, #2
 800499e:	e00d      	b.n	80049bc <HAL_COMP_Stop+0xd0>
 80049a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80049a4:	e00a      	b.n	80049bc <HAL_COMP_Stop+0xd0>
 80049a6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80049aa:	e007      	b.n	80049bc <HAL_COMP_Stop+0xd0>
 80049ac:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 80049b0:	e004      	b.n	80049bc <HAL_COMP_Stop+0xd0>
 80049b2:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 80049b6:	e001      	b.n	80049bc <HAL_COMP_Stop+0xd0>
 80049b8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80049bc:	492d      	ldr	r1, [pc, #180]	; (8004a74 <HAL_COMP_Stop+0x188>)
 80049be:	4013      	ands	r3, r2
 80049c0:	624b      	str	r3, [r1, #36]	; 0x24
 80049c2:	e036      	b.n	8004a32 <HAL_COMP_Stop+0x146>
 80049c4:	4b2b      	ldr	r3, [pc, #172]	; (8004a74 <HAL_COMP_Stop+0x188>)
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4924      	ldr	r1, [pc, #144]	; (8004a60 <HAL_COMP_Stop+0x174>)
 80049ce:	428b      	cmp	r3, r1
 80049d0:	d02a      	beq.n	8004a28 <HAL_COMP_Stop+0x13c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4923      	ldr	r1, [pc, #140]	; (8004a64 <HAL_COMP_Stop+0x178>)
 80049d8:	428b      	cmp	r3, r1
 80049da:	d022      	beq.n	8004a22 <HAL_COMP_Stop+0x136>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4921      	ldr	r1, [pc, #132]	; (8004a68 <HAL_COMP_Stop+0x17c>)
 80049e2:	428b      	cmp	r3, r1
 80049e4:	d01a      	beq.n	8004a1c <HAL_COMP_Stop+0x130>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4920      	ldr	r1, [pc, #128]	; (8004a6c <HAL_COMP_Stop+0x180>)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d012      	beq.n	8004a16 <HAL_COMP_Stop+0x12a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	491e      	ldr	r1, [pc, #120]	; (8004a70 <HAL_COMP_Stop+0x184>)
 80049f6:	428b      	cmp	r3, r1
 80049f8:	d00a      	beq.n	8004a10 <HAL_COMP_Stop+0x124>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	491e      	ldr	r1, [pc, #120]	; (8004a78 <HAL_COMP_Stop+0x18c>)
 8004a00:	428b      	cmp	r3, r1
 8004a02:	d102      	bne.n	8004a0a <HAL_COMP_Stop+0x11e>
 8004a04:	f06f 0301 	mvn.w	r3, #1
 8004a08:	e010      	b.n	8004a2c <HAL_COMP_Stop+0x140>
 8004a0a:	f06f 0302 	mvn.w	r3, #2
 8004a0e:	e00d      	b.n	8004a2c <HAL_COMP_Stop+0x140>
 8004a10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004a14:	e00a      	b.n	8004a2c <HAL_COMP_Stop+0x140>
 8004a16:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004a1a:	e007      	b.n	8004a2c <HAL_COMP_Stop+0x140>
 8004a1c:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004a20:	e004      	b.n	8004a2c <HAL_COMP_Stop+0x140>
 8004a22:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004a26:	e001      	b.n	8004a2c <HAL_COMP_Stop+0x140>
 8004a28:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004a2c:	4911      	ldr	r1, [pc, #68]	; (8004a74 <HAL_COMP_Stop+0x188>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	604b      	str	r3, [r1, #4]

      /* Disable the selected comparator */
      __HAL_COMP_DISABLE(hcomp);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0201 	bic.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

      hcomp->State = HAL_COMP_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004a4a:	e001      	b.n	8004a50 <HAL_COMP_Stop+0x164>
    }
    else
    {
      status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	4001001c 	.word	0x4001001c
 8004a64:	40010020 	.word	0x40010020
 8004a68:	40010024 	.word	0x40010024
 8004a6c:	40010028 	.word	0x40010028
 8004a70:	4001002c 	.word	0x4001002c
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40010030 	.word	0x40010030

08004a7c <HAL_COMP_Start_IT>:
  * @brief  Start the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_COMP_Start_IT(COMP_HandleTypeDef *hcomp)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]
  uint32_t extiline = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <HAL_COMP_Start_IT+0x26>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_COMP_Start_IT+0x2c>
  {
    status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
 8004aa6:	e0c8      	b.n	8004c3a <HAL_COMP_Start_IT+0x1be>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if (hcomp->State == HAL_COMP_STATE_READY)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f040 80c0 	bne.w	8004c36 <HAL_COMP_Start_IT+0x1ba>
    {
      /* Configure the EXTI event generation */
      if ((hcomp->Init.TriggerMode & (COMP_TRIGGERMODE_IT_RISING | COMP_TRIGGERMODE_IT_FALLING)) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80b6 	beq.w	8004c30 <HAL_COMP_Start_IT+0x1b4>
      {
        /* Get the EXTI Line output configuration */
        extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a5f      	ldr	r2, [pc, #380]	; (8004c48 <HAL_COMP_Start_IT+0x1cc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d028      	beq.n	8004b20 <HAL_COMP_Start_IT+0xa4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a5e      	ldr	r2, [pc, #376]	; (8004c4c <HAL_COMP_Start_IT+0x1d0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d020      	beq.n	8004b1a <HAL_COMP_Start_IT+0x9e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5c      	ldr	r2, [pc, #368]	; (8004c50 <HAL_COMP_Start_IT+0x1d4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d018      	beq.n	8004b14 <HAL_COMP_Start_IT+0x98>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a5b      	ldr	r2, [pc, #364]	; (8004c54 <HAL_COMP_Start_IT+0x1d8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d010      	beq.n	8004b0e <HAL_COMP_Start_IT+0x92>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a59      	ldr	r2, [pc, #356]	; (8004c58 <HAL_COMP_Start_IT+0x1dc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d008      	beq.n	8004b08 <HAL_COMP_Start_IT+0x8c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a58      	ldr	r2, [pc, #352]	; (8004c5c <HAL_COMP_Start_IT+0x1e0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_COMP_Start_IT+0x88>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e00f      	b.n	8004b24 <HAL_COMP_Start_IT+0xa8>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e00d      	b.n	8004b24 <HAL_COMP_Start_IT+0xa8>
 8004b08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b0c:	e00a      	b.n	8004b24 <HAL_COMP_Start_IT+0xa8>
 8004b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b12:	e007      	b.n	8004b24 <HAL_COMP_Start_IT+0xa8>
 8004b14:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004b18:	e004      	b.n	8004b24 <HAL_COMP_Start_IT+0xa8>
 8004b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b1e:	e001      	b.n	8004b24 <HAL_COMP_Start_IT+0xa8>
 8004b20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b24:	60bb      	str	r3, [r7, #8]

        /* Configure the trigger rising edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_RISING) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d012      	beq.n	8004b58 <HAL_COMP_Start_IT+0xdc>
        {
          COMP_EXTI_RISING_ENABLE(extiline);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d006      	beq.n	8004b4a <HAL_COMP_Start_IT+0xce>
 8004b3c:	4b48      	ldr	r3, [pc, #288]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b40:	4947      	ldr	r1, [pc, #284]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	628b      	str	r3, [r1, #40]	; 0x28
 8004b48:	e01a      	b.n	8004b80 <HAL_COMP_Start_IT+0x104>
 8004b4a:	4b45      	ldr	r3, [pc, #276]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	4944      	ldr	r1, [pc, #272]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
 8004b56:	e013      	b.n	8004b80 <HAL_COMP_Start_IT+0x104>
        }
        else
        {
          COMP_EXTI_RISING_DISABLE(extiline);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <HAL_COMP_Start_IT+0xf6>
 8004b62:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	493d      	ldr	r1, [pc, #244]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b70:	e006      	b.n	8004b80 <HAL_COMP_Start_IT+0x104>
 8004b72:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	4939      	ldr	r1, [pc, #228]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]
        }
        /* Configure the trigger falling edge */
        if ((hcomp->Init.TriggerMode & COMP_TRIGGERMODE_IT_FALLING) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d012      	beq.n	8004bb2 <HAL_COMP_Start_IT+0x136>
        {
          COMP_EXTI_FALLING_ENABLE(extiline);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d006      	beq.n	8004ba4 <HAL_COMP_Start_IT+0x128>
 8004b96:	4b32      	ldr	r3, [pc, #200]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9a:	4931      	ldr	r1, [pc, #196]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004ba2:	e01a      	b.n	8004bda <HAL_COMP_Start_IT+0x15e>
 8004ba4:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	492d      	ldr	r1, [pc, #180]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60cb      	str	r3, [r1, #12]
 8004bb0:	e013      	b.n	8004bda <HAL_COMP_Start_IT+0x15e>
        }
        else
        {
          COMP_EXTI_FALLING_DISABLE(extiline);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_COMP_Start_IT+0x150>
 8004bbc:	4b28      	ldr	r3, [pc, #160]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	4926      	ldr	r1, [pc, #152]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004bca:	e006      	b.n	8004bda <HAL_COMP_Start_IT+0x15e>
 8004bcc:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	4922      	ldr	r1, [pc, #136]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
        }

        /* Clear COMP EXTI pending bit if any */
        COMP_EXTI_CLEAR_FLAG(extiline);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_COMP_Start_IT+0x170>
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6353      	str	r3, [r2, #52]	; 0x34
 8004bea:	e002      	b.n	8004bf2 <HAL_COMP_Start_IT+0x176>
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	6153      	str	r3, [r2, #20]

        /* Enable EXTI interrupt mode */
        COMP_EXTI_ENABLE_IT(extiline);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d006      	beq.n	8004c0a <HAL_COMP_Start_IT+0x18e>
 8004bfc:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004bfe:	6a1a      	ldr	r2, [r3, #32]
 8004c00:	4917      	ldr	r1, [pc, #92]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	620b      	str	r3, [r1, #32]
 8004c08:	e005      	b.n	8004c16 <HAL_COMP_Start_IT+0x19a>
 8004c0a:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4914      	ldr	r1, [pc, #80]	; (8004c60 <HAL_COMP_Start_IT+0x1e4>)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]

        /* Enable the selected comparator */
        __HAL_COMP_ENABLE(hcomp);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0201 	orr.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

        hcomp->State = HAL_COMP_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004c2e:	e004      	b.n	8004c3a <HAL_COMP_Start_IT+0x1be>
      }
      else
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e001      	b.n	8004c3a <HAL_COMP_Start_IT+0x1be>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	4001001c 	.word	0x4001001c
 8004c4c:	40010020 	.word	0x40010020
 8004c50:	40010024 	.word	0x40010024
 8004c54:	40010028 	.word	0x40010028
 8004c58:	4001002c 	.word	0x4001002c
 8004c5c:	40010030 	.word	0x40010030
 8004c60:	40010400 	.word	0x40010400

08004c64 <HAL_COMP_Stop_IT>:
  * @brief  Stop the comparator in Interrupt mode.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop_IT(COMP_HandleTypeDef *hcomp)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	73fb      	strb	r3, [r7, #15]

  /* Disable the EXTI Line interrupt mode */
  COMP_EXTI_DISABLE_IT(COMP_GET_EXTI_LINE(hcomp->Instance));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a47      	ldr	r2, [pc, #284]	; (8004d94 <HAL_COMP_Stop_IT+0x130>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d04b      	beq.n	8004d12 <HAL_COMP_Stop_IT+0xae>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a46      	ldr	r2, [pc, #280]	; (8004d98 <HAL_COMP_Stop_IT+0x134>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d046      	beq.n	8004d12 <HAL_COMP_Stop_IT+0xae>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a44      	ldr	r2, [pc, #272]	; (8004d9c <HAL_COMP_Stop_IT+0x138>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d041      	beq.n	8004d12 <HAL_COMP_Stop_IT+0xae>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a43      	ldr	r2, [pc, #268]	; (8004da0 <HAL_COMP_Stop_IT+0x13c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d03c      	beq.n	8004d12 <HAL_COMP_Stop_IT+0xae>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a41      	ldr	r2, [pc, #260]	; (8004da4 <HAL_COMP_Stop_IT+0x140>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d037      	beq.n	8004d12 <HAL_COMP_Stop_IT+0xae>
 8004ca2:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <HAL_COMP_Stop_IT+0x144>)
 8004ca4:	6a1a      	ldr	r2, [r3, #32]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	493a      	ldr	r1, [pc, #232]	; (8004d94 <HAL_COMP_Stop_IT+0x130>)
 8004cac:	428b      	cmp	r3, r1
 8004cae:	d02a      	beq.n	8004d06 <HAL_COMP_Stop_IT+0xa2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4938      	ldr	r1, [pc, #224]	; (8004d98 <HAL_COMP_Stop_IT+0x134>)
 8004cb6:	428b      	cmp	r3, r1
 8004cb8:	d022      	beq.n	8004d00 <HAL_COMP_Stop_IT+0x9c>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4937      	ldr	r1, [pc, #220]	; (8004d9c <HAL_COMP_Stop_IT+0x138>)
 8004cc0:	428b      	cmp	r3, r1
 8004cc2:	d01a      	beq.n	8004cfa <HAL_COMP_Stop_IT+0x96>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4935      	ldr	r1, [pc, #212]	; (8004da0 <HAL_COMP_Stop_IT+0x13c>)
 8004cca:	428b      	cmp	r3, r1
 8004ccc:	d012      	beq.n	8004cf4 <HAL_COMP_Stop_IT+0x90>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4934      	ldr	r1, [pc, #208]	; (8004da4 <HAL_COMP_Stop_IT+0x140>)
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	d00a      	beq.n	8004cee <HAL_COMP_Stop_IT+0x8a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4933      	ldr	r1, [pc, #204]	; (8004dac <HAL_COMP_Stop_IT+0x148>)
 8004cde:	428b      	cmp	r3, r1
 8004ce0:	d102      	bne.n	8004ce8 <HAL_COMP_Stop_IT+0x84>
 8004ce2:	f06f 0301 	mvn.w	r3, #1
 8004ce6:	e010      	b.n	8004d0a <HAL_COMP_Stop_IT+0xa6>
 8004ce8:	f06f 0302 	mvn.w	r3, #2
 8004cec:	e00d      	b.n	8004d0a <HAL_COMP_Stop_IT+0xa6>
 8004cee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004cf2:	e00a      	b.n	8004d0a <HAL_COMP_Stop_IT+0xa6>
 8004cf4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004cf8:	e007      	b.n	8004d0a <HAL_COMP_Stop_IT+0xa6>
 8004cfa:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004cfe:	e004      	b.n	8004d0a <HAL_COMP_Stop_IT+0xa6>
 8004d00:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004d04:	e001      	b.n	8004d0a <HAL_COMP_Stop_IT+0xa6>
 8004d06:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004d0a:	4927      	ldr	r1, [pc, #156]	; (8004da8 <HAL_COMP_Stop_IT+0x144>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	620b      	str	r3, [r1, #32]
 8004d10:	e036      	b.n	8004d80 <HAL_COMP_Stop_IT+0x11c>
 8004d12:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <HAL_COMP_Stop_IT+0x144>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	491e      	ldr	r1, [pc, #120]	; (8004d94 <HAL_COMP_Stop_IT+0x130>)
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	d02a      	beq.n	8004d76 <HAL_COMP_Stop_IT+0x112>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	491c      	ldr	r1, [pc, #112]	; (8004d98 <HAL_COMP_Stop_IT+0x134>)
 8004d26:	428b      	cmp	r3, r1
 8004d28:	d022      	beq.n	8004d70 <HAL_COMP_Stop_IT+0x10c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	491b      	ldr	r1, [pc, #108]	; (8004d9c <HAL_COMP_Stop_IT+0x138>)
 8004d30:	428b      	cmp	r3, r1
 8004d32:	d01a      	beq.n	8004d6a <HAL_COMP_Stop_IT+0x106>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4919      	ldr	r1, [pc, #100]	; (8004da0 <HAL_COMP_Stop_IT+0x13c>)
 8004d3a:	428b      	cmp	r3, r1
 8004d3c:	d012      	beq.n	8004d64 <HAL_COMP_Stop_IT+0x100>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4918      	ldr	r1, [pc, #96]	; (8004da4 <HAL_COMP_Stop_IT+0x140>)
 8004d44:	428b      	cmp	r3, r1
 8004d46:	d00a      	beq.n	8004d5e <HAL_COMP_Stop_IT+0xfa>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4917      	ldr	r1, [pc, #92]	; (8004dac <HAL_COMP_Stop_IT+0x148>)
 8004d4e:	428b      	cmp	r3, r1
 8004d50:	d102      	bne.n	8004d58 <HAL_COMP_Stop_IT+0xf4>
 8004d52:	f06f 0301 	mvn.w	r3, #1
 8004d56:	e010      	b.n	8004d7a <HAL_COMP_Stop_IT+0x116>
 8004d58:	f06f 0302 	mvn.w	r3, #2
 8004d5c:	e00d      	b.n	8004d7a <HAL_COMP_Stop_IT+0x116>
 8004d5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004d62:	e00a      	b.n	8004d7a <HAL_COMP_Stop_IT+0x116>
 8004d64:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004d68:	e007      	b.n	8004d7a <HAL_COMP_Stop_IT+0x116>
 8004d6a:	f06f 5300 	mvn.w	r3, #536870912	; 0x20000000
 8004d6e:	e004      	b.n	8004d7a <HAL_COMP_Stop_IT+0x116>
 8004d70:	f46f 0380 	mvn.w	r3, #4194304	; 0x400000
 8004d74:	e001      	b.n	8004d7a <HAL_COMP_Stop_IT+0x116>
 8004d76:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8004d7a:	490b      	ldr	r1, [pc, #44]	; (8004da8 <HAL_COMP_Stop_IT+0x144>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	600b      	str	r3, [r1, #0]

  status = HAL_COMP_Stop(hcomp);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fdb3 	bl	80048ec <HAL_COMP_Stop>
 8004d86:	4603      	mov	r3, r0
 8004d88:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	4001001c 	.word	0x4001001c
 8004d98:	40010020 	.word	0x40010020
 8004d9c:	40010024 	.word	0x40010024
 8004da0:	40010028 	.word	0x40010028
 8004da4:	4001002c 	.word	0x4001002c
 8004da8:	40010400 	.word	0x40010400
 8004dac:	40010030 	.word	0x40010030

08004db0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t extiline = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <HAL_COMP_IRQHandler+0xc4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d028      	beq.n	8004e14 <HAL_COMP_IRQHandler+0x64>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <HAL_COMP_IRQHandler+0xc8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d020      	beq.n	8004e0e <HAL_COMP_IRQHandler+0x5e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2a      	ldr	r2, [pc, #168]	; (8004e7c <HAL_COMP_IRQHandler+0xcc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d018      	beq.n	8004e08 <HAL_COMP_IRQHandler+0x58>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a29      	ldr	r2, [pc, #164]	; (8004e80 <HAL_COMP_IRQHandler+0xd0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d010      	beq.n	8004e02 <HAL_COMP_IRQHandler+0x52>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a27      	ldr	r2, [pc, #156]	; (8004e84 <HAL_COMP_IRQHandler+0xd4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d008      	beq.n	8004dfc <HAL_COMP_IRQHandler+0x4c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <HAL_COMP_IRQHandler+0xd8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_COMP_IRQHandler+0x48>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e00f      	b.n	8004e18 <HAL_COMP_IRQHandler+0x68>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e00d      	b.n	8004e18 <HAL_COMP_IRQHandler+0x68>
 8004dfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e00:	e00a      	b.n	8004e18 <HAL_COMP_IRQHandler+0x68>
 8004e02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e06:	e007      	b.n	8004e18 <HAL_COMP_IRQHandler+0x68>
 8004e08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004e0c:	e004      	b.n	8004e18 <HAL_COMP_IRQHandler+0x68>
 8004e0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e12:	e001      	b.n	8004e18 <HAL_COMP_IRQHandler+0x68>
 8004e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if (COMP_EXTI_GET_FLAG(extiline) != RESET)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_COMP_IRQHandler+0x88>
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_COMP_IRQHandler+0xdc>)
 8004e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	e008      	b.n	8004e4a <HAL_COMP_IRQHandler+0x9a>
 8004e38:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <HAL_COMP_IRQHandler+0xdc>)
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bf14      	ite	ne
 8004e44:	2301      	movne	r3, #1
 8004e46:	2300      	moveq	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00e      	beq.n	8004e6c <HAL_COMP_IRQHandler+0xbc>
  {
    /* Clear COMP EXTI pending bit */
    COMP_EXTI_CLEAR_FLAG(extiline);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_COMP_IRQHandler+0xb0>
 8004e58:	4a0c      	ldr	r2, [pc, #48]	; (8004e8c <HAL_COMP_IRQHandler+0xdc>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6353      	str	r3, [r2, #52]	; 0x34
 8004e5e:	e002      	b.n	8004e66 <HAL_COMP_IRQHandler+0xb6>
 8004e60:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <HAL_COMP_IRQHandler+0xdc>)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6153      	str	r3, [r2, #20]

    /* COMP trigger callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fd f8ec 	bl	8002044 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	4001001c 	.word	0x4001001c
 8004e78:	40010020 	.word	0x40010020
 8004e7c:	40010024 	.word	0x40010024
 8004e80:	40010028 	.word	0x40010028
 8004e84:	4001002c 	.word	0x4001002c
 8004e88:	40010030 	.word	0x40010030
 8004e8c:	40010400 	.word	0x40010400

08004e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004eac:	4013      	ands	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ec2:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	60d3      	str	r3, [r2, #12]
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	e000ed00 	.word	0xe000ed00

08004ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	0a1b      	lsrs	r3, r3, #8
 8004ee2:	f003 0307 	and.w	r3, r3, #7
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	e000ed00 	.word	0xe000ed00

08004ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	db0b      	blt.n	8004f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	f003 021f 	and.w	r2, r3, #31
 8004f0c:	4907      	ldr	r1, [pc, #28]	; (8004f2c <__NVIC_EnableIRQ+0x38>)
 8004f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2001      	movs	r0, #1
 8004f16:	fa00 f202 	lsl.w	r2, r0, r2
 8004f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	e000e100 	.word	0xe000e100

08004f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	6039      	str	r1, [r7, #0]
 8004f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	db0a      	blt.n	8004f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	490c      	ldr	r1, [pc, #48]	; (8004f7c <__NVIC_SetPriority+0x4c>)
 8004f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4e:	0112      	lsls	r2, r2, #4
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	440b      	add	r3, r1
 8004f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f58:	e00a      	b.n	8004f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	4908      	ldr	r1, [pc, #32]	; (8004f80 <__NVIC_SetPriority+0x50>)
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	3b04      	subs	r3, #4
 8004f68:	0112      	lsls	r2, r2, #4
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	761a      	strb	r2, [r3, #24]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	e000e100 	.word	0xe000e100
 8004f80:	e000ed00 	.word	0xe000ed00

08004f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b089      	sub	sp, #36	; 0x24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f1c3 0307 	rsb	r3, r3, #7
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	bf28      	it	cs
 8004fa2:	2304      	movcs	r3, #4
 8004fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	2b06      	cmp	r3, #6
 8004fac:	d902      	bls.n	8004fb4 <NVIC_EncodePriority+0x30>
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	3b03      	subs	r3, #3
 8004fb2:	e000      	b.n	8004fb6 <NVIC_EncodePriority+0x32>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43da      	mvns	r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd6:	43d9      	mvns	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fdc:	4313      	orrs	r3, r2
         );
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3724      	adds	r7, #36	; 0x24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ffc:	d301      	bcc.n	8005002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ffe:	2301      	movs	r3, #1
 8005000:	e00f      	b.n	8005022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <SysTick_Config+0x40>)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3b01      	subs	r3, #1
 8005008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800500a:	210f      	movs	r1, #15
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	f7ff ff8e 	bl	8004f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <SysTick_Config+0x40>)
 8005016:	2200      	movs	r2, #0
 8005018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800501a:	4b04      	ldr	r3, [pc, #16]	; (800502c <SysTick_Config+0x40>)
 800501c:	2207      	movs	r2, #7
 800501e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	e000e010 	.word	0xe000e010

08005030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff ff29 	bl	8004e90 <__NVIC_SetPriorityGrouping>
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b086      	sub	sp, #24
 800504a:	af00      	add	r7, sp, #0
 800504c:	4603      	mov	r3, r0
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005058:	f7ff ff3e 	bl	8004ed8 <__NVIC_GetPriorityGrouping>
 800505c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68b9      	ldr	r1, [r7, #8]
 8005062:	6978      	ldr	r0, [r7, #20]
 8005064:	f7ff ff8e 	bl	8004f84 <NVIC_EncodePriority>
 8005068:	4602      	mov	r2, r0
 800506a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506e:	4611      	mov	r1, r2
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff ff5d 	bl	8004f30 <__NVIC_SetPriority>
}
 8005076:	bf00      	nop
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	4603      	mov	r3, r0
 8005086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff ff31 	bl	8004ef4 <__NVIC_EnableIRQ>
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff ffa2 	bl	8004fec <SysTick_Config>
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e014      	b.n	80050ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	791b      	ldrb	r3, [r3, #4]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d105      	bne.n	80050da <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fd fa35 	bl	8002544 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d105      	bne.n	8005134 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	3308      	adds	r3, #8
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e004      	b.n	800513e <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	3314      	adds	r3, #20
 800513c:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	461a      	mov	r2, r3
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	795b      	ldrb	r3, [r3, #5]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_DAC_Start+0x16>
 8005166:	2302      	movs	r3, #2
 8005168:	e039      	b.n	80051de <HAL_DAC_Start+0x8a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6819      	ldr	r1, [r3, #0]
 800517c:	2201      	movs	r2, #1
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	409a      	lsls	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10f      	bne.n	80051b0 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800519a:	2b3c      	cmp	r3, #60	; 0x3c
 800519c:	d118      	bne.n	80051d0 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	e00f      	b.n	80051d0 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80051ba:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80051be:	d107      	bne.n	80051d0 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0202 	orr.w	r2, r2, #2
 80051ce:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005200:	d120      	bne.n	8005244 <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800520c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005210:	d118      	bne.n	8005244 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2204      	movs	r2, #4
 8005216:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f043 0201 	orr.w	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800522c:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800523c:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ff59 	bl	80050f6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800524e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005252:	d120      	bne.n	8005296 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800525e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005262:	d118      	bne.n	8005296 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2204      	movs	r2, #4
 8005268:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f043 0202 	orr.w	r2, r3, #2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800527e:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800528e:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f851 	bl	8005338 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800529e:	b480      	push	{r7}
 80052a0:	b087      	sub	sp, #28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	795b      	ldrb	r3, [r3, #5]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_DAC_ConfigChannel+0x20>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e036      	b.n	800532c <HAL_DAC_ConfigChannel+0x8e>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2202      	movs	r2, #2
 80052c8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80052d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43db      	mvns	r3, r3
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4013      	ands	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6819      	ldr	r1, [r3, #0]
 800530c:	22c0      	movs	r2, #192	; 0xc0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	43da      	mvns	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	400a      	ands	r2, r1
 800531c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e037      	b.n	80053d2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005378:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800537c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800539e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f97f 	bl	80056b8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}  
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
 80053e6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_DMA_Start_IT+0x20>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e04a      	b.n	8005490 <HAL_DMA_Start_IT+0xb6>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005408:	2b01      	cmp	r3, #1
 800540a:	d13a      	bne.n	8005482 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f912 	bl	800565a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 020e 	orr.w	r2, r2, #14
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e00f      	b.n	8005470 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 020a 	orr.w	r2, r2, #10
 800545e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0204 	bic.w	r2, r2, #4
 800546e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e005      	b.n	800548e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800548a:	2302      	movs	r3, #2
 800548c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800548e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d005      	beq.n	80054ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2204      	movs	r2, #4
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
 80054b8:	e027      	b.n	800550a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 020e 	bic.w	r2, r2, #14
 80054c8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	2101      	movs	r1, #1
 80054e4:	fa01 f202 	lsl.w	r2, r1, r2
 80054e8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
    } 
  }
  return status;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	2204      	movs	r2, #4
 8005532:	409a      	lsls	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d024      	beq.n	8005586 <HAL_DMA_IRQHandler+0x72>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01f      	beq.n	8005586 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0204 	bic.w	r2, r2, #4
 8005562:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556c:	2104      	movs	r1, #4
 800556e:	fa01 f202 	lsl.w	r2, r1, r2
 8005572:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d06a      	beq.n	8005652 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005584:	e065      	b.n	8005652 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	2202      	movs	r2, #2
 800558c:	409a      	lsls	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d02c      	beq.n	80055f0 <HAL_DMA_IRQHandler+0xdc>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d027      	beq.n	80055f0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 020a 	bic.w	r2, r2, #10
 80055bc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	2102      	movs	r1, #2
 80055d0:	fa01 f202 	lsl.w	r2, r1, r2
 80055d4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d035      	beq.n	8005652 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80055ee:	e030      	b.n	8005652 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	2208      	movs	r2, #8
 80055f6:	409a      	lsls	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d028      	beq.n	8005652 <HAL_DMA_IRQHandler+0x13e>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d023      	beq.n	8005652 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 020e 	bic.w	r2, r2, #14
 8005618:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	2101      	movs	r1, #1
 8005624:	fa01 f202 	lsl.w	r2, r1, r2
 8005628:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
    }
  }
}  
 8005650:	e7ff      	b.n	8005652 <HAL_DMA_IRQHandler+0x13e>
 8005652:	bf00      	nop
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f202 	lsl.w	r2, r1, r2
 8005676:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b10      	cmp	r3, #16
 8005686:	d108      	bne.n	800569a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005698:	e007      	b.n	80056aa <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]
}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	4b14      	ldr	r3, [pc, #80]	; (8005718 <DMA_CalcBaseAndBitshift+0x60>)
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d80f      	bhi.n	80056ec <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b12      	ldr	r3, [pc, #72]	; (800571c <DMA_CalcBaseAndBitshift+0x64>)
 80056d4:	4413      	add	r3, r2
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <DMA_CalcBaseAndBitshift+0x68>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	009a      	lsls	r2, r3, #2
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a0f      	ldr	r2, [pc, #60]	; (8005724 <DMA_CalcBaseAndBitshift+0x6c>)
 80056e8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80056ea:	e00e      	b.n	800570a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <DMA_CalcBaseAndBitshift+0x70>)
 80056f4:	4413      	add	r3, r2
 80056f6:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <DMA_CalcBaseAndBitshift+0x68>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	009a      	lsls	r2, r3, #2
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a09      	ldr	r2, [pc, #36]	; (800572c <DMA_CalcBaseAndBitshift+0x74>)
 8005708:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40020407 	.word	0x40020407
 800571c:	bffdfff8 	.word	0xbffdfff8
 8005720:	cccccccd 	.word	0xcccccccd
 8005724:	40020000 	.word	0x40020000
 8005728:	bffdfbf8 	.word	0xbffdfbf8
 800572c:	40020400 	.word	0x40020400

08005730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800573e:	e154      	b.n	80059ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	2101      	movs	r1, #1
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	4013      	ands	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8146 	beq.w	80059e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d003      	beq.n	8005768 <HAL_GPIO_Init+0x38>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b12      	cmp	r3, #18
 8005766:	d123      	bne.n	80057b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	08da      	lsrs	r2, r3, #3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3208      	adds	r2, #8
 8005770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005774:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	220f      	movs	r2, #15
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4013      	ands	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	08da      	lsrs	r2, r3, #3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3208      	adds	r2, #8
 80057aa:	6939      	ldr	r1, [r7, #16]
 80057ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	2203      	movs	r2, #3
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	43db      	mvns	r3, r3
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f003 0203 	and.w	r2, r3, #3
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d00b      	beq.n	8005804 <HAL_GPIO_Init+0xd4>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d007      	beq.n	8005804 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057f8:	2b11      	cmp	r3, #17
 80057fa:	d003      	beq.n	8005804 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b12      	cmp	r3, #18
 8005802:	d130      	bne.n	8005866 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	2203      	movs	r2, #3
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	43db      	mvns	r3, r3
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4013      	ands	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800583a:	2201      	movs	r2, #1
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	43db      	mvns	r3, r3
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4013      	ands	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	f003 0201 	and.w	r2, r3, #1
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	2203      	movs	r2, #3
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4013      	ands	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80a0 	beq.w	80059e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a4:	4b58      	ldr	r3, [pc, #352]	; (8005a08 <HAL_GPIO_Init+0x2d8>)
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	4a57      	ldr	r2, [pc, #348]	; (8005a08 <HAL_GPIO_Init+0x2d8>)
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	6193      	str	r3, [r2, #24]
 80058b0:	4b55      	ldr	r3, [pc, #340]	; (8005a08 <HAL_GPIO_Init+0x2d8>)
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80058bc:	4a53      	ldr	r2, [pc, #332]	; (8005a0c <HAL_GPIO_Init+0x2dc>)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	089b      	lsrs	r3, r3, #2
 80058c2:	3302      	adds	r3, #2
 80058c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	220f      	movs	r2, #15
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4013      	ands	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058e6:	d019      	beq.n	800591c <HAL_GPIO_Init+0x1ec>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a49      	ldr	r2, [pc, #292]	; (8005a10 <HAL_GPIO_Init+0x2e0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_GPIO_Init+0x1e8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a48      	ldr	r2, [pc, #288]	; (8005a14 <HAL_GPIO_Init+0x2e4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00d      	beq.n	8005914 <HAL_GPIO_Init+0x1e4>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a47      	ldr	r2, [pc, #284]	; (8005a18 <HAL_GPIO_Init+0x2e8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <HAL_GPIO_Init+0x1e0>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a46      	ldr	r2, [pc, #280]	; (8005a1c <HAL_GPIO_Init+0x2ec>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d101      	bne.n	800590c <HAL_GPIO_Init+0x1dc>
 8005908:	2304      	movs	r3, #4
 800590a:	e008      	b.n	800591e <HAL_GPIO_Init+0x1ee>
 800590c:	2305      	movs	r3, #5
 800590e:	e006      	b.n	800591e <HAL_GPIO_Init+0x1ee>
 8005910:	2303      	movs	r3, #3
 8005912:	e004      	b.n	800591e <HAL_GPIO_Init+0x1ee>
 8005914:	2302      	movs	r3, #2
 8005916:	e002      	b.n	800591e <HAL_GPIO_Init+0x1ee>
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <HAL_GPIO_Init+0x1ee>
 800591c:	2300      	movs	r3, #0
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	f002 0203 	and.w	r2, r2, #3
 8005924:	0092      	lsls	r2, r2, #2
 8005926:	4093      	lsls	r3, r2
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800592e:	4937      	ldr	r1, [pc, #220]	; (8005a0c <HAL_GPIO_Init+0x2dc>)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	3302      	adds	r3, #2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800593c:	4b38      	ldr	r3, [pc, #224]	; (8005a20 <HAL_GPIO_Init+0x2f0>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	43db      	mvns	r3, r3
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4013      	ands	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005960:	4a2f      	ldr	r2, [pc, #188]	; (8005a20 <HAL_GPIO_Init+0x2f0>)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005966:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <HAL_GPIO_Init+0x2f0>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	43db      	mvns	r3, r3
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4013      	ands	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800598a:	4a25      	ldr	r2, [pc, #148]	; (8005a20 <HAL_GPIO_Init+0x2f0>)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005990:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <HAL_GPIO_Init+0x2f0>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	43db      	mvns	r3, r3
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4013      	ands	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80059b4:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_GPIO_Init+0x2f0>)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059ba:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <HAL_GPIO_Init+0x2f0>)
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	43db      	mvns	r3, r3
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4013      	ands	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80059de:	4a10      	ldr	r2, [pc, #64]	; (8005a20 <HAL_GPIO_Init+0x2f0>)
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	3301      	adds	r3, #1
 80059e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	fa22 f303 	lsr.w	r3, r2, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f47f aea3 	bne.w	8005740 <HAL_GPIO_Init+0x10>
  }
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	48000400 	.word	0x48000400
 8005a14:	48000800 	.word	0x48000800
 8005a18:	48000c00 	.word	0x48000c00
 8005a1c:	48001000 	.word	0x48001000
 8005a20:	40010400 	.word	0x40010400

08005a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	807b      	strh	r3, [r7, #2]
 8005a30:	4613      	mov	r3, r2
 8005a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a34:	787b      	ldrb	r3, [r7, #1]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a3a:	887a      	ldrh	r2, [r7, #2]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a40:	e002      	b.n	8005a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a42:	887a      	ldrh	r2, [r7, #2]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	1d3b      	adds	r3, r7, #4
 8005a5e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d102      	bne.n	8005a6e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f000 bef4 	b.w	8006856 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a6e:	1d3b      	adds	r3, r7, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 816a 	beq.w	8005d52 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a7e:	4bb3      	ldr	r3, [pc, #716]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d00c      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a8a:	4bb0      	ldr	r3, [pc, #704]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d159      	bne.n	8005b4a <HAL_RCC_OscConfig+0xf6>
 8005a96:	4bad      	ldr	r3, [pc, #692]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa2:	d152      	bne.n	8005b4a <HAL_RCC_OscConfig+0xf6>
 8005aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aa8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005ab0:	fa93 f3a3 	rbit	r3, r3
 8005ab4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ab8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005abc:	fab3 f383 	clz	r3, r3
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d102      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x82>
 8005ad0:	4b9e      	ldr	r3, [pc, #632]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	e015      	b.n	8005b02 <HAL_RCC_OscConfig+0xae>
 8005ad6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ada:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ade:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005ae2:	fa93 f3a3 	rbit	r3, r3
 8005ae6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005af2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005af6:	fa93 f3a3 	rbit	r3, r3
 8005afa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005afe:	4b93      	ldr	r3, [pc, #588]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b06:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005b0a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005b0e:	fa92 f2a2 	rbit	r2, r2
 8005b12:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005b16:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005b1a:	fab2 f282 	clz	r2, r2
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	f042 0220 	orr.w	r2, r2, #32
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	f002 021f 	and.w	r2, r2, #31
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 810c 	beq.w	8005d50 <HAL_RCC_OscConfig+0x2fc>
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 8106 	bne.w	8005d50 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f000 be86 	b.w	8006856 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b4a:	1d3b      	adds	r3, r7, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b54:	d106      	bne.n	8005b64 <HAL_RCC_OscConfig+0x110>
 8005b56:	4b7d      	ldr	r3, [pc, #500]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a7c      	ldr	r2, [pc, #496]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e030      	b.n	8005bc6 <HAL_RCC_OscConfig+0x172>
 8005b64:	1d3b      	adds	r3, r7, #4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10c      	bne.n	8005b88 <HAL_RCC_OscConfig+0x134>
 8005b6e:	4b77      	ldr	r3, [pc, #476]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a76      	ldr	r2, [pc, #472]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	4b74      	ldr	r3, [pc, #464]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a73      	ldr	r2, [pc, #460]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	e01e      	b.n	8005bc6 <HAL_RCC_OscConfig+0x172>
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b92:	d10c      	bne.n	8005bae <HAL_RCC_OscConfig+0x15a>
 8005b94:	4b6d      	ldr	r3, [pc, #436]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a6c      	ldr	r2, [pc, #432]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005b9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	4b6a      	ldr	r3, [pc, #424]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a69      	ldr	r2, [pc, #420]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	e00b      	b.n	8005bc6 <HAL_RCC_OscConfig+0x172>
 8005bae:	4b67      	ldr	r3, [pc, #412]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a66      	ldr	r2, [pc, #408]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	4b64      	ldr	r3, [pc, #400]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a63      	ldr	r2, [pc, #396]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bc4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005bc6:	4b61      	ldr	r3, [pc, #388]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	f023 020f 	bic.w	r2, r3, #15
 8005bce:	1d3b      	adds	r3, r7, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	495d      	ldr	r1, [pc, #372]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bda:	1d3b      	adds	r3, r7, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d059      	beq.n	8005c98 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be4:	f7fd f8b8 	bl	8002d58 <HAL_GetTick>
 8005be8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bec:	e00a      	b.n	8005c04 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bee:	f7fd f8b3 	bl	8002d58 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	; 0x64
 8005bfc:	d902      	bls.n	8005c04 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	f000 be29 	b.w	8006856 <HAL_RCC_OscConfig+0xe02>
 8005c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c08:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005c10:	fa93 f3a3 	rbit	r3, r3
 8005c14:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005c18:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c1c:	fab3 f383 	clz	r3, r3
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d102      	bne.n	8005c36 <HAL_RCC_OscConfig+0x1e2>
 8005c30:	4b46      	ldr	r3, [pc, #280]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	e015      	b.n	8005c62 <HAL_RCC_OscConfig+0x20e>
 8005c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c3a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005c42:	fa93 f3a3 	rbit	r3, r3
 8005c46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c4e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005c52:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005c56:	fa93 f3a3 	rbit	r3, r3
 8005c5a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005c5e:	4b3b      	ldr	r3, [pc, #236]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c66:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005c6a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005c6e:	fa92 f2a2 	rbit	r2, r2
 8005c72:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005c76:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005c7a:	fab2 f282 	clz	r2, r2
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	f042 0220 	orr.w	r2, r2, #32
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	f002 021f 	and.w	r2, r2, #31
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c90:	4013      	ands	r3, r2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0ab      	beq.n	8005bee <HAL_RCC_OscConfig+0x19a>
 8005c96:	e05c      	b.n	8005d52 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c98:	f7fd f85e 	bl	8002d58 <HAL_GetTick>
 8005c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ca2:	f7fd f859 	bl	8002d58 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	; 0x64
 8005cb0:	d902      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	f000 bdcf 	b.w	8006856 <HAL_RCC_OscConfig+0xe02>
 8005cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cbc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005cc4:	fa93 f3a3 	rbit	r3, r3
 8005cc8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005ccc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd0:	fab3 f383 	clz	r3, r3
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d102      	bne.n	8005cea <HAL_RCC_OscConfig+0x296>
 8005ce4:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	e015      	b.n	8005d16 <HAL_RCC_OscConfig+0x2c2>
 8005cea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005cf6:	fa93 f3a3 	rbit	r3, r3
 8005cfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d02:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005d06:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005d0a:	fa93 f3a3 	rbit	r3, r3
 8005d0e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005d12:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <HAL_RCC_OscConfig+0x2f8>)
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d1a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005d1e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005d22:	fa92 f2a2 	rbit	r2, r2
 8005d26:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005d2a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005d2e:	fab2 f282 	clz	r2, r2
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	f042 0220 	orr.w	r2, r2, #32
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	f002 021f 	and.w	r2, r2, #31
 8005d3e:	2101      	movs	r1, #1
 8005d40:	fa01 f202 	lsl.w	r2, r1, r2
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ab      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x24e>
 8005d4a:	e002      	b.n	8005d52 <HAL_RCC_OscConfig+0x2fe>
 8005d4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 816f 	beq.w	8006040 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005d62:	4bd0      	ldr	r3, [pc, #832]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005d6e:	4bcd      	ldr	r3, [pc, #820]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d16c      	bne.n	8005e54 <HAL_RCC_OscConfig+0x400>
 8005d7a:	4bca      	ldr	r3, [pc, #808]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d166      	bne.n	8005e54 <HAL_RCC_OscConfig+0x400>
 8005d86:	2302      	movs	r3, #2
 8005d88:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005d90:	fa93 f3a3 	rbit	r3, r3
 8005d94:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005d98:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9c:	fab3 f383 	clz	r3, r3
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d102      	bne.n	8005db6 <HAL_RCC_OscConfig+0x362>
 8005db0:	4bbc      	ldr	r3, [pc, #752]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	e013      	b.n	8005dde <HAL_RCC_OscConfig+0x38a>
 8005db6:	2302      	movs	r3, #2
 8005db8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dbc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005dc0:	fa93 f3a3 	rbit	r3, r3
 8005dc4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005dc8:	2302      	movs	r3, #2
 8005dca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005dce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005dd2:	fa93 f3a3 	rbit	r3, r3
 8005dd6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005dda:	4bb2      	ldr	r3, [pc, #712]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	2202      	movs	r2, #2
 8005de0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005de4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005de8:	fa92 f2a2 	rbit	r2, r2
 8005dec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005df0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005df4:	fab2 f282 	clz	r2, r2
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	f042 0220 	orr.w	r2, r2, #32
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	f002 021f 	and.w	r2, r2, #31
 8005e04:	2101      	movs	r1, #1
 8005e06:	fa01 f202 	lsl.w	r2, r1, r2
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <HAL_RCC_OscConfig+0x3cc>
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d002      	beq.n	8005e20 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f000 bd1b 	b.w	8006856 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e20:	4ba0      	ldr	r3, [pc, #640]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	21f8      	movs	r1, #248	; 0xf8
 8005e30:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e34:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005e38:	fa91 f1a1 	rbit	r1, r1
 8005e3c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005e40:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005e44:	fab1 f181 	clz	r1, r1
 8005e48:	b2c9      	uxtb	r1, r1
 8005e4a:	408b      	lsls	r3, r1
 8005e4c:	4995      	ldr	r1, [pc, #596]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e52:	e0f5      	b.n	8006040 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e54:	1d3b      	adds	r3, r7, #4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8085 	beq.w	8005f6a <HAL_RCC_OscConfig+0x516>
 8005e60:	2301      	movs	r3, #1
 8005e62:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e66:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e6a:	fa93 f3a3 	rbit	r3, r3
 8005e6e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005e72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e76:	fab3 f383 	clz	r3, r3
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	461a      	mov	r2, r3
 8005e88:	2301      	movs	r3, #1
 8005e8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8c:	f7fc ff64 	bl	8002d58 <HAL_GetTick>
 8005e90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e94:	e00a      	b.n	8005eac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e96:	f7fc ff5f 	bl	8002d58 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d902      	bls.n	8005eac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	f000 bcd5 	b.w	8006856 <HAL_RCC_OscConfig+0xe02>
 8005eac:	2302      	movs	r3, #2
 8005eae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005eb6:	fa93 f3a3 	rbit	r3, r3
 8005eba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005ebe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec2:	fab3 f383 	clz	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d102      	bne.n	8005edc <HAL_RCC_OscConfig+0x488>
 8005ed6:	4b73      	ldr	r3, [pc, #460]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	e013      	b.n	8005f04 <HAL_RCC_OscConfig+0x4b0>
 8005edc:	2302      	movs	r3, #2
 8005ede:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005ee6:	fa93 f3a3 	rbit	r3, r3
 8005eea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005eee:	2302      	movs	r3, #2
 8005ef0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005ef4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005ef8:	fa93 f3a3 	rbit	r3, r3
 8005efc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005f00:	4b68      	ldr	r3, [pc, #416]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	2202      	movs	r2, #2
 8005f06:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005f0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005f0e:	fa92 f2a2 	rbit	r2, r2
 8005f12:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005f16:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005f1a:	fab2 f282 	clz	r2, r2
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	f042 0220 	orr.w	r2, r2, #32
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	f002 021f 	and.w	r2, r2, #31
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0af      	beq.n	8005e96 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f36:	4b5b      	ldr	r3, [pc, #364]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	21f8      	movs	r1, #248	; 0xf8
 8005f46:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005f4e:	fa91 f1a1 	rbit	r1, r1
 8005f52:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005f56:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005f5a:	fab1 f181 	clz	r1, r1
 8005f5e:	b2c9      	uxtb	r1, r1
 8005f60:	408b      	lsls	r3, r1
 8005f62:	4950      	ldr	r1, [pc, #320]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	600b      	str	r3, [r1, #0]
 8005f68:	e06a      	b.n	8006040 <HAL_RCC_OscConfig+0x5ec>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f70:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005f74:	fa93 f3a3 	rbit	r3, r3
 8005f78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005f7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f80:	fab3 f383 	clz	r3, r3
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	461a      	mov	r2, r3
 8005f92:	2300      	movs	r3, #0
 8005f94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f96:	f7fc fedf 	bl	8002d58 <HAL_GetTick>
 8005f9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9e:	e00a      	b.n	8005fb6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa0:	f7fc feda 	bl	8002d58 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d902      	bls.n	8005fb6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	f000 bc50 	b.w	8006856 <HAL_RCC_OscConfig+0xe02>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005fc0:	fa93 f3a3 	rbit	r3, r3
 8005fc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fcc:	fab3 f383 	clz	r3, r3
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d102      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x592>
 8005fe0:	4b30      	ldr	r3, [pc, #192]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	e013      	b.n	800600e <HAL_RCC_OscConfig+0x5ba>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ff0:	fa93 f3a3 	rbit	r3, r3
 8005ff4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ffe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006002:	fa93 f3a3 	rbit	r3, r3
 8006006:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800600a:	4b26      	ldr	r3, [pc, #152]	; (80060a4 <HAL_RCC_OscConfig+0x650>)
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2202      	movs	r2, #2
 8006010:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006014:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006018:	fa92 f2a2 	rbit	r2, r2
 800601c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006020:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006024:	fab2 f282 	clz	r2, r2
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	f042 0220 	orr.w	r2, r2, #32
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	f002 021f 	and.w	r2, r2, #31
 8006034:	2101      	movs	r1, #1
 8006036:	fa01 f202 	lsl.w	r2, r1, r2
 800603a:	4013      	ands	r3, r2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1af      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006040:	1d3b      	adds	r3, r7, #4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80da 	beq.w	8006204 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006050:	1d3b      	adds	r3, r7, #4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d069      	beq.n	800612e <HAL_RCC_OscConfig+0x6da>
 800605a:	2301      	movs	r3, #1
 800605c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006060:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006064:	fa93 f3a3 	rbit	r3, r3
 8006068:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800606c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006070:	fab3 f383 	clz	r3, r3
 8006074:	b2db      	uxtb	r3, r3
 8006076:	461a      	mov	r2, r3
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_OscConfig+0x654>)
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	461a      	mov	r2, r3
 8006080:	2301      	movs	r3, #1
 8006082:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006084:	f7fc fe68 	bl	8002d58 <HAL_GetTick>
 8006088:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800608c:	e00e      	b.n	80060ac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800608e:	f7fc fe63 	bl	8002d58 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d906      	bls.n	80060ac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e3d9      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
 80060a2:	bf00      	nop
 80060a4:	40021000 	.word	0x40021000
 80060a8:	10908120 	.word	0x10908120
 80060ac:	2302      	movs	r3, #2
 80060ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060b6:	fa93 f3a3 	rbit	r3, r3
 80060ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80060be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80060c2:	2202      	movs	r2, #2
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	fa93 f2a3 	rbit	r2, r3
 80060d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80060da:	2202      	movs	r2, #2
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	fa93 f2a3 	rbit	r2, r3
 80060e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80060ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ee:	4ba5      	ldr	r3, [pc, #660]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80060f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80060f6:	2102      	movs	r1, #2
 80060f8:	6019      	str	r1, [r3, #0]
 80060fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	fa93 f1a3 	rbit	r1, r3
 8006104:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006108:	6019      	str	r1, [r3, #0]
  return result;
 800610a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	fab3 f383 	clz	r3, r3
 8006114:	b2db      	uxtb	r3, r3
 8006116:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800611a:	b2db      	uxtb	r3, r3
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2101      	movs	r1, #1
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	4013      	ands	r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0b0      	beq.n	800608e <HAL_RCC_OscConfig+0x63a>
 800612c:	e06a      	b.n	8006204 <HAL_RCC_OscConfig+0x7b0>
 800612e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006132:	2201      	movs	r2, #1
 8006134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006136:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	fa93 f2a3 	rbit	r2, r3
 8006140:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006144:	601a      	str	r2, [r3, #0]
  return result;
 8006146:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800614a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800614c:	fab3 f383 	clz	r3, r3
 8006150:	b2db      	uxtb	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	4b8c      	ldr	r3, [pc, #560]	; (8006388 <HAL_RCC_OscConfig+0x934>)
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	461a      	mov	r2, r3
 800615c:	2300      	movs	r3, #0
 800615e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006160:	f7fc fdfa 	bl	8002d58 <HAL_GetTick>
 8006164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006168:	e009      	b.n	800617e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800616a:	f7fc fdf5 	bl	8002d58 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e36b      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
 800617e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006182:	2202      	movs	r2, #2
 8006184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006186:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	fa93 f2a3 	rbit	r2, r3
 8006190:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800619a:	2202      	movs	r2, #2
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	fa93 f2a3 	rbit	r2, r3
 80061a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80061b2:	2202      	movs	r2, #2
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	fa93 f2a3 	rbit	r2, r3
 80061c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80061c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c6:	4b6f      	ldr	r3, [pc, #444]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80061c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80061ce:	2102      	movs	r1, #2
 80061d0:	6019      	str	r1, [r3, #0]
 80061d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	fa93 f1a3 	rbit	r1, r3
 80061dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80061e0:	6019      	str	r1, [r3, #0]
  return result;
 80061e2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	fab3 f383 	clz	r3, r3
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2101      	movs	r1, #1
 80061fa:	fa01 f303 	lsl.w	r3, r1, r3
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1b2      	bne.n	800616a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006204:	1d3b      	adds	r3, r7, #4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8158 	beq.w	80064c4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006214:	2300      	movs	r3, #0
 8006216:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800621a:	4b5a      	ldr	r3, [pc, #360]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d112      	bne.n	800624c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006226:	4b57      	ldr	r3, [pc, #348]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	4a56      	ldr	r2, [pc, #344]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006230:	61d3      	str	r3, [r2, #28]
 8006232:	4b54      	ldr	r3, [pc, #336]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800623a:	f107 0308 	add.w	r3, r7, #8
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f107 0308 	add.w	r3, r7, #8
 8006244:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624c:	4b4f      	ldr	r3, [pc, #316]	; (800638c <HAL_RCC_OscConfig+0x938>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d11a      	bne.n	800628e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006258:	4b4c      	ldr	r3, [pc, #304]	; (800638c <HAL_RCC_OscConfig+0x938>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a4b      	ldr	r2, [pc, #300]	; (800638c <HAL_RCC_OscConfig+0x938>)
 800625e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006262:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006264:	f7fc fd78 	bl	8002d58 <HAL_GetTick>
 8006268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626c:	e009      	b.n	8006282 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626e:	f7fc fd73 	bl	8002d58 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b64      	cmp	r3, #100	; 0x64
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e2e9      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006282:	4b42      	ldr	r3, [pc, #264]	; (800638c <HAL_RCC_OscConfig+0x938>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0ef      	beq.n	800626e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800628e:	1d3b      	adds	r3, r7, #4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d106      	bne.n	80062a6 <HAL_RCC_OscConfig+0x852>
 8006298:	4b3a      	ldr	r3, [pc, #232]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	4a39      	ldr	r2, [pc, #228]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 800629e:	f043 0301 	orr.w	r3, r3, #1
 80062a2:	6213      	str	r3, [r2, #32]
 80062a4:	e02f      	b.n	8006306 <HAL_RCC_OscConfig+0x8b2>
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10c      	bne.n	80062ca <HAL_RCC_OscConfig+0x876>
 80062b0:	4b34      	ldr	r3, [pc, #208]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	4a33      	ldr	r2, [pc, #204]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	6213      	str	r3, [r2, #32]
 80062bc:	4b31      	ldr	r3, [pc, #196]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	4a30      	ldr	r2, [pc, #192]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062c2:	f023 0304 	bic.w	r3, r3, #4
 80062c6:	6213      	str	r3, [r2, #32]
 80062c8:	e01d      	b.n	8006306 <HAL_RCC_OscConfig+0x8b2>
 80062ca:	1d3b      	adds	r3, r7, #4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	d10c      	bne.n	80062ee <HAL_RCC_OscConfig+0x89a>
 80062d4:	4b2b      	ldr	r3, [pc, #172]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	6213      	str	r3, [r2, #32]
 80062e0:	4b28      	ldr	r3, [pc, #160]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	4a27      	ldr	r2, [pc, #156]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062e6:	f043 0301 	orr.w	r3, r3, #1
 80062ea:	6213      	str	r3, [r2, #32]
 80062ec:	e00b      	b.n	8006306 <HAL_RCC_OscConfig+0x8b2>
 80062ee:	4b25      	ldr	r3, [pc, #148]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	4a24      	ldr	r2, [pc, #144]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	6213      	str	r3, [r2, #32]
 80062fa:	4b22      	ldr	r3, [pc, #136]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	4a21      	ldr	r2, [pc, #132]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 8006300:	f023 0304 	bic.w	r3, r3, #4
 8006304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006306:	1d3b      	adds	r3, r7, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d06b      	beq.n	80063e8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006310:	f7fc fd22 	bl	8002d58 <HAL_GetTick>
 8006314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006318:	e00b      	b.n	8006332 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800631a:	f7fc fd1d 	bl	8002d58 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e291      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
 8006332:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006336:	2202      	movs	r2, #2
 8006338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	fa93 f2a3 	rbit	r2, r3
 8006344:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800634e:	2202      	movs	r2, #2
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	fa93 f2a3 	rbit	r2, r3
 800635c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006360:	601a      	str	r2, [r3, #0]
  return result;
 8006362:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006366:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006368:	fab3 f383 	clz	r3, r3
 800636c:	b2db      	uxtb	r3, r3
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f043 0302 	orr.w	r3, r3, #2
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d109      	bne.n	8006390 <HAL_RCC_OscConfig+0x93c>
 800637c:	4b01      	ldr	r3, [pc, #4]	; (8006384 <HAL_RCC_OscConfig+0x930>)
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	e014      	b.n	80063ac <HAL_RCC_OscConfig+0x958>
 8006382:	bf00      	nop
 8006384:	40021000 	.word	0x40021000
 8006388:	10908120 	.word	0x10908120
 800638c:	40007000 	.word	0x40007000
 8006390:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006394:	2202      	movs	r2, #2
 8006396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006398:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	fa93 f2a3 	rbit	r2, r3
 80063a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	4bbb      	ldr	r3, [pc, #748]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80063b0:	2102      	movs	r1, #2
 80063b2:	6011      	str	r1, [r2, #0]
 80063b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80063b8:	6812      	ldr	r2, [r2, #0]
 80063ba:	fa92 f1a2 	rbit	r1, r2
 80063be:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80063c2:	6011      	str	r1, [r2, #0]
  return result;
 80063c4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80063c8:	6812      	ldr	r2, [r2, #0]
 80063ca:	fab2 f282 	clz	r2, r2
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	f002 021f 	and.w	r2, r2, #31
 80063da:	2101      	movs	r1, #1
 80063dc:	fa01 f202 	lsl.w	r2, r1, r2
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d099      	beq.n	800631a <HAL_RCC_OscConfig+0x8c6>
 80063e6:	e063      	b.n	80064b0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e8:	f7fc fcb6 	bl	8002d58 <HAL_GetTick>
 80063ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063f0:	e00b      	b.n	800640a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063f2:	f7fc fcb1 	bl	8002d58 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e225      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
 800640a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800640e:	2202      	movs	r2, #2
 8006410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006412:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	fa93 f2a3 	rbit	r2, r3
 800641c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006426:	2202      	movs	r2, #2
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	fa93 f2a3 	rbit	r2, r3
 8006434:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006438:	601a      	str	r2, [r3, #0]
  return result;
 800643a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800643e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006440:	fab3 f383 	clz	r3, r3
 8006444:	b2db      	uxtb	r3, r3
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f043 0302 	orr.w	r3, r3, #2
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d102      	bne.n	800645a <HAL_RCC_OscConfig+0xa06>
 8006454:	4b90      	ldr	r3, [pc, #576]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	e00d      	b.n	8006476 <HAL_RCC_OscConfig+0xa22>
 800645a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800645e:	2202      	movs	r2, #2
 8006460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006462:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	fa93 f2a3 	rbit	r2, r3
 800646c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	4b89      	ldr	r3, [pc, #548]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800647a:	2102      	movs	r1, #2
 800647c:	6011      	str	r1, [r2, #0]
 800647e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	fa92 f1a2 	rbit	r1, r2
 8006488:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800648c:	6011      	str	r1, [r2, #0]
  return result;
 800648e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	fab2 f282 	clz	r2, r2
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	f002 021f 	and.w	r2, r2, #31
 80064a4:	2101      	movs	r1, #1
 80064a6:	fa01 f202 	lsl.w	r2, r1, r2
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1a0      	bne.n	80063f2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d105      	bne.n	80064c4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064b8:	4b77      	ldr	r3, [pc, #476]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	4a76      	ldr	r2, [pc, #472]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 80064be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 81c2 	beq.w	8006854 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064d0:	4b71      	ldr	r3, [pc, #452]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 030c 	and.w	r3, r3, #12
 80064d8:	2b08      	cmp	r3, #8
 80064da:	f000 819c 	beq.w	8006816 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064de:	1d3b      	adds	r3, r7, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	f040 8114 	bne.w	8006712 <HAL_RCC_OscConfig+0xcbe>
 80064ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	fa93 f2a3 	rbit	r2, r3
 80064fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006502:	601a      	str	r2, [r3, #0]
  return result;
 8006504:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006508:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650a:	fab3 f383 	clz	r3, r3
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006514:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006520:	f7fc fc1a 	bl	8002d58 <HAL_GetTick>
 8006524:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006528:	e009      	b.n	800653e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652a:	f7fc fc15 	bl	8002d58 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e18b      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
 800653e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006548:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	fa93 f2a3 	rbit	r2, r3
 8006552:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006556:	601a      	str	r2, [r3, #0]
  return result;
 8006558:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800655c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800655e:	fab3 f383 	clz	r3, r3
 8006562:	b2db      	uxtb	r3, r3
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b01      	cmp	r3, #1
 8006570:	d102      	bne.n	8006578 <HAL_RCC_OscConfig+0xb24>
 8006572:	4b49      	ldr	r3, [pc, #292]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	e01b      	b.n	80065b0 <HAL_RCC_OscConfig+0xb5c>
 8006578:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800657c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006582:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	fa93 f2a3 	rbit	r2, r3
 800658c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006596:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	fa93 f2a3 	rbit	r2, r3
 80065a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	4b3a      	ldr	r3, [pc, #232]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80065b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80065b8:	6011      	str	r1, [r2, #0]
 80065ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80065be:	6812      	ldr	r2, [r2, #0]
 80065c0:	fa92 f1a2 	rbit	r1, r2
 80065c4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80065c8:	6011      	str	r1, [r2, #0]
  return result;
 80065ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	fab2 f282 	clz	r2, r2
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	f042 0220 	orr.w	r2, r2, #32
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	f002 021f 	and.w	r2, r2, #31
 80065e0:	2101      	movs	r1, #1
 80065e2:	fa01 f202 	lsl.w	r2, r1, r2
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d19e      	bne.n	800652a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065ec:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065f4:	1d3b      	adds	r3, r7, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	430b      	orrs	r3, r1
 8006602:	4925      	ldr	r1, [pc, #148]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
 8006608:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800660c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	fa93 f2a3 	rbit	r2, r3
 800661c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006620:	601a      	str	r2, [r3, #0]
  return result;
 8006622:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006626:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006628:	fab3 f383 	clz	r3, r3
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006632:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	461a      	mov	r2, r3
 800663a:	2301      	movs	r3, #1
 800663c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663e:	f7fc fb8b 	bl	8002d58 <HAL_GetTick>
 8006642:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006646:	e009      	b.n	800665c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006648:	f7fc fb86 	bl	8002d58 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e0fc      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
 800665c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006666:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	fa93 f2a3 	rbit	r2, r3
 8006670:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006674:	601a      	str	r2, [r3, #0]
  return result;
 8006676:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800667a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800667c:	fab3 f383 	clz	r3, r3
 8006680:	b2db      	uxtb	r3, r3
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	b2db      	uxtb	r3, r3
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b01      	cmp	r3, #1
 800668e:	d105      	bne.n	800669c <HAL_RCC_OscConfig+0xc48>
 8006690:	4b01      	ldr	r3, [pc, #4]	; (8006698 <HAL_RCC_OscConfig+0xc44>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	e01e      	b.n	80066d4 <HAL_RCC_OscConfig+0xc80>
 8006696:	bf00      	nop
 8006698:	40021000 	.word	0x40021000
 800669c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	fa93 f2a3 	rbit	r2, r3
 80066b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80066ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	fa93 f2a3 	rbit	r2, r3
 80066ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	4b63      	ldr	r3, [pc, #396]	; (8006860 <HAL_RCC_OscConfig+0xe0c>)
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80066d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80066dc:	6011      	str	r1, [r2, #0]
 80066de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	fa92 f1a2 	rbit	r1, r2
 80066e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80066ec:	6011      	str	r1, [r2, #0]
  return result;
 80066ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80066f2:	6812      	ldr	r2, [r2, #0]
 80066f4:	fab2 f282 	clz	r2, r2
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	f042 0220 	orr.w	r2, r2, #32
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	f002 021f 	and.w	r2, r2, #31
 8006704:	2101      	movs	r1, #1
 8006706:	fa01 f202 	lsl.w	r2, r1, r2
 800670a:	4013      	ands	r3, r2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d09b      	beq.n	8006648 <HAL_RCC_OscConfig+0xbf4>
 8006710:	e0a0      	b.n	8006854 <HAL_RCC_OscConfig+0xe00>
 8006712:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006716:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800671a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	fa93 f2a3 	rbit	r2, r3
 8006726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800672a:	601a      	str	r2, [r3, #0]
  return result;
 800672c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006730:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006732:	fab3 f383 	clz	r3, r3
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800673c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	461a      	mov	r2, r3
 8006744:	2300      	movs	r3, #0
 8006746:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006748:	f7fc fb06 	bl	8002d58 <HAL_GetTick>
 800674c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006750:	e009      	b.n	8006766 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006752:	f7fc fb01 	bl	8002d58 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e077      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
 8006766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800676a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800676e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	fa93 f2a3 	rbit	r2, r3
 800677a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800677e:	601a      	str	r2, [r3, #0]
  return result;
 8006780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006784:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006786:	fab3 f383 	clz	r3, r3
 800678a:	b2db      	uxtb	r3, r3
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b01      	cmp	r3, #1
 8006798:	d102      	bne.n	80067a0 <HAL_RCC_OscConfig+0xd4c>
 800679a:	4b31      	ldr	r3, [pc, #196]	; (8006860 <HAL_RCC_OscConfig+0xe0c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	e01b      	b.n	80067d8 <HAL_RCC_OscConfig+0xd84>
 80067a0:	f107 0320 	add.w	r3, r7, #32
 80067a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80067a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067aa:	f107 0320 	add.w	r3, r7, #32
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	fa93 f2a3 	rbit	r2, r3
 80067b4:	f107 031c 	add.w	r3, r7, #28
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	f107 0318 	add.w	r3, r7, #24
 80067be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	f107 0318 	add.w	r3, r7, #24
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	fa93 f2a3 	rbit	r2, r3
 80067ce:	f107 0314 	add.w	r3, r7, #20
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	4b22      	ldr	r3, [pc, #136]	; (8006860 <HAL_RCC_OscConfig+0xe0c>)
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	f107 0210 	add.w	r2, r7, #16
 80067dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	f107 0210 	add.w	r2, r7, #16
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	fa92 f1a2 	rbit	r1, r2
 80067ec:	f107 020c 	add.w	r2, r7, #12
 80067f0:	6011      	str	r1, [r2, #0]
  return result;
 80067f2:	f107 020c 	add.w	r2, r7, #12
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	fab2 f282 	clz	r2, r2
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	f042 0220 	orr.w	r2, r2, #32
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	f002 021f 	and.w	r2, r2, #31
 8006808:	2101      	movs	r1, #1
 800680a:	fa01 f202 	lsl.w	r2, r1, r2
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d19e      	bne.n	8006752 <HAL_RCC_OscConfig+0xcfe>
 8006814:	e01e      	b.n	8006854 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e018      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006824:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <HAL_RCC_OscConfig+0xe0c>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800682c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006830:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006834:	1d3b      	adds	r3, r7, #4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	429a      	cmp	r2, r3
 800683c:	d108      	bne.n	8006850 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800683e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006846:	1d3b      	adds	r3, r7, #4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40021000 	.word	0x40021000

08006864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b09e      	sub	sp, #120	; 0x78
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e162      	b.n	8006b42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800687c:	4b90      	ldr	r3, [pc, #576]	; (8006ac0 <HAL_RCC_ClockConfig+0x25c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d910      	bls.n	80068ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688a:	4b8d      	ldr	r3, [pc, #564]	; (8006ac0 <HAL_RCC_ClockConfig+0x25c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f023 0207 	bic.w	r2, r3, #7
 8006892:	498b      	ldr	r1, [pc, #556]	; (8006ac0 <HAL_RCC_ClockConfig+0x25c>)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	4313      	orrs	r3, r2
 8006898:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800689a:	4b89      	ldr	r3, [pc, #548]	; (8006ac0 <HAL_RCC_ClockConfig+0x25c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d001      	beq.n	80068ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e14a      	b.n	8006b42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d008      	beq.n	80068ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068b8:	4b82      	ldr	r3, [pc, #520]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	497f      	ldr	r1, [pc, #508]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80dc 	beq.w	8006a90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d13c      	bne.n	800695a <HAL_RCC_ClockConfig+0xf6>
 80068e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068e8:	fa93 f3a3 	rbit	r3, r3
 80068ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80068ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f0:	fab3 f383 	clz	r3, r3
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	d102      	bne.n	800690a <HAL_RCC_ClockConfig+0xa6>
 8006904:	4b6f      	ldr	r3, [pc, #444]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	e00f      	b.n	800692a <HAL_RCC_ClockConfig+0xc6>
 800690a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800690e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006912:	fa93 f3a3 	rbit	r3, r3
 8006916:	667b      	str	r3, [r7, #100]	; 0x64
 8006918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800691c:	663b      	str	r3, [r7, #96]	; 0x60
 800691e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006920:	fa93 f3a3 	rbit	r3, r3
 8006924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006926:	4b67      	ldr	r3, [pc, #412]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800692e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006932:	fa92 f2a2 	rbit	r2, r2
 8006936:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800693a:	fab2 f282 	clz	r2, r2
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	f042 0220 	orr.w	r2, r2, #32
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	f002 021f 	and.w	r2, r2, #31
 800694a:	2101      	movs	r1, #1
 800694c:	fa01 f202 	lsl.w	r2, r1, r2
 8006950:	4013      	ands	r3, r2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d17b      	bne.n	8006a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e0f3      	b.n	8006b42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d13c      	bne.n	80069dc <HAL_RCC_ClockConfig+0x178>
 8006962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006966:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800696a:	fa93 f3a3 	rbit	r3, r3
 800696e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006972:	fab3 f383 	clz	r3, r3
 8006976:	b2db      	uxtb	r3, r3
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b01      	cmp	r3, #1
 8006984:	d102      	bne.n	800698c <HAL_RCC_ClockConfig+0x128>
 8006986:	4b4f      	ldr	r3, [pc, #316]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	e00f      	b.n	80069ac <HAL_RCC_ClockConfig+0x148>
 800698c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006990:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006994:	fa93 f3a3 	rbit	r3, r3
 8006998:	647b      	str	r3, [r7, #68]	; 0x44
 800699a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800699e:	643b      	str	r3, [r7, #64]	; 0x40
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	fa93 f3a3 	rbit	r3, r3
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a8:	4b46      	ldr	r3, [pc, #280]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80069b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069b4:	fa92 f2a2 	rbit	r2, r2
 80069b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80069ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069bc:	fab2 f282 	clz	r2, r2
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	f042 0220 	orr.w	r2, r2, #32
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	f002 021f 	and.w	r2, r2, #31
 80069cc:	2101      	movs	r1, #1
 80069ce:	fa01 f202 	lsl.w	r2, r1, r2
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d13a      	bne.n	8006a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0b2      	b.n	8006b42 <HAL_RCC_ClockConfig+0x2de>
 80069dc:	2302      	movs	r3, #2
 80069de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	fa93 f3a3 	rbit	r3, r3
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80069e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ea:	fab3 f383 	clz	r3, r3
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d102      	bne.n	8006a04 <HAL_RCC_ClockConfig+0x1a0>
 80069fe:	4b31      	ldr	r3, [pc, #196]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	e00d      	b.n	8006a20 <HAL_RCC_ClockConfig+0x1bc>
 8006a04:	2302      	movs	r3, #2
 8006a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0a:	fa93 f3a3 	rbit	r3, r3
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a10:	2302      	movs	r3, #2
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	fa93 f3a3 	rbit	r3, r3
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	4b29      	ldr	r3, [pc, #164]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	2202      	movs	r2, #2
 8006a22:	61ba      	str	r2, [r7, #24]
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	fa92 f2a2 	rbit	r2, r2
 8006a2a:	617a      	str	r2, [r7, #20]
  return result;
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	fab2 f282 	clz	r2, r2
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	f042 0220 	orr.w	r2, r2, #32
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	f002 021f 	and.w	r2, r2, #31
 8006a3e:	2101      	movs	r1, #1
 8006a40:	fa01 f202 	lsl.w	r2, r1, r2
 8006a44:	4013      	ands	r3, r2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e079      	b.n	8006b42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a4e:	4b1d      	ldr	r3, [pc, #116]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f023 0203 	bic.w	r2, r3, #3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	491a      	ldr	r1, [pc, #104]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a60:	f7fc f97a 	bl	8002d58 <HAL_GetTick>
 8006a64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a66:	e00a      	b.n	8006a7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a68:	f7fc f976 	bl	8002d58 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e061      	b.n	8006b42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a7e:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <HAL_RCC_ClockConfig+0x260>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f003 020c 	and.w	r2, r3, #12
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d1eb      	bne.n	8006a68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <HAL_RCC_ClockConfig+0x25c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d214      	bcs.n	8006ac8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <HAL_RCC_ClockConfig+0x25c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f023 0207 	bic.w	r2, r3, #7
 8006aa6:	4906      	ldr	r1, [pc, #24]	; (8006ac0 <HAL_RCC_ClockConfig+0x25c>)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aae:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <HAL_RCC_ClockConfig+0x25c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d005      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e040      	b.n	8006b42 <HAL_RCC_ClockConfig+0x2de>
 8006ac0:	40022000 	.word	0x40022000
 8006ac4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ad4:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <HAL_RCC_ClockConfig+0x2e8>)
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	491a      	ldr	r1, [pc, #104]	; (8006b4c <HAL_RCC_ClockConfig+0x2e8>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d009      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006af2:	4b16      	ldr	r3, [pc, #88]	; (8006b4c <HAL_RCC_ClockConfig+0x2e8>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	4912      	ldr	r1, [pc, #72]	; (8006b4c <HAL_RCC_ClockConfig+0x2e8>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006b06:	f000 f829 	bl	8006b5c <HAL_RCC_GetSysClockFreq>
 8006b0a:	4601      	mov	r1, r0
 8006b0c:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <HAL_RCC_ClockConfig+0x2e8>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b14:	22f0      	movs	r2, #240	; 0xf0
 8006b16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	fa92 f2a2 	rbit	r2, r2
 8006b1e:	60fa      	str	r2, [r7, #12]
  return result;
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	fab2 f282 	clz	r2, r2
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	40d3      	lsrs	r3, r2
 8006b2a:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <HAL_RCC_ClockConfig+0x2ec>)
 8006b2c:	5cd3      	ldrb	r3, [r2, r3]
 8006b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8006b32:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <HAL_RCC_ClockConfig+0x2f0>)
 8006b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006b36:	4b08      	ldr	r3, [pc, #32]	; (8006b58 <HAL_RCC_ClockConfig+0x2f4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fc f8c8 	bl	8002cd0 <HAL_InitTick>
  
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3778      	adds	r7, #120	; 0x78
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	0800bad0 	.word	0x0800bad0
 8006b54:	2000001c 	.word	0x2000001c
 8006b58:	20000020 	.word	0x20000020

08006b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b08b      	sub	sp, #44	; 0x2c
 8006b60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	2300      	movs	r3, #0
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006b76:	4b29      	ldr	r3, [pc, #164]	; (8006c1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d002      	beq.n	8006b8c <HAL_RCC_GetSysClockFreq+0x30>
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d003      	beq.n	8006b92 <HAL_RCC_GetSysClockFreq+0x36>
 8006b8a:	e03c      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b8c:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006b8e:	623b      	str	r3, [r7, #32]
      break;
 8006b90:	e03c      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006b98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006b9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	fa92 f2a2 	rbit	r2, r2
 8006ba4:	607a      	str	r2, [r7, #4]
  return result;
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	fab2 f282 	clz	r2, r2
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	40d3      	lsrs	r3, r2
 8006bb0:	4a1c      	ldr	r2, [pc, #112]	; (8006c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006bb2:	5cd3      	ldrb	r3, [r2, r3]
 8006bb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006bb6:	4b19      	ldr	r3, [pc, #100]	; (8006c1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	220f      	movs	r2, #15
 8006bc0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	fa92 f2a2 	rbit	r2, r2
 8006bc8:	60fa      	str	r2, [r7, #12]
  return result;
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	fab2 f282 	clz	r2, r2
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	40d3      	lsrs	r3, r2
 8006bd4:	4a14      	ldr	r2, [pc, #80]	; (8006c28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006bd6:	5cd3      	ldrb	r3, [r2, r3]
 8006bd8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006be4:	4a0e      	ldr	r2, [pc, #56]	; (8006c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	fb02 f303 	mul.w	r3, r2, r3
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf4:	e004      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006bfa:	fb02 f303 	mul.w	r3, r2, r3
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	623b      	str	r3, [r7, #32]
      break;
 8006c04:	e002      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c06:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c08:	623b      	str	r3, [r7, #32]
      break;
 8006c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	372c      	adds	r7, #44	; 0x2c
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	00f42400 	.word	0x00f42400
 8006c24:	0800bae8 	.word	0x0800bae8
 8006c28:	0800baf8 	.word	0x0800baf8
 8006c2c:	003d0900 	.word	0x003d0900
 8006c30:	007a1200 	.word	0x007a1200

08006c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c38:	4b03      	ldr	r3, [pc, #12]	; (8006c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	2000001c 	.word	0x2000001c

08006c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006c52:	f7ff ffef 	bl	8006c34 <HAL_RCC_GetHCLKFreq>
 8006c56:	4601      	mov	r1, r0
 8006c58:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c60:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006c64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	fa92 f2a2 	rbit	r2, r2
 8006c6c:	603a      	str	r2, [r7, #0]
  return result;
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	fab2 f282 	clz	r2, r2
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	40d3      	lsrs	r3, r2
 8006c78:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <HAL_RCC_GetPCLK1Freq+0x40>)
 8006c7a:	5cd3      	ldrb	r3, [r2, r3]
 8006c7c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	0800bae0 	.word	0x0800bae0

08006c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006c96:	f7ff ffcd 	bl	8006c34 <HAL_RCC_GetHCLKFreq>
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006ca4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006ca8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	fa92 f2a2 	rbit	r2, r2
 8006cb0:	603a      	str	r2, [r7, #0]
  return result;
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	fab2 f282 	clz	r2, r2
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	40d3      	lsrs	r3, r2
 8006cbc:	4a04      	ldr	r2, [pc, #16]	; (8006cd0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006cbe:	5cd3      	ldrb	r3, [r2, r3]
 8006cc0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	0800bae0 	.word	0x0800bae0

08006cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b092      	sub	sp, #72	; 0x48
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80d7 	beq.w	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cf8:	4b4e      	ldr	r3, [pc, #312]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10e      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d04:	4b4b      	ldr	r3, [pc, #300]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	4a4a      	ldr	r2, [pc, #296]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d0e:	61d3      	str	r3, [r2, #28]
 8006d10:	4b48      	ldr	r3, [pc, #288]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d18:	60bb      	str	r3, [r7, #8]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d22:	4b45      	ldr	r3, [pc, #276]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d118      	bne.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d2e:	4b42      	ldr	r3, [pc, #264]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a41      	ldr	r2, [pc, #260]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d3a:	f7fc f80d 	bl	8002d58 <HAL_GetTick>
 8006d3e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d40:	e008      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d42:	f7fc f809 	bl	8002d58 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b64      	cmp	r3, #100	; 0x64
 8006d4e:	d901      	bls.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e169      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d54:	4b38      	ldr	r3, [pc, #224]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d0f0      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d60:	4b34      	ldr	r3, [pc, #208]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8084 	beq.w	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d07c      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d80:	4b2c      	ldr	r3, [pc, #176]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	fa93 f3a3 	rbit	r3, r3
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d9a:	fab3 f383 	clz	r3, r3
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	461a      	mov	r2, r3
 8006daa:	2301      	movs	r3, #1
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006db2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	fa93 f3a3 	rbit	r3, r3
 8006dba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dbe:	fab3 f383 	clz	r3, r3
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006dc8:	4413      	add	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006dd2:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d04b      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de2:	f7fb ffb9 	bl	8002d58 <HAL_GetTick>
 8006de6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de8:	e00a      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dea:	f7fb ffb5 	bl	8002d58 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e113      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006e00:	2302      	movs	r3, #2
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	fa93 f3a3 	rbit	r3, r3
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	623b      	str	r3, [r7, #32]
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	fa93 f3a3 	rbit	r3, r3
 8006e16:	61fb      	str	r3, [r7, #28]
  return result;
 8006e18:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e1a:	fab3 f383 	clz	r3, r3
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	095b      	lsrs	r3, r3, #5
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	f043 0302 	orr.w	r3, r3, #2
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d108      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006e2e:	4b01      	ldr	r3, [pc, #4]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	e00d      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006e34:	40021000 	.word	0x40021000
 8006e38:	40007000 	.word	0x40007000
 8006e3c:	10908100 	.word	0x10908100
 8006e40:	2302      	movs	r3, #2
 8006e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	fa93 f3a3 	rbit	r3, r3
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	4b78      	ldr	r3, [pc, #480]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	2202      	movs	r2, #2
 8006e52:	613a      	str	r2, [r7, #16]
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	fa92 f2a2 	rbit	r2, r2
 8006e5a:	60fa      	str	r2, [r7, #12]
  return result;
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	fab2 f282 	clz	r2, r2
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	f002 021f 	and.w	r2, r2, #31
 8006e6e:	2101      	movs	r1, #1
 8006e70:	fa01 f202 	lsl.w	r2, r1, r2
 8006e74:	4013      	ands	r3, r2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0b7      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006e7a:	4b6d      	ldr	r3, [pc, #436]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	496a      	ldr	r1, [pc, #424]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d105      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e94:	4b66      	ldr	r3, [pc, #408]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	4a65      	ldr	r2, [pc, #404]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006eac:	4b60      	ldr	r3, [pc, #384]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	f023 0203 	bic.w	r2, r3, #3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	495d      	ldr	r1, [pc, #372]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006eca:	4b59      	ldr	r3, [pc, #356]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	4956      	ldr	r1, [pc, #344]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ee8:	4b51      	ldr	r3, [pc, #324]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	494e      	ldr	r1, [pc, #312]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f06:	4b4a      	ldr	r3, [pc, #296]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	f023 0210 	bic.w	r2, r3, #16
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	4947      	ldr	r1, [pc, #284]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d008      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006f24:	4b42      	ldr	r3, [pc, #264]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	493f      	ldr	r1, [pc, #252]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d008      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f42:	4b3b      	ldr	r3, [pc, #236]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	f023 0220 	bic.w	r2, r3, #32
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	4938      	ldr	r1, [pc, #224]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f60:	4b33      	ldr	r3, [pc, #204]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	4930      	ldr	r1, [pc, #192]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0310 	and.w	r3, r3, #16
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d008      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f7e:	4b2c      	ldr	r3, [pc, #176]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	4929      	ldr	r1, [pc, #164]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d008      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f9c:	4b24      	ldr	r3, [pc, #144]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	4921      	ldr	r1, [pc, #132]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006fba:	4b1d      	ldr	r3, [pc, #116]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	491a      	ldr	r1, [pc, #104]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006fd8:	4b15      	ldr	r3, [pc, #84]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe4:	4912      	ldr	r1, [pc, #72]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d008      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006ff6:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	490b      	ldr	r1, [pc, #44]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007004:	4313      	orrs	r3, r2
 8007006:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007014:	4b06      	ldr	r3, [pc, #24]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007020:	4903      	ldr	r1, [pc, #12]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007022:	4313      	orrs	r3, r2
 8007024:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3748      	adds	r7, #72	; 0x48
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40021000 	.word	0x40021000

08007034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e01d      	b.n	8007082 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fb fae6 	bl	800262c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f000 fe34 	bl	8007ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	4b0e      	ldr	r3, [pc, #56]	; (80070dc <HAL_TIM_Base_Start+0x50>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b06      	cmp	r3, #6
 80070ac:	d00b      	beq.n	80070c6 <HAL_TIM_Base_Start+0x3a>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b4:	d007      	beq.n	80070c6 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0201 	orr.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	00010007 	.word	0x00010007

080070e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0201 	orr.w	r2, r2, #1
 80070f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	4b0c      	ldr	r3, [pc, #48]	; (8007130 <HAL_TIM_Base_Start_IT+0x50>)
 8007100:	4013      	ands	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b06      	cmp	r3, #6
 8007108:	d00b      	beq.n	8007122 <HAL_TIM_Base_Start_IT+0x42>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007110:	d007      	beq.n	8007122 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f042 0201 	orr.w	r2, r2, #1
 8007120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	00010007 	.word	0x00010007

08007134 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e01d      	b.n	8007182 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fb faf2 	bl	8002744 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3304      	adds	r3, #4
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	f000 fdb4 	bl	8007ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2201      	movs	r2, #1
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 fabc 	bl	800871c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1e      	ldr	r2, [pc, #120]	; (8007224 <HAL_TIM_OC_Start+0x98>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <HAL_TIM_OC_Start+0x4a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <HAL_TIM_OC_Start+0x9c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00e      	beq.n	80071d6 <HAL_TIM_OC_Start+0x4a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1b      	ldr	r2, [pc, #108]	; (800722c <HAL_TIM_OC_Start+0xa0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_TIM_OC_Start+0x4a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1a      	ldr	r2, [pc, #104]	; (8007230 <HAL_TIM_OC_Start+0xa4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_TIM_OC_Start+0x4a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a18      	ldr	r2, [pc, #96]	; (8007234 <HAL_TIM_OC_Start+0xa8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d101      	bne.n	80071da <HAL_TIM_OC_Start+0x4e>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <HAL_TIM_OC_Start+0x50>
 80071da:	2300      	movs	r3, #0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <HAL_TIM_OC_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	4b10      	ldr	r3, [pc, #64]	; (8007238 <HAL_TIM_OC_Start+0xac>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b06      	cmp	r3, #6
 8007200:	d00b      	beq.n	800721a <HAL_TIM_OC_Start+0x8e>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007208:	d007      	beq.n	800721a <HAL_TIM_OC_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0201 	orr.w	r2, r2, #1
 8007218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40013400 	.word	0x40013400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800
 8007238:	00010007 	.word	0x00010007

0800723c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e01d      	b.n	800728a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fb f9b4 	bl	80025d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f000 fd30 	bl	8007ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2201      	movs	r2, #1
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f001 fa38 	bl	800871c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1e      	ldr	r2, [pc, #120]	; (800732c <HAL_TIM_PWM_Start+0x98>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d013      	beq.n	80072de <HAL_TIM_PWM_Start+0x4a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <HAL_TIM_PWM_Start+0x9c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00e      	beq.n	80072de <HAL_TIM_PWM_Start+0x4a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <HAL_TIM_PWM_Start+0xa0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d009      	beq.n	80072de <HAL_TIM_PWM_Start+0x4a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1a      	ldr	r2, [pc, #104]	; (8007338 <HAL_TIM_PWM_Start+0xa4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d004      	beq.n	80072de <HAL_TIM_PWM_Start+0x4a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a18      	ldr	r2, [pc, #96]	; (800733c <HAL_TIM_PWM_Start+0xa8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d101      	bne.n	80072e2 <HAL_TIM_PWM_Start+0x4e>
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <HAL_TIM_PWM_Start+0x50>
 80072e2:	2300      	movs	r3, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	4b10      	ldr	r3, [pc, #64]	; (8007340 <HAL_TIM_PWM_Start+0xac>)
 8007300:	4013      	ands	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b06      	cmp	r3, #6
 8007308:	d00b      	beq.n	8007322 <HAL_TIM_PWM_Start+0x8e>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007310:	d007      	beq.n	8007322 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0201 	orr.w	r2, r2, #1
 8007320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40013400 	.word	0x40013400
 8007334:	40014000 	.word	0x40014000
 8007338:	40014400 	.word	0x40014400
 800733c:	40014800 	.word	0x40014800
 8007340:	00010007 	.word	0x00010007

08007344 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e01d      	b.n	8007392 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f815 	bl	800739a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f000 fcac 	bl	8007ce0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
	...

080073b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b0c      	cmp	r3, #12
 80073be:	d841      	bhi.n	8007444 <HAL_TIM_IC_Start_IT+0x94>
 80073c0:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <HAL_TIM_IC_Start_IT+0x18>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	080073fd 	.word	0x080073fd
 80073cc:	08007445 	.word	0x08007445
 80073d0:	08007445 	.word	0x08007445
 80073d4:	08007445 	.word	0x08007445
 80073d8:	0800740f 	.word	0x0800740f
 80073dc:	08007445 	.word	0x08007445
 80073e0:	08007445 	.word	0x08007445
 80073e4:	08007445 	.word	0x08007445
 80073e8:	08007421 	.word	0x08007421
 80073ec:	08007445 	.word	0x08007445
 80073f0:	08007445 	.word	0x08007445
 80073f4:	08007445 	.word	0x08007445
 80073f8:	08007433 	.word	0x08007433
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0202 	orr.w	r2, r2, #2
 800740a:	60da      	str	r2, [r3, #12]
      break;
 800740c:	e01b      	b.n	8007446 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0204 	orr.w	r2, r2, #4
 800741c:	60da      	str	r2, [r3, #12]
      break;
 800741e:	e012      	b.n	8007446 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0208 	orr.w	r2, r2, #8
 800742e:	60da      	str	r2, [r3, #12]
      break;
 8007430:	e009      	b.n	8007446 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f042 0210 	orr.w	r2, r2, #16
 8007440:	60da      	str	r2, [r3, #12]
      break;
 8007442:	e000      	b.n	8007446 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007444:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2201      	movs	r2, #1
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f001 f964 	bl	800871c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_TIM_IC_Start_IT+0xd8>)
 800745c:	4013      	ands	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b06      	cmp	r3, #6
 8007464:	d00b      	beq.n	800747e <HAL_TIM_IC_Start_IT+0xce>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800746c:	d007      	beq.n	800747e <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0201 	orr.w	r2, r2, #1
 800747c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	00010007 	.word	0x00010007

0800748c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d122      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d11b      	bne.n	80074e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0202 	mvn.w	r2, #2
 80074b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fa fdce 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 80074d4:	e005      	b.n	80074e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fbe3 	bl	8007ca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fbea 	bl	8007cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d122      	bne.n	800753c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b04      	cmp	r3, #4
 8007502:	d11b      	bne.n	800753c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0204 	mvn.w	r2, #4
 800750c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fa fda4 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 8007528:	e005      	b.n	8007536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fbb9 	bl	8007ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fbc0 	bl	8007cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b08      	cmp	r3, #8
 8007548:	d122      	bne.n	8007590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b08      	cmp	r3, #8
 8007556:	d11b      	bne.n	8007590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f06f 0208 	mvn.w	r2, #8
 8007560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2204      	movs	r2, #4
 8007566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fa fd7a 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 800757c:	e005      	b.n	800758a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fb8f 	bl	8007ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fb96 	bl	8007cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	2b10      	cmp	r3, #16
 800759c:	d122      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d11b      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0210 	mvn.w	r2, #16
 80075b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2208      	movs	r2, #8
 80075ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fa fd50 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 80075d0:	e005      	b.n	80075de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fb65 	bl	8007ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fb6c 	bl	8007cb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d10e      	bne.n	8007610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0301 	and.w	r3, r3, #1
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d107      	bne.n	8007610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0201 	mvn.w	r2, #1
 8007608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7fa fd24 	bl	8002058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b80      	cmp	r3, #128	; 0x80
 800761c:	d10e      	bne.n	800763c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d107      	bne.n	800763c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 f99e 	bl	8008978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800764a:	d10e      	bne.n	800766a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007656:	2b80      	cmp	r3, #128	; 0x80
 8007658:	d107      	bne.n	800766a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f991 	bl	800898c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d10e      	bne.n	8007696 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d107      	bne.n	8007696 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800768e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fb1a 	bl	8007cca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d10e      	bne.n	80076c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d107      	bne.n	80076c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f06f 0220 	mvn.w	r2, #32
 80076ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 f951 	bl	8008964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e06c      	b.n	80077c0 <HAL_TIM_OC_ConfigChannel+0xf4>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2202      	movs	r2, #2
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b14      	cmp	r3, #20
 80076fa:	d857      	bhi.n	80077ac <HAL_TIM_OC_ConfigChannel+0xe0>
 80076fc:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <HAL_TIM_OC_ConfigChannel+0x38>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	08007759 	.word	0x08007759
 8007708:	080077ad 	.word	0x080077ad
 800770c:	080077ad 	.word	0x080077ad
 8007710:	080077ad 	.word	0x080077ad
 8007714:	08007767 	.word	0x08007767
 8007718:	080077ad 	.word	0x080077ad
 800771c:	080077ad 	.word	0x080077ad
 8007720:	080077ad 	.word	0x080077ad
 8007724:	08007775 	.word	0x08007775
 8007728:	080077ad 	.word	0x080077ad
 800772c:	080077ad 	.word	0x080077ad
 8007730:	080077ad 	.word	0x080077ad
 8007734:	08007783 	.word	0x08007783
 8007738:	080077ad 	.word	0x080077ad
 800773c:	080077ad 	.word	0x080077ad
 8007740:	080077ad 	.word	0x080077ad
 8007744:	08007791 	.word	0x08007791
 8007748:	080077ad 	.word	0x080077ad
 800774c:	080077ad 	.word	0x080077ad
 8007750:	080077ad 	.word	0x080077ad
 8007754:	0800779f 	.word	0x0800779f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68b9      	ldr	r1, [r7, #8]
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fb4e 	bl	8007e00 <TIM_OC1_SetConfig>
      break;
 8007764:	e023      	b.n	80077ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fbd7 	bl	8007f20 <TIM_OC2_SetConfig>
      break;
 8007772:	e01c      	b.n	80077ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68b9      	ldr	r1, [r7, #8]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fc5a 	bl	8008034 <TIM_OC3_SetConfig>
      break;
 8007780:	e015      	b.n	80077ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fcdb 	bl	8008144 <TIM_OC4_SetConfig>
      break;
 800778e:	e00e      	b.n	80077ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fd3e 	bl	8008218 <TIM_OC5_SetConfig>
      break;
 800779c:	e007      	b.n	80077ae <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fd9b 	bl	80082e0 <TIM_OC6_SetConfig>
      break;
 80077aa:	e000      	b.n	80077ae <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80077ac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80077de:	2302      	movs	r3, #2
 80077e0:	e08a      	b.n	80078f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2202      	movs	r2, #2
 80077ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11b      	bne.n	8007830 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6819      	ldr	r1, [r3, #0]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f000 fdd0 	bl	80083ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 020c 	bic.w	r2, r2, #12
 800781a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6999      	ldr	r1, [r3, #24]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	619a      	str	r2, [r3, #24]
 800782e:	e05a      	b.n	80078e6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b04      	cmp	r3, #4
 8007834:	d11c      	bne.n	8007870 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	6819      	ldr	r1, [r3, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f000 fe48 	bl	80084da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	699a      	ldr	r2, [r3, #24]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007858:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6999      	ldr	r1, [r3, #24]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	021a      	lsls	r2, r3, #8
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	619a      	str	r2, [r3, #24]
 800786e:	e03a      	b.n	80078e6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b08      	cmp	r3, #8
 8007874:	d11b      	bne.n	80078ae <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	6819      	ldr	r1, [r3, #0]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f000 fe95 	bl	80085b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69da      	ldr	r2, [r3, #28]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 020c 	bic.w	r2, r2, #12
 8007898:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	61da      	str	r2, [r3, #28]
 80078ac:	e01b      	b.n	80078e6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6819      	ldr	r1, [r3, #0]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f000 feb5 	bl	800862c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69da      	ldr	r2, [r3, #28]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80078d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69d9      	ldr	r1, [r3, #28]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	021a      	lsls	r2, r3, #8
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007916:	2302      	movs	r3, #2
 8007918:	e105      	b.n	8007b26 <HAL_TIM_PWM_ConfigChannel+0x226>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2202      	movs	r2, #2
 8007926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b14      	cmp	r3, #20
 800792e:	f200 80f0 	bhi.w	8007b12 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	0800798d 	.word	0x0800798d
 800793c:	08007b13 	.word	0x08007b13
 8007940:	08007b13 	.word	0x08007b13
 8007944:	08007b13 	.word	0x08007b13
 8007948:	080079cd 	.word	0x080079cd
 800794c:	08007b13 	.word	0x08007b13
 8007950:	08007b13 	.word	0x08007b13
 8007954:	08007b13 	.word	0x08007b13
 8007958:	08007a0f 	.word	0x08007a0f
 800795c:	08007b13 	.word	0x08007b13
 8007960:	08007b13 	.word	0x08007b13
 8007964:	08007b13 	.word	0x08007b13
 8007968:	08007a4f 	.word	0x08007a4f
 800796c:	08007b13 	.word	0x08007b13
 8007970:	08007b13 	.word	0x08007b13
 8007974:	08007b13 	.word	0x08007b13
 8007978:	08007a91 	.word	0x08007a91
 800797c:	08007b13 	.word	0x08007b13
 8007980:	08007b13 	.word	0x08007b13
 8007984:	08007b13 	.word	0x08007b13
 8007988:	08007ad1 	.word	0x08007ad1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68b9      	ldr	r1, [r7, #8]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fa34 	bl	8007e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f042 0208 	orr.w	r2, r2, #8
 80079a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0204 	bic.w	r2, r2, #4
 80079b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6999      	ldr	r1, [r3, #24]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	619a      	str	r2, [r3, #24]
      break;
 80079ca:	e0a3      	b.n	8007b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 faa4 	bl	8007f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699a      	ldr	r2, [r3, #24]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6999      	ldr	r1, [r3, #24]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	021a      	lsls	r2, r3, #8
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	619a      	str	r2, [r3, #24]
      break;
 8007a0c:	e082      	b.n	8007b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68b9      	ldr	r1, [r7, #8]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fb0d 	bl	8008034 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69da      	ldr	r2, [r3, #28]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0208 	orr.w	r2, r2, #8
 8007a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69da      	ldr	r2, [r3, #28]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0204 	bic.w	r2, r2, #4
 8007a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69d9      	ldr	r1, [r3, #28]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	691a      	ldr	r2, [r3, #16]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	61da      	str	r2, [r3, #28]
      break;
 8007a4c:	e062      	b.n	8007b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68b9      	ldr	r1, [r7, #8]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 fb75 	bl	8008144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69da      	ldr	r2, [r3, #28]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69d9      	ldr	r1, [r3, #28]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	021a      	lsls	r2, r3, #8
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	61da      	str	r2, [r3, #28]
      break;
 8007a8e:	e041      	b.n	8007b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68b9      	ldr	r1, [r7, #8]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fbbe 	bl	8008218 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0208 	orr.w	r2, r2, #8
 8007aaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0204 	bic.w	r2, r2, #4
 8007aba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ace:	e021      	b.n	8007b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68b9      	ldr	r1, [r7, #8]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 fc02 	bl	80082e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007afa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	021a      	lsls	r2, r3, #8
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b10:	e000      	b.n	8007b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8007b12:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop

08007b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d101      	bne.n	8007b48 <HAL_TIM_ConfigClockSource+0x18>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e0a8      	b.n	8007c9a <HAL_TIM_ConfigClockSource+0x16a>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b40      	cmp	r3, #64	; 0x40
 8007b82:	d067      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0x124>
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d80b      	bhi.n	8007ba0 <HAL_TIM_ConfigClockSource+0x70>
 8007b88:	2b10      	cmp	r3, #16
 8007b8a:	d073      	beq.n	8007c74 <HAL_TIM_ConfigClockSource+0x144>
 8007b8c:	2b10      	cmp	r3, #16
 8007b8e:	d802      	bhi.n	8007b96 <HAL_TIM_ConfigClockSource+0x66>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d06f      	beq.n	8007c74 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007b94:	e078      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d06c      	beq.n	8007c74 <HAL_TIM_ConfigClockSource+0x144>
 8007b9a:	2b30      	cmp	r3, #48	; 0x30
 8007b9c:	d06a      	beq.n	8007c74 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007b9e:	e073      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007ba0:	2b70      	cmp	r3, #112	; 0x70
 8007ba2:	d00d      	beq.n	8007bc0 <HAL_TIM_ConfigClockSource+0x90>
 8007ba4:	2b70      	cmp	r3, #112	; 0x70
 8007ba6:	d804      	bhi.n	8007bb2 <HAL_TIM_ConfigClockSource+0x82>
 8007ba8:	2b50      	cmp	r3, #80	; 0x50
 8007baa:	d033      	beq.n	8007c14 <HAL_TIM_ConfigClockSource+0xe4>
 8007bac:	2b60      	cmp	r3, #96	; 0x60
 8007bae:	d041      	beq.n	8007c34 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007bb0:	e06a      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb6:	d066      	beq.n	8007c86 <HAL_TIM_ConfigClockSource+0x156>
 8007bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bbc:	d017      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007bbe:	e063      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	6899      	ldr	r1, [r3, #8]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f000 fd84 	bl	80086dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007be2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	609a      	str	r2, [r3, #8]
      break;
 8007bec:	e04c      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6899      	ldr	r1, [r3, #8]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f000 fd6d 	bl	80086dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c10:	609a      	str	r2, [r3, #8]
      break;
 8007c12:	e039      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	6859      	ldr	r1, [r3, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	461a      	mov	r2, r3
 8007c22:	f000 fc2b 	bl	800847c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2150      	movs	r1, #80	; 0x50
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fd3a 	bl	80086a6 <TIM_ITRx_SetConfig>
      break;
 8007c32:	e029      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	6859      	ldr	r1, [r3, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	461a      	mov	r2, r3
 8007c42:	f000 fc87 	bl	8008554 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2160      	movs	r1, #96	; 0x60
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fd2a 	bl	80086a6 <TIM_ITRx_SetConfig>
      break;
 8007c52:	e019      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6818      	ldr	r0, [r3, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6859      	ldr	r1, [r3, #4]
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	461a      	mov	r2, r3
 8007c62:	f000 fc0b 	bl	800847c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2140      	movs	r1, #64	; 0x40
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 fd1a 	bl	80086a6 <TIM_ITRx_SetConfig>
      break;
 8007c72:	e009      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f000 fd11 	bl	80086a6 <TIM_ITRx_SetConfig>
      break;
 8007c84:	e000      	b.n	8007c88 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
	...

08007ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a3c      	ldr	r2, [pc, #240]	; (8007de4 <TIM_Base_SetConfig+0x104>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d00f      	beq.n	8007d18 <TIM_Base_SetConfig+0x38>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cfe:	d00b      	beq.n	8007d18 <TIM_Base_SetConfig+0x38>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a39      	ldr	r2, [pc, #228]	; (8007de8 <TIM_Base_SetConfig+0x108>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d007      	beq.n	8007d18 <TIM_Base_SetConfig+0x38>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a38      	ldr	r2, [pc, #224]	; (8007dec <TIM_Base_SetConfig+0x10c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_Base_SetConfig+0x38>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a37      	ldr	r2, [pc, #220]	; (8007df0 <TIM_Base_SetConfig+0x110>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d108      	bne.n	8007d2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a2d      	ldr	r2, [pc, #180]	; (8007de4 <TIM_Base_SetConfig+0x104>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d01b      	beq.n	8007d6a <TIM_Base_SetConfig+0x8a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d38:	d017      	beq.n	8007d6a <TIM_Base_SetConfig+0x8a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a2a      	ldr	r2, [pc, #168]	; (8007de8 <TIM_Base_SetConfig+0x108>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d013      	beq.n	8007d6a <TIM_Base_SetConfig+0x8a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a29      	ldr	r2, [pc, #164]	; (8007dec <TIM_Base_SetConfig+0x10c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00f      	beq.n	8007d6a <TIM_Base_SetConfig+0x8a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a28      	ldr	r2, [pc, #160]	; (8007df0 <TIM_Base_SetConfig+0x110>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00b      	beq.n	8007d6a <TIM_Base_SetConfig+0x8a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a27      	ldr	r2, [pc, #156]	; (8007df4 <TIM_Base_SetConfig+0x114>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_Base_SetConfig+0x8a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a26      	ldr	r2, [pc, #152]	; (8007df8 <TIM_Base_SetConfig+0x118>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_Base_SetConfig+0x8a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a25      	ldr	r2, [pc, #148]	; (8007dfc <TIM_Base_SetConfig+0x11c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d108      	bne.n	8007d7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a10      	ldr	r2, [pc, #64]	; (8007de4 <TIM_Base_SetConfig+0x104>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00f      	beq.n	8007dc8 <TIM_Base_SetConfig+0xe8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a11      	ldr	r2, [pc, #68]	; (8007df0 <TIM_Base_SetConfig+0x110>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00b      	beq.n	8007dc8 <TIM_Base_SetConfig+0xe8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a10      	ldr	r2, [pc, #64]	; (8007df4 <TIM_Base_SetConfig+0x114>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d007      	beq.n	8007dc8 <TIM_Base_SetConfig+0xe8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a0f      	ldr	r2, [pc, #60]	; (8007df8 <TIM_Base_SetConfig+0x118>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d003      	beq.n	8007dc8 <TIM_Base_SetConfig+0xe8>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a0e      	ldr	r2, [pc, #56]	; (8007dfc <TIM_Base_SetConfig+0x11c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d103      	bne.n	8007dd0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	615a      	str	r2, [r3, #20]
}
 8007dd6:	bf00      	nop
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	40012c00 	.word	0x40012c00
 8007de8:	40000400 	.word	0x40000400
 8007dec:	40000800 	.word	0x40000800
 8007df0:	40013400 	.word	0x40013400
 8007df4:	40014000 	.word	0x40014000
 8007df8:	40014400 	.word	0x40014400
 8007dfc:	40014800 	.word	0x40014800

08007e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	f023 0201 	bic.w	r2, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0303 	bic.w	r3, r3, #3
 8007e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f023 0302 	bic.w	r3, r3, #2
 8007e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a2c      	ldr	r2, [pc, #176]	; (8007f0c <TIM_OC1_SetConfig+0x10c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00f      	beq.n	8007e80 <TIM_OC1_SetConfig+0x80>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a2b      	ldr	r2, [pc, #172]	; (8007f10 <TIM_OC1_SetConfig+0x110>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d00b      	beq.n	8007e80 <TIM_OC1_SetConfig+0x80>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a2a      	ldr	r2, [pc, #168]	; (8007f14 <TIM_OC1_SetConfig+0x114>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d007      	beq.n	8007e80 <TIM_OC1_SetConfig+0x80>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a29      	ldr	r2, [pc, #164]	; (8007f18 <TIM_OC1_SetConfig+0x118>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d003      	beq.n	8007e80 <TIM_OC1_SetConfig+0x80>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a28      	ldr	r2, [pc, #160]	; (8007f1c <TIM_OC1_SetConfig+0x11c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d10c      	bne.n	8007e9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f023 0308 	bic.w	r3, r3, #8
 8007e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f023 0304 	bic.w	r3, r3, #4
 8007e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a1b      	ldr	r2, [pc, #108]	; (8007f0c <TIM_OC1_SetConfig+0x10c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00f      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xc2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a1a      	ldr	r2, [pc, #104]	; (8007f10 <TIM_OC1_SetConfig+0x110>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00b      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xc2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a19      	ldr	r2, [pc, #100]	; (8007f14 <TIM_OC1_SetConfig+0x114>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d007      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xc2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <TIM_OC1_SetConfig+0x118>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d003      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xc2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a17      	ldr	r2, [pc, #92]	; (8007f1c <TIM_OC1_SetConfig+0x11c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d111      	bne.n	8007ee6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	621a      	str	r2, [r3, #32]
}
 8007f00:	bf00      	nop
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40013400 	.word	0x40013400
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40014400 	.word	0x40014400
 8007f1c:	40014800 	.word	0x40014800

08007f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	f023 0210 	bic.w	r2, r3, #16
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	021b      	lsls	r3, r3, #8
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f023 0320 	bic.w	r3, r3, #32
 8007f6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a28      	ldr	r2, [pc, #160]	; (8008020 <TIM_OC2_SetConfig+0x100>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d003      	beq.n	8007f8c <TIM_OC2_SetConfig+0x6c>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a27      	ldr	r2, [pc, #156]	; (8008024 <TIM_OC2_SetConfig+0x104>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d10d      	bne.n	8007fa8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a1d      	ldr	r2, [pc, #116]	; (8008020 <TIM_OC2_SetConfig+0x100>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00f      	beq.n	8007fd0 <TIM_OC2_SetConfig+0xb0>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a1c      	ldr	r2, [pc, #112]	; (8008024 <TIM_OC2_SetConfig+0x104>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00b      	beq.n	8007fd0 <TIM_OC2_SetConfig+0xb0>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a1b      	ldr	r2, [pc, #108]	; (8008028 <TIM_OC2_SetConfig+0x108>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d007      	beq.n	8007fd0 <TIM_OC2_SetConfig+0xb0>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a1a      	ldr	r2, [pc, #104]	; (800802c <TIM_OC2_SetConfig+0x10c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d003      	beq.n	8007fd0 <TIM_OC2_SetConfig+0xb0>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a19      	ldr	r2, [pc, #100]	; (8008030 <TIM_OC2_SetConfig+0x110>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d113      	bne.n	8007ff8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fd6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fde:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	621a      	str	r2, [r3, #32]
}
 8008012:	bf00      	nop
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40013400 	.word	0x40013400
 8008028:	40014000 	.word	0x40014000
 800802c:	40014400 	.word	0x40014400
 8008030:	40014800 	.word	0x40014800

08008034 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0303 	bic.w	r3, r3, #3
 800806e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a27      	ldr	r2, [pc, #156]	; (8008130 <TIM_OC3_SetConfig+0xfc>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d003      	beq.n	800809e <TIM_OC3_SetConfig+0x6a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a26      	ldr	r2, [pc, #152]	; (8008134 <TIM_OC3_SetConfig+0x100>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d10d      	bne.n	80080ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a1c      	ldr	r2, [pc, #112]	; (8008130 <TIM_OC3_SetConfig+0xfc>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d00f      	beq.n	80080e2 <TIM_OC3_SetConfig+0xae>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a1b      	ldr	r2, [pc, #108]	; (8008134 <TIM_OC3_SetConfig+0x100>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d00b      	beq.n	80080e2 <TIM_OC3_SetConfig+0xae>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a1a      	ldr	r2, [pc, #104]	; (8008138 <TIM_OC3_SetConfig+0x104>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d007      	beq.n	80080e2 <TIM_OC3_SetConfig+0xae>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a19      	ldr	r2, [pc, #100]	; (800813c <TIM_OC3_SetConfig+0x108>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d003      	beq.n	80080e2 <TIM_OC3_SetConfig+0xae>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a18      	ldr	r2, [pc, #96]	; (8008140 <TIM_OC3_SetConfig+0x10c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d113      	bne.n	800810a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	621a      	str	r2, [r3, #32]
}
 8008124:	bf00      	nop
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	40012c00 	.word	0x40012c00
 8008134:	40013400 	.word	0x40013400
 8008138:	40014000 	.word	0x40014000
 800813c:	40014400 	.word	0x40014400
 8008140:	40014800 	.word	0x40014800

08008144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800817e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	031b      	lsls	r3, r3, #12
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a18      	ldr	r2, [pc, #96]	; (8008204 <TIM_OC4_SetConfig+0xc0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00f      	beq.n	80081c8 <TIM_OC4_SetConfig+0x84>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a17      	ldr	r2, [pc, #92]	; (8008208 <TIM_OC4_SetConfig+0xc4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d00b      	beq.n	80081c8 <TIM_OC4_SetConfig+0x84>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a16      	ldr	r2, [pc, #88]	; (800820c <TIM_OC4_SetConfig+0xc8>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d007      	beq.n	80081c8 <TIM_OC4_SetConfig+0x84>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a15      	ldr	r2, [pc, #84]	; (8008210 <TIM_OC4_SetConfig+0xcc>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d003      	beq.n	80081c8 <TIM_OC4_SetConfig+0x84>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a14      	ldr	r2, [pc, #80]	; (8008214 <TIM_OC4_SetConfig+0xd0>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d109      	bne.n	80081dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	019b      	lsls	r3, r3, #6
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	621a      	str	r2, [r3, #32]
}
 80081f6:	bf00      	nop
 80081f8:	371c      	adds	r7, #28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40013400 	.word	0x40013400
 800820c:	40014000 	.word	0x40014000
 8008210:	40014400 	.word	0x40014400
 8008214:	40014800 	.word	0x40014800

08008218 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	4313      	orrs	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800825c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	041b      	lsls	r3, r3, #16
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a17      	ldr	r2, [pc, #92]	; (80082cc <TIM_OC5_SetConfig+0xb4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00f      	beq.n	8008292 <TIM_OC5_SetConfig+0x7a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a16      	ldr	r2, [pc, #88]	; (80082d0 <TIM_OC5_SetConfig+0xb8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00b      	beq.n	8008292 <TIM_OC5_SetConfig+0x7a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <TIM_OC5_SetConfig+0xbc>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d007      	beq.n	8008292 <TIM_OC5_SetConfig+0x7a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a14      	ldr	r2, [pc, #80]	; (80082d8 <TIM_OC5_SetConfig+0xc0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_OC5_SetConfig+0x7a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a13      	ldr	r2, [pc, #76]	; (80082dc <TIM_OC5_SetConfig+0xc4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d109      	bne.n	80082a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008298:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	621a      	str	r2, [r3, #32]
}
 80082c0:	bf00      	nop
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	40012c00 	.word	0x40012c00
 80082d0:	40013400 	.word	0x40013400
 80082d4:	40014000 	.word	0x40014000
 80082d8:	40014400 	.word	0x40014400
 80082dc:	40014800 	.word	0x40014800

080082e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800830e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	021b      	lsls	r3, r3, #8
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	051b      	lsls	r3, r3, #20
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a18      	ldr	r2, [pc, #96]	; (8008398 <TIM_OC6_SetConfig+0xb8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d00f      	beq.n	800835c <TIM_OC6_SetConfig+0x7c>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a17      	ldr	r2, [pc, #92]	; (800839c <TIM_OC6_SetConfig+0xbc>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00b      	beq.n	800835c <TIM_OC6_SetConfig+0x7c>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a16      	ldr	r2, [pc, #88]	; (80083a0 <TIM_OC6_SetConfig+0xc0>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d007      	beq.n	800835c <TIM_OC6_SetConfig+0x7c>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a15      	ldr	r2, [pc, #84]	; (80083a4 <TIM_OC6_SetConfig+0xc4>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d003      	beq.n	800835c <TIM_OC6_SetConfig+0x7c>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a14      	ldr	r2, [pc, #80]	; (80083a8 <TIM_OC6_SetConfig+0xc8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d109      	bne.n	8008370 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008362:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	029b      	lsls	r3, r3, #10
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4313      	orrs	r3, r2
 800836e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	621a      	str	r2, [r3, #32]
}
 800838a:	bf00      	nop
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	40012c00 	.word	0x40012c00
 800839c:	40013400 	.word	0x40013400
 80083a0:	40014000 	.word	0x40014000
 80083a4:	40014400 	.word	0x40014400
 80083a8:	40014800 	.word	0x40014800

080083ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f023 0201 	bic.w	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	4a24      	ldr	r2, [pc, #144]	; (8008468 <TIM_TI1_SetConfig+0xbc>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d013      	beq.n	8008402 <TIM_TI1_SetConfig+0x56>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e0:	d00f      	beq.n	8008402 <TIM_TI1_SetConfig+0x56>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	4a21      	ldr	r2, [pc, #132]	; (800846c <TIM_TI1_SetConfig+0xc0>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00b      	beq.n	8008402 <TIM_TI1_SetConfig+0x56>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4a20      	ldr	r2, [pc, #128]	; (8008470 <TIM_TI1_SetConfig+0xc4>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d007      	beq.n	8008402 <TIM_TI1_SetConfig+0x56>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4a1f      	ldr	r2, [pc, #124]	; (8008474 <TIM_TI1_SetConfig+0xc8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d003      	beq.n	8008402 <TIM_TI1_SetConfig+0x56>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	4a1e      	ldr	r2, [pc, #120]	; (8008478 <TIM_TI1_SetConfig+0xcc>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d101      	bne.n	8008406 <TIM_TI1_SetConfig+0x5a>
 8008402:	2301      	movs	r3, #1
 8008404:	e000      	b.n	8008408 <TIM_TI1_SetConfig+0x5c>
 8008406:	2300      	movs	r3, #0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d008      	beq.n	800841e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f023 0303 	bic.w	r3, r3, #3
 8008412:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	e003      	b.n	8008426 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800842c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	b2db      	uxtb	r3, r3
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f023 030a 	bic.w	r3, r3, #10
 8008440:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f003 030a 	and.w	r3, r3, #10
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	621a      	str	r2, [r3, #32]
}
 800845a:	bf00      	nop
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	40012c00 	.word	0x40012c00
 800846c:	40000400 	.word	0x40000400
 8008470:	40000800 	.word	0x40000800
 8008474:	40013400 	.word	0x40013400
 8008478:	40014000 	.word	0x40014000

0800847c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6a1b      	ldr	r3, [r3, #32]
 800848c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	f023 0201 	bic.w	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f023 030a 	bic.w	r3, r3, #10
 80084b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084da:	b480      	push	{r7}
 80084dc:	b087      	sub	sp, #28
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
 80084e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	f023 0210 	bic.w	r2, r3, #16
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008506:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	021b      	lsls	r3, r3, #8
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	031b      	lsls	r3, r3, #12
 800851e:	b29b      	uxth	r3, r3
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800852c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	4313      	orrs	r3, r2
 800853a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	621a      	str	r2, [r3, #32]
}
 8008548:	bf00      	nop
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	f023 0210 	bic.w	r2, r3, #16
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800857e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	031b      	lsls	r3, r3, #12
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008590:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	621a      	str	r2, [r3, #32]
}
 80085a8:	bf00      	nop
 80085aa:	371c      	adds	r7, #28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f023 0303 	bic.w	r3, r3, #3
 80085e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008604:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	621a      	str	r2, [r3, #32]
}
 8008620:	bf00      	nop
 8008622:	371c      	adds	r7, #28
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008658:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800866a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	031b      	lsls	r3, r3, #12
 8008670:	b29b      	uxth	r3, r3
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800867e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	031b      	lsls	r3, r3, #12
 8008684:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	621a      	str	r2, [r3, #32]
}
 800869a:	bf00      	nop
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f043 0307 	orr.w	r3, r3, #7
 80086c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	609a      	str	r2, [r3, #8]
}
 80086d0:	bf00      	nop
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	021a      	lsls	r2, r3, #8
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	431a      	orrs	r2, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4313      	orrs	r3, r2
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	4313      	orrs	r3, r2
 8008708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	609a      	str	r2, [r3, #8]
}
 8008710:	bf00      	nop
 8008712:	371c      	adds	r7, #28
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f003 031f 	and.w	r3, r3, #31
 800872e:	2201      	movs	r2, #1
 8008730:	fa02 f303 	lsl.w	r3, r2, r3
 8008734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a1a      	ldr	r2, [r3, #32]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	43db      	mvns	r3, r3
 800873e:	401a      	ands	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6a1a      	ldr	r2, [r3, #32]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f003 031f 	and.w	r3, r3, #31
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	fa01 f303 	lsl.w	r3, r1, r3
 8008754:	431a      	orrs	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
	...

08008768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800877c:	2302      	movs	r3, #2
 800877e:	e063      	b.n	8008848 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a2b      	ldr	r2, [pc, #172]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a2a      	ldr	r2, [pc, #168]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d108      	bne.n	80087c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a1b      	ldr	r2, [pc, #108]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d018      	beq.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f2:	d013      	beq.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a18      	ldr	r2, [pc, #96]	; (800885c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00e      	beq.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a17      	ldr	r2, [pc, #92]	; (8008860 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d009      	beq.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a12      	ldr	r2, [pc, #72]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d004      	beq.n	800881c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a13      	ldr	r2, [pc, #76]	; (8008864 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d10c      	bne.n	8008836 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008822:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	4313      	orrs	r3, r2
 800882c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	40012c00 	.word	0x40012c00
 8008858:	40013400 	.word	0x40013400
 800885c:	40000400 	.word	0x40000400
 8008860:	40000800 	.word	0x40000800
 8008864:	40014000 	.word	0x40014000

08008868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800887c:	2b01      	cmp	r3, #1
 800887e:	d101      	bne.n	8008884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008880:	2302      	movs	r3, #2
 8008882:	e065      	b.n	8008950 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	4313      	orrs	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	041b      	lsls	r3, r3, #16
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a16      	ldr	r2, [pc, #88]	; (800895c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a14      	ldr	r2, [pc, #80]	; (8008960 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d115      	bne.n	800893e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	051b      	lsls	r3, r3, #20
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	4313      	orrs	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	40012c00 	.word	0x40012c00
 8008960:	40013400 	.word	0x40013400

08008964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e040      	b.n	8008a34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7f9 ff1c 	bl	8002800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2224      	movs	r2, #36	; 0x24
 80089cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0201 	bic.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 faa8 	bl	8008f34 <UART_SetConfig>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d101      	bne.n	80089ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e022      	b.n	8008a34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d002      	beq.n	80089fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fcb6 	bl	8009368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689a      	ldr	r2, [r3, #8]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0201 	orr.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fd3d 	bl	80094ac <UART_CheckIdleState>
 8008a32:	4603      	mov	r3, r0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08a      	sub	sp, #40	; 0x28
 8008a40:	af02      	add	r7, sp, #8
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	f040 8081 	bne.w	8008b58 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <HAL_UART_Transmit+0x26>
 8008a5c:	88fb      	ldrh	r3, [r7, #6]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e079      	b.n	8008b5a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_UART_Transmit+0x38>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e072      	b.n	8008b5a <HAL_UART_Transmit+0x11e>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2221      	movs	r2, #33	; 0x21
 8008a86:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008a88:	f7fa f966 	bl	8002d58 <HAL_GetTick>
 8008a8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	88fa      	ldrh	r2, [r7, #6]
 8008a92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	88fa      	ldrh	r2, [r7, #6]
 8008a9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aa6:	d108      	bne.n	8008aba <HAL_UART_Transmit+0x7e>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d104      	bne.n	8008aba <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	61bb      	str	r3, [r7, #24]
 8008ab8:	e003      	b.n	8008ac2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ac2:	e02d      	b.n	8008b20 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2200      	movs	r2, #0
 8008acc:	2180      	movs	r1, #128	; 0x80
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 fd31 	bl	8009536 <UART_WaitOnFlagUntilTimeout>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e03d      	b.n	8008b5a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10b      	bne.n	8008afc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	881a      	ldrh	r2, [r3, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008af0:	b292      	uxth	r2, r2
 8008af2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	3302      	adds	r3, #2
 8008af8:	61bb      	str	r3, [r7, #24]
 8008afa:	e008      	b.n	8008b0e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	781a      	ldrb	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	b292      	uxth	r2, r2
 8008b06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	3b01      	subs	r3, #1
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1cb      	bne.n	8008ac4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2200      	movs	r2, #0
 8008b34:	2140      	movs	r1, #64	; 0x40
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 fcfd 	bl	8009536 <UART_WaitOnFlagUntilTimeout>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e009      	b.n	8008b5a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	e000      	b.n	8008b5a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008b58:	2302      	movs	r3, #2
  }
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3720      	adds	r7, #32
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b76:	2b20      	cmp	r3, #32
 8008b78:	d16c      	bne.n	8008c54 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <HAL_UART_Receive_DMA+0x22>
 8008b80:	88fb      	ldrh	r3, [r7, #6]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e065      	b.n	8008c56 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_UART_Receive_DMA+0x34>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e05e      	b.n	8008c56 <HAL_UART_Receive_DMA+0xf2>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	88fa      	ldrh	r2, [r7, #6]
 8008baa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2222      	movs	r2, #34	; 0x22
 8008bb8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d02a      	beq.n	8008c18 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc6:	4a26      	ldr	r2, [pc, #152]	; (8008c60 <HAL_UART_Receive_DMA+0xfc>)
 8008bc8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bce:	4a25      	ldr	r2, [pc, #148]	; (8008c64 <HAL_UART_Receive_DMA+0x100>)
 8008bd0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd6:	4a24      	ldr	r2, [pc, #144]	; (8008c68 <HAL_UART_Receive_DMA+0x104>)
 8008bd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bde:	2200      	movs	r2, #0
 8008be0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3324      	adds	r3, #36	; 0x24
 8008bec:	4619      	mov	r1, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	88fb      	ldrh	r3, [r7, #6]
 8008bf6:	f7fc fbf0 	bl	80053da <HAL_DMA_Start_IT>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00b      	beq.n	8008c18 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2210      	movs	r2, #16
 8008c04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2220      	movs	r2, #32
 8008c12:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e01e      	b.n	8008c56 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c2e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f042 0201 	orr.w	r2, r2, #1
 8008c3e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c4e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	e000      	b.n	8008c56 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8008c54:	2302      	movs	r3, #2
  }
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	08009697 	.word	0x08009697
 8008c64:	080096f9 	.word	0x080096f9
 8008c68:	08009715 	.word	0x08009715

08008c6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008c92:	4013      	ands	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d113      	bne.n	8008cc4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00e      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d009      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8114 	beq.w	8008ee2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	4798      	blx	r3
      }
      return;
 8008cc2:	e10e      	b.n	8008ee2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 80d6 	beq.w	8008e78 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d105      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 80cb 	beq.w	8008e78 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00e      	beq.n	8008d0a <HAL_UART_IRQHandler+0x9e>
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d009      	beq.n	8008d0a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d02:	f043 0201 	orr.w	r2, r3, #1
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	f003 0302 	and.w	r3, r3, #2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00e      	beq.n	8008d32 <HAL_UART_IRQHandler+0xc6>
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d009      	beq.n	8008d32 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2202      	movs	r2, #2
 8008d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d2a:	f043 0204 	orr.w	r2, r3, #4
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00e      	beq.n	8008d5a <HAL_UART_IRQHandler+0xee>
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2204      	movs	r2, #4
 8008d4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d52:	f043 0202 	orr.w	r2, r3, #2
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d013      	beq.n	8008d8c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	f003 0320 	and.w	r3, r3, #32
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d104      	bne.n	8008d78 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2208      	movs	r2, #8
 8008d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d84:	f043 0208 	orr.w	r2, r3, #8
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00f      	beq.n	8008db6 <HAL_UART_IRQHandler+0x14a>
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00a      	beq.n	8008db6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008da8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dae:	f043 0220 	orr.w	r2, r3, #32
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8093 	beq.w	8008ee6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00c      	beq.n	8008de4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d007      	beq.n	8008de4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008de8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df4:	2b40      	cmp	r3, #64	; 0x40
 8008df6:	d004      	beq.n	8008e02 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d031      	beq.n	8008e66 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fc27 	bl	8009656 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e12:	2b40      	cmp	r3, #64	; 0x40
 8008e14:	d123      	bne.n	8008e5e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e24:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d013      	beq.n	8008e56 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e32:	4a30      	ldr	r2, [pc, #192]	; (8008ef4 <HAL_UART_IRQHandler+0x288>)
 8008e34:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fc fb2c 	bl	8005498 <HAL_DMA_Abort_IT>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d016      	beq.n	8008e74 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008e50:	4610      	mov	r0, r2
 8008e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e54:	e00e      	b.n	8008e74 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f862 	bl	8008f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e5c:	e00a      	b.n	8008e74 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f85e 	bl	8008f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e64:	e006      	b.n	8008e74 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f85a 	bl	8008f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008e72:	e038      	b.n	8008ee6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e74:	bf00      	nop
    return;
 8008e76:	e036      	b.n	8008ee6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00d      	beq.n	8008e9e <HAL_UART_IRQHandler+0x232>
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d008      	beq.n	8008e9e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fca7 	bl	80097ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e9c:	e026      	b.n	8008eec <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00d      	beq.n	8008ec4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d008      	beq.n	8008ec4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d017      	beq.n	8008eea <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
    }
    return;
 8008ec2:	e012      	b.n	8008eea <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00e      	beq.n	8008eec <HAL_UART_IRQHandler+0x280>
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d009      	beq.n	8008eec <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fc6d 	bl	80097b8 <UART_EndTransmit_IT>
    return;
 8008ede:	bf00      	nop
 8008ee0:	e004      	b.n	8008eec <HAL_UART_IRQHandler+0x280>
      return;
 8008ee2:	bf00      	nop
 8008ee4:	e002      	b.n	8008eec <HAL_UART_IRQHandler+0x280>
    return;
 8008ee6:	bf00      	nop
 8008ee8:	e000      	b.n	8008eec <HAL_UART_IRQHandler+0x280>
    return;
 8008eea:	bf00      	nop
  }

}
 8008eec:	3720      	adds	r7, #32
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	0800978d 	.word	0x0800978d

08008ef8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008f66:	f023 030c 	bic.w	r3, r3, #12
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	6812      	ldr	r2, [r2, #0]
 8008f6e:	6939      	ldr	r1, [r7, #16]
 8008f70:	430b      	orrs	r3, r1
 8008f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4aa9      	ldr	r2, [pc, #676]	; (8009258 <UART_SetConfig+0x324>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d121      	bne.n	8008ffc <UART_SetConfig+0xc8>
 8008fb8:	4ba8      	ldr	r3, [pc, #672]	; (800925c <UART_SetConfig+0x328>)
 8008fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d817      	bhi.n	8008ff4 <UART_SetConfig+0xc0>
 8008fc4:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <UART_SetConfig+0x98>)
 8008fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fca:	bf00      	nop
 8008fcc:	08008fdd 	.word	0x08008fdd
 8008fd0:	08008fe9 	.word	0x08008fe9
 8008fd4:	08008fef 	.word	0x08008fef
 8008fd8:	08008fe3 	.word	0x08008fe3
 8008fdc:	2301      	movs	r3, #1
 8008fde:	77fb      	strb	r3, [r7, #31]
 8008fe0:	e0b2      	b.n	8009148 <UART_SetConfig+0x214>
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	77fb      	strb	r3, [r7, #31]
 8008fe6:	e0af      	b.n	8009148 <UART_SetConfig+0x214>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	77fb      	strb	r3, [r7, #31]
 8008fec:	e0ac      	b.n	8009148 <UART_SetConfig+0x214>
 8008fee:	2308      	movs	r3, #8
 8008ff0:	77fb      	strb	r3, [r7, #31]
 8008ff2:	e0a9      	b.n	8009148 <UART_SetConfig+0x214>
 8008ff4:	2310      	movs	r3, #16
 8008ff6:	77fb      	strb	r3, [r7, #31]
 8008ff8:	bf00      	nop
 8008ffa:	e0a5      	b.n	8009148 <UART_SetConfig+0x214>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a97      	ldr	r2, [pc, #604]	; (8009260 <UART_SetConfig+0x32c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d123      	bne.n	800904e <UART_SetConfig+0x11a>
 8009006:	4b95      	ldr	r3, [pc, #596]	; (800925c <UART_SetConfig+0x328>)
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800900e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009012:	d012      	beq.n	800903a <UART_SetConfig+0x106>
 8009014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009018:	d802      	bhi.n	8009020 <UART_SetConfig+0xec>
 800901a:	2b00      	cmp	r3, #0
 800901c:	d007      	beq.n	800902e <UART_SetConfig+0xfa>
 800901e:	e012      	b.n	8009046 <UART_SetConfig+0x112>
 8009020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009024:	d00c      	beq.n	8009040 <UART_SetConfig+0x10c>
 8009026:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800902a:	d003      	beq.n	8009034 <UART_SetConfig+0x100>
 800902c:	e00b      	b.n	8009046 <UART_SetConfig+0x112>
 800902e:	2300      	movs	r3, #0
 8009030:	77fb      	strb	r3, [r7, #31]
 8009032:	e089      	b.n	8009148 <UART_SetConfig+0x214>
 8009034:	2302      	movs	r3, #2
 8009036:	77fb      	strb	r3, [r7, #31]
 8009038:	e086      	b.n	8009148 <UART_SetConfig+0x214>
 800903a:	2304      	movs	r3, #4
 800903c:	77fb      	strb	r3, [r7, #31]
 800903e:	e083      	b.n	8009148 <UART_SetConfig+0x214>
 8009040:	2308      	movs	r3, #8
 8009042:	77fb      	strb	r3, [r7, #31]
 8009044:	e080      	b.n	8009148 <UART_SetConfig+0x214>
 8009046:	2310      	movs	r3, #16
 8009048:	77fb      	strb	r3, [r7, #31]
 800904a:	bf00      	nop
 800904c:	e07c      	b.n	8009148 <UART_SetConfig+0x214>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a84      	ldr	r2, [pc, #528]	; (8009264 <UART_SetConfig+0x330>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d123      	bne.n	80090a0 <UART_SetConfig+0x16c>
 8009058:	4b80      	ldr	r3, [pc, #512]	; (800925c <UART_SetConfig+0x328>)
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009064:	d012      	beq.n	800908c <UART_SetConfig+0x158>
 8009066:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800906a:	d802      	bhi.n	8009072 <UART_SetConfig+0x13e>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d007      	beq.n	8009080 <UART_SetConfig+0x14c>
 8009070:	e012      	b.n	8009098 <UART_SetConfig+0x164>
 8009072:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009076:	d00c      	beq.n	8009092 <UART_SetConfig+0x15e>
 8009078:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800907c:	d003      	beq.n	8009086 <UART_SetConfig+0x152>
 800907e:	e00b      	b.n	8009098 <UART_SetConfig+0x164>
 8009080:	2300      	movs	r3, #0
 8009082:	77fb      	strb	r3, [r7, #31]
 8009084:	e060      	b.n	8009148 <UART_SetConfig+0x214>
 8009086:	2302      	movs	r3, #2
 8009088:	77fb      	strb	r3, [r7, #31]
 800908a:	e05d      	b.n	8009148 <UART_SetConfig+0x214>
 800908c:	2304      	movs	r3, #4
 800908e:	77fb      	strb	r3, [r7, #31]
 8009090:	e05a      	b.n	8009148 <UART_SetConfig+0x214>
 8009092:	2308      	movs	r3, #8
 8009094:	77fb      	strb	r3, [r7, #31]
 8009096:	e057      	b.n	8009148 <UART_SetConfig+0x214>
 8009098:	2310      	movs	r3, #16
 800909a:	77fb      	strb	r3, [r7, #31]
 800909c:	bf00      	nop
 800909e:	e053      	b.n	8009148 <UART_SetConfig+0x214>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a70      	ldr	r2, [pc, #448]	; (8009268 <UART_SetConfig+0x334>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d123      	bne.n	80090f2 <UART_SetConfig+0x1be>
 80090aa:	4b6c      	ldr	r3, [pc, #432]	; (800925c <UART_SetConfig+0x328>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80090b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090b6:	d012      	beq.n	80090de <UART_SetConfig+0x1aa>
 80090b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090bc:	d802      	bhi.n	80090c4 <UART_SetConfig+0x190>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d007      	beq.n	80090d2 <UART_SetConfig+0x19e>
 80090c2:	e012      	b.n	80090ea <UART_SetConfig+0x1b6>
 80090c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090c8:	d00c      	beq.n	80090e4 <UART_SetConfig+0x1b0>
 80090ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090ce:	d003      	beq.n	80090d8 <UART_SetConfig+0x1a4>
 80090d0:	e00b      	b.n	80090ea <UART_SetConfig+0x1b6>
 80090d2:	2300      	movs	r3, #0
 80090d4:	77fb      	strb	r3, [r7, #31]
 80090d6:	e037      	b.n	8009148 <UART_SetConfig+0x214>
 80090d8:	2302      	movs	r3, #2
 80090da:	77fb      	strb	r3, [r7, #31]
 80090dc:	e034      	b.n	8009148 <UART_SetConfig+0x214>
 80090de:	2304      	movs	r3, #4
 80090e0:	77fb      	strb	r3, [r7, #31]
 80090e2:	e031      	b.n	8009148 <UART_SetConfig+0x214>
 80090e4:	2308      	movs	r3, #8
 80090e6:	77fb      	strb	r3, [r7, #31]
 80090e8:	e02e      	b.n	8009148 <UART_SetConfig+0x214>
 80090ea:	2310      	movs	r3, #16
 80090ec:	77fb      	strb	r3, [r7, #31]
 80090ee:	bf00      	nop
 80090f0:	e02a      	b.n	8009148 <UART_SetConfig+0x214>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a5d      	ldr	r2, [pc, #372]	; (800926c <UART_SetConfig+0x338>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d123      	bne.n	8009144 <UART_SetConfig+0x210>
 80090fc:	4b57      	ldr	r3, [pc, #348]	; (800925c <UART_SetConfig+0x328>)
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009108:	d012      	beq.n	8009130 <UART_SetConfig+0x1fc>
 800910a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800910e:	d802      	bhi.n	8009116 <UART_SetConfig+0x1e2>
 8009110:	2b00      	cmp	r3, #0
 8009112:	d007      	beq.n	8009124 <UART_SetConfig+0x1f0>
 8009114:	e012      	b.n	800913c <UART_SetConfig+0x208>
 8009116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800911a:	d00c      	beq.n	8009136 <UART_SetConfig+0x202>
 800911c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009120:	d003      	beq.n	800912a <UART_SetConfig+0x1f6>
 8009122:	e00b      	b.n	800913c <UART_SetConfig+0x208>
 8009124:	2300      	movs	r3, #0
 8009126:	77fb      	strb	r3, [r7, #31]
 8009128:	e00e      	b.n	8009148 <UART_SetConfig+0x214>
 800912a:	2302      	movs	r3, #2
 800912c:	77fb      	strb	r3, [r7, #31]
 800912e:	e00b      	b.n	8009148 <UART_SetConfig+0x214>
 8009130:	2304      	movs	r3, #4
 8009132:	77fb      	strb	r3, [r7, #31]
 8009134:	e008      	b.n	8009148 <UART_SetConfig+0x214>
 8009136:	2308      	movs	r3, #8
 8009138:	77fb      	strb	r3, [r7, #31]
 800913a:	e005      	b.n	8009148 <UART_SetConfig+0x214>
 800913c:	2310      	movs	r3, #16
 800913e:	77fb      	strb	r3, [r7, #31]
 8009140:	bf00      	nop
 8009142:	e001      	b.n	8009148 <UART_SetConfig+0x214>
 8009144:	2310      	movs	r3, #16
 8009146:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009150:	f040 808e 	bne.w	8009270 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8009154:	7ffb      	ldrb	r3, [r7, #31]
 8009156:	2b08      	cmp	r3, #8
 8009158:	d85e      	bhi.n	8009218 <UART_SetConfig+0x2e4>
 800915a:	a201      	add	r2, pc, #4	; (adr r2, 8009160 <UART_SetConfig+0x22c>)
 800915c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009160:	08009185 	.word	0x08009185
 8009164:	080091a5 	.word	0x080091a5
 8009168:	080091c5 	.word	0x080091c5
 800916c:	08009219 	.word	0x08009219
 8009170:	080091e1 	.word	0x080091e1
 8009174:	08009219 	.word	0x08009219
 8009178:	08009219 	.word	0x08009219
 800917c:	08009219 	.word	0x08009219
 8009180:	08009201 	.word	0x08009201
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009184:	f7fd fd62 	bl	8006c4c <HAL_RCC_GetPCLK1Freq>
 8009188:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	005a      	lsls	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	085b      	lsrs	r3, r3, #1
 8009194:	441a      	add	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	fbb2 f3f3 	udiv	r3, r2, r3
 800919e:	b29b      	uxth	r3, r3
 80091a0:	61bb      	str	r3, [r7, #24]
        break;
 80091a2:	e03c      	b.n	800921e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091a4:	f7fd fd74 	bl	8006c90 <HAL_RCC_GetPCLK2Freq>
 80091a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	005a      	lsls	r2, r3, #1
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	085b      	lsrs	r3, r3, #1
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80091be:	b29b      	uxth	r3, r3
 80091c0:	61bb      	str	r3, [r7, #24]
        break;
 80091c2:	e02c      	b.n	800921e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	085b      	lsrs	r3, r3, #1
 80091ca:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80091ce:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	6852      	ldr	r2, [r2, #4]
 80091d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80091da:	b29b      	uxth	r3, r3
 80091dc:	61bb      	str	r3, [r7, #24]
        break;
 80091de:	e01e      	b.n	800921e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091e0:	f7fd fcbc 	bl	8006b5c <HAL_RCC_GetSysClockFreq>
 80091e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	005a      	lsls	r2, r3, #1
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	085b      	lsrs	r3, r3, #1
 80091f0:	441a      	add	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	61bb      	str	r3, [r7, #24]
        break;
 80091fe:	e00e      	b.n	800921e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	085b      	lsrs	r3, r3, #1
 8009206:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009212:	b29b      	uxth	r3, r3
 8009214:	61bb      	str	r3, [r7, #24]
        break;
 8009216:	e002      	b.n	800921e <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	75fb      	strb	r3, [r7, #23]
        break;
 800921c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	2b0f      	cmp	r3, #15
 8009222:	d916      	bls.n	8009252 <UART_SetConfig+0x31e>
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800922a:	d212      	bcs.n	8009252 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	b29b      	uxth	r3, r3
 8009230:	f023 030f 	bic.w	r3, r3, #15
 8009234:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	085b      	lsrs	r3, r3, #1
 800923a:	b29b      	uxth	r3, r3
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	b29a      	uxth	r2, r3
 8009242:	897b      	ldrh	r3, [r7, #10]
 8009244:	4313      	orrs	r3, r2
 8009246:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	897a      	ldrh	r2, [r7, #10]
 800924e:	60da      	str	r2, [r3, #12]
 8009250:	e07e      	b.n	8009350 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	75fb      	strb	r3, [r7, #23]
 8009256:	e07b      	b.n	8009350 <UART_SetConfig+0x41c>
 8009258:	40013800 	.word	0x40013800
 800925c:	40021000 	.word	0x40021000
 8009260:	40004400 	.word	0x40004400
 8009264:	40004800 	.word	0x40004800
 8009268:	40004c00 	.word	0x40004c00
 800926c:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8009270:	7ffb      	ldrb	r3, [r7, #31]
 8009272:	2b08      	cmp	r3, #8
 8009274:	d85b      	bhi.n	800932e <UART_SetConfig+0x3fa>
 8009276:	a201      	add	r2, pc, #4	; (adr r2, 800927c <UART_SetConfig+0x348>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	080092a1 	.word	0x080092a1
 8009280:	080092bf 	.word	0x080092bf
 8009284:	080092dd 	.word	0x080092dd
 8009288:	0800932f 	.word	0x0800932f
 800928c:	080092f9 	.word	0x080092f9
 8009290:	0800932f 	.word	0x0800932f
 8009294:	0800932f 	.word	0x0800932f
 8009298:	0800932f 	.word	0x0800932f
 800929c:	08009317 	.word	0x08009317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092a0:	f7fd fcd4 	bl	8006c4c <HAL_RCC_GetPCLK1Freq>
 80092a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	085a      	lsrs	r2, r3, #1
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	441a      	add	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	61bb      	str	r3, [r7, #24]
        break;
 80092bc:	e03a      	b.n	8009334 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092be:	f7fd fce7 	bl	8006c90 <HAL_RCC_GetPCLK2Freq>
 80092c2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	085a      	lsrs	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	441a      	add	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	61bb      	str	r3, [r7, #24]
        break;
 80092da:	e02b      	b.n	8009334 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	085b      	lsrs	r3, r3, #1
 80092e2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80092e6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	6852      	ldr	r2, [r2, #4]
 80092ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	61bb      	str	r3, [r7, #24]
        break;
 80092f6:	e01d      	b.n	8009334 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092f8:	f7fd fc30 	bl	8006b5c <HAL_RCC_GetSysClockFreq>
 80092fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	085a      	lsrs	r2, r3, #1
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	441a      	add	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009310:	b29b      	uxth	r3, r3
 8009312:	61bb      	str	r3, [r7, #24]
        break;
 8009314:	e00e      	b.n	8009334 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	085b      	lsrs	r3, r3, #1
 800931c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	fbb2 f3f3 	udiv	r3, r2, r3
 8009328:	b29b      	uxth	r3, r3
 800932a:	61bb      	str	r3, [r7, #24]
        break;
 800932c:	e002      	b.n	8009334 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]
        break;
 8009332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	2b0f      	cmp	r3, #15
 8009338:	d908      	bls.n	800934c <UART_SetConfig+0x418>
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009340:	d204      	bcs.n	800934c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	60da      	str	r2, [r3, #12]
 800934a:	e001      	b.n	8009350 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3720      	adds	r7, #32
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop

08009368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00a      	beq.n	8009392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00a      	beq.n	80093d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00a      	beq.n	80093f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fc:	f003 0310 	and.w	r3, r3, #16
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00a      	beq.n	800941a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01a      	beq.n	800947e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009466:	d10a      	bne.n	800947e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	605a      	str	r2, [r3, #4]
  }
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af02      	add	r7, sp, #8
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80094ba:	f7f9 fc4d 	bl	8002d58 <HAL_GetTick>
 80094be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	d10e      	bne.n	80094ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f82a 	bl	8009536 <UART_WaitOnFlagUntilTimeout>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e020      	b.n	800952e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0304 	and.w	r3, r3, #4
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d10e      	bne.n	8009518 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f814 	bl	8009536 <UART_WaitOnFlagUntilTimeout>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e00a      	b.n	800952e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2220      	movs	r2, #32
 800951c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2220      	movs	r2, #32
 8009522:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	603b      	str	r3, [r7, #0]
 8009542:	4613      	mov	r3, r2
 8009544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009546:	e05d      	b.n	8009604 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954e:	d059      	beq.n	8009604 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009550:	f7f9 fc02 	bl	8002d58 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	429a      	cmp	r2, r3
 800955e:	d302      	bcc.n	8009566 <UART_WaitOnFlagUntilTimeout+0x30>
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d11b      	bne.n	800959e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009574:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f022 0201 	bic.w	r2, r2, #1
 8009584:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2220      	movs	r2, #32
 800958a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2220      	movs	r2, #32
 8009590:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e042      	b.n	8009624 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d02b      	beq.n	8009604 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ba:	d123      	bne.n	8009604 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095c4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0201 	bic.w	r2, r2, #1
 80095e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2220      	movs	r2, #32
 80095ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2220      	movs	r2, #32
 80095f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2220      	movs	r2, #32
 80095f6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009600:	2303      	movs	r3, #3
 8009602:	e00f      	b.n	8009624 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	69da      	ldr	r2, [r3, #28]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	4013      	ands	r3, r2
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	429a      	cmp	r2, r3
 8009612:	bf0c      	ite	eq
 8009614:	2301      	moveq	r3, #1
 8009616:	2300      	movne	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	461a      	mov	r2, r3
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	429a      	cmp	r2, r3
 8009620:	d092      	beq.n	8009548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009642:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	675a      	str	r2, [r3, #116]	; 0x74
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800966c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689a      	ldr	r2, [r3, #8]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0201 	bic.w	r2, r2, #1
 800967c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2220      	movs	r2, #32
 8009682:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	661a      	str	r2, [r3, #96]	; 0x60
}
 800968a:	bf00      	nop
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	2b20      	cmp	r3, #32
 80096aa:	d01e      	beq.n	80096ea <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096c2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 0201 	bic.w	r2, r2, #1
 80096d2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689a      	ldr	r2, [r3, #8]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096e2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2220      	movs	r2, #32
 80096e8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7f8 fc42 	bl	8001f74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f0:	bf00      	nop
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f7ff fc00 	bl	8008f0c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009726:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800972c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009738:	2b80      	cmp	r3, #128	; 0x80
 800973a:	d109      	bne.n	8009750 <UART_DMAError+0x3c>
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	2b21      	cmp	r3, #33	; 0x21
 8009740:	d106      	bne.n	8009750 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2200      	movs	r2, #0
 8009746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800974a:	6978      	ldr	r0, [r7, #20]
 800974c:	f7ff ff6e 	bl	800962c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975a:	2b40      	cmp	r3, #64	; 0x40
 800975c:	d109      	bne.n	8009772 <UART_DMAError+0x5e>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b22      	cmp	r3, #34	; 0x22
 8009762:	d106      	bne.n	8009772 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	2200      	movs	r2, #0
 8009768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800976c:	6978      	ldr	r0, [r7, #20]
 800976e:	f7ff ff72 	bl	8009656 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009776:	f043 0210 	orr.w	r2, r3, #16
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800977e:	6978      	ldr	r0, [r7, #20]
 8009780:	f7ff fbce 	bl	8008f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009784:	bf00      	nop
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7ff fbb8 	bl	8008f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ce:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2220      	movs	r2, #32
 80097d4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff fb8b 	bl	8008ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <atoi>:
 80097fe:	220a      	movs	r2, #10
 8009800:	2100      	movs	r1, #0
 8009802:	f000 bd3b 	b.w	800a27c <strtol>
	...

08009808 <__errno>:
 8009808:	4b01      	ldr	r3, [pc, #4]	; (8009810 <__errno+0x8>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	20000028 	.word	0x20000028

08009814 <__libc_init_array>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	4e0d      	ldr	r6, [pc, #52]	; (800984c <__libc_init_array+0x38>)
 8009818:	4c0d      	ldr	r4, [pc, #52]	; (8009850 <__libc_init_array+0x3c>)
 800981a:	1ba4      	subs	r4, r4, r6
 800981c:	10a4      	asrs	r4, r4, #2
 800981e:	2500      	movs	r5, #0
 8009820:	42a5      	cmp	r5, r4
 8009822:	d109      	bne.n	8009838 <__libc_init_array+0x24>
 8009824:	4e0b      	ldr	r6, [pc, #44]	; (8009854 <__libc_init_array+0x40>)
 8009826:	4c0c      	ldr	r4, [pc, #48]	; (8009858 <__libc_init_array+0x44>)
 8009828:	f002 f902 	bl	800ba30 <_init>
 800982c:	1ba4      	subs	r4, r4, r6
 800982e:	10a4      	asrs	r4, r4, #2
 8009830:	2500      	movs	r5, #0
 8009832:	42a5      	cmp	r5, r4
 8009834:	d105      	bne.n	8009842 <__libc_init_array+0x2e>
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800983c:	4798      	blx	r3
 800983e:	3501      	adds	r5, #1
 8009840:	e7ee      	b.n	8009820 <__libc_init_array+0xc>
 8009842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009846:	4798      	blx	r3
 8009848:	3501      	adds	r5, #1
 800984a:	e7f2      	b.n	8009832 <__libc_init_array+0x1e>
 800984c:	0800bd68 	.word	0x0800bd68
 8009850:	0800bd68 	.word	0x0800bd68
 8009854:	0800bd68 	.word	0x0800bd68
 8009858:	0800bd6c 	.word	0x0800bd6c

0800985c <memcmp>:
 800985c:	b530      	push	{r4, r5, lr}
 800985e:	2400      	movs	r4, #0
 8009860:	42a2      	cmp	r2, r4
 8009862:	d101      	bne.n	8009868 <memcmp+0xc>
 8009864:	2000      	movs	r0, #0
 8009866:	e007      	b.n	8009878 <memcmp+0x1c>
 8009868:	5d03      	ldrb	r3, [r0, r4]
 800986a:	3401      	adds	r4, #1
 800986c:	190d      	adds	r5, r1, r4
 800986e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009872:	42ab      	cmp	r3, r5
 8009874:	d0f4      	beq.n	8009860 <memcmp+0x4>
 8009876:	1b58      	subs	r0, r3, r5
 8009878:	bd30      	pop	{r4, r5, pc}

0800987a <memset>:
 800987a:	4402      	add	r2, r0
 800987c:	4603      	mov	r3, r0
 800987e:	4293      	cmp	r3, r2
 8009880:	d100      	bne.n	8009884 <memset+0xa>
 8009882:	4770      	bx	lr
 8009884:	f803 1b01 	strb.w	r1, [r3], #1
 8009888:	e7f9      	b.n	800987e <memset+0x4>

0800988a <__cvt>:
 800988a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800988e:	ec55 4b10 	vmov	r4, r5, d0
 8009892:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009894:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009898:	2d00      	cmp	r5, #0
 800989a:	460e      	mov	r6, r1
 800989c:	4691      	mov	r9, r2
 800989e:	4619      	mov	r1, r3
 80098a0:	bfb8      	it	lt
 80098a2:	4622      	movlt	r2, r4
 80098a4:	462b      	mov	r3, r5
 80098a6:	f027 0720 	bic.w	r7, r7, #32
 80098aa:	bfbb      	ittet	lt
 80098ac:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80098b0:	461d      	movlt	r5, r3
 80098b2:	2300      	movge	r3, #0
 80098b4:	232d      	movlt	r3, #45	; 0x2d
 80098b6:	bfb8      	it	lt
 80098b8:	4614      	movlt	r4, r2
 80098ba:	2f46      	cmp	r7, #70	; 0x46
 80098bc:	700b      	strb	r3, [r1, #0]
 80098be:	d004      	beq.n	80098ca <__cvt+0x40>
 80098c0:	2f45      	cmp	r7, #69	; 0x45
 80098c2:	d100      	bne.n	80098c6 <__cvt+0x3c>
 80098c4:	3601      	adds	r6, #1
 80098c6:	2102      	movs	r1, #2
 80098c8:	e000      	b.n	80098cc <__cvt+0x42>
 80098ca:	2103      	movs	r1, #3
 80098cc:	ab03      	add	r3, sp, #12
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	ab02      	add	r3, sp, #8
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	4632      	mov	r2, r6
 80098d6:	4653      	mov	r3, sl
 80098d8:	ec45 4b10 	vmov	d0, r4, r5
 80098dc:	f000 fd70 	bl	800a3c0 <_dtoa_r>
 80098e0:	2f47      	cmp	r7, #71	; 0x47
 80098e2:	4680      	mov	r8, r0
 80098e4:	d102      	bne.n	80098ec <__cvt+0x62>
 80098e6:	f019 0f01 	tst.w	r9, #1
 80098ea:	d026      	beq.n	800993a <__cvt+0xb0>
 80098ec:	2f46      	cmp	r7, #70	; 0x46
 80098ee:	eb08 0906 	add.w	r9, r8, r6
 80098f2:	d111      	bne.n	8009918 <__cvt+0x8e>
 80098f4:	f898 3000 	ldrb.w	r3, [r8]
 80098f8:	2b30      	cmp	r3, #48	; 0x30
 80098fa:	d10a      	bne.n	8009912 <__cvt+0x88>
 80098fc:	2200      	movs	r2, #0
 80098fe:	2300      	movs	r3, #0
 8009900:	4620      	mov	r0, r4
 8009902:	4629      	mov	r1, r5
 8009904:	f7f7 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009908:	b918      	cbnz	r0, 8009912 <__cvt+0x88>
 800990a:	f1c6 0601 	rsb	r6, r6, #1
 800990e:	f8ca 6000 	str.w	r6, [sl]
 8009912:	f8da 3000 	ldr.w	r3, [sl]
 8009916:	4499      	add	r9, r3
 8009918:	2200      	movs	r2, #0
 800991a:	2300      	movs	r3, #0
 800991c:	4620      	mov	r0, r4
 800991e:	4629      	mov	r1, r5
 8009920:	f7f7 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009924:	b938      	cbnz	r0, 8009936 <__cvt+0xac>
 8009926:	2230      	movs	r2, #48	; 0x30
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	454b      	cmp	r3, r9
 800992c:	d205      	bcs.n	800993a <__cvt+0xb0>
 800992e:	1c59      	adds	r1, r3, #1
 8009930:	9103      	str	r1, [sp, #12]
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e7f8      	b.n	8009928 <__cvt+0x9e>
 8009936:	f8cd 900c 	str.w	r9, [sp, #12]
 800993a:	9b03      	ldr	r3, [sp, #12]
 800993c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800993e:	eba3 0308 	sub.w	r3, r3, r8
 8009942:	4640      	mov	r0, r8
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	b004      	add	sp, #16
 8009948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800994c <__exponent>:
 800994c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800994e:	2900      	cmp	r1, #0
 8009950:	4604      	mov	r4, r0
 8009952:	bfba      	itte	lt
 8009954:	4249      	neglt	r1, r1
 8009956:	232d      	movlt	r3, #45	; 0x2d
 8009958:	232b      	movge	r3, #43	; 0x2b
 800995a:	2909      	cmp	r1, #9
 800995c:	f804 2b02 	strb.w	r2, [r4], #2
 8009960:	7043      	strb	r3, [r0, #1]
 8009962:	dd20      	ble.n	80099a6 <__exponent+0x5a>
 8009964:	f10d 0307 	add.w	r3, sp, #7
 8009968:	461f      	mov	r7, r3
 800996a:	260a      	movs	r6, #10
 800996c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009970:	fb06 1115 	mls	r1, r6, r5, r1
 8009974:	3130      	adds	r1, #48	; 0x30
 8009976:	2d09      	cmp	r5, #9
 8009978:	f803 1c01 	strb.w	r1, [r3, #-1]
 800997c:	f103 32ff 	add.w	r2, r3, #4294967295
 8009980:	4629      	mov	r1, r5
 8009982:	dc09      	bgt.n	8009998 <__exponent+0x4c>
 8009984:	3130      	adds	r1, #48	; 0x30
 8009986:	3b02      	subs	r3, #2
 8009988:	f802 1c01 	strb.w	r1, [r2, #-1]
 800998c:	42bb      	cmp	r3, r7
 800998e:	4622      	mov	r2, r4
 8009990:	d304      	bcc.n	800999c <__exponent+0x50>
 8009992:	1a10      	subs	r0, r2, r0
 8009994:	b003      	add	sp, #12
 8009996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009998:	4613      	mov	r3, r2
 800999a:	e7e7      	b.n	800996c <__exponent+0x20>
 800999c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a0:	f804 2b01 	strb.w	r2, [r4], #1
 80099a4:	e7f2      	b.n	800998c <__exponent+0x40>
 80099a6:	2330      	movs	r3, #48	; 0x30
 80099a8:	4419      	add	r1, r3
 80099aa:	7083      	strb	r3, [r0, #2]
 80099ac:	1d02      	adds	r2, r0, #4
 80099ae:	70c1      	strb	r1, [r0, #3]
 80099b0:	e7ef      	b.n	8009992 <__exponent+0x46>
	...

080099b4 <_printf_float>:
 80099b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	b08d      	sub	sp, #52	; 0x34
 80099ba:	460c      	mov	r4, r1
 80099bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80099c0:	4616      	mov	r6, r2
 80099c2:	461f      	mov	r7, r3
 80099c4:	4605      	mov	r5, r0
 80099c6:	f001 fab7 	bl	800af38 <_localeconv_r>
 80099ca:	6803      	ldr	r3, [r0, #0]
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7f6 fbfe 	bl	80001d0 <strlen>
 80099d4:	2300      	movs	r3, #0
 80099d6:	930a      	str	r3, [sp, #40]	; 0x28
 80099d8:	f8d8 3000 	ldr.w	r3, [r8]
 80099dc:	9005      	str	r0, [sp, #20]
 80099de:	3307      	adds	r3, #7
 80099e0:	f023 0307 	bic.w	r3, r3, #7
 80099e4:	f103 0208 	add.w	r2, r3, #8
 80099e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80099ec:	f8d4 b000 	ldr.w	fp, [r4]
 80099f0:	f8c8 2000 	str.w	r2, [r8]
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80099fc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009a00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a04:	9307      	str	r3, [sp, #28]
 8009a06:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0e:	4ba7      	ldr	r3, [pc, #668]	; (8009cac <_printf_float+0x2f8>)
 8009a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a14:	f7f7 f88a 	bl	8000b2c <__aeabi_dcmpun>
 8009a18:	bb70      	cbnz	r0, 8009a78 <_printf_float+0xc4>
 8009a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1e:	4ba3      	ldr	r3, [pc, #652]	; (8009cac <_printf_float+0x2f8>)
 8009a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a24:	f7f7 f864 	bl	8000af0 <__aeabi_dcmple>
 8009a28:	bb30      	cbnz	r0, 8009a78 <_printf_float+0xc4>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4640      	mov	r0, r8
 8009a30:	4649      	mov	r1, r9
 8009a32:	f7f7 f853 	bl	8000adc <__aeabi_dcmplt>
 8009a36:	b110      	cbz	r0, 8009a3e <_printf_float+0x8a>
 8009a38:	232d      	movs	r3, #45	; 0x2d
 8009a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a3e:	4a9c      	ldr	r2, [pc, #624]	; (8009cb0 <_printf_float+0x2fc>)
 8009a40:	4b9c      	ldr	r3, [pc, #624]	; (8009cb4 <_printf_float+0x300>)
 8009a42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009a46:	bf8c      	ite	hi
 8009a48:	4690      	movhi	r8, r2
 8009a4a:	4698      	movls	r8, r3
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	f02b 0204 	bic.w	r2, fp, #4
 8009a52:	6123      	str	r3, [r4, #16]
 8009a54:	6022      	str	r2, [r4, #0]
 8009a56:	f04f 0900 	mov.w	r9, #0
 8009a5a:	9700      	str	r7, [sp, #0]
 8009a5c:	4633      	mov	r3, r6
 8009a5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a60:	4621      	mov	r1, r4
 8009a62:	4628      	mov	r0, r5
 8009a64:	f000 f9e6 	bl	8009e34 <_printf_common>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f040 808d 	bne.w	8009b88 <_printf_float+0x1d4>
 8009a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a72:	b00d      	add	sp, #52	; 0x34
 8009a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a78:	4642      	mov	r2, r8
 8009a7a:	464b      	mov	r3, r9
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f7f7 f854 	bl	8000b2c <__aeabi_dcmpun>
 8009a84:	b110      	cbz	r0, 8009a8c <_printf_float+0xd8>
 8009a86:	4a8c      	ldr	r2, [pc, #560]	; (8009cb8 <_printf_float+0x304>)
 8009a88:	4b8c      	ldr	r3, [pc, #560]	; (8009cbc <_printf_float+0x308>)
 8009a8a:	e7da      	b.n	8009a42 <_printf_float+0x8e>
 8009a8c:	6861      	ldr	r1, [r4, #4]
 8009a8e:	1c4b      	adds	r3, r1, #1
 8009a90:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009a94:	a80a      	add	r0, sp, #40	; 0x28
 8009a96:	d13e      	bne.n	8009b16 <_printf_float+0x162>
 8009a98:	2306      	movs	r3, #6
 8009a9a:	6063      	str	r3, [r4, #4]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009aa2:	ab09      	add	r3, sp, #36	; 0x24
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	ec49 8b10 	vmov	d0, r8, r9
 8009aaa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009aae:	6022      	str	r2, [r4, #0]
 8009ab0:	f8cd a004 	str.w	sl, [sp, #4]
 8009ab4:	6861      	ldr	r1, [r4, #4]
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f7ff fee7 	bl	800988a <__cvt>
 8009abc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009ac0:	2b47      	cmp	r3, #71	; 0x47
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	d109      	bne.n	8009ada <_printf_float+0x126>
 8009ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac8:	1cd8      	adds	r0, r3, #3
 8009aca:	db02      	blt.n	8009ad2 <_printf_float+0x11e>
 8009acc:	6862      	ldr	r2, [r4, #4]
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	dd47      	ble.n	8009b62 <_printf_float+0x1ae>
 8009ad2:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ad6:	fa5f fa8a 	uxtb.w	sl, sl
 8009ada:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ae0:	d824      	bhi.n	8009b2c <_printf_float+0x178>
 8009ae2:	3901      	subs	r1, #1
 8009ae4:	4652      	mov	r2, sl
 8009ae6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009aea:	9109      	str	r1, [sp, #36]	; 0x24
 8009aec:	f7ff ff2e 	bl	800994c <__exponent>
 8009af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009af2:	1813      	adds	r3, r2, r0
 8009af4:	2a01      	cmp	r2, #1
 8009af6:	4681      	mov	r9, r0
 8009af8:	6123      	str	r3, [r4, #16]
 8009afa:	dc02      	bgt.n	8009b02 <_printf_float+0x14e>
 8009afc:	6822      	ldr	r2, [r4, #0]
 8009afe:	07d1      	lsls	r1, r2, #31
 8009b00:	d501      	bpl.n	8009b06 <_printf_float+0x152>
 8009b02:	3301      	adds	r3, #1
 8009b04:	6123      	str	r3, [r4, #16]
 8009b06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0a5      	beq.n	8009a5a <_printf_float+0xa6>
 8009b0e:	232d      	movs	r3, #45	; 0x2d
 8009b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b14:	e7a1      	b.n	8009a5a <_printf_float+0xa6>
 8009b16:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009b1a:	f000 8177 	beq.w	8009e0c <_printf_float+0x458>
 8009b1e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009b22:	d1bb      	bne.n	8009a9c <_printf_float+0xe8>
 8009b24:	2900      	cmp	r1, #0
 8009b26:	d1b9      	bne.n	8009a9c <_printf_float+0xe8>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e7b6      	b.n	8009a9a <_printf_float+0xe6>
 8009b2c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009b30:	d119      	bne.n	8009b66 <_printf_float+0x1b2>
 8009b32:	2900      	cmp	r1, #0
 8009b34:	6863      	ldr	r3, [r4, #4]
 8009b36:	dd0c      	ble.n	8009b52 <_printf_float+0x19e>
 8009b38:	6121      	str	r1, [r4, #16]
 8009b3a:	b913      	cbnz	r3, 8009b42 <_printf_float+0x18e>
 8009b3c:	6822      	ldr	r2, [r4, #0]
 8009b3e:	07d2      	lsls	r2, r2, #31
 8009b40:	d502      	bpl.n	8009b48 <_printf_float+0x194>
 8009b42:	3301      	adds	r3, #1
 8009b44:	440b      	add	r3, r1
 8009b46:	6123      	str	r3, [r4, #16]
 8009b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b4a:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b4c:	f04f 0900 	mov.w	r9, #0
 8009b50:	e7d9      	b.n	8009b06 <_printf_float+0x152>
 8009b52:	b913      	cbnz	r3, 8009b5a <_printf_float+0x1a6>
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	07d0      	lsls	r0, r2, #31
 8009b58:	d501      	bpl.n	8009b5e <_printf_float+0x1aa>
 8009b5a:	3302      	adds	r3, #2
 8009b5c:	e7f3      	b.n	8009b46 <_printf_float+0x192>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e7f1      	b.n	8009b46 <_printf_float+0x192>
 8009b62:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009b66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	db05      	blt.n	8009b7a <_printf_float+0x1c6>
 8009b6e:	6822      	ldr	r2, [r4, #0]
 8009b70:	6123      	str	r3, [r4, #16]
 8009b72:	07d1      	lsls	r1, r2, #31
 8009b74:	d5e8      	bpl.n	8009b48 <_printf_float+0x194>
 8009b76:	3301      	adds	r3, #1
 8009b78:	e7e5      	b.n	8009b46 <_printf_float+0x192>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bfd4      	ite	le
 8009b7e:	f1c3 0302 	rsble	r3, r3, #2
 8009b82:	2301      	movgt	r3, #1
 8009b84:	4413      	add	r3, r2
 8009b86:	e7de      	b.n	8009b46 <_printf_float+0x192>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	055a      	lsls	r2, r3, #21
 8009b8c:	d407      	bmi.n	8009b9e <_printf_float+0x1ea>
 8009b8e:	6923      	ldr	r3, [r4, #16]
 8009b90:	4642      	mov	r2, r8
 8009b92:	4631      	mov	r1, r6
 8009b94:	4628      	mov	r0, r5
 8009b96:	47b8      	blx	r7
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d12b      	bne.n	8009bf4 <_printf_float+0x240>
 8009b9c:	e767      	b.n	8009a6e <_printf_float+0xba>
 8009b9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009ba2:	f240 80dc 	bls.w	8009d5e <_printf_float+0x3aa>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bae:	f7f6 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d033      	beq.n	8009c1e <_printf_float+0x26a>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4a41      	ldr	r2, [pc, #260]	; (8009cc0 <_printf_float+0x30c>)
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	47b8      	blx	r7
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	f43f af54 	beq.w	8009a6e <_printf_float+0xba>
 8009bc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	db02      	blt.n	8009bd4 <_printf_float+0x220>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	07d8      	lsls	r0, r3, #31
 8009bd2:	d50f      	bpl.n	8009bf4 <_printf_float+0x240>
 8009bd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f af45 	beq.w	8009a6e <_printf_float+0xba>
 8009be4:	f04f 0800 	mov.w	r8, #0
 8009be8:	f104 091a 	add.w	r9, r4, #26
 8009bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	4543      	cmp	r3, r8
 8009bf2:	dc09      	bgt.n	8009c08 <_printf_float+0x254>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	079b      	lsls	r3, r3, #30
 8009bf8:	f100 8103 	bmi.w	8009e02 <_printf_float+0x44e>
 8009bfc:	68e0      	ldr	r0, [r4, #12]
 8009bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c00:	4298      	cmp	r0, r3
 8009c02:	bfb8      	it	lt
 8009c04:	4618      	movlt	r0, r3
 8009c06:	e734      	b.n	8009a72 <_printf_float+0xbe>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	464a      	mov	r2, r9
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4628      	mov	r0, r5
 8009c10:	47b8      	blx	r7
 8009c12:	3001      	adds	r0, #1
 8009c14:	f43f af2b 	beq.w	8009a6e <_printf_float+0xba>
 8009c18:	f108 0801 	add.w	r8, r8, #1
 8009c1c:	e7e6      	b.n	8009bec <_printf_float+0x238>
 8009c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	dc2b      	bgt.n	8009c7c <_printf_float+0x2c8>
 8009c24:	2301      	movs	r3, #1
 8009c26:	4a26      	ldr	r2, [pc, #152]	; (8009cc0 <_printf_float+0x30c>)
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	47b8      	blx	r7
 8009c2e:	3001      	adds	r0, #1
 8009c30:	f43f af1d 	beq.w	8009a6e <_printf_float+0xba>
 8009c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c36:	b923      	cbnz	r3, 8009c42 <_printf_float+0x28e>
 8009c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c3a:	b913      	cbnz	r3, 8009c42 <_printf_float+0x28e>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	07d9      	lsls	r1, r3, #31
 8009c40:	d5d8      	bpl.n	8009bf4 <_printf_float+0x240>
 8009c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c46:	4631      	mov	r1, r6
 8009c48:	4628      	mov	r0, r5
 8009c4a:	47b8      	blx	r7
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	f43f af0e 	beq.w	8009a6e <_printf_float+0xba>
 8009c52:	f04f 0900 	mov.w	r9, #0
 8009c56:	f104 0a1a 	add.w	sl, r4, #26
 8009c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c5c:	425b      	negs	r3, r3
 8009c5e:	454b      	cmp	r3, r9
 8009c60:	dc01      	bgt.n	8009c66 <_printf_float+0x2b2>
 8009c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c64:	e794      	b.n	8009b90 <_printf_float+0x1dc>
 8009c66:	2301      	movs	r3, #1
 8009c68:	4652      	mov	r2, sl
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	f43f aefc 	beq.w	8009a6e <_printf_float+0xba>
 8009c76:	f109 0901 	add.w	r9, r9, #1
 8009c7a:	e7ee      	b.n	8009c5a <_printf_float+0x2a6>
 8009c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c80:	429a      	cmp	r2, r3
 8009c82:	bfa8      	it	ge
 8009c84:	461a      	movge	r2, r3
 8009c86:	2a00      	cmp	r2, #0
 8009c88:	4691      	mov	r9, r2
 8009c8a:	dd07      	ble.n	8009c9c <_printf_float+0x2e8>
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4642      	mov	r2, r8
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	f43f aee9 	beq.w	8009a6e <_printf_float+0xba>
 8009c9c:	f104 031a 	add.w	r3, r4, #26
 8009ca0:	f04f 0b00 	mov.w	fp, #0
 8009ca4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ca8:	9306      	str	r3, [sp, #24]
 8009caa:	e015      	b.n	8009cd8 <_printf_float+0x324>
 8009cac:	7fefffff 	.word	0x7fefffff
 8009cb0:	0800bb0c 	.word	0x0800bb0c
 8009cb4:	0800bb08 	.word	0x0800bb08
 8009cb8:	0800bb14 	.word	0x0800bb14
 8009cbc:	0800bb10 	.word	0x0800bb10
 8009cc0:	0800bb18 	.word	0x0800bb18
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	9a06      	ldr	r2, [sp, #24]
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f aecd 	beq.w	8009a6e <_printf_float+0xba>
 8009cd4:	f10b 0b01 	add.w	fp, fp, #1
 8009cd8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009cdc:	ebaa 0309 	sub.w	r3, sl, r9
 8009ce0:	455b      	cmp	r3, fp
 8009ce2:	dcef      	bgt.n	8009cc4 <_printf_float+0x310>
 8009ce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	44d0      	add	r8, sl
 8009cec:	db15      	blt.n	8009d1a <_printf_float+0x366>
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	07da      	lsls	r2, r3, #31
 8009cf2:	d412      	bmi.n	8009d1a <_printf_float+0x366>
 8009cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cf8:	eba3 020a 	sub.w	r2, r3, sl
 8009cfc:	eba3 0a01 	sub.w	sl, r3, r1
 8009d00:	4592      	cmp	sl, r2
 8009d02:	bfa8      	it	ge
 8009d04:	4692      	movge	sl, r2
 8009d06:	f1ba 0f00 	cmp.w	sl, #0
 8009d0a:	dc0e      	bgt.n	8009d2a <_printf_float+0x376>
 8009d0c:	f04f 0800 	mov.w	r8, #0
 8009d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d14:	f104 091a 	add.w	r9, r4, #26
 8009d18:	e019      	b.n	8009d4e <_printf_float+0x39a>
 8009d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4628      	mov	r0, r5
 8009d22:	47b8      	blx	r7
 8009d24:	3001      	adds	r0, #1
 8009d26:	d1e5      	bne.n	8009cf4 <_printf_float+0x340>
 8009d28:	e6a1      	b.n	8009a6e <_printf_float+0xba>
 8009d2a:	4653      	mov	r3, sl
 8009d2c:	4642      	mov	r2, r8
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	d1e9      	bne.n	8009d0c <_printf_float+0x358>
 8009d38:	e699      	b.n	8009a6e <_printf_float+0xba>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	464a      	mov	r2, r9
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b8      	blx	r7
 8009d44:	3001      	adds	r0, #1
 8009d46:	f43f ae92 	beq.w	8009a6e <_printf_float+0xba>
 8009d4a:	f108 0801 	add.w	r8, r8, #1
 8009d4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d52:	1a9b      	subs	r3, r3, r2
 8009d54:	eba3 030a 	sub.w	r3, r3, sl
 8009d58:	4543      	cmp	r3, r8
 8009d5a:	dcee      	bgt.n	8009d3a <_printf_float+0x386>
 8009d5c:	e74a      	b.n	8009bf4 <_printf_float+0x240>
 8009d5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d60:	2a01      	cmp	r2, #1
 8009d62:	dc01      	bgt.n	8009d68 <_printf_float+0x3b4>
 8009d64:	07db      	lsls	r3, r3, #31
 8009d66:	d53a      	bpl.n	8009dde <_printf_float+0x42a>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	4642      	mov	r2, r8
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	4628      	mov	r0, r5
 8009d70:	47b8      	blx	r7
 8009d72:	3001      	adds	r0, #1
 8009d74:	f43f ae7b 	beq.w	8009a6e <_printf_float+0xba>
 8009d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4628      	mov	r0, r5
 8009d80:	47b8      	blx	r7
 8009d82:	3001      	adds	r0, #1
 8009d84:	f108 0801 	add.w	r8, r8, #1
 8009d88:	f43f ae71 	beq.w	8009a6e <_printf_float+0xba>
 8009d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f103 3aff 	add.w	sl, r3, #4294967295
 8009d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f7f6 fe95 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d9e:	b9c8      	cbnz	r0, 8009dd4 <_printf_float+0x420>
 8009da0:	4653      	mov	r3, sl
 8009da2:	4642      	mov	r2, r8
 8009da4:	4631      	mov	r1, r6
 8009da6:	4628      	mov	r0, r5
 8009da8:	47b8      	blx	r7
 8009daa:	3001      	adds	r0, #1
 8009dac:	d10e      	bne.n	8009dcc <_printf_float+0x418>
 8009dae:	e65e      	b.n	8009a6e <_printf_float+0xba>
 8009db0:	2301      	movs	r3, #1
 8009db2:	4652      	mov	r2, sl
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f ae57 	beq.w	8009a6e <_printf_float+0xba>
 8009dc0:	f108 0801 	add.w	r8, r8, #1
 8009dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	4543      	cmp	r3, r8
 8009dca:	dcf1      	bgt.n	8009db0 <_printf_float+0x3fc>
 8009dcc:	464b      	mov	r3, r9
 8009dce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009dd2:	e6de      	b.n	8009b92 <_printf_float+0x1de>
 8009dd4:	f04f 0800 	mov.w	r8, #0
 8009dd8:	f104 0a1a 	add.w	sl, r4, #26
 8009ddc:	e7f2      	b.n	8009dc4 <_printf_float+0x410>
 8009dde:	2301      	movs	r3, #1
 8009de0:	e7df      	b.n	8009da2 <_printf_float+0x3ee>
 8009de2:	2301      	movs	r3, #1
 8009de4:	464a      	mov	r2, r9
 8009de6:	4631      	mov	r1, r6
 8009de8:	4628      	mov	r0, r5
 8009dea:	47b8      	blx	r7
 8009dec:	3001      	adds	r0, #1
 8009dee:	f43f ae3e 	beq.w	8009a6e <_printf_float+0xba>
 8009df2:	f108 0801 	add.w	r8, r8, #1
 8009df6:	68e3      	ldr	r3, [r4, #12]
 8009df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009dfa:	1a9b      	subs	r3, r3, r2
 8009dfc:	4543      	cmp	r3, r8
 8009dfe:	dcf0      	bgt.n	8009de2 <_printf_float+0x42e>
 8009e00:	e6fc      	b.n	8009bfc <_printf_float+0x248>
 8009e02:	f04f 0800 	mov.w	r8, #0
 8009e06:	f104 0919 	add.w	r9, r4, #25
 8009e0a:	e7f4      	b.n	8009df6 <_printf_float+0x442>
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	f43f ae8b 	beq.w	8009b28 <_printf_float+0x174>
 8009e12:	2300      	movs	r3, #0
 8009e14:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009e18:	ab09      	add	r3, sp, #36	; 0x24
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	ec49 8b10 	vmov	d0, r8, r9
 8009e20:	6022      	str	r2, [r4, #0]
 8009e22:	f8cd a004 	str.w	sl, [sp, #4]
 8009e26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f7ff fd2d 	bl	800988a <__cvt>
 8009e30:	4680      	mov	r8, r0
 8009e32:	e648      	b.n	8009ac6 <_printf_float+0x112>

08009e34 <_printf_common>:
 8009e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	4691      	mov	r9, r2
 8009e3a:	461f      	mov	r7, r3
 8009e3c:	688a      	ldr	r2, [r1, #8]
 8009e3e:	690b      	ldr	r3, [r1, #16]
 8009e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e44:	4293      	cmp	r3, r2
 8009e46:	bfb8      	it	lt
 8009e48:	4613      	movlt	r3, r2
 8009e4a:	f8c9 3000 	str.w	r3, [r9]
 8009e4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e52:	4606      	mov	r6, r0
 8009e54:	460c      	mov	r4, r1
 8009e56:	b112      	cbz	r2, 8009e5e <_printf_common+0x2a>
 8009e58:	3301      	adds	r3, #1
 8009e5a:	f8c9 3000 	str.w	r3, [r9]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	0699      	lsls	r1, r3, #26
 8009e62:	bf42      	ittt	mi
 8009e64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009e68:	3302      	addmi	r3, #2
 8009e6a:	f8c9 3000 	strmi.w	r3, [r9]
 8009e6e:	6825      	ldr	r5, [r4, #0]
 8009e70:	f015 0506 	ands.w	r5, r5, #6
 8009e74:	d107      	bne.n	8009e86 <_printf_common+0x52>
 8009e76:	f104 0a19 	add.w	sl, r4, #25
 8009e7a:	68e3      	ldr	r3, [r4, #12]
 8009e7c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	42ab      	cmp	r3, r5
 8009e84:	dc28      	bgt.n	8009ed8 <_printf_common+0xa4>
 8009e86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	3300      	adds	r3, #0
 8009e8e:	bf18      	it	ne
 8009e90:	2301      	movne	r3, #1
 8009e92:	0692      	lsls	r2, r2, #26
 8009e94:	d42d      	bmi.n	8009ef2 <_printf_common+0xbe>
 8009e96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	47c0      	blx	r8
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d020      	beq.n	8009ee6 <_printf_common+0xb2>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	68e5      	ldr	r5, [r4, #12]
 8009ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8009eac:	f003 0306 	and.w	r3, r3, #6
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	bf08      	it	eq
 8009eb4:	1aad      	subeq	r5, r5, r2
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	6922      	ldr	r2, [r4, #16]
 8009eba:	bf0c      	ite	eq
 8009ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ec0:	2500      	movne	r5, #0
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	bfc4      	itt	gt
 8009ec6:	1a9b      	subgt	r3, r3, r2
 8009ec8:	18ed      	addgt	r5, r5, r3
 8009eca:	f04f 0900 	mov.w	r9, #0
 8009ece:	341a      	adds	r4, #26
 8009ed0:	454d      	cmp	r5, r9
 8009ed2:	d11a      	bne.n	8009f0a <_printf_common+0xd6>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e008      	b.n	8009eea <_printf_common+0xb6>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	4652      	mov	r2, sl
 8009edc:	4639      	mov	r1, r7
 8009ede:	4630      	mov	r0, r6
 8009ee0:	47c0      	blx	r8
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d103      	bne.n	8009eee <_printf_common+0xba>
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eee:	3501      	adds	r5, #1
 8009ef0:	e7c3      	b.n	8009e7a <_printf_common+0x46>
 8009ef2:	18e1      	adds	r1, r4, r3
 8009ef4:	1c5a      	adds	r2, r3, #1
 8009ef6:	2030      	movs	r0, #48	; 0x30
 8009ef8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009efc:	4422      	add	r2, r4
 8009efe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f06:	3302      	adds	r3, #2
 8009f08:	e7c5      	b.n	8009e96 <_printf_common+0x62>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4639      	mov	r1, r7
 8009f10:	4630      	mov	r0, r6
 8009f12:	47c0      	blx	r8
 8009f14:	3001      	adds	r0, #1
 8009f16:	d0e6      	beq.n	8009ee6 <_printf_common+0xb2>
 8009f18:	f109 0901 	add.w	r9, r9, #1
 8009f1c:	e7d8      	b.n	8009ed0 <_printf_common+0x9c>
	...

08009f20 <_printf_i>:
 8009f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f28:	460c      	mov	r4, r1
 8009f2a:	7e09      	ldrb	r1, [r1, #24]
 8009f2c:	b085      	sub	sp, #20
 8009f2e:	296e      	cmp	r1, #110	; 0x6e
 8009f30:	4617      	mov	r7, r2
 8009f32:	4606      	mov	r6, r0
 8009f34:	4698      	mov	r8, r3
 8009f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f38:	f000 80b3 	beq.w	800a0a2 <_printf_i+0x182>
 8009f3c:	d822      	bhi.n	8009f84 <_printf_i+0x64>
 8009f3e:	2963      	cmp	r1, #99	; 0x63
 8009f40:	d036      	beq.n	8009fb0 <_printf_i+0x90>
 8009f42:	d80a      	bhi.n	8009f5a <_printf_i+0x3a>
 8009f44:	2900      	cmp	r1, #0
 8009f46:	f000 80b9 	beq.w	800a0bc <_printf_i+0x19c>
 8009f4a:	2958      	cmp	r1, #88	; 0x58
 8009f4c:	f000 8083 	beq.w	800a056 <_printf_i+0x136>
 8009f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009f58:	e032      	b.n	8009fc0 <_printf_i+0xa0>
 8009f5a:	2964      	cmp	r1, #100	; 0x64
 8009f5c:	d001      	beq.n	8009f62 <_printf_i+0x42>
 8009f5e:	2969      	cmp	r1, #105	; 0x69
 8009f60:	d1f6      	bne.n	8009f50 <_printf_i+0x30>
 8009f62:	6820      	ldr	r0, [r4, #0]
 8009f64:	6813      	ldr	r3, [r2, #0]
 8009f66:	0605      	lsls	r5, r0, #24
 8009f68:	f103 0104 	add.w	r1, r3, #4
 8009f6c:	d52a      	bpl.n	8009fc4 <_printf_i+0xa4>
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6011      	str	r1, [r2, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	da03      	bge.n	8009f7e <_printf_i+0x5e>
 8009f76:	222d      	movs	r2, #45	; 0x2d
 8009f78:	425b      	negs	r3, r3
 8009f7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009f7e:	486f      	ldr	r0, [pc, #444]	; (800a13c <_printf_i+0x21c>)
 8009f80:	220a      	movs	r2, #10
 8009f82:	e039      	b.n	8009ff8 <_printf_i+0xd8>
 8009f84:	2973      	cmp	r1, #115	; 0x73
 8009f86:	f000 809d 	beq.w	800a0c4 <_printf_i+0x1a4>
 8009f8a:	d808      	bhi.n	8009f9e <_printf_i+0x7e>
 8009f8c:	296f      	cmp	r1, #111	; 0x6f
 8009f8e:	d020      	beq.n	8009fd2 <_printf_i+0xb2>
 8009f90:	2970      	cmp	r1, #112	; 0x70
 8009f92:	d1dd      	bne.n	8009f50 <_printf_i+0x30>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	f043 0320 	orr.w	r3, r3, #32
 8009f9a:	6023      	str	r3, [r4, #0]
 8009f9c:	e003      	b.n	8009fa6 <_printf_i+0x86>
 8009f9e:	2975      	cmp	r1, #117	; 0x75
 8009fa0:	d017      	beq.n	8009fd2 <_printf_i+0xb2>
 8009fa2:	2978      	cmp	r1, #120	; 0x78
 8009fa4:	d1d4      	bne.n	8009f50 <_printf_i+0x30>
 8009fa6:	2378      	movs	r3, #120	; 0x78
 8009fa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fac:	4864      	ldr	r0, [pc, #400]	; (800a140 <_printf_i+0x220>)
 8009fae:	e055      	b.n	800a05c <_printf_i+0x13c>
 8009fb0:	6813      	ldr	r3, [r2, #0]
 8009fb2:	1d19      	adds	r1, r3, #4
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6011      	str	r1, [r2, #0]
 8009fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e08c      	b.n	800a0de <_printf_i+0x1be>
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6011      	str	r1, [r2, #0]
 8009fc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009fcc:	bf18      	it	ne
 8009fce:	b21b      	sxthne	r3, r3
 8009fd0:	e7cf      	b.n	8009f72 <_printf_i+0x52>
 8009fd2:	6813      	ldr	r3, [r2, #0]
 8009fd4:	6825      	ldr	r5, [r4, #0]
 8009fd6:	1d18      	adds	r0, r3, #4
 8009fd8:	6010      	str	r0, [r2, #0]
 8009fda:	0628      	lsls	r0, r5, #24
 8009fdc:	d501      	bpl.n	8009fe2 <_printf_i+0xc2>
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	e002      	b.n	8009fe8 <_printf_i+0xc8>
 8009fe2:	0668      	lsls	r0, r5, #25
 8009fe4:	d5fb      	bpl.n	8009fde <_printf_i+0xbe>
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	4854      	ldr	r0, [pc, #336]	; (800a13c <_printf_i+0x21c>)
 8009fea:	296f      	cmp	r1, #111	; 0x6f
 8009fec:	bf14      	ite	ne
 8009fee:	220a      	movne	r2, #10
 8009ff0:	2208      	moveq	r2, #8
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ff8:	6865      	ldr	r5, [r4, #4]
 8009ffa:	60a5      	str	r5, [r4, #8]
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	f2c0 8095 	blt.w	800a12c <_printf_i+0x20c>
 800a002:	6821      	ldr	r1, [r4, #0]
 800a004:	f021 0104 	bic.w	r1, r1, #4
 800a008:	6021      	str	r1, [r4, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d13d      	bne.n	800a08a <_printf_i+0x16a>
 800a00e:	2d00      	cmp	r5, #0
 800a010:	f040 808e 	bne.w	800a130 <_printf_i+0x210>
 800a014:	4665      	mov	r5, ip
 800a016:	2a08      	cmp	r2, #8
 800a018:	d10b      	bne.n	800a032 <_printf_i+0x112>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	07db      	lsls	r3, r3, #31
 800a01e:	d508      	bpl.n	800a032 <_printf_i+0x112>
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	6862      	ldr	r2, [r4, #4]
 800a024:	429a      	cmp	r2, r3
 800a026:	bfde      	ittt	le
 800a028:	2330      	movle	r3, #48	; 0x30
 800a02a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a02e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a032:	ebac 0305 	sub.w	r3, ip, r5
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	f8cd 8000 	str.w	r8, [sp]
 800a03c:	463b      	mov	r3, r7
 800a03e:	aa03      	add	r2, sp, #12
 800a040:	4621      	mov	r1, r4
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff fef6 	bl	8009e34 <_printf_common>
 800a048:	3001      	adds	r0, #1
 800a04a:	d14d      	bne.n	800a0e8 <_printf_i+0x1c8>
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	b005      	add	sp, #20
 800a052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a056:	4839      	ldr	r0, [pc, #228]	; (800a13c <_printf_i+0x21c>)
 800a058:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a05c:	6813      	ldr	r3, [r2, #0]
 800a05e:	6821      	ldr	r1, [r4, #0]
 800a060:	1d1d      	adds	r5, r3, #4
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6015      	str	r5, [r2, #0]
 800a066:	060a      	lsls	r2, r1, #24
 800a068:	d50b      	bpl.n	800a082 <_printf_i+0x162>
 800a06a:	07ca      	lsls	r2, r1, #31
 800a06c:	bf44      	itt	mi
 800a06e:	f041 0120 	orrmi.w	r1, r1, #32
 800a072:	6021      	strmi	r1, [r4, #0]
 800a074:	b91b      	cbnz	r3, 800a07e <_printf_i+0x15e>
 800a076:	6822      	ldr	r2, [r4, #0]
 800a078:	f022 0220 	bic.w	r2, r2, #32
 800a07c:	6022      	str	r2, [r4, #0]
 800a07e:	2210      	movs	r2, #16
 800a080:	e7b7      	b.n	8009ff2 <_printf_i+0xd2>
 800a082:	064d      	lsls	r5, r1, #25
 800a084:	bf48      	it	mi
 800a086:	b29b      	uxthmi	r3, r3
 800a088:	e7ef      	b.n	800a06a <_printf_i+0x14a>
 800a08a:	4665      	mov	r5, ip
 800a08c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a090:	fb02 3311 	mls	r3, r2, r1, r3
 800a094:	5cc3      	ldrb	r3, [r0, r3]
 800a096:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a09a:	460b      	mov	r3, r1
 800a09c:	2900      	cmp	r1, #0
 800a09e:	d1f5      	bne.n	800a08c <_printf_i+0x16c>
 800a0a0:	e7b9      	b.n	800a016 <_printf_i+0xf6>
 800a0a2:	6813      	ldr	r3, [r2, #0]
 800a0a4:	6825      	ldr	r5, [r4, #0]
 800a0a6:	6961      	ldr	r1, [r4, #20]
 800a0a8:	1d18      	adds	r0, r3, #4
 800a0aa:	6010      	str	r0, [r2, #0]
 800a0ac:	0628      	lsls	r0, r5, #24
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	d501      	bpl.n	800a0b6 <_printf_i+0x196>
 800a0b2:	6019      	str	r1, [r3, #0]
 800a0b4:	e002      	b.n	800a0bc <_printf_i+0x19c>
 800a0b6:	066a      	lsls	r2, r5, #25
 800a0b8:	d5fb      	bpl.n	800a0b2 <_printf_i+0x192>
 800a0ba:	8019      	strh	r1, [r3, #0]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	6123      	str	r3, [r4, #16]
 800a0c0:	4665      	mov	r5, ip
 800a0c2:	e7b9      	b.n	800a038 <_printf_i+0x118>
 800a0c4:	6813      	ldr	r3, [r2, #0]
 800a0c6:	1d19      	adds	r1, r3, #4
 800a0c8:	6011      	str	r1, [r2, #0]
 800a0ca:	681d      	ldr	r5, [r3, #0]
 800a0cc:	6862      	ldr	r2, [r4, #4]
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f7f6 f885 	bl	80001e0 <memchr>
 800a0d6:	b108      	cbz	r0, 800a0dc <_printf_i+0x1bc>
 800a0d8:	1b40      	subs	r0, r0, r5
 800a0da:	6060      	str	r0, [r4, #4]
 800a0dc:	6863      	ldr	r3, [r4, #4]
 800a0de:	6123      	str	r3, [r4, #16]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e6:	e7a7      	b.n	800a038 <_printf_i+0x118>
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	462a      	mov	r2, r5
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	47c0      	blx	r8
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	d0aa      	beq.n	800a04c <_printf_i+0x12c>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	079b      	lsls	r3, r3, #30
 800a0fa:	d413      	bmi.n	800a124 <_printf_i+0x204>
 800a0fc:	68e0      	ldr	r0, [r4, #12]
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	4298      	cmp	r0, r3
 800a102:	bfb8      	it	lt
 800a104:	4618      	movlt	r0, r3
 800a106:	e7a3      	b.n	800a050 <_printf_i+0x130>
 800a108:	2301      	movs	r3, #1
 800a10a:	464a      	mov	r2, r9
 800a10c:	4639      	mov	r1, r7
 800a10e:	4630      	mov	r0, r6
 800a110:	47c0      	blx	r8
 800a112:	3001      	adds	r0, #1
 800a114:	d09a      	beq.n	800a04c <_printf_i+0x12c>
 800a116:	3501      	adds	r5, #1
 800a118:	68e3      	ldr	r3, [r4, #12]
 800a11a:	9a03      	ldr	r2, [sp, #12]
 800a11c:	1a9b      	subs	r3, r3, r2
 800a11e:	42ab      	cmp	r3, r5
 800a120:	dcf2      	bgt.n	800a108 <_printf_i+0x1e8>
 800a122:	e7eb      	b.n	800a0fc <_printf_i+0x1dc>
 800a124:	2500      	movs	r5, #0
 800a126:	f104 0919 	add.w	r9, r4, #25
 800a12a:	e7f5      	b.n	800a118 <_printf_i+0x1f8>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ac      	bne.n	800a08a <_printf_i+0x16a>
 800a130:	7803      	ldrb	r3, [r0, #0]
 800a132:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a136:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a13a:	e76c      	b.n	800a016 <_printf_i+0xf6>
 800a13c:	0800bb1a 	.word	0x0800bb1a
 800a140:	0800bb2b 	.word	0x0800bb2b

0800a144 <siprintf>:
 800a144:	b40e      	push	{r1, r2, r3}
 800a146:	b500      	push	{lr}
 800a148:	b09c      	sub	sp, #112	; 0x70
 800a14a:	ab1d      	add	r3, sp, #116	; 0x74
 800a14c:	9002      	str	r0, [sp, #8]
 800a14e:	9006      	str	r0, [sp, #24]
 800a150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a154:	4809      	ldr	r0, [pc, #36]	; (800a17c <siprintf+0x38>)
 800a156:	9107      	str	r1, [sp, #28]
 800a158:	9104      	str	r1, [sp, #16]
 800a15a:	4909      	ldr	r1, [pc, #36]	; (800a180 <siprintf+0x3c>)
 800a15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a160:	9105      	str	r1, [sp, #20]
 800a162:	6800      	ldr	r0, [r0, #0]
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	a902      	add	r1, sp, #8
 800a168:	f001 fb04 	bl	800b774 <_svfiprintf_r>
 800a16c:	9b02      	ldr	r3, [sp, #8]
 800a16e:	2200      	movs	r2, #0
 800a170:	701a      	strb	r2, [r3, #0]
 800a172:	b01c      	add	sp, #112	; 0x70
 800a174:	f85d eb04 	ldr.w	lr, [sp], #4
 800a178:	b003      	add	sp, #12
 800a17a:	4770      	bx	lr
 800a17c:	20000028 	.word	0x20000028
 800a180:	ffff0208 	.word	0xffff0208

0800a184 <_strtol_l.isra.0>:
 800a184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a188:	4680      	mov	r8, r0
 800a18a:	4689      	mov	r9, r1
 800a18c:	4692      	mov	sl, r2
 800a18e:	461e      	mov	r6, r3
 800a190:	460f      	mov	r7, r1
 800a192:	463d      	mov	r5, r7
 800a194:	9808      	ldr	r0, [sp, #32]
 800a196:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a19a:	f000 fec9 	bl	800af30 <__locale_ctype_ptr_l>
 800a19e:	4420      	add	r0, r4
 800a1a0:	7843      	ldrb	r3, [r0, #1]
 800a1a2:	f013 0308 	ands.w	r3, r3, #8
 800a1a6:	d132      	bne.n	800a20e <_strtol_l.isra.0+0x8a>
 800a1a8:	2c2d      	cmp	r4, #45	; 0x2d
 800a1aa:	d132      	bne.n	800a212 <_strtol_l.isra.0+0x8e>
 800a1ac:	787c      	ldrb	r4, [r7, #1]
 800a1ae:	1cbd      	adds	r5, r7, #2
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	2e00      	cmp	r6, #0
 800a1b4:	d05d      	beq.n	800a272 <_strtol_l.isra.0+0xee>
 800a1b6:	2e10      	cmp	r6, #16
 800a1b8:	d109      	bne.n	800a1ce <_strtol_l.isra.0+0x4a>
 800a1ba:	2c30      	cmp	r4, #48	; 0x30
 800a1bc:	d107      	bne.n	800a1ce <_strtol_l.isra.0+0x4a>
 800a1be:	782b      	ldrb	r3, [r5, #0]
 800a1c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1c4:	2b58      	cmp	r3, #88	; 0x58
 800a1c6:	d14f      	bne.n	800a268 <_strtol_l.isra.0+0xe4>
 800a1c8:	786c      	ldrb	r4, [r5, #1]
 800a1ca:	2610      	movs	r6, #16
 800a1cc:	3502      	adds	r5, #2
 800a1ce:	2a00      	cmp	r2, #0
 800a1d0:	bf14      	ite	ne
 800a1d2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a1d6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a1da:	2700      	movs	r7, #0
 800a1dc:	fbb1 fcf6 	udiv	ip, r1, r6
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a1e6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a1ea:	2b09      	cmp	r3, #9
 800a1ec:	d817      	bhi.n	800a21e <_strtol_l.isra.0+0x9a>
 800a1ee:	461c      	mov	r4, r3
 800a1f0:	42a6      	cmp	r6, r4
 800a1f2:	dd23      	ble.n	800a23c <_strtol_l.isra.0+0xb8>
 800a1f4:	1c7b      	adds	r3, r7, #1
 800a1f6:	d007      	beq.n	800a208 <_strtol_l.isra.0+0x84>
 800a1f8:	4584      	cmp	ip, r0
 800a1fa:	d31c      	bcc.n	800a236 <_strtol_l.isra.0+0xb2>
 800a1fc:	d101      	bne.n	800a202 <_strtol_l.isra.0+0x7e>
 800a1fe:	45a6      	cmp	lr, r4
 800a200:	db19      	blt.n	800a236 <_strtol_l.isra.0+0xb2>
 800a202:	fb00 4006 	mla	r0, r0, r6, r4
 800a206:	2701      	movs	r7, #1
 800a208:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a20c:	e7eb      	b.n	800a1e6 <_strtol_l.isra.0+0x62>
 800a20e:	462f      	mov	r7, r5
 800a210:	e7bf      	b.n	800a192 <_strtol_l.isra.0+0xe>
 800a212:	2c2b      	cmp	r4, #43	; 0x2b
 800a214:	bf04      	itt	eq
 800a216:	1cbd      	addeq	r5, r7, #2
 800a218:	787c      	ldrbeq	r4, [r7, #1]
 800a21a:	461a      	mov	r2, r3
 800a21c:	e7c9      	b.n	800a1b2 <_strtol_l.isra.0+0x2e>
 800a21e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a222:	2b19      	cmp	r3, #25
 800a224:	d801      	bhi.n	800a22a <_strtol_l.isra.0+0xa6>
 800a226:	3c37      	subs	r4, #55	; 0x37
 800a228:	e7e2      	b.n	800a1f0 <_strtol_l.isra.0+0x6c>
 800a22a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a22e:	2b19      	cmp	r3, #25
 800a230:	d804      	bhi.n	800a23c <_strtol_l.isra.0+0xb8>
 800a232:	3c57      	subs	r4, #87	; 0x57
 800a234:	e7dc      	b.n	800a1f0 <_strtol_l.isra.0+0x6c>
 800a236:	f04f 37ff 	mov.w	r7, #4294967295
 800a23a:	e7e5      	b.n	800a208 <_strtol_l.isra.0+0x84>
 800a23c:	1c7b      	adds	r3, r7, #1
 800a23e:	d108      	bne.n	800a252 <_strtol_l.isra.0+0xce>
 800a240:	2322      	movs	r3, #34	; 0x22
 800a242:	f8c8 3000 	str.w	r3, [r8]
 800a246:	4608      	mov	r0, r1
 800a248:	f1ba 0f00 	cmp.w	sl, #0
 800a24c:	d107      	bne.n	800a25e <_strtol_l.isra.0+0xda>
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	b102      	cbz	r2, 800a256 <_strtol_l.isra.0+0xd2>
 800a254:	4240      	negs	r0, r0
 800a256:	f1ba 0f00 	cmp.w	sl, #0
 800a25a:	d0f8      	beq.n	800a24e <_strtol_l.isra.0+0xca>
 800a25c:	b10f      	cbz	r7, 800a262 <_strtol_l.isra.0+0xde>
 800a25e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a262:	f8ca 9000 	str.w	r9, [sl]
 800a266:	e7f2      	b.n	800a24e <_strtol_l.isra.0+0xca>
 800a268:	2430      	movs	r4, #48	; 0x30
 800a26a:	2e00      	cmp	r6, #0
 800a26c:	d1af      	bne.n	800a1ce <_strtol_l.isra.0+0x4a>
 800a26e:	2608      	movs	r6, #8
 800a270:	e7ad      	b.n	800a1ce <_strtol_l.isra.0+0x4a>
 800a272:	2c30      	cmp	r4, #48	; 0x30
 800a274:	d0a3      	beq.n	800a1be <_strtol_l.isra.0+0x3a>
 800a276:	260a      	movs	r6, #10
 800a278:	e7a9      	b.n	800a1ce <_strtol_l.isra.0+0x4a>
	...

0800a27c <strtol>:
 800a27c:	4b08      	ldr	r3, [pc, #32]	; (800a2a0 <strtol+0x24>)
 800a27e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a280:	681c      	ldr	r4, [r3, #0]
 800a282:	4d08      	ldr	r5, [pc, #32]	; (800a2a4 <strtol+0x28>)
 800a284:	6a23      	ldr	r3, [r4, #32]
 800a286:	2b00      	cmp	r3, #0
 800a288:	bf08      	it	eq
 800a28a:	462b      	moveq	r3, r5
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	4613      	mov	r3, r2
 800a290:	460a      	mov	r2, r1
 800a292:	4601      	mov	r1, r0
 800a294:	4620      	mov	r0, r4
 800a296:	f7ff ff75 	bl	800a184 <_strtol_l.isra.0>
 800a29a:	b003      	add	sp, #12
 800a29c:	bd30      	pop	{r4, r5, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000028 	.word	0x20000028
 800a2a4:	2000008c 	.word	0x2000008c

0800a2a8 <quorem>:
 800a2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	6903      	ldr	r3, [r0, #16]
 800a2ae:	690c      	ldr	r4, [r1, #16]
 800a2b0:	42a3      	cmp	r3, r4
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	f2c0 8082 	blt.w	800a3bc <quorem+0x114>
 800a2b8:	3c01      	subs	r4, #1
 800a2ba:	f101 0714 	add.w	r7, r1, #20
 800a2be:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a2c2:	f100 0614 	add.w	r6, r0, #20
 800a2c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a2ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a2ce:	eb06 030c 	add.w	r3, r6, ip
 800a2d2:	3501      	adds	r5, #1
 800a2d4:	eb07 090c 	add.w	r9, r7, ip
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	fbb0 f5f5 	udiv	r5, r0, r5
 800a2de:	b395      	cbz	r5, 800a346 <quorem+0x9e>
 800a2e0:	f04f 0a00 	mov.w	sl, #0
 800a2e4:	4638      	mov	r0, r7
 800a2e6:	46b6      	mov	lr, r6
 800a2e8:	46d3      	mov	fp, sl
 800a2ea:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2ee:	b293      	uxth	r3, r2
 800a2f0:	fb05 a303 	mla	r3, r5, r3, sl
 800a2f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	ebab 0303 	sub.w	r3, fp, r3
 800a2fe:	0c12      	lsrs	r2, r2, #16
 800a300:	f8de b000 	ldr.w	fp, [lr]
 800a304:	fb05 a202 	mla	r2, r5, r2, sl
 800a308:	fa13 f38b 	uxtah	r3, r3, fp
 800a30c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a310:	fa1f fb82 	uxth.w	fp, r2
 800a314:	f8de 2000 	ldr.w	r2, [lr]
 800a318:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a31c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a320:	b29b      	uxth	r3, r3
 800a322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a326:	4581      	cmp	r9, r0
 800a328:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a32c:	f84e 3b04 	str.w	r3, [lr], #4
 800a330:	d2db      	bcs.n	800a2ea <quorem+0x42>
 800a332:	f856 300c 	ldr.w	r3, [r6, ip]
 800a336:	b933      	cbnz	r3, 800a346 <quorem+0x9e>
 800a338:	9b01      	ldr	r3, [sp, #4]
 800a33a:	3b04      	subs	r3, #4
 800a33c:	429e      	cmp	r6, r3
 800a33e:	461a      	mov	r2, r3
 800a340:	d330      	bcc.n	800a3a4 <quorem+0xfc>
 800a342:	f8c8 4010 	str.w	r4, [r8, #16]
 800a346:	4640      	mov	r0, r8
 800a348:	f001 f83e 	bl	800b3c8 <__mcmp>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	db25      	blt.n	800a39c <quorem+0xf4>
 800a350:	3501      	adds	r5, #1
 800a352:	4630      	mov	r0, r6
 800a354:	f04f 0c00 	mov.w	ip, #0
 800a358:	f857 2b04 	ldr.w	r2, [r7], #4
 800a35c:	f8d0 e000 	ldr.w	lr, [r0]
 800a360:	b293      	uxth	r3, r2
 800a362:	ebac 0303 	sub.w	r3, ip, r3
 800a366:	0c12      	lsrs	r2, r2, #16
 800a368:	fa13 f38e 	uxtah	r3, r3, lr
 800a36c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a370:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a374:	b29b      	uxth	r3, r3
 800a376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a37a:	45b9      	cmp	r9, r7
 800a37c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a380:	f840 3b04 	str.w	r3, [r0], #4
 800a384:	d2e8      	bcs.n	800a358 <quorem+0xb0>
 800a386:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a38a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a38e:	b92a      	cbnz	r2, 800a39c <quorem+0xf4>
 800a390:	3b04      	subs	r3, #4
 800a392:	429e      	cmp	r6, r3
 800a394:	461a      	mov	r2, r3
 800a396:	d30b      	bcc.n	800a3b0 <quorem+0x108>
 800a398:	f8c8 4010 	str.w	r4, [r8, #16]
 800a39c:	4628      	mov	r0, r5
 800a39e:	b003      	add	sp, #12
 800a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a4:	6812      	ldr	r2, [r2, #0]
 800a3a6:	3b04      	subs	r3, #4
 800a3a8:	2a00      	cmp	r2, #0
 800a3aa:	d1ca      	bne.n	800a342 <quorem+0x9a>
 800a3ac:	3c01      	subs	r4, #1
 800a3ae:	e7c5      	b.n	800a33c <quorem+0x94>
 800a3b0:	6812      	ldr	r2, [r2, #0]
 800a3b2:	3b04      	subs	r3, #4
 800a3b4:	2a00      	cmp	r2, #0
 800a3b6:	d1ef      	bne.n	800a398 <quorem+0xf0>
 800a3b8:	3c01      	subs	r4, #1
 800a3ba:	e7ea      	b.n	800a392 <quorem+0xea>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e7ee      	b.n	800a39e <quorem+0xf6>

0800a3c0 <_dtoa_r>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	ec57 6b10 	vmov	r6, r7, d0
 800a3c8:	b097      	sub	sp, #92	; 0x5c
 800a3ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3cc:	9106      	str	r1, [sp, #24]
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a3d2:	9312      	str	r3, [sp, #72]	; 0x48
 800a3d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a3d8:	e9cd 6700 	strd	r6, r7, [sp]
 800a3dc:	b93d      	cbnz	r5, 800a3ee <_dtoa_r+0x2e>
 800a3de:	2010      	movs	r0, #16
 800a3e0:	f000 fdb8 	bl	800af54 <malloc>
 800a3e4:	6260      	str	r0, [r4, #36]	; 0x24
 800a3e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3ea:	6005      	str	r5, [r0, #0]
 800a3ec:	60c5      	str	r5, [r0, #12]
 800a3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3f0:	6819      	ldr	r1, [r3, #0]
 800a3f2:	b151      	cbz	r1, 800a40a <_dtoa_r+0x4a>
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	604a      	str	r2, [r1, #4]
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	4093      	lsls	r3, r2
 800a3fc:	608b      	str	r3, [r1, #8]
 800a3fe:	4620      	mov	r0, r4
 800a400:	f000 fe01 	bl	800b006 <_Bfree>
 800a404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	1e3b      	subs	r3, r7, #0
 800a40c:	bfbb      	ittet	lt
 800a40e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a412:	9301      	strlt	r3, [sp, #4]
 800a414:	2300      	movge	r3, #0
 800a416:	2201      	movlt	r2, #1
 800a418:	bfac      	ite	ge
 800a41a:	f8c8 3000 	strge.w	r3, [r8]
 800a41e:	f8c8 2000 	strlt.w	r2, [r8]
 800a422:	4baf      	ldr	r3, [pc, #700]	; (800a6e0 <_dtoa_r+0x320>)
 800a424:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a428:	ea33 0308 	bics.w	r3, r3, r8
 800a42c:	d114      	bne.n	800a458 <_dtoa_r+0x98>
 800a42e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a430:	f242 730f 	movw	r3, #9999	; 0x270f
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	9b00      	ldr	r3, [sp, #0]
 800a438:	b923      	cbnz	r3, 800a444 <_dtoa_r+0x84>
 800a43a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a43e:	2800      	cmp	r0, #0
 800a440:	f000 8542 	beq.w	800aec8 <_dtoa_r+0xb08>
 800a444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a446:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a6f4 <_dtoa_r+0x334>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f000 8544 	beq.w	800aed8 <_dtoa_r+0xb18>
 800a450:	f10b 0303 	add.w	r3, fp, #3
 800a454:	f000 bd3e 	b.w	800aed4 <_dtoa_r+0xb14>
 800a458:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a45c:	2200      	movs	r2, #0
 800a45e:	2300      	movs	r3, #0
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 800a468:	4681      	mov	r9, r0
 800a46a:	b168      	cbz	r0, 800a488 <_dtoa_r+0xc8>
 800a46c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a46e:	2301      	movs	r3, #1
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 8524 	beq.w	800aec2 <_dtoa_r+0xb02>
 800a47a:	4b9a      	ldr	r3, [pc, #616]	; (800a6e4 <_dtoa_r+0x324>)
 800a47c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a47e:	f103 3bff 	add.w	fp, r3, #4294967295
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	f000 bd28 	b.w	800aed8 <_dtoa_r+0xb18>
 800a488:	aa14      	add	r2, sp, #80	; 0x50
 800a48a:	a915      	add	r1, sp, #84	; 0x54
 800a48c:	ec47 6b10 	vmov	d0, r6, r7
 800a490:	4620      	mov	r0, r4
 800a492:	f001 f810 	bl	800b4b6 <__d2b>
 800a496:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a49a:	9004      	str	r0, [sp, #16]
 800a49c:	2d00      	cmp	r5, #0
 800a49e:	d07c      	beq.n	800a59a <_dtoa_r+0x1da>
 800a4a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a4a8:	46b2      	mov	sl, r6
 800a4aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a4ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	4b8b      	ldr	r3, [pc, #556]	; (800a6e8 <_dtoa_r+0x328>)
 800a4ba:	4650      	mov	r0, sl
 800a4bc:	4659      	mov	r1, fp
 800a4be:	f7f5 fee3 	bl	8000288 <__aeabi_dsub>
 800a4c2:	a381      	add	r3, pc, #516	; (adr r3, 800a6c8 <_dtoa_r+0x308>)
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f7f6 f896 	bl	80005f8 <__aeabi_dmul>
 800a4cc:	a380      	add	r3, pc, #512	; (adr r3, 800a6d0 <_dtoa_r+0x310>)
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	f7f5 fedb 	bl	800028c <__adddf3>
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	4628      	mov	r0, r5
 800a4da:	460f      	mov	r7, r1
 800a4dc:	f7f6 f822 	bl	8000524 <__aeabi_i2d>
 800a4e0:	a37d      	add	r3, pc, #500	; (adr r3, 800a6d8 <_dtoa_r+0x318>)
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	f7f6 f887 	bl	80005f8 <__aeabi_dmul>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	4639      	mov	r1, r7
 800a4f2:	f7f5 fecb 	bl	800028c <__adddf3>
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	460f      	mov	r7, r1
 800a4fa:	f7f6 fb2d 	bl	8000b58 <__aeabi_d2iz>
 800a4fe:	2200      	movs	r2, #0
 800a500:	4682      	mov	sl, r0
 800a502:	2300      	movs	r3, #0
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	f7f6 fae8 	bl	8000adc <__aeabi_dcmplt>
 800a50c:	b148      	cbz	r0, 800a522 <_dtoa_r+0x162>
 800a50e:	4650      	mov	r0, sl
 800a510:	f7f6 f808 	bl	8000524 <__aeabi_i2d>
 800a514:	4632      	mov	r2, r6
 800a516:	463b      	mov	r3, r7
 800a518:	f7f6 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a51c:	b908      	cbnz	r0, 800a522 <_dtoa_r+0x162>
 800a51e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a522:	f1ba 0f16 	cmp.w	sl, #22
 800a526:	d859      	bhi.n	800a5dc <_dtoa_r+0x21c>
 800a528:	4970      	ldr	r1, [pc, #448]	; (800a6ec <_dtoa_r+0x32c>)
 800a52a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a52e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a532:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a536:	f7f6 faef 	bl	8000b18 <__aeabi_dcmpgt>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d050      	beq.n	800a5e0 <_dtoa_r+0x220>
 800a53e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a542:	2300      	movs	r3, #0
 800a544:	930f      	str	r3, [sp, #60]	; 0x3c
 800a546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a548:	1b5d      	subs	r5, r3, r5
 800a54a:	f1b5 0801 	subs.w	r8, r5, #1
 800a54e:	bf49      	itett	mi
 800a550:	f1c5 0301 	rsbmi	r3, r5, #1
 800a554:	2300      	movpl	r3, #0
 800a556:	9305      	strmi	r3, [sp, #20]
 800a558:	f04f 0800 	movmi.w	r8, #0
 800a55c:	bf58      	it	pl
 800a55e:	9305      	strpl	r3, [sp, #20]
 800a560:	f1ba 0f00 	cmp.w	sl, #0
 800a564:	db3e      	blt.n	800a5e4 <_dtoa_r+0x224>
 800a566:	2300      	movs	r3, #0
 800a568:	44d0      	add	r8, sl
 800a56a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a56e:	9307      	str	r3, [sp, #28]
 800a570:	9b06      	ldr	r3, [sp, #24]
 800a572:	2b09      	cmp	r3, #9
 800a574:	f200 8090 	bhi.w	800a698 <_dtoa_r+0x2d8>
 800a578:	2b05      	cmp	r3, #5
 800a57a:	bfc4      	itt	gt
 800a57c:	3b04      	subgt	r3, #4
 800a57e:	9306      	strgt	r3, [sp, #24]
 800a580:	9b06      	ldr	r3, [sp, #24]
 800a582:	f1a3 0302 	sub.w	r3, r3, #2
 800a586:	bfcc      	ite	gt
 800a588:	2500      	movgt	r5, #0
 800a58a:	2501      	movle	r5, #1
 800a58c:	2b03      	cmp	r3, #3
 800a58e:	f200 808f 	bhi.w	800a6b0 <_dtoa_r+0x2f0>
 800a592:	e8df f003 	tbb	[pc, r3]
 800a596:	7f7d      	.short	0x7f7d
 800a598:	7131      	.short	0x7131
 800a59a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a59e:	441d      	add	r5, r3
 800a5a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a5a4:	2820      	cmp	r0, #32
 800a5a6:	dd13      	ble.n	800a5d0 <_dtoa_r+0x210>
 800a5a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a5ac:	9b00      	ldr	r3, [sp, #0]
 800a5ae:	fa08 f800 	lsl.w	r8, r8, r0
 800a5b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a5b6:	fa23 f000 	lsr.w	r0, r3, r0
 800a5ba:	ea48 0000 	orr.w	r0, r8, r0
 800a5be:	f7f5 ffa1 	bl	8000504 <__aeabi_ui2d>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a5ca:	3d01      	subs	r5, #1
 800a5cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a5ce:	e772      	b.n	800a4b6 <_dtoa_r+0xf6>
 800a5d0:	9b00      	ldr	r3, [sp, #0]
 800a5d2:	f1c0 0020 	rsb	r0, r0, #32
 800a5d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a5da:	e7f0      	b.n	800a5be <_dtoa_r+0x1fe>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e7b1      	b.n	800a544 <_dtoa_r+0x184>
 800a5e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800a5e2:	e7b0      	b.n	800a546 <_dtoa_r+0x186>
 800a5e4:	9b05      	ldr	r3, [sp, #20]
 800a5e6:	eba3 030a 	sub.w	r3, r3, sl
 800a5ea:	9305      	str	r3, [sp, #20]
 800a5ec:	f1ca 0300 	rsb	r3, sl, #0
 800a5f0:	9307      	str	r3, [sp, #28]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a5f6:	e7bb      	b.n	800a570 <_dtoa_r+0x1b0>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a5fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	dd59      	ble.n	800a6b6 <_dtoa_r+0x2f6>
 800a602:	9302      	str	r3, [sp, #8]
 800a604:	4699      	mov	r9, r3
 800a606:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a608:	2200      	movs	r2, #0
 800a60a:	6072      	str	r2, [r6, #4]
 800a60c:	2204      	movs	r2, #4
 800a60e:	f102 0014 	add.w	r0, r2, #20
 800a612:	4298      	cmp	r0, r3
 800a614:	6871      	ldr	r1, [r6, #4]
 800a616:	d953      	bls.n	800a6c0 <_dtoa_r+0x300>
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 fcc0 	bl	800af9e <_Balloc>
 800a61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a620:	6030      	str	r0, [r6, #0]
 800a622:	f1b9 0f0e 	cmp.w	r9, #14
 800a626:	f8d3 b000 	ldr.w	fp, [r3]
 800a62a:	f200 80e6 	bhi.w	800a7fa <_dtoa_r+0x43a>
 800a62e:	2d00      	cmp	r5, #0
 800a630:	f000 80e3 	beq.w	800a7fa <_dtoa_r+0x43a>
 800a634:	ed9d 7b00 	vldr	d7, [sp]
 800a638:	f1ba 0f00 	cmp.w	sl, #0
 800a63c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a640:	dd74      	ble.n	800a72c <_dtoa_r+0x36c>
 800a642:	4a2a      	ldr	r2, [pc, #168]	; (800a6ec <_dtoa_r+0x32c>)
 800a644:	f00a 030f 	and.w	r3, sl, #15
 800a648:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a64c:	ed93 7b00 	vldr	d7, [r3]
 800a650:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a654:	06f0      	lsls	r0, r6, #27
 800a656:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a65a:	d565      	bpl.n	800a728 <_dtoa_r+0x368>
 800a65c:	4b24      	ldr	r3, [pc, #144]	; (800a6f0 <_dtoa_r+0x330>)
 800a65e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a662:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a666:	f7f6 f8f1 	bl	800084c <__aeabi_ddiv>
 800a66a:	e9cd 0100 	strd	r0, r1, [sp]
 800a66e:	f006 060f 	and.w	r6, r6, #15
 800a672:	2503      	movs	r5, #3
 800a674:	4f1e      	ldr	r7, [pc, #120]	; (800a6f0 <_dtoa_r+0x330>)
 800a676:	e04c      	b.n	800a712 <_dtoa_r+0x352>
 800a678:	2301      	movs	r3, #1
 800a67a:	930a      	str	r3, [sp, #40]	; 0x28
 800a67c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a67e:	4453      	add	r3, sl
 800a680:	f103 0901 	add.w	r9, r3, #1
 800a684:	9302      	str	r3, [sp, #8]
 800a686:	464b      	mov	r3, r9
 800a688:	2b01      	cmp	r3, #1
 800a68a:	bfb8      	it	lt
 800a68c:	2301      	movlt	r3, #1
 800a68e:	e7ba      	b.n	800a606 <_dtoa_r+0x246>
 800a690:	2300      	movs	r3, #0
 800a692:	e7b2      	b.n	800a5fa <_dtoa_r+0x23a>
 800a694:	2300      	movs	r3, #0
 800a696:	e7f0      	b.n	800a67a <_dtoa_r+0x2ba>
 800a698:	2501      	movs	r5, #1
 800a69a:	2300      	movs	r3, #0
 800a69c:	9306      	str	r3, [sp, #24]
 800a69e:	950a      	str	r5, [sp, #40]	; 0x28
 800a6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a4:	9302      	str	r3, [sp, #8]
 800a6a6:	4699      	mov	r9, r3
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2312      	movs	r3, #18
 800a6ac:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6ae:	e7aa      	b.n	800a606 <_dtoa_r+0x246>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6b4:	e7f4      	b.n	800a6a0 <_dtoa_r+0x2e0>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	9302      	str	r3, [sp, #8]
 800a6ba:	4699      	mov	r9, r3
 800a6bc:	461a      	mov	r2, r3
 800a6be:	e7f5      	b.n	800a6ac <_dtoa_r+0x2ec>
 800a6c0:	3101      	adds	r1, #1
 800a6c2:	6071      	str	r1, [r6, #4]
 800a6c4:	0052      	lsls	r2, r2, #1
 800a6c6:	e7a2      	b.n	800a60e <_dtoa_r+0x24e>
 800a6c8:	636f4361 	.word	0x636f4361
 800a6cc:	3fd287a7 	.word	0x3fd287a7
 800a6d0:	8b60c8b3 	.word	0x8b60c8b3
 800a6d4:	3fc68a28 	.word	0x3fc68a28
 800a6d8:	509f79fb 	.word	0x509f79fb
 800a6dc:	3fd34413 	.word	0x3fd34413
 800a6e0:	7ff00000 	.word	0x7ff00000
 800a6e4:	0800bb19 	.word	0x0800bb19
 800a6e8:	3ff80000 	.word	0x3ff80000
 800a6ec:	0800bb80 	.word	0x0800bb80
 800a6f0:	0800bb58 	.word	0x0800bb58
 800a6f4:	0800bb45 	.word	0x0800bb45
 800a6f8:	07f1      	lsls	r1, r6, #31
 800a6fa:	d508      	bpl.n	800a70e <_dtoa_r+0x34e>
 800a6fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a700:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a704:	f7f5 ff78 	bl	80005f8 <__aeabi_dmul>
 800a708:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a70c:	3501      	adds	r5, #1
 800a70e:	1076      	asrs	r6, r6, #1
 800a710:	3708      	adds	r7, #8
 800a712:	2e00      	cmp	r6, #0
 800a714:	d1f0      	bne.n	800a6f8 <_dtoa_r+0x338>
 800a716:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a71a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a71e:	f7f6 f895 	bl	800084c <__aeabi_ddiv>
 800a722:	e9cd 0100 	strd	r0, r1, [sp]
 800a726:	e01a      	b.n	800a75e <_dtoa_r+0x39e>
 800a728:	2502      	movs	r5, #2
 800a72a:	e7a3      	b.n	800a674 <_dtoa_r+0x2b4>
 800a72c:	f000 80a0 	beq.w	800a870 <_dtoa_r+0x4b0>
 800a730:	f1ca 0600 	rsb	r6, sl, #0
 800a734:	4b9f      	ldr	r3, [pc, #636]	; (800a9b4 <_dtoa_r+0x5f4>)
 800a736:	4fa0      	ldr	r7, [pc, #640]	; (800a9b8 <_dtoa_r+0x5f8>)
 800a738:	f006 020f 	and.w	r2, r6, #15
 800a73c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a748:	f7f5 ff56 	bl	80005f8 <__aeabi_dmul>
 800a74c:	e9cd 0100 	strd	r0, r1, [sp]
 800a750:	1136      	asrs	r6, r6, #4
 800a752:	2300      	movs	r3, #0
 800a754:	2502      	movs	r5, #2
 800a756:	2e00      	cmp	r6, #0
 800a758:	d17f      	bne.n	800a85a <_dtoa_r+0x49a>
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1e1      	bne.n	800a722 <_dtoa_r+0x362>
 800a75e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 8087 	beq.w	800a874 <_dtoa_r+0x4b4>
 800a766:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a76a:	2200      	movs	r2, #0
 800a76c:	4b93      	ldr	r3, [pc, #588]	; (800a9bc <_dtoa_r+0x5fc>)
 800a76e:	4630      	mov	r0, r6
 800a770:	4639      	mov	r1, r7
 800a772:	f7f6 f9b3 	bl	8000adc <__aeabi_dcmplt>
 800a776:	2800      	cmp	r0, #0
 800a778:	d07c      	beq.n	800a874 <_dtoa_r+0x4b4>
 800a77a:	f1b9 0f00 	cmp.w	r9, #0
 800a77e:	d079      	beq.n	800a874 <_dtoa_r+0x4b4>
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	dd35      	ble.n	800a7f2 <_dtoa_r+0x432>
 800a786:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a78a:	9308      	str	r3, [sp, #32]
 800a78c:	4639      	mov	r1, r7
 800a78e:	2200      	movs	r2, #0
 800a790:	4b8b      	ldr	r3, [pc, #556]	; (800a9c0 <_dtoa_r+0x600>)
 800a792:	4630      	mov	r0, r6
 800a794:	f7f5 ff30 	bl	80005f8 <__aeabi_dmul>
 800a798:	e9cd 0100 	strd	r0, r1, [sp]
 800a79c:	9f02      	ldr	r7, [sp, #8]
 800a79e:	3501      	adds	r5, #1
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f7f5 febf 	bl	8000524 <__aeabi_i2d>
 800a7a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7aa:	f7f5 ff25 	bl	80005f8 <__aeabi_dmul>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	4b84      	ldr	r3, [pc, #528]	; (800a9c4 <_dtoa_r+0x604>)
 800a7b2:	f7f5 fd6b 	bl	800028c <__adddf3>
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a7bc:	2f00      	cmp	r7, #0
 800a7be:	d15d      	bne.n	800a87c <_dtoa_r+0x4bc>
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	4b81      	ldr	r3, [pc, #516]	; (800a9c8 <_dtoa_r+0x608>)
 800a7c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7c8:	f7f5 fd5e 	bl	8000288 <__aeabi_dsub>
 800a7cc:	462a      	mov	r2, r5
 800a7ce:	4633      	mov	r3, r6
 800a7d0:	e9cd 0100 	strd	r0, r1, [sp]
 800a7d4:	f7f6 f9a0 	bl	8000b18 <__aeabi_dcmpgt>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	f040 8288 	bne.w	800acee <_dtoa_r+0x92e>
 800a7de:	462a      	mov	r2, r5
 800a7e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a7e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7e8:	f7f6 f978 	bl	8000adc <__aeabi_dcmplt>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	f040 827c 	bne.w	800acea <_dtoa_r+0x92a>
 800a7f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7f6:	e9cd 2300 	strd	r2, r3, [sp]
 800a7fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f2c0 8150 	blt.w	800aaa2 <_dtoa_r+0x6e2>
 800a802:	f1ba 0f0e 	cmp.w	sl, #14
 800a806:	f300 814c 	bgt.w	800aaa2 <_dtoa_r+0x6e2>
 800a80a:	4b6a      	ldr	r3, [pc, #424]	; (800a9b4 <_dtoa_r+0x5f4>)
 800a80c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a810:	ed93 7b00 	vldr	d7, [r3]
 800a814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a816:	2b00      	cmp	r3, #0
 800a818:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a81c:	f280 80d8 	bge.w	800a9d0 <_dtoa_r+0x610>
 800a820:	f1b9 0f00 	cmp.w	r9, #0
 800a824:	f300 80d4 	bgt.w	800a9d0 <_dtoa_r+0x610>
 800a828:	f040 825e 	bne.w	800ace8 <_dtoa_r+0x928>
 800a82c:	2200      	movs	r2, #0
 800a82e:	4b66      	ldr	r3, [pc, #408]	; (800a9c8 <_dtoa_r+0x608>)
 800a830:	ec51 0b17 	vmov	r0, r1, d7
 800a834:	f7f5 fee0 	bl	80005f8 <__aeabi_dmul>
 800a838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a83c:	f7f6 f962 	bl	8000b04 <__aeabi_dcmpge>
 800a840:	464f      	mov	r7, r9
 800a842:	464e      	mov	r6, r9
 800a844:	2800      	cmp	r0, #0
 800a846:	f040 8234 	bne.w	800acb2 <_dtoa_r+0x8f2>
 800a84a:	2331      	movs	r3, #49	; 0x31
 800a84c:	f10b 0501 	add.w	r5, fp, #1
 800a850:	f88b 3000 	strb.w	r3, [fp]
 800a854:	f10a 0a01 	add.w	sl, sl, #1
 800a858:	e22f      	b.n	800acba <_dtoa_r+0x8fa>
 800a85a:	07f2      	lsls	r2, r6, #31
 800a85c:	d505      	bpl.n	800a86a <_dtoa_r+0x4aa>
 800a85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a862:	f7f5 fec9 	bl	80005f8 <__aeabi_dmul>
 800a866:	3501      	adds	r5, #1
 800a868:	2301      	movs	r3, #1
 800a86a:	1076      	asrs	r6, r6, #1
 800a86c:	3708      	adds	r7, #8
 800a86e:	e772      	b.n	800a756 <_dtoa_r+0x396>
 800a870:	2502      	movs	r5, #2
 800a872:	e774      	b.n	800a75e <_dtoa_r+0x39e>
 800a874:	f8cd a020 	str.w	sl, [sp, #32]
 800a878:	464f      	mov	r7, r9
 800a87a:	e791      	b.n	800a7a0 <_dtoa_r+0x3e0>
 800a87c:	4b4d      	ldr	r3, [pc, #308]	; (800a9b4 <_dtoa_r+0x5f4>)
 800a87e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a882:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d047      	beq.n	800a91c <_dtoa_r+0x55c>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	2000      	movs	r0, #0
 800a892:	494e      	ldr	r1, [pc, #312]	; (800a9cc <_dtoa_r+0x60c>)
 800a894:	f7f5 ffda 	bl	800084c <__aeabi_ddiv>
 800a898:	462a      	mov	r2, r5
 800a89a:	4633      	mov	r3, r6
 800a89c:	f7f5 fcf4 	bl	8000288 <__aeabi_dsub>
 800a8a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a8a4:	465d      	mov	r5, fp
 800a8a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8aa:	f7f6 f955 	bl	8000b58 <__aeabi_d2iz>
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	f7f5 fe38 	bl	8000524 <__aeabi_i2d>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8bc:	f7f5 fce4 	bl	8000288 <__aeabi_dsub>
 800a8c0:	3630      	adds	r6, #48	; 0x30
 800a8c2:	f805 6b01 	strb.w	r6, [r5], #1
 800a8c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a8ca:	e9cd 0100 	strd	r0, r1, [sp]
 800a8ce:	f7f6 f905 	bl	8000adc <__aeabi_dcmplt>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d163      	bne.n	800a99e <_dtoa_r+0x5de>
 800a8d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8da:	2000      	movs	r0, #0
 800a8dc:	4937      	ldr	r1, [pc, #220]	; (800a9bc <_dtoa_r+0x5fc>)
 800a8de:	f7f5 fcd3 	bl	8000288 <__aeabi_dsub>
 800a8e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a8e6:	f7f6 f8f9 	bl	8000adc <__aeabi_dcmplt>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	f040 80b7 	bne.w	800aa5e <_dtoa_r+0x69e>
 800a8f0:	eba5 030b 	sub.w	r3, r5, fp
 800a8f4:	429f      	cmp	r7, r3
 800a8f6:	f77f af7c 	ble.w	800a7f2 <_dtoa_r+0x432>
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	4b30      	ldr	r3, [pc, #192]	; (800a9c0 <_dtoa_r+0x600>)
 800a8fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a902:	f7f5 fe79 	bl	80005f8 <__aeabi_dmul>
 800a906:	2200      	movs	r2, #0
 800a908:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a90c:	4b2c      	ldr	r3, [pc, #176]	; (800a9c0 <_dtoa_r+0x600>)
 800a90e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a912:	f7f5 fe71 	bl	80005f8 <__aeabi_dmul>
 800a916:	e9cd 0100 	strd	r0, r1, [sp]
 800a91a:	e7c4      	b.n	800a8a6 <_dtoa_r+0x4e6>
 800a91c:	462a      	mov	r2, r5
 800a91e:	4633      	mov	r3, r6
 800a920:	f7f5 fe6a 	bl	80005f8 <__aeabi_dmul>
 800a924:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a928:	eb0b 0507 	add.w	r5, fp, r7
 800a92c:	465e      	mov	r6, fp
 800a92e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a932:	f7f6 f911 	bl	8000b58 <__aeabi_d2iz>
 800a936:	4607      	mov	r7, r0
 800a938:	f7f5 fdf4 	bl	8000524 <__aeabi_i2d>
 800a93c:	3730      	adds	r7, #48	; 0x30
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a946:	f7f5 fc9f 	bl	8000288 <__aeabi_dsub>
 800a94a:	f806 7b01 	strb.w	r7, [r6], #1
 800a94e:	42ae      	cmp	r6, r5
 800a950:	e9cd 0100 	strd	r0, r1, [sp]
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	d126      	bne.n	800a9a8 <_dtoa_r+0x5e8>
 800a95a:	4b1c      	ldr	r3, [pc, #112]	; (800a9cc <_dtoa_r+0x60c>)
 800a95c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a960:	f7f5 fc94 	bl	800028c <__adddf3>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a96c:	f7f6 f8d4 	bl	8000b18 <__aeabi_dcmpgt>
 800a970:	2800      	cmp	r0, #0
 800a972:	d174      	bne.n	800aa5e <_dtoa_r+0x69e>
 800a974:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a978:	2000      	movs	r0, #0
 800a97a:	4914      	ldr	r1, [pc, #80]	; (800a9cc <_dtoa_r+0x60c>)
 800a97c:	f7f5 fc84 	bl	8000288 <__aeabi_dsub>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a988:	f7f6 f8a8 	bl	8000adc <__aeabi_dcmplt>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	f43f af30 	beq.w	800a7f2 <_dtoa_r+0x432>
 800a992:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a996:	2b30      	cmp	r3, #48	; 0x30
 800a998:	f105 32ff 	add.w	r2, r5, #4294967295
 800a99c:	d002      	beq.n	800a9a4 <_dtoa_r+0x5e4>
 800a99e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a9a2:	e04a      	b.n	800aa3a <_dtoa_r+0x67a>
 800a9a4:	4615      	mov	r5, r2
 800a9a6:	e7f4      	b.n	800a992 <_dtoa_r+0x5d2>
 800a9a8:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <_dtoa_r+0x600>)
 800a9aa:	f7f5 fe25 	bl	80005f8 <__aeabi_dmul>
 800a9ae:	e9cd 0100 	strd	r0, r1, [sp]
 800a9b2:	e7bc      	b.n	800a92e <_dtoa_r+0x56e>
 800a9b4:	0800bb80 	.word	0x0800bb80
 800a9b8:	0800bb58 	.word	0x0800bb58
 800a9bc:	3ff00000 	.word	0x3ff00000
 800a9c0:	40240000 	.word	0x40240000
 800a9c4:	401c0000 	.word	0x401c0000
 800a9c8:	40140000 	.word	0x40140000
 800a9cc:	3fe00000 	.word	0x3fe00000
 800a9d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a9d4:	465d      	mov	r5, fp
 800a9d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9da:	4630      	mov	r0, r6
 800a9dc:	4639      	mov	r1, r7
 800a9de:	f7f5 ff35 	bl	800084c <__aeabi_ddiv>
 800a9e2:	f7f6 f8b9 	bl	8000b58 <__aeabi_d2iz>
 800a9e6:	4680      	mov	r8, r0
 800a9e8:	f7f5 fd9c 	bl	8000524 <__aeabi_i2d>
 800a9ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9f0:	f7f5 fe02 	bl	80005f8 <__aeabi_dmul>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800aa00:	f7f5 fc42 	bl	8000288 <__aeabi_dsub>
 800aa04:	f805 6b01 	strb.w	r6, [r5], #1
 800aa08:	eba5 060b 	sub.w	r6, r5, fp
 800aa0c:	45b1      	cmp	r9, r6
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	d139      	bne.n	800aa88 <_dtoa_r+0x6c8>
 800aa14:	f7f5 fc3a 	bl	800028c <__adddf3>
 800aa18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	460f      	mov	r7, r1
 800aa20:	f7f6 f87a 	bl	8000b18 <__aeabi_dcmpgt>
 800aa24:	b9c8      	cbnz	r0, 800aa5a <_dtoa_r+0x69a>
 800aa26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f6 f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa32:	b110      	cbz	r0, 800aa3a <_dtoa_r+0x67a>
 800aa34:	f018 0f01 	tst.w	r8, #1
 800aa38:	d10f      	bne.n	800aa5a <_dtoa_r+0x69a>
 800aa3a:	9904      	ldr	r1, [sp, #16]
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 fae2 	bl	800b006 <_Bfree>
 800aa42:	2300      	movs	r3, #0
 800aa44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa46:	702b      	strb	r3, [r5, #0]
 800aa48:	f10a 0301 	add.w	r3, sl, #1
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 8241 	beq.w	800aed8 <_dtoa_r+0xb18>
 800aa56:	601d      	str	r5, [r3, #0]
 800aa58:	e23e      	b.n	800aed8 <_dtoa_r+0xb18>
 800aa5a:	f8cd a020 	str.w	sl, [sp, #32]
 800aa5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa62:	2a39      	cmp	r2, #57	; 0x39
 800aa64:	f105 33ff 	add.w	r3, r5, #4294967295
 800aa68:	d108      	bne.n	800aa7c <_dtoa_r+0x6bc>
 800aa6a:	459b      	cmp	fp, r3
 800aa6c:	d10a      	bne.n	800aa84 <_dtoa_r+0x6c4>
 800aa6e:	9b08      	ldr	r3, [sp, #32]
 800aa70:	3301      	adds	r3, #1
 800aa72:	9308      	str	r3, [sp, #32]
 800aa74:	2330      	movs	r3, #48	; 0x30
 800aa76:	f88b 3000 	strb.w	r3, [fp]
 800aa7a:	465b      	mov	r3, fp
 800aa7c:	781a      	ldrb	r2, [r3, #0]
 800aa7e:	3201      	adds	r2, #1
 800aa80:	701a      	strb	r2, [r3, #0]
 800aa82:	e78c      	b.n	800a99e <_dtoa_r+0x5de>
 800aa84:	461d      	mov	r5, r3
 800aa86:	e7ea      	b.n	800aa5e <_dtoa_r+0x69e>
 800aa88:	2200      	movs	r2, #0
 800aa8a:	4b9b      	ldr	r3, [pc, #620]	; (800acf8 <_dtoa_r+0x938>)
 800aa8c:	f7f5 fdb4 	bl	80005f8 <__aeabi_dmul>
 800aa90:	2200      	movs	r2, #0
 800aa92:	2300      	movs	r3, #0
 800aa94:	4606      	mov	r6, r0
 800aa96:	460f      	mov	r7, r1
 800aa98:	f7f6 f816 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d09a      	beq.n	800a9d6 <_dtoa_r+0x616>
 800aaa0:	e7cb      	b.n	800aa3a <_dtoa_r+0x67a>
 800aaa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	f000 808b 	beq.w	800abc0 <_dtoa_r+0x800>
 800aaaa:	9a06      	ldr	r2, [sp, #24]
 800aaac:	2a01      	cmp	r2, #1
 800aaae:	dc6e      	bgt.n	800ab8e <_dtoa_r+0x7ce>
 800aab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aab2:	2a00      	cmp	r2, #0
 800aab4:	d067      	beq.n	800ab86 <_dtoa_r+0x7c6>
 800aab6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aaba:	9f07      	ldr	r7, [sp, #28]
 800aabc:	9d05      	ldr	r5, [sp, #20]
 800aabe:	9a05      	ldr	r2, [sp, #20]
 800aac0:	2101      	movs	r1, #1
 800aac2:	441a      	add	r2, r3
 800aac4:	4620      	mov	r0, r4
 800aac6:	9205      	str	r2, [sp, #20]
 800aac8:	4498      	add	r8, r3
 800aaca:	f000 fb3c 	bl	800b146 <__i2b>
 800aace:	4606      	mov	r6, r0
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	dd0c      	ble.n	800aaee <_dtoa_r+0x72e>
 800aad4:	f1b8 0f00 	cmp.w	r8, #0
 800aad8:	dd09      	ble.n	800aaee <_dtoa_r+0x72e>
 800aada:	4545      	cmp	r5, r8
 800aadc:	9a05      	ldr	r2, [sp, #20]
 800aade:	462b      	mov	r3, r5
 800aae0:	bfa8      	it	ge
 800aae2:	4643      	movge	r3, r8
 800aae4:	1ad2      	subs	r2, r2, r3
 800aae6:	9205      	str	r2, [sp, #20]
 800aae8:	1aed      	subs	r5, r5, r3
 800aaea:	eba8 0803 	sub.w	r8, r8, r3
 800aaee:	9b07      	ldr	r3, [sp, #28]
 800aaf0:	b1eb      	cbz	r3, 800ab2e <_dtoa_r+0x76e>
 800aaf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d067      	beq.n	800abc8 <_dtoa_r+0x808>
 800aaf8:	b18f      	cbz	r7, 800ab1e <_dtoa_r+0x75e>
 800aafa:	4631      	mov	r1, r6
 800aafc:	463a      	mov	r2, r7
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 fbc0 	bl	800b284 <__pow5mult>
 800ab04:	9a04      	ldr	r2, [sp, #16]
 800ab06:	4601      	mov	r1, r0
 800ab08:	4606      	mov	r6, r0
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 fb24 	bl	800b158 <__multiply>
 800ab10:	9904      	ldr	r1, [sp, #16]
 800ab12:	9008      	str	r0, [sp, #32]
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fa76 	bl	800b006 <_Bfree>
 800ab1a:	9b08      	ldr	r3, [sp, #32]
 800ab1c:	9304      	str	r3, [sp, #16]
 800ab1e:	9b07      	ldr	r3, [sp, #28]
 800ab20:	1bda      	subs	r2, r3, r7
 800ab22:	d004      	beq.n	800ab2e <_dtoa_r+0x76e>
 800ab24:	9904      	ldr	r1, [sp, #16]
 800ab26:	4620      	mov	r0, r4
 800ab28:	f000 fbac 	bl	800b284 <__pow5mult>
 800ab2c:	9004      	str	r0, [sp, #16]
 800ab2e:	2101      	movs	r1, #1
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 fb08 	bl	800b146 <__i2b>
 800ab36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab38:	4607      	mov	r7, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f000 81d0 	beq.w	800aee0 <_dtoa_r+0xb20>
 800ab40:	461a      	mov	r2, r3
 800ab42:	4601      	mov	r1, r0
 800ab44:	4620      	mov	r0, r4
 800ab46:	f000 fb9d 	bl	800b284 <__pow5mult>
 800ab4a:	9b06      	ldr	r3, [sp, #24]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	4607      	mov	r7, r0
 800ab50:	dc40      	bgt.n	800abd4 <_dtoa_r+0x814>
 800ab52:	9b00      	ldr	r3, [sp, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d139      	bne.n	800abcc <_dtoa_r+0x80c>
 800ab58:	9b01      	ldr	r3, [sp, #4]
 800ab5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d136      	bne.n	800abd0 <_dtoa_r+0x810>
 800ab62:	9b01      	ldr	r3, [sp, #4]
 800ab64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab68:	0d1b      	lsrs	r3, r3, #20
 800ab6a:	051b      	lsls	r3, r3, #20
 800ab6c:	b12b      	cbz	r3, 800ab7a <_dtoa_r+0x7ba>
 800ab6e:	9b05      	ldr	r3, [sp, #20]
 800ab70:	3301      	adds	r3, #1
 800ab72:	9305      	str	r3, [sp, #20]
 800ab74:	f108 0801 	add.w	r8, r8, #1
 800ab78:	2301      	movs	r3, #1
 800ab7a:	9307      	str	r3, [sp, #28]
 800ab7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d12a      	bne.n	800abd8 <_dtoa_r+0x818>
 800ab82:	2001      	movs	r0, #1
 800ab84:	e030      	b.n	800abe8 <_dtoa_r+0x828>
 800ab86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab8c:	e795      	b.n	800aaba <_dtoa_r+0x6fa>
 800ab8e:	9b07      	ldr	r3, [sp, #28]
 800ab90:	f109 37ff 	add.w	r7, r9, #4294967295
 800ab94:	42bb      	cmp	r3, r7
 800ab96:	bfbf      	itttt	lt
 800ab98:	9b07      	ldrlt	r3, [sp, #28]
 800ab9a:	9707      	strlt	r7, [sp, #28]
 800ab9c:	1afa      	sublt	r2, r7, r3
 800ab9e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aba0:	bfbb      	ittet	lt
 800aba2:	189b      	addlt	r3, r3, r2
 800aba4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aba6:	1bdf      	subge	r7, r3, r7
 800aba8:	2700      	movlt	r7, #0
 800abaa:	f1b9 0f00 	cmp.w	r9, #0
 800abae:	bfb5      	itete	lt
 800abb0:	9b05      	ldrlt	r3, [sp, #20]
 800abb2:	9d05      	ldrge	r5, [sp, #20]
 800abb4:	eba3 0509 	sublt.w	r5, r3, r9
 800abb8:	464b      	movge	r3, r9
 800abba:	bfb8      	it	lt
 800abbc:	2300      	movlt	r3, #0
 800abbe:	e77e      	b.n	800aabe <_dtoa_r+0x6fe>
 800abc0:	9f07      	ldr	r7, [sp, #28]
 800abc2:	9d05      	ldr	r5, [sp, #20]
 800abc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800abc6:	e783      	b.n	800aad0 <_dtoa_r+0x710>
 800abc8:	9a07      	ldr	r2, [sp, #28]
 800abca:	e7ab      	b.n	800ab24 <_dtoa_r+0x764>
 800abcc:	2300      	movs	r3, #0
 800abce:	e7d4      	b.n	800ab7a <_dtoa_r+0x7ba>
 800abd0:	9b00      	ldr	r3, [sp, #0]
 800abd2:	e7d2      	b.n	800ab7a <_dtoa_r+0x7ba>
 800abd4:	2300      	movs	r3, #0
 800abd6:	9307      	str	r3, [sp, #28]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800abde:	6918      	ldr	r0, [r3, #16]
 800abe0:	f000 fa63 	bl	800b0aa <__hi0bits>
 800abe4:	f1c0 0020 	rsb	r0, r0, #32
 800abe8:	4440      	add	r0, r8
 800abea:	f010 001f 	ands.w	r0, r0, #31
 800abee:	d047      	beq.n	800ac80 <_dtoa_r+0x8c0>
 800abf0:	f1c0 0320 	rsb	r3, r0, #32
 800abf4:	2b04      	cmp	r3, #4
 800abf6:	dd3b      	ble.n	800ac70 <_dtoa_r+0x8b0>
 800abf8:	9b05      	ldr	r3, [sp, #20]
 800abfa:	f1c0 001c 	rsb	r0, r0, #28
 800abfe:	4403      	add	r3, r0
 800ac00:	9305      	str	r3, [sp, #20]
 800ac02:	4405      	add	r5, r0
 800ac04:	4480      	add	r8, r0
 800ac06:	9b05      	ldr	r3, [sp, #20]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	dd05      	ble.n	800ac18 <_dtoa_r+0x858>
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	9904      	ldr	r1, [sp, #16]
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 fb85 	bl	800b320 <__lshift>
 800ac16:	9004      	str	r0, [sp, #16]
 800ac18:	f1b8 0f00 	cmp.w	r8, #0
 800ac1c:	dd05      	ble.n	800ac2a <_dtoa_r+0x86a>
 800ac1e:	4639      	mov	r1, r7
 800ac20:	4642      	mov	r2, r8
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 fb7c 	bl	800b320 <__lshift>
 800ac28:	4607      	mov	r7, r0
 800ac2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac2c:	b353      	cbz	r3, 800ac84 <_dtoa_r+0x8c4>
 800ac2e:	4639      	mov	r1, r7
 800ac30:	9804      	ldr	r0, [sp, #16]
 800ac32:	f000 fbc9 	bl	800b3c8 <__mcmp>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	da24      	bge.n	800ac84 <_dtoa_r+0x8c4>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	220a      	movs	r2, #10
 800ac3e:	9904      	ldr	r1, [sp, #16]
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 f9f7 	bl	800b034 <__multadd>
 800ac46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac48:	9004      	str	r0, [sp, #16]
 800ac4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 814d 	beq.w	800aeee <_dtoa_r+0xb2e>
 800ac54:	2300      	movs	r3, #0
 800ac56:	4631      	mov	r1, r6
 800ac58:	220a      	movs	r2, #10
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f000 f9ea 	bl	800b034 <__multadd>
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	4606      	mov	r6, r0
 800ac66:	dc4f      	bgt.n	800ad08 <_dtoa_r+0x948>
 800ac68:	9b06      	ldr	r3, [sp, #24]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	dd4c      	ble.n	800ad08 <_dtoa_r+0x948>
 800ac6e:	e011      	b.n	800ac94 <_dtoa_r+0x8d4>
 800ac70:	d0c9      	beq.n	800ac06 <_dtoa_r+0x846>
 800ac72:	9a05      	ldr	r2, [sp, #20]
 800ac74:	331c      	adds	r3, #28
 800ac76:	441a      	add	r2, r3
 800ac78:	9205      	str	r2, [sp, #20]
 800ac7a:	441d      	add	r5, r3
 800ac7c:	4498      	add	r8, r3
 800ac7e:	e7c2      	b.n	800ac06 <_dtoa_r+0x846>
 800ac80:	4603      	mov	r3, r0
 800ac82:	e7f6      	b.n	800ac72 <_dtoa_r+0x8b2>
 800ac84:	f1b9 0f00 	cmp.w	r9, #0
 800ac88:	dc38      	bgt.n	800acfc <_dtoa_r+0x93c>
 800ac8a:	9b06      	ldr	r3, [sp, #24]
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	dd35      	ble.n	800acfc <_dtoa_r+0x93c>
 800ac90:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac94:	9b02      	ldr	r3, [sp, #8]
 800ac96:	b963      	cbnz	r3, 800acb2 <_dtoa_r+0x8f2>
 800ac98:	4639      	mov	r1, r7
 800ac9a:	2205      	movs	r2, #5
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f000 f9c9 	bl	800b034 <__multadd>
 800aca2:	4601      	mov	r1, r0
 800aca4:	4607      	mov	r7, r0
 800aca6:	9804      	ldr	r0, [sp, #16]
 800aca8:	f000 fb8e 	bl	800b3c8 <__mcmp>
 800acac:	2800      	cmp	r0, #0
 800acae:	f73f adcc 	bgt.w	800a84a <_dtoa_r+0x48a>
 800acb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acb4:	465d      	mov	r5, fp
 800acb6:	ea6f 0a03 	mvn.w	sl, r3
 800acba:	f04f 0900 	mov.w	r9, #0
 800acbe:	4639      	mov	r1, r7
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 f9a0 	bl	800b006 <_Bfree>
 800acc6:	2e00      	cmp	r6, #0
 800acc8:	f43f aeb7 	beq.w	800aa3a <_dtoa_r+0x67a>
 800accc:	f1b9 0f00 	cmp.w	r9, #0
 800acd0:	d005      	beq.n	800acde <_dtoa_r+0x91e>
 800acd2:	45b1      	cmp	r9, r6
 800acd4:	d003      	beq.n	800acde <_dtoa_r+0x91e>
 800acd6:	4649      	mov	r1, r9
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 f994 	bl	800b006 <_Bfree>
 800acde:	4631      	mov	r1, r6
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 f990 	bl	800b006 <_Bfree>
 800ace6:	e6a8      	b.n	800aa3a <_dtoa_r+0x67a>
 800ace8:	2700      	movs	r7, #0
 800acea:	463e      	mov	r6, r7
 800acec:	e7e1      	b.n	800acb2 <_dtoa_r+0x8f2>
 800acee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800acf2:	463e      	mov	r6, r7
 800acf4:	e5a9      	b.n	800a84a <_dtoa_r+0x48a>
 800acf6:	bf00      	nop
 800acf8:	40240000 	.word	0x40240000
 800acfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acfe:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80fa 	beq.w	800aefc <_dtoa_r+0xb3c>
 800ad08:	2d00      	cmp	r5, #0
 800ad0a:	dd05      	ble.n	800ad18 <_dtoa_r+0x958>
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	462a      	mov	r2, r5
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fb05 	bl	800b320 <__lshift>
 800ad16:	4606      	mov	r6, r0
 800ad18:	9b07      	ldr	r3, [sp, #28]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d04c      	beq.n	800adb8 <_dtoa_r+0x9f8>
 800ad1e:	6871      	ldr	r1, [r6, #4]
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 f93c 	bl	800af9e <_Balloc>
 800ad26:	6932      	ldr	r2, [r6, #16]
 800ad28:	3202      	adds	r2, #2
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	0092      	lsls	r2, r2, #2
 800ad2e:	f106 010c 	add.w	r1, r6, #12
 800ad32:	300c      	adds	r0, #12
 800ad34:	f000 f928 	bl	800af88 <memcpy>
 800ad38:	2201      	movs	r2, #1
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f000 faef 	bl	800b320 <__lshift>
 800ad42:	9b00      	ldr	r3, [sp, #0]
 800ad44:	f8cd b014 	str.w	fp, [sp, #20]
 800ad48:	f003 0301 	and.w	r3, r3, #1
 800ad4c:	46b1      	mov	r9, r6
 800ad4e:	9307      	str	r3, [sp, #28]
 800ad50:	4606      	mov	r6, r0
 800ad52:	4639      	mov	r1, r7
 800ad54:	9804      	ldr	r0, [sp, #16]
 800ad56:	f7ff faa7 	bl	800a2a8 <quorem>
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	4605      	mov	r5, r0
 800ad5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad62:	9804      	ldr	r0, [sp, #16]
 800ad64:	f000 fb30 	bl	800b3c8 <__mcmp>
 800ad68:	4632      	mov	r2, r6
 800ad6a:	9000      	str	r0, [sp, #0]
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fb44 	bl	800b3fc <__mdiff>
 800ad74:	68c3      	ldr	r3, [r0, #12]
 800ad76:	4602      	mov	r2, r0
 800ad78:	bb03      	cbnz	r3, 800adbc <_dtoa_r+0x9fc>
 800ad7a:	4601      	mov	r1, r0
 800ad7c:	9008      	str	r0, [sp, #32]
 800ad7e:	9804      	ldr	r0, [sp, #16]
 800ad80:	f000 fb22 	bl	800b3c8 <__mcmp>
 800ad84:	9a08      	ldr	r2, [sp, #32]
 800ad86:	4603      	mov	r3, r0
 800ad88:	4611      	mov	r1, r2
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	9308      	str	r3, [sp, #32]
 800ad8e:	f000 f93a 	bl	800b006 <_Bfree>
 800ad92:	9b08      	ldr	r3, [sp, #32]
 800ad94:	b9a3      	cbnz	r3, 800adc0 <_dtoa_r+0xa00>
 800ad96:	9a06      	ldr	r2, [sp, #24]
 800ad98:	b992      	cbnz	r2, 800adc0 <_dtoa_r+0xa00>
 800ad9a:	9a07      	ldr	r2, [sp, #28]
 800ad9c:	b982      	cbnz	r2, 800adc0 <_dtoa_r+0xa00>
 800ad9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ada2:	d029      	beq.n	800adf8 <_dtoa_r+0xa38>
 800ada4:	9b00      	ldr	r3, [sp, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	dd01      	ble.n	800adae <_dtoa_r+0x9ee>
 800adaa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800adae:	9b05      	ldr	r3, [sp, #20]
 800adb0:	1c5d      	adds	r5, r3, #1
 800adb2:	f883 8000 	strb.w	r8, [r3]
 800adb6:	e782      	b.n	800acbe <_dtoa_r+0x8fe>
 800adb8:	4630      	mov	r0, r6
 800adba:	e7c2      	b.n	800ad42 <_dtoa_r+0x982>
 800adbc:	2301      	movs	r3, #1
 800adbe:	e7e3      	b.n	800ad88 <_dtoa_r+0x9c8>
 800adc0:	9a00      	ldr	r2, [sp, #0]
 800adc2:	2a00      	cmp	r2, #0
 800adc4:	db04      	blt.n	800add0 <_dtoa_r+0xa10>
 800adc6:	d125      	bne.n	800ae14 <_dtoa_r+0xa54>
 800adc8:	9a06      	ldr	r2, [sp, #24]
 800adca:	bb1a      	cbnz	r2, 800ae14 <_dtoa_r+0xa54>
 800adcc:	9a07      	ldr	r2, [sp, #28]
 800adce:	bb0a      	cbnz	r2, 800ae14 <_dtoa_r+0xa54>
 800add0:	2b00      	cmp	r3, #0
 800add2:	ddec      	ble.n	800adae <_dtoa_r+0x9ee>
 800add4:	2201      	movs	r2, #1
 800add6:	9904      	ldr	r1, [sp, #16]
 800add8:	4620      	mov	r0, r4
 800adda:	f000 faa1 	bl	800b320 <__lshift>
 800adde:	4639      	mov	r1, r7
 800ade0:	9004      	str	r0, [sp, #16]
 800ade2:	f000 faf1 	bl	800b3c8 <__mcmp>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	dc03      	bgt.n	800adf2 <_dtoa_r+0xa32>
 800adea:	d1e0      	bne.n	800adae <_dtoa_r+0x9ee>
 800adec:	f018 0f01 	tst.w	r8, #1
 800adf0:	d0dd      	beq.n	800adae <_dtoa_r+0x9ee>
 800adf2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800adf6:	d1d8      	bne.n	800adaa <_dtoa_r+0x9ea>
 800adf8:	9b05      	ldr	r3, [sp, #20]
 800adfa:	9a05      	ldr	r2, [sp, #20]
 800adfc:	1c5d      	adds	r5, r3, #1
 800adfe:	2339      	movs	r3, #57	; 0x39
 800ae00:	7013      	strb	r3, [r2, #0]
 800ae02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae06:	2b39      	cmp	r3, #57	; 0x39
 800ae08:	f105 32ff 	add.w	r2, r5, #4294967295
 800ae0c:	d04f      	beq.n	800aeae <_dtoa_r+0xaee>
 800ae0e:	3301      	adds	r3, #1
 800ae10:	7013      	strb	r3, [r2, #0]
 800ae12:	e754      	b.n	800acbe <_dtoa_r+0x8fe>
 800ae14:	9a05      	ldr	r2, [sp, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f102 0501 	add.w	r5, r2, #1
 800ae1c:	dd06      	ble.n	800ae2c <_dtoa_r+0xa6c>
 800ae1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae22:	d0e9      	beq.n	800adf8 <_dtoa_r+0xa38>
 800ae24:	f108 0801 	add.w	r8, r8, #1
 800ae28:	9b05      	ldr	r3, [sp, #20]
 800ae2a:	e7c2      	b.n	800adb2 <_dtoa_r+0x9f2>
 800ae2c:	9a02      	ldr	r2, [sp, #8]
 800ae2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ae32:	eba5 030b 	sub.w	r3, r5, fp
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d021      	beq.n	800ae7e <_dtoa_r+0xabe>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	220a      	movs	r2, #10
 800ae3e:	9904      	ldr	r1, [sp, #16]
 800ae40:	4620      	mov	r0, r4
 800ae42:	f000 f8f7 	bl	800b034 <__multadd>
 800ae46:	45b1      	cmp	r9, r6
 800ae48:	9004      	str	r0, [sp, #16]
 800ae4a:	f04f 0300 	mov.w	r3, #0
 800ae4e:	f04f 020a 	mov.w	r2, #10
 800ae52:	4649      	mov	r1, r9
 800ae54:	4620      	mov	r0, r4
 800ae56:	d105      	bne.n	800ae64 <_dtoa_r+0xaa4>
 800ae58:	f000 f8ec 	bl	800b034 <__multadd>
 800ae5c:	4681      	mov	r9, r0
 800ae5e:	4606      	mov	r6, r0
 800ae60:	9505      	str	r5, [sp, #20]
 800ae62:	e776      	b.n	800ad52 <_dtoa_r+0x992>
 800ae64:	f000 f8e6 	bl	800b034 <__multadd>
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4681      	mov	r9, r0
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	220a      	movs	r2, #10
 800ae70:	4620      	mov	r0, r4
 800ae72:	f000 f8df 	bl	800b034 <__multadd>
 800ae76:	4606      	mov	r6, r0
 800ae78:	e7f2      	b.n	800ae60 <_dtoa_r+0xaa0>
 800ae7a:	f04f 0900 	mov.w	r9, #0
 800ae7e:	2201      	movs	r2, #1
 800ae80:	9904      	ldr	r1, [sp, #16]
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 fa4c 	bl	800b320 <__lshift>
 800ae88:	4639      	mov	r1, r7
 800ae8a:	9004      	str	r0, [sp, #16]
 800ae8c:	f000 fa9c 	bl	800b3c8 <__mcmp>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	dcb6      	bgt.n	800ae02 <_dtoa_r+0xa42>
 800ae94:	d102      	bne.n	800ae9c <_dtoa_r+0xadc>
 800ae96:	f018 0f01 	tst.w	r8, #1
 800ae9a:	d1b2      	bne.n	800ae02 <_dtoa_r+0xa42>
 800ae9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aea0:	2b30      	cmp	r3, #48	; 0x30
 800aea2:	f105 32ff 	add.w	r2, r5, #4294967295
 800aea6:	f47f af0a 	bne.w	800acbe <_dtoa_r+0x8fe>
 800aeaa:	4615      	mov	r5, r2
 800aeac:	e7f6      	b.n	800ae9c <_dtoa_r+0xadc>
 800aeae:	4593      	cmp	fp, r2
 800aeb0:	d105      	bne.n	800aebe <_dtoa_r+0xafe>
 800aeb2:	2331      	movs	r3, #49	; 0x31
 800aeb4:	f10a 0a01 	add.w	sl, sl, #1
 800aeb8:	f88b 3000 	strb.w	r3, [fp]
 800aebc:	e6ff      	b.n	800acbe <_dtoa_r+0x8fe>
 800aebe:	4615      	mov	r5, r2
 800aec0:	e79f      	b.n	800ae02 <_dtoa_r+0xa42>
 800aec2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800af28 <_dtoa_r+0xb68>
 800aec6:	e007      	b.n	800aed8 <_dtoa_r+0xb18>
 800aec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800af2c <_dtoa_r+0xb6c>
 800aece:	b11b      	cbz	r3, 800aed8 <_dtoa_r+0xb18>
 800aed0:	f10b 0308 	add.w	r3, fp, #8
 800aed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	4658      	mov	r0, fp
 800aeda:	b017      	add	sp, #92	; 0x5c
 800aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aee0:	9b06      	ldr	r3, [sp, #24]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	f77f ae35 	ble.w	800ab52 <_dtoa_r+0x792>
 800aee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeea:	9307      	str	r3, [sp, #28]
 800aeec:	e649      	b.n	800ab82 <_dtoa_r+0x7c2>
 800aeee:	9b02      	ldr	r3, [sp, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	dc03      	bgt.n	800aefc <_dtoa_r+0xb3c>
 800aef4:	9b06      	ldr	r3, [sp, #24]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	f73f aecc 	bgt.w	800ac94 <_dtoa_r+0x8d4>
 800aefc:	465d      	mov	r5, fp
 800aefe:	4639      	mov	r1, r7
 800af00:	9804      	ldr	r0, [sp, #16]
 800af02:	f7ff f9d1 	bl	800a2a8 <quorem>
 800af06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800af0a:	f805 8b01 	strb.w	r8, [r5], #1
 800af0e:	9a02      	ldr	r2, [sp, #8]
 800af10:	eba5 030b 	sub.w	r3, r5, fp
 800af14:	429a      	cmp	r2, r3
 800af16:	ddb0      	ble.n	800ae7a <_dtoa_r+0xaba>
 800af18:	2300      	movs	r3, #0
 800af1a:	220a      	movs	r2, #10
 800af1c:	9904      	ldr	r1, [sp, #16]
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 f888 	bl	800b034 <__multadd>
 800af24:	9004      	str	r0, [sp, #16]
 800af26:	e7ea      	b.n	800aefe <_dtoa_r+0xb3e>
 800af28:	0800bb18 	.word	0x0800bb18
 800af2c:	0800bb3c 	.word	0x0800bb3c

0800af30 <__locale_ctype_ptr_l>:
 800af30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800af34:	4770      	bx	lr
	...

0800af38 <_localeconv_r>:
 800af38:	4b04      	ldr	r3, [pc, #16]	; (800af4c <_localeconv_r+0x14>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6a18      	ldr	r0, [r3, #32]
 800af3e:	4b04      	ldr	r3, [pc, #16]	; (800af50 <_localeconv_r+0x18>)
 800af40:	2800      	cmp	r0, #0
 800af42:	bf08      	it	eq
 800af44:	4618      	moveq	r0, r3
 800af46:	30f0      	adds	r0, #240	; 0xf0
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	20000028 	.word	0x20000028
 800af50:	2000008c 	.word	0x2000008c

0800af54 <malloc>:
 800af54:	4b02      	ldr	r3, [pc, #8]	; (800af60 <malloc+0xc>)
 800af56:	4601      	mov	r1, r0
 800af58:	6818      	ldr	r0, [r3, #0]
 800af5a:	f000 bb57 	b.w	800b60c <_malloc_r>
 800af5e:	bf00      	nop
 800af60:	20000028 	.word	0x20000028

0800af64 <__ascii_mbtowc>:
 800af64:	b082      	sub	sp, #8
 800af66:	b901      	cbnz	r1, 800af6a <__ascii_mbtowc+0x6>
 800af68:	a901      	add	r1, sp, #4
 800af6a:	b142      	cbz	r2, 800af7e <__ascii_mbtowc+0x1a>
 800af6c:	b14b      	cbz	r3, 800af82 <__ascii_mbtowc+0x1e>
 800af6e:	7813      	ldrb	r3, [r2, #0]
 800af70:	600b      	str	r3, [r1, #0]
 800af72:	7812      	ldrb	r2, [r2, #0]
 800af74:	1c10      	adds	r0, r2, #0
 800af76:	bf18      	it	ne
 800af78:	2001      	movne	r0, #1
 800af7a:	b002      	add	sp, #8
 800af7c:	4770      	bx	lr
 800af7e:	4610      	mov	r0, r2
 800af80:	e7fb      	b.n	800af7a <__ascii_mbtowc+0x16>
 800af82:	f06f 0001 	mvn.w	r0, #1
 800af86:	e7f8      	b.n	800af7a <__ascii_mbtowc+0x16>

0800af88 <memcpy>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	1e43      	subs	r3, r0, #1
 800af8c:	440a      	add	r2, r1
 800af8e:	4291      	cmp	r1, r2
 800af90:	d100      	bne.n	800af94 <memcpy+0xc>
 800af92:	bd10      	pop	{r4, pc}
 800af94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af9c:	e7f7      	b.n	800af8e <memcpy+0x6>

0800af9e <_Balloc>:
 800af9e:	b570      	push	{r4, r5, r6, lr}
 800afa0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afa2:	4604      	mov	r4, r0
 800afa4:	460e      	mov	r6, r1
 800afa6:	b93d      	cbnz	r5, 800afb8 <_Balloc+0x1a>
 800afa8:	2010      	movs	r0, #16
 800afaa:	f7ff ffd3 	bl	800af54 <malloc>
 800afae:	6260      	str	r0, [r4, #36]	; 0x24
 800afb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afb4:	6005      	str	r5, [r0, #0]
 800afb6:	60c5      	str	r5, [r0, #12]
 800afb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800afba:	68eb      	ldr	r3, [r5, #12]
 800afbc:	b183      	cbz	r3, 800afe0 <_Balloc+0x42>
 800afbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afc6:	b9b8      	cbnz	r0, 800aff8 <_Balloc+0x5a>
 800afc8:	2101      	movs	r1, #1
 800afca:	fa01 f506 	lsl.w	r5, r1, r6
 800afce:	1d6a      	adds	r2, r5, #5
 800afd0:	0092      	lsls	r2, r2, #2
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 fabe 	bl	800b554 <_calloc_r>
 800afd8:	b160      	cbz	r0, 800aff4 <_Balloc+0x56>
 800afda:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800afde:	e00e      	b.n	800affe <_Balloc+0x60>
 800afe0:	2221      	movs	r2, #33	; 0x21
 800afe2:	2104      	movs	r1, #4
 800afe4:	4620      	mov	r0, r4
 800afe6:	f000 fab5 	bl	800b554 <_calloc_r>
 800afea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afec:	60e8      	str	r0, [r5, #12]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1e4      	bne.n	800afbe <_Balloc+0x20>
 800aff4:	2000      	movs	r0, #0
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	6802      	ldr	r2, [r0, #0]
 800affa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800affe:	2300      	movs	r3, #0
 800b000:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b004:	e7f7      	b.n	800aff6 <_Balloc+0x58>

0800b006 <_Bfree>:
 800b006:	b570      	push	{r4, r5, r6, lr}
 800b008:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b00a:	4606      	mov	r6, r0
 800b00c:	460d      	mov	r5, r1
 800b00e:	b93c      	cbnz	r4, 800b020 <_Bfree+0x1a>
 800b010:	2010      	movs	r0, #16
 800b012:	f7ff ff9f 	bl	800af54 <malloc>
 800b016:	6270      	str	r0, [r6, #36]	; 0x24
 800b018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b01c:	6004      	str	r4, [r0, #0]
 800b01e:	60c4      	str	r4, [r0, #12]
 800b020:	b13d      	cbz	r5, 800b032 <_Bfree+0x2c>
 800b022:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b024:	686a      	ldr	r2, [r5, #4]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b02c:	6029      	str	r1, [r5, #0]
 800b02e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b032:	bd70      	pop	{r4, r5, r6, pc}

0800b034 <__multadd>:
 800b034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b038:	690d      	ldr	r5, [r1, #16]
 800b03a:	461f      	mov	r7, r3
 800b03c:	4606      	mov	r6, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	f101 0c14 	add.w	ip, r1, #20
 800b044:	2300      	movs	r3, #0
 800b046:	f8dc 0000 	ldr.w	r0, [ip]
 800b04a:	b281      	uxth	r1, r0
 800b04c:	fb02 7101 	mla	r1, r2, r1, r7
 800b050:	0c0f      	lsrs	r7, r1, #16
 800b052:	0c00      	lsrs	r0, r0, #16
 800b054:	fb02 7000 	mla	r0, r2, r0, r7
 800b058:	b289      	uxth	r1, r1
 800b05a:	3301      	adds	r3, #1
 800b05c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b060:	429d      	cmp	r5, r3
 800b062:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b066:	f84c 1b04 	str.w	r1, [ip], #4
 800b06a:	dcec      	bgt.n	800b046 <__multadd+0x12>
 800b06c:	b1d7      	cbz	r7, 800b0a4 <__multadd+0x70>
 800b06e:	68a3      	ldr	r3, [r4, #8]
 800b070:	42ab      	cmp	r3, r5
 800b072:	dc12      	bgt.n	800b09a <__multadd+0x66>
 800b074:	6861      	ldr	r1, [r4, #4]
 800b076:	4630      	mov	r0, r6
 800b078:	3101      	adds	r1, #1
 800b07a:	f7ff ff90 	bl	800af9e <_Balloc>
 800b07e:	6922      	ldr	r2, [r4, #16]
 800b080:	3202      	adds	r2, #2
 800b082:	f104 010c 	add.w	r1, r4, #12
 800b086:	4680      	mov	r8, r0
 800b088:	0092      	lsls	r2, r2, #2
 800b08a:	300c      	adds	r0, #12
 800b08c:	f7ff ff7c 	bl	800af88 <memcpy>
 800b090:	4621      	mov	r1, r4
 800b092:	4630      	mov	r0, r6
 800b094:	f7ff ffb7 	bl	800b006 <_Bfree>
 800b098:	4644      	mov	r4, r8
 800b09a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b09e:	3501      	adds	r5, #1
 800b0a0:	615f      	str	r7, [r3, #20]
 800b0a2:	6125      	str	r5, [r4, #16]
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0aa <__hi0bits>:
 800b0aa:	0c02      	lsrs	r2, r0, #16
 800b0ac:	0412      	lsls	r2, r2, #16
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	b9b2      	cbnz	r2, 800b0e0 <__hi0bits+0x36>
 800b0b2:	0403      	lsls	r3, r0, #16
 800b0b4:	2010      	movs	r0, #16
 800b0b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b0ba:	bf04      	itt	eq
 800b0bc:	021b      	lsleq	r3, r3, #8
 800b0be:	3008      	addeq	r0, #8
 800b0c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b0c4:	bf04      	itt	eq
 800b0c6:	011b      	lsleq	r3, r3, #4
 800b0c8:	3004      	addeq	r0, #4
 800b0ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b0ce:	bf04      	itt	eq
 800b0d0:	009b      	lsleq	r3, r3, #2
 800b0d2:	3002      	addeq	r0, #2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	db06      	blt.n	800b0e6 <__hi0bits+0x3c>
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	d503      	bpl.n	800b0e4 <__hi0bits+0x3a>
 800b0dc:	3001      	adds	r0, #1
 800b0de:	4770      	bx	lr
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	e7e8      	b.n	800b0b6 <__hi0bits+0xc>
 800b0e4:	2020      	movs	r0, #32
 800b0e6:	4770      	bx	lr

0800b0e8 <__lo0bits>:
 800b0e8:	6803      	ldr	r3, [r0, #0]
 800b0ea:	f013 0207 	ands.w	r2, r3, #7
 800b0ee:	4601      	mov	r1, r0
 800b0f0:	d00b      	beq.n	800b10a <__lo0bits+0x22>
 800b0f2:	07da      	lsls	r2, r3, #31
 800b0f4:	d423      	bmi.n	800b13e <__lo0bits+0x56>
 800b0f6:	0798      	lsls	r0, r3, #30
 800b0f8:	bf49      	itett	mi
 800b0fa:	085b      	lsrmi	r3, r3, #1
 800b0fc:	089b      	lsrpl	r3, r3, #2
 800b0fe:	2001      	movmi	r0, #1
 800b100:	600b      	strmi	r3, [r1, #0]
 800b102:	bf5c      	itt	pl
 800b104:	600b      	strpl	r3, [r1, #0]
 800b106:	2002      	movpl	r0, #2
 800b108:	4770      	bx	lr
 800b10a:	b298      	uxth	r0, r3
 800b10c:	b9a8      	cbnz	r0, 800b13a <__lo0bits+0x52>
 800b10e:	0c1b      	lsrs	r3, r3, #16
 800b110:	2010      	movs	r0, #16
 800b112:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b116:	bf04      	itt	eq
 800b118:	0a1b      	lsreq	r3, r3, #8
 800b11a:	3008      	addeq	r0, #8
 800b11c:	071a      	lsls	r2, r3, #28
 800b11e:	bf04      	itt	eq
 800b120:	091b      	lsreq	r3, r3, #4
 800b122:	3004      	addeq	r0, #4
 800b124:	079a      	lsls	r2, r3, #30
 800b126:	bf04      	itt	eq
 800b128:	089b      	lsreq	r3, r3, #2
 800b12a:	3002      	addeq	r0, #2
 800b12c:	07da      	lsls	r2, r3, #31
 800b12e:	d402      	bmi.n	800b136 <__lo0bits+0x4e>
 800b130:	085b      	lsrs	r3, r3, #1
 800b132:	d006      	beq.n	800b142 <__lo0bits+0x5a>
 800b134:	3001      	adds	r0, #1
 800b136:	600b      	str	r3, [r1, #0]
 800b138:	4770      	bx	lr
 800b13a:	4610      	mov	r0, r2
 800b13c:	e7e9      	b.n	800b112 <__lo0bits+0x2a>
 800b13e:	2000      	movs	r0, #0
 800b140:	4770      	bx	lr
 800b142:	2020      	movs	r0, #32
 800b144:	4770      	bx	lr

0800b146 <__i2b>:
 800b146:	b510      	push	{r4, lr}
 800b148:	460c      	mov	r4, r1
 800b14a:	2101      	movs	r1, #1
 800b14c:	f7ff ff27 	bl	800af9e <_Balloc>
 800b150:	2201      	movs	r2, #1
 800b152:	6144      	str	r4, [r0, #20]
 800b154:	6102      	str	r2, [r0, #16]
 800b156:	bd10      	pop	{r4, pc}

0800b158 <__multiply>:
 800b158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	4614      	mov	r4, r2
 800b15e:	690a      	ldr	r2, [r1, #16]
 800b160:	6923      	ldr	r3, [r4, #16]
 800b162:	429a      	cmp	r2, r3
 800b164:	bfb8      	it	lt
 800b166:	460b      	movlt	r3, r1
 800b168:	4688      	mov	r8, r1
 800b16a:	bfbc      	itt	lt
 800b16c:	46a0      	movlt	r8, r4
 800b16e:	461c      	movlt	r4, r3
 800b170:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b174:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b178:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b17c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b180:	eb07 0609 	add.w	r6, r7, r9
 800b184:	42b3      	cmp	r3, r6
 800b186:	bfb8      	it	lt
 800b188:	3101      	addlt	r1, #1
 800b18a:	f7ff ff08 	bl	800af9e <_Balloc>
 800b18e:	f100 0514 	add.w	r5, r0, #20
 800b192:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b196:	462b      	mov	r3, r5
 800b198:	2200      	movs	r2, #0
 800b19a:	4573      	cmp	r3, lr
 800b19c:	d316      	bcc.n	800b1cc <__multiply+0x74>
 800b19e:	f104 0214 	add.w	r2, r4, #20
 800b1a2:	f108 0114 	add.w	r1, r8, #20
 800b1a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b1aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	9b00      	ldr	r3, [sp, #0]
 800b1b2:	9201      	str	r2, [sp, #4]
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d80c      	bhi.n	800b1d2 <__multiply+0x7a>
 800b1b8:	2e00      	cmp	r6, #0
 800b1ba:	dd03      	ble.n	800b1c4 <__multiply+0x6c>
 800b1bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d05d      	beq.n	800b280 <__multiply+0x128>
 800b1c4:	6106      	str	r6, [r0, #16]
 800b1c6:	b003      	add	sp, #12
 800b1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1cc:	f843 2b04 	str.w	r2, [r3], #4
 800b1d0:	e7e3      	b.n	800b19a <__multiply+0x42>
 800b1d2:	f8b2 b000 	ldrh.w	fp, [r2]
 800b1d6:	f1bb 0f00 	cmp.w	fp, #0
 800b1da:	d023      	beq.n	800b224 <__multiply+0xcc>
 800b1dc:	4689      	mov	r9, r1
 800b1de:	46ac      	mov	ip, r5
 800b1e0:	f04f 0800 	mov.w	r8, #0
 800b1e4:	f859 4b04 	ldr.w	r4, [r9], #4
 800b1e8:	f8dc a000 	ldr.w	sl, [ip]
 800b1ec:	b2a3      	uxth	r3, r4
 800b1ee:	fa1f fa8a 	uxth.w	sl, sl
 800b1f2:	fb0b a303 	mla	r3, fp, r3, sl
 800b1f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b1fa:	f8dc 4000 	ldr.w	r4, [ip]
 800b1fe:	4443      	add	r3, r8
 800b200:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b204:	fb0b 840a 	mla	r4, fp, sl, r8
 800b208:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b20c:	46e2      	mov	sl, ip
 800b20e:	b29b      	uxth	r3, r3
 800b210:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b214:	454f      	cmp	r7, r9
 800b216:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b21a:	f84a 3b04 	str.w	r3, [sl], #4
 800b21e:	d82b      	bhi.n	800b278 <__multiply+0x120>
 800b220:	f8cc 8004 	str.w	r8, [ip, #4]
 800b224:	9b01      	ldr	r3, [sp, #4]
 800b226:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b22a:	3204      	adds	r2, #4
 800b22c:	f1ba 0f00 	cmp.w	sl, #0
 800b230:	d020      	beq.n	800b274 <__multiply+0x11c>
 800b232:	682b      	ldr	r3, [r5, #0]
 800b234:	4689      	mov	r9, r1
 800b236:	46a8      	mov	r8, r5
 800b238:	f04f 0b00 	mov.w	fp, #0
 800b23c:	f8b9 c000 	ldrh.w	ip, [r9]
 800b240:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b244:	fb0a 440c 	mla	r4, sl, ip, r4
 800b248:	445c      	add	r4, fp
 800b24a:	46c4      	mov	ip, r8
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b252:	f84c 3b04 	str.w	r3, [ip], #4
 800b256:	f859 3b04 	ldr.w	r3, [r9], #4
 800b25a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b25e:	0c1b      	lsrs	r3, r3, #16
 800b260:	fb0a b303 	mla	r3, sl, r3, fp
 800b264:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b268:	454f      	cmp	r7, r9
 800b26a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b26e:	d805      	bhi.n	800b27c <__multiply+0x124>
 800b270:	f8c8 3004 	str.w	r3, [r8, #4]
 800b274:	3504      	adds	r5, #4
 800b276:	e79b      	b.n	800b1b0 <__multiply+0x58>
 800b278:	46d4      	mov	ip, sl
 800b27a:	e7b3      	b.n	800b1e4 <__multiply+0x8c>
 800b27c:	46e0      	mov	r8, ip
 800b27e:	e7dd      	b.n	800b23c <__multiply+0xe4>
 800b280:	3e01      	subs	r6, #1
 800b282:	e799      	b.n	800b1b8 <__multiply+0x60>

0800b284 <__pow5mult>:
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b288:	4615      	mov	r5, r2
 800b28a:	f012 0203 	ands.w	r2, r2, #3
 800b28e:	4606      	mov	r6, r0
 800b290:	460f      	mov	r7, r1
 800b292:	d007      	beq.n	800b2a4 <__pow5mult+0x20>
 800b294:	3a01      	subs	r2, #1
 800b296:	4c21      	ldr	r4, [pc, #132]	; (800b31c <__pow5mult+0x98>)
 800b298:	2300      	movs	r3, #0
 800b29a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b29e:	f7ff fec9 	bl	800b034 <__multadd>
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	10ad      	asrs	r5, r5, #2
 800b2a6:	d035      	beq.n	800b314 <__pow5mult+0x90>
 800b2a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2aa:	b93c      	cbnz	r4, 800b2bc <__pow5mult+0x38>
 800b2ac:	2010      	movs	r0, #16
 800b2ae:	f7ff fe51 	bl	800af54 <malloc>
 800b2b2:	6270      	str	r0, [r6, #36]	; 0x24
 800b2b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2b8:	6004      	str	r4, [r0, #0]
 800b2ba:	60c4      	str	r4, [r0, #12]
 800b2bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2c4:	b94c      	cbnz	r4, 800b2da <__pow5mult+0x56>
 800b2c6:	f240 2171 	movw	r1, #625	; 0x271
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7ff ff3b 	bl	800b146 <__i2b>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	6003      	str	r3, [r0, #0]
 800b2da:	f04f 0800 	mov.w	r8, #0
 800b2de:	07eb      	lsls	r3, r5, #31
 800b2e0:	d50a      	bpl.n	800b2f8 <__pow5mult+0x74>
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7ff ff36 	bl	800b158 <__multiply>
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	4681      	mov	r9, r0
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	f7ff fe88 	bl	800b006 <_Bfree>
 800b2f6:	464f      	mov	r7, r9
 800b2f8:	106d      	asrs	r5, r5, #1
 800b2fa:	d00b      	beq.n	800b314 <__pow5mult+0x90>
 800b2fc:	6820      	ldr	r0, [r4, #0]
 800b2fe:	b938      	cbnz	r0, 800b310 <__pow5mult+0x8c>
 800b300:	4622      	mov	r2, r4
 800b302:	4621      	mov	r1, r4
 800b304:	4630      	mov	r0, r6
 800b306:	f7ff ff27 	bl	800b158 <__multiply>
 800b30a:	6020      	str	r0, [r4, #0]
 800b30c:	f8c0 8000 	str.w	r8, [r0]
 800b310:	4604      	mov	r4, r0
 800b312:	e7e4      	b.n	800b2de <__pow5mult+0x5a>
 800b314:	4638      	mov	r0, r7
 800b316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b31a:	bf00      	nop
 800b31c:	0800bc48 	.word	0x0800bc48

0800b320 <__lshift>:
 800b320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b324:	460c      	mov	r4, r1
 800b326:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b32a:	6923      	ldr	r3, [r4, #16]
 800b32c:	6849      	ldr	r1, [r1, #4]
 800b32e:	eb0a 0903 	add.w	r9, sl, r3
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	4607      	mov	r7, r0
 800b336:	4616      	mov	r6, r2
 800b338:	f109 0501 	add.w	r5, r9, #1
 800b33c:	42ab      	cmp	r3, r5
 800b33e:	db32      	blt.n	800b3a6 <__lshift+0x86>
 800b340:	4638      	mov	r0, r7
 800b342:	f7ff fe2c 	bl	800af9e <_Balloc>
 800b346:	2300      	movs	r3, #0
 800b348:	4680      	mov	r8, r0
 800b34a:	f100 0114 	add.w	r1, r0, #20
 800b34e:	461a      	mov	r2, r3
 800b350:	4553      	cmp	r3, sl
 800b352:	db2b      	blt.n	800b3ac <__lshift+0x8c>
 800b354:	6920      	ldr	r0, [r4, #16]
 800b356:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b35a:	f104 0314 	add.w	r3, r4, #20
 800b35e:	f016 021f 	ands.w	r2, r6, #31
 800b362:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b366:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b36a:	d025      	beq.n	800b3b8 <__lshift+0x98>
 800b36c:	f1c2 0e20 	rsb	lr, r2, #32
 800b370:	2000      	movs	r0, #0
 800b372:	681e      	ldr	r6, [r3, #0]
 800b374:	468a      	mov	sl, r1
 800b376:	4096      	lsls	r6, r2
 800b378:	4330      	orrs	r0, r6
 800b37a:	f84a 0b04 	str.w	r0, [sl], #4
 800b37e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b382:	459c      	cmp	ip, r3
 800b384:	fa20 f00e 	lsr.w	r0, r0, lr
 800b388:	d814      	bhi.n	800b3b4 <__lshift+0x94>
 800b38a:	6048      	str	r0, [r1, #4]
 800b38c:	b108      	cbz	r0, 800b392 <__lshift+0x72>
 800b38e:	f109 0502 	add.w	r5, r9, #2
 800b392:	3d01      	subs	r5, #1
 800b394:	4638      	mov	r0, r7
 800b396:	f8c8 5010 	str.w	r5, [r8, #16]
 800b39a:	4621      	mov	r1, r4
 800b39c:	f7ff fe33 	bl	800b006 <_Bfree>
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a6:	3101      	adds	r1, #1
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	e7c7      	b.n	800b33c <__lshift+0x1c>
 800b3ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	e7cd      	b.n	800b350 <__lshift+0x30>
 800b3b4:	4651      	mov	r1, sl
 800b3b6:	e7dc      	b.n	800b372 <__lshift+0x52>
 800b3b8:	3904      	subs	r1, #4
 800b3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3be:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3c2:	459c      	cmp	ip, r3
 800b3c4:	d8f9      	bhi.n	800b3ba <__lshift+0x9a>
 800b3c6:	e7e4      	b.n	800b392 <__lshift+0x72>

0800b3c8 <__mcmp>:
 800b3c8:	6903      	ldr	r3, [r0, #16]
 800b3ca:	690a      	ldr	r2, [r1, #16]
 800b3cc:	1a9b      	subs	r3, r3, r2
 800b3ce:	b530      	push	{r4, r5, lr}
 800b3d0:	d10c      	bne.n	800b3ec <__mcmp+0x24>
 800b3d2:	0092      	lsls	r2, r2, #2
 800b3d4:	3014      	adds	r0, #20
 800b3d6:	3114      	adds	r1, #20
 800b3d8:	1884      	adds	r4, r0, r2
 800b3da:	4411      	add	r1, r2
 800b3dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3e4:	4295      	cmp	r5, r2
 800b3e6:	d003      	beq.n	800b3f0 <__mcmp+0x28>
 800b3e8:	d305      	bcc.n	800b3f6 <__mcmp+0x2e>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	bd30      	pop	{r4, r5, pc}
 800b3f0:	42a0      	cmp	r0, r4
 800b3f2:	d3f3      	bcc.n	800b3dc <__mcmp+0x14>
 800b3f4:	e7fa      	b.n	800b3ec <__mcmp+0x24>
 800b3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3fa:	e7f7      	b.n	800b3ec <__mcmp+0x24>

0800b3fc <__mdiff>:
 800b3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b400:	460d      	mov	r5, r1
 800b402:	4607      	mov	r7, r0
 800b404:	4611      	mov	r1, r2
 800b406:	4628      	mov	r0, r5
 800b408:	4614      	mov	r4, r2
 800b40a:	f7ff ffdd 	bl	800b3c8 <__mcmp>
 800b40e:	1e06      	subs	r6, r0, #0
 800b410:	d108      	bne.n	800b424 <__mdiff+0x28>
 800b412:	4631      	mov	r1, r6
 800b414:	4638      	mov	r0, r7
 800b416:	f7ff fdc2 	bl	800af9e <_Balloc>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b424:	bfa4      	itt	ge
 800b426:	4623      	movge	r3, r4
 800b428:	462c      	movge	r4, r5
 800b42a:	4638      	mov	r0, r7
 800b42c:	6861      	ldr	r1, [r4, #4]
 800b42e:	bfa6      	itte	ge
 800b430:	461d      	movge	r5, r3
 800b432:	2600      	movge	r6, #0
 800b434:	2601      	movlt	r6, #1
 800b436:	f7ff fdb2 	bl	800af9e <_Balloc>
 800b43a:	692b      	ldr	r3, [r5, #16]
 800b43c:	60c6      	str	r6, [r0, #12]
 800b43e:	6926      	ldr	r6, [r4, #16]
 800b440:	f105 0914 	add.w	r9, r5, #20
 800b444:	f104 0214 	add.w	r2, r4, #20
 800b448:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b44c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b450:	f100 0514 	add.w	r5, r0, #20
 800b454:	f04f 0e00 	mov.w	lr, #0
 800b458:	f852 ab04 	ldr.w	sl, [r2], #4
 800b45c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b460:	fa1e f18a 	uxtah	r1, lr, sl
 800b464:	b2a3      	uxth	r3, r4
 800b466:	1ac9      	subs	r1, r1, r3
 800b468:	0c23      	lsrs	r3, r4, #16
 800b46a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b46e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b472:	b289      	uxth	r1, r1
 800b474:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b478:	45c8      	cmp	r8, r9
 800b47a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b47e:	4694      	mov	ip, r2
 800b480:	f845 3b04 	str.w	r3, [r5], #4
 800b484:	d8e8      	bhi.n	800b458 <__mdiff+0x5c>
 800b486:	45bc      	cmp	ip, r7
 800b488:	d304      	bcc.n	800b494 <__mdiff+0x98>
 800b48a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b48e:	b183      	cbz	r3, 800b4b2 <__mdiff+0xb6>
 800b490:	6106      	str	r6, [r0, #16]
 800b492:	e7c5      	b.n	800b420 <__mdiff+0x24>
 800b494:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b498:	fa1e f381 	uxtah	r3, lr, r1
 800b49c:	141a      	asrs	r2, r3, #16
 800b49e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b4ac:	f845 3b04 	str.w	r3, [r5], #4
 800b4b0:	e7e9      	b.n	800b486 <__mdiff+0x8a>
 800b4b2:	3e01      	subs	r6, #1
 800b4b4:	e7e9      	b.n	800b48a <__mdiff+0x8e>

0800b4b6 <__d2b>:
 800b4b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4ba:	460e      	mov	r6, r1
 800b4bc:	2101      	movs	r1, #1
 800b4be:	ec59 8b10 	vmov	r8, r9, d0
 800b4c2:	4615      	mov	r5, r2
 800b4c4:	f7ff fd6b 	bl	800af9e <_Balloc>
 800b4c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4d2:	bb34      	cbnz	r4, 800b522 <__d2b+0x6c>
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	f1b8 0300 	subs.w	r3, r8, #0
 800b4da:	d027      	beq.n	800b52c <__d2b+0x76>
 800b4dc:	a802      	add	r0, sp, #8
 800b4de:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b4e2:	f7ff fe01 	bl	800b0e8 <__lo0bits>
 800b4e6:	9900      	ldr	r1, [sp, #0]
 800b4e8:	b1f0      	cbz	r0, 800b528 <__d2b+0x72>
 800b4ea:	9a01      	ldr	r2, [sp, #4]
 800b4ec:	f1c0 0320 	rsb	r3, r0, #32
 800b4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f4:	430b      	orrs	r3, r1
 800b4f6:	40c2      	lsrs	r2, r0
 800b4f8:	617b      	str	r3, [r7, #20]
 800b4fa:	9201      	str	r2, [sp, #4]
 800b4fc:	9b01      	ldr	r3, [sp, #4]
 800b4fe:	61bb      	str	r3, [r7, #24]
 800b500:	2b00      	cmp	r3, #0
 800b502:	bf14      	ite	ne
 800b504:	2102      	movne	r1, #2
 800b506:	2101      	moveq	r1, #1
 800b508:	6139      	str	r1, [r7, #16]
 800b50a:	b1c4      	cbz	r4, 800b53e <__d2b+0x88>
 800b50c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b510:	4404      	add	r4, r0
 800b512:	6034      	str	r4, [r6, #0]
 800b514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b518:	6028      	str	r0, [r5, #0]
 800b51a:	4638      	mov	r0, r7
 800b51c:	b003      	add	sp, #12
 800b51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b526:	e7d5      	b.n	800b4d4 <__d2b+0x1e>
 800b528:	6179      	str	r1, [r7, #20]
 800b52a:	e7e7      	b.n	800b4fc <__d2b+0x46>
 800b52c:	a801      	add	r0, sp, #4
 800b52e:	f7ff fddb 	bl	800b0e8 <__lo0bits>
 800b532:	9b01      	ldr	r3, [sp, #4]
 800b534:	617b      	str	r3, [r7, #20]
 800b536:	2101      	movs	r1, #1
 800b538:	6139      	str	r1, [r7, #16]
 800b53a:	3020      	adds	r0, #32
 800b53c:	e7e5      	b.n	800b50a <__d2b+0x54>
 800b53e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b542:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b546:	6030      	str	r0, [r6, #0]
 800b548:	6918      	ldr	r0, [r3, #16]
 800b54a:	f7ff fdae 	bl	800b0aa <__hi0bits>
 800b54e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b552:	e7e1      	b.n	800b518 <__d2b+0x62>

0800b554 <_calloc_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	fb02 f401 	mul.w	r4, r2, r1
 800b55a:	4621      	mov	r1, r4
 800b55c:	f000 f856 	bl	800b60c <_malloc_r>
 800b560:	4605      	mov	r5, r0
 800b562:	b118      	cbz	r0, 800b56c <_calloc_r+0x18>
 800b564:	4622      	mov	r2, r4
 800b566:	2100      	movs	r1, #0
 800b568:	f7fe f987 	bl	800987a <memset>
 800b56c:	4628      	mov	r0, r5
 800b56e:	bd38      	pop	{r3, r4, r5, pc}

0800b570 <_free_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4605      	mov	r5, r0
 800b574:	2900      	cmp	r1, #0
 800b576:	d045      	beq.n	800b604 <_free_r+0x94>
 800b578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b57c:	1f0c      	subs	r4, r1, #4
 800b57e:	2b00      	cmp	r3, #0
 800b580:	bfb8      	it	lt
 800b582:	18e4      	addlt	r4, r4, r3
 800b584:	f000 fa24 	bl	800b9d0 <__malloc_lock>
 800b588:	4a1f      	ldr	r2, [pc, #124]	; (800b608 <_free_r+0x98>)
 800b58a:	6813      	ldr	r3, [r2, #0]
 800b58c:	4610      	mov	r0, r2
 800b58e:	b933      	cbnz	r3, 800b59e <_free_r+0x2e>
 800b590:	6063      	str	r3, [r4, #4]
 800b592:	6014      	str	r4, [r2, #0]
 800b594:	4628      	mov	r0, r5
 800b596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b59a:	f000 ba1a 	b.w	800b9d2 <__malloc_unlock>
 800b59e:	42a3      	cmp	r3, r4
 800b5a0:	d90c      	bls.n	800b5bc <_free_r+0x4c>
 800b5a2:	6821      	ldr	r1, [r4, #0]
 800b5a4:	1862      	adds	r2, r4, r1
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	bf04      	itt	eq
 800b5aa:	681a      	ldreq	r2, [r3, #0]
 800b5ac:	685b      	ldreq	r3, [r3, #4]
 800b5ae:	6063      	str	r3, [r4, #4]
 800b5b0:	bf04      	itt	eq
 800b5b2:	1852      	addeq	r2, r2, r1
 800b5b4:	6022      	streq	r2, [r4, #0]
 800b5b6:	6004      	str	r4, [r0, #0]
 800b5b8:	e7ec      	b.n	800b594 <_free_r+0x24>
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	b10a      	cbz	r2, 800b5c4 <_free_r+0x54>
 800b5c0:	42a2      	cmp	r2, r4
 800b5c2:	d9fa      	bls.n	800b5ba <_free_r+0x4a>
 800b5c4:	6819      	ldr	r1, [r3, #0]
 800b5c6:	1858      	adds	r0, r3, r1
 800b5c8:	42a0      	cmp	r0, r4
 800b5ca:	d10b      	bne.n	800b5e4 <_free_r+0x74>
 800b5cc:	6820      	ldr	r0, [r4, #0]
 800b5ce:	4401      	add	r1, r0
 800b5d0:	1858      	adds	r0, r3, r1
 800b5d2:	4282      	cmp	r2, r0
 800b5d4:	6019      	str	r1, [r3, #0]
 800b5d6:	d1dd      	bne.n	800b594 <_free_r+0x24>
 800b5d8:	6810      	ldr	r0, [r2, #0]
 800b5da:	6852      	ldr	r2, [r2, #4]
 800b5dc:	605a      	str	r2, [r3, #4]
 800b5de:	4401      	add	r1, r0
 800b5e0:	6019      	str	r1, [r3, #0]
 800b5e2:	e7d7      	b.n	800b594 <_free_r+0x24>
 800b5e4:	d902      	bls.n	800b5ec <_free_r+0x7c>
 800b5e6:	230c      	movs	r3, #12
 800b5e8:	602b      	str	r3, [r5, #0]
 800b5ea:	e7d3      	b.n	800b594 <_free_r+0x24>
 800b5ec:	6820      	ldr	r0, [r4, #0]
 800b5ee:	1821      	adds	r1, r4, r0
 800b5f0:	428a      	cmp	r2, r1
 800b5f2:	bf04      	itt	eq
 800b5f4:	6811      	ldreq	r1, [r2, #0]
 800b5f6:	6852      	ldreq	r2, [r2, #4]
 800b5f8:	6062      	str	r2, [r4, #4]
 800b5fa:	bf04      	itt	eq
 800b5fc:	1809      	addeq	r1, r1, r0
 800b5fe:	6021      	streq	r1, [r4, #0]
 800b600:	605c      	str	r4, [r3, #4]
 800b602:	e7c7      	b.n	800b594 <_free_r+0x24>
 800b604:	bd38      	pop	{r3, r4, r5, pc}
 800b606:	bf00      	nop
 800b608:	2000027c 	.word	0x2000027c

0800b60c <_malloc_r>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	1ccd      	adds	r5, r1, #3
 800b610:	f025 0503 	bic.w	r5, r5, #3
 800b614:	3508      	adds	r5, #8
 800b616:	2d0c      	cmp	r5, #12
 800b618:	bf38      	it	cc
 800b61a:	250c      	movcc	r5, #12
 800b61c:	2d00      	cmp	r5, #0
 800b61e:	4606      	mov	r6, r0
 800b620:	db01      	blt.n	800b626 <_malloc_r+0x1a>
 800b622:	42a9      	cmp	r1, r5
 800b624:	d903      	bls.n	800b62e <_malloc_r+0x22>
 800b626:	230c      	movs	r3, #12
 800b628:	6033      	str	r3, [r6, #0]
 800b62a:	2000      	movs	r0, #0
 800b62c:	bd70      	pop	{r4, r5, r6, pc}
 800b62e:	f000 f9cf 	bl	800b9d0 <__malloc_lock>
 800b632:	4a21      	ldr	r2, [pc, #132]	; (800b6b8 <_malloc_r+0xac>)
 800b634:	6814      	ldr	r4, [r2, #0]
 800b636:	4621      	mov	r1, r4
 800b638:	b991      	cbnz	r1, 800b660 <_malloc_r+0x54>
 800b63a:	4c20      	ldr	r4, [pc, #128]	; (800b6bc <_malloc_r+0xb0>)
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	b91b      	cbnz	r3, 800b648 <_malloc_r+0x3c>
 800b640:	4630      	mov	r0, r6
 800b642:	f000 f98f 	bl	800b964 <_sbrk_r>
 800b646:	6020      	str	r0, [r4, #0]
 800b648:	4629      	mov	r1, r5
 800b64a:	4630      	mov	r0, r6
 800b64c:	f000 f98a 	bl	800b964 <_sbrk_r>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d124      	bne.n	800b69e <_malloc_r+0x92>
 800b654:	230c      	movs	r3, #12
 800b656:	6033      	str	r3, [r6, #0]
 800b658:	4630      	mov	r0, r6
 800b65a:	f000 f9ba 	bl	800b9d2 <__malloc_unlock>
 800b65e:	e7e4      	b.n	800b62a <_malloc_r+0x1e>
 800b660:	680b      	ldr	r3, [r1, #0]
 800b662:	1b5b      	subs	r3, r3, r5
 800b664:	d418      	bmi.n	800b698 <_malloc_r+0x8c>
 800b666:	2b0b      	cmp	r3, #11
 800b668:	d90f      	bls.n	800b68a <_malloc_r+0x7e>
 800b66a:	600b      	str	r3, [r1, #0]
 800b66c:	50cd      	str	r5, [r1, r3]
 800b66e:	18cc      	adds	r4, r1, r3
 800b670:	4630      	mov	r0, r6
 800b672:	f000 f9ae 	bl	800b9d2 <__malloc_unlock>
 800b676:	f104 000b 	add.w	r0, r4, #11
 800b67a:	1d23      	adds	r3, r4, #4
 800b67c:	f020 0007 	bic.w	r0, r0, #7
 800b680:	1ac3      	subs	r3, r0, r3
 800b682:	d0d3      	beq.n	800b62c <_malloc_r+0x20>
 800b684:	425a      	negs	r2, r3
 800b686:	50e2      	str	r2, [r4, r3]
 800b688:	e7d0      	b.n	800b62c <_malloc_r+0x20>
 800b68a:	428c      	cmp	r4, r1
 800b68c:	684b      	ldr	r3, [r1, #4]
 800b68e:	bf16      	itet	ne
 800b690:	6063      	strne	r3, [r4, #4]
 800b692:	6013      	streq	r3, [r2, #0]
 800b694:	460c      	movne	r4, r1
 800b696:	e7eb      	b.n	800b670 <_malloc_r+0x64>
 800b698:	460c      	mov	r4, r1
 800b69a:	6849      	ldr	r1, [r1, #4]
 800b69c:	e7cc      	b.n	800b638 <_malloc_r+0x2c>
 800b69e:	1cc4      	adds	r4, r0, #3
 800b6a0:	f024 0403 	bic.w	r4, r4, #3
 800b6a4:	42a0      	cmp	r0, r4
 800b6a6:	d005      	beq.n	800b6b4 <_malloc_r+0xa8>
 800b6a8:	1a21      	subs	r1, r4, r0
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f000 f95a 	bl	800b964 <_sbrk_r>
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d0cf      	beq.n	800b654 <_malloc_r+0x48>
 800b6b4:	6025      	str	r5, [r4, #0]
 800b6b6:	e7db      	b.n	800b670 <_malloc_r+0x64>
 800b6b8:	2000027c 	.word	0x2000027c
 800b6bc:	20000280 	.word	0x20000280

0800b6c0 <__ssputs_r>:
 800b6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c4:	688e      	ldr	r6, [r1, #8]
 800b6c6:	429e      	cmp	r6, r3
 800b6c8:	4682      	mov	sl, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	4690      	mov	r8, r2
 800b6ce:	4699      	mov	r9, r3
 800b6d0:	d837      	bhi.n	800b742 <__ssputs_r+0x82>
 800b6d2:	898a      	ldrh	r2, [r1, #12]
 800b6d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6d8:	d031      	beq.n	800b73e <__ssputs_r+0x7e>
 800b6da:	6825      	ldr	r5, [r4, #0]
 800b6dc:	6909      	ldr	r1, [r1, #16]
 800b6de:	1a6f      	subs	r7, r5, r1
 800b6e0:	6965      	ldr	r5, [r4, #20]
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800b6ec:	f109 0301 	add.w	r3, r9, #1
 800b6f0:	443b      	add	r3, r7
 800b6f2:	429d      	cmp	r5, r3
 800b6f4:	bf38      	it	cc
 800b6f6:	461d      	movcc	r5, r3
 800b6f8:	0553      	lsls	r3, r2, #21
 800b6fa:	d530      	bpl.n	800b75e <__ssputs_r+0x9e>
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	f7ff ff85 	bl	800b60c <_malloc_r>
 800b702:	4606      	mov	r6, r0
 800b704:	b950      	cbnz	r0, 800b71c <__ssputs_r+0x5c>
 800b706:	230c      	movs	r3, #12
 800b708:	f8ca 3000 	str.w	r3, [sl]
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b712:	81a3      	strh	r3, [r4, #12]
 800b714:	f04f 30ff 	mov.w	r0, #4294967295
 800b718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71c:	463a      	mov	r2, r7
 800b71e:	6921      	ldr	r1, [r4, #16]
 800b720:	f7ff fc32 	bl	800af88 <memcpy>
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b72a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b72e:	81a3      	strh	r3, [r4, #12]
 800b730:	6126      	str	r6, [r4, #16]
 800b732:	6165      	str	r5, [r4, #20]
 800b734:	443e      	add	r6, r7
 800b736:	1bed      	subs	r5, r5, r7
 800b738:	6026      	str	r6, [r4, #0]
 800b73a:	60a5      	str	r5, [r4, #8]
 800b73c:	464e      	mov	r6, r9
 800b73e:	454e      	cmp	r6, r9
 800b740:	d900      	bls.n	800b744 <__ssputs_r+0x84>
 800b742:	464e      	mov	r6, r9
 800b744:	4632      	mov	r2, r6
 800b746:	4641      	mov	r1, r8
 800b748:	6820      	ldr	r0, [r4, #0]
 800b74a:	f000 f928 	bl	800b99e <memmove>
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	1b9b      	subs	r3, r3, r6
 800b752:	60a3      	str	r3, [r4, #8]
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	441e      	add	r6, r3
 800b758:	6026      	str	r6, [r4, #0]
 800b75a:	2000      	movs	r0, #0
 800b75c:	e7dc      	b.n	800b718 <__ssputs_r+0x58>
 800b75e:	462a      	mov	r2, r5
 800b760:	f000 f938 	bl	800b9d4 <_realloc_r>
 800b764:	4606      	mov	r6, r0
 800b766:	2800      	cmp	r0, #0
 800b768:	d1e2      	bne.n	800b730 <__ssputs_r+0x70>
 800b76a:	6921      	ldr	r1, [r4, #16]
 800b76c:	4650      	mov	r0, sl
 800b76e:	f7ff feff 	bl	800b570 <_free_r>
 800b772:	e7c8      	b.n	800b706 <__ssputs_r+0x46>

0800b774 <_svfiprintf_r>:
 800b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b778:	461d      	mov	r5, r3
 800b77a:	898b      	ldrh	r3, [r1, #12]
 800b77c:	061f      	lsls	r7, r3, #24
 800b77e:	b09d      	sub	sp, #116	; 0x74
 800b780:	4680      	mov	r8, r0
 800b782:	460c      	mov	r4, r1
 800b784:	4616      	mov	r6, r2
 800b786:	d50f      	bpl.n	800b7a8 <_svfiprintf_r+0x34>
 800b788:	690b      	ldr	r3, [r1, #16]
 800b78a:	b96b      	cbnz	r3, 800b7a8 <_svfiprintf_r+0x34>
 800b78c:	2140      	movs	r1, #64	; 0x40
 800b78e:	f7ff ff3d 	bl	800b60c <_malloc_r>
 800b792:	6020      	str	r0, [r4, #0]
 800b794:	6120      	str	r0, [r4, #16]
 800b796:	b928      	cbnz	r0, 800b7a4 <_svfiprintf_r+0x30>
 800b798:	230c      	movs	r3, #12
 800b79a:	f8c8 3000 	str.w	r3, [r8]
 800b79e:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a2:	e0c8      	b.n	800b936 <_svfiprintf_r+0x1c2>
 800b7a4:	2340      	movs	r3, #64	; 0x40
 800b7a6:	6163      	str	r3, [r4, #20]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ac:	2320      	movs	r3, #32
 800b7ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7b2:	2330      	movs	r3, #48	; 0x30
 800b7b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7b8:	9503      	str	r5, [sp, #12]
 800b7ba:	f04f 0b01 	mov.w	fp, #1
 800b7be:	4637      	mov	r7, r6
 800b7c0:	463d      	mov	r5, r7
 800b7c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7c6:	b10b      	cbz	r3, 800b7cc <_svfiprintf_r+0x58>
 800b7c8:	2b25      	cmp	r3, #37	; 0x25
 800b7ca:	d13e      	bne.n	800b84a <_svfiprintf_r+0xd6>
 800b7cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800b7d0:	d00b      	beq.n	800b7ea <_svfiprintf_r+0x76>
 800b7d2:	4653      	mov	r3, sl
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4640      	mov	r0, r8
 800b7da:	f7ff ff71 	bl	800b6c0 <__ssputs_r>
 800b7de:	3001      	adds	r0, #1
 800b7e0:	f000 80a4 	beq.w	800b92c <_svfiprintf_r+0x1b8>
 800b7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e6:	4453      	add	r3, sl
 800b7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ea:	783b      	ldrb	r3, [r7, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 809d 	beq.w	800b92c <_svfiprintf_r+0x1b8>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7fc:	9304      	str	r3, [sp, #16]
 800b7fe:	9307      	str	r3, [sp, #28]
 800b800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b804:	931a      	str	r3, [sp, #104]	; 0x68
 800b806:	462f      	mov	r7, r5
 800b808:	2205      	movs	r2, #5
 800b80a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b80e:	4850      	ldr	r0, [pc, #320]	; (800b950 <_svfiprintf_r+0x1dc>)
 800b810:	f7f4 fce6 	bl	80001e0 <memchr>
 800b814:	9b04      	ldr	r3, [sp, #16]
 800b816:	b9d0      	cbnz	r0, 800b84e <_svfiprintf_r+0xda>
 800b818:	06d9      	lsls	r1, r3, #27
 800b81a:	bf44      	itt	mi
 800b81c:	2220      	movmi	r2, #32
 800b81e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b822:	071a      	lsls	r2, r3, #28
 800b824:	bf44      	itt	mi
 800b826:	222b      	movmi	r2, #43	; 0x2b
 800b828:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b82c:	782a      	ldrb	r2, [r5, #0]
 800b82e:	2a2a      	cmp	r2, #42	; 0x2a
 800b830:	d015      	beq.n	800b85e <_svfiprintf_r+0xea>
 800b832:	9a07      	ldr	r2, [sp, #28]
 800b834:	462f      	mov	r7, r5
 800b836:	2000      	movs	r0, #0
 800b838:	250a      	movs	r5, #10
 800b83a:	4639      	mov	r1, r7
 800b83c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b840:	3b30      	subs	r3, #48	; 0x30
 800b842:	2b09      	cmp	r3, #9
 800b844:	d94d      	bls.n	800b8e2 <_svfiprintf_r+0x16e>
 800b846:	b1b8      	cbz	r0, 800b878 <_svfiprintf_r+0x104>
 800b848:	e00f      	b.n	800b86a <_svfiprintf_r+0xf6>
 800b84a:	462f      	mov	r7, r5
 800b84c:	e7b8      	b.n	800b7c0 <_svfiprintf_r+0x4c>
 800b84e:	4a40      	ldr	r2, [pc, #256]	; (800b950 <_svfiprintf_r+0x1dc>)
 800b850:	1a80      	subs	r0, r0, r2
 800b852:	fa0b f000 	lsl.w	r0, fp, r0
 800b856:	4318      	orrs	r0, r3
 800b858:	9004      	str	r0, [sp, #16]
 800b85a:	463d      	mov	r5, r7
 800b85c:	e7d3      	b.n	800b806 <_svfiprintf_r+0x92>
 800b85e:	9a03      	ldr	r2, [sp, #12]
 800b860:	1d11      	adds	r1, r2, #4
 800b862:	6812      	ldr	r2, [r2, #0]
 800b864:	9103      	str	r1, [sp, #12]
 800b866:	2a00      	cmp	r2, #0
 800b868:	db01      	blt.n	800b86e <_svfiprintf_r+0xfa>
 800b86a:	9207      	str	r2, [sp, #28]
 800b86c:	e004      	b.n	800b878 <_svfiprintf_r+0x104>
 800b86e:	4252      	negs	r2, r2
 800b870:	f043 0302 	orr.w	r3, r3, #2
 800b874:	9207      	str	r2, [sp, #28]
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	783b      	ldrb	r3, [r7, #0]
 800b87a:	2b2e      	cmp	r3, #46	; 0x2e
 800b87c:	d10c      	bne.n	800b898 <_svfiprintf_r+0x124>
 800b87e:	787b      	ldrb	r3, [r7, #1]
 800b880:	2b2a      	cmp	r3, #42	; 0x2a
 800b882:	d133      	bne.n	800b8ec <_svfiprintf_r+0x178>
 800b884:	9b03      	ldr	r3, [sp, #12]
 800b886:	1d1a      	adds	r2, r3, #4
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	9203      	str	r2, [sp, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	bfb8      	it	lt
 800b890:	f04f 33ff 	movlt.w	r3, #4294967295
 800b894:	3702      	adds	r7, #2
 800b896:	9305      	str	r3, [sp, #20]
 800b898:	4d2e      	ldr	r5, [pc, #184]	; (800b954 <_svfiprintf_r+0x1e0>)
 800b89a:	7839      	ldrb	r1, [r7, #0]
 800b89c:	2203      	movs	r2, #3
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f7f4 fc9e 	bl	80001e0 <memchr>
 800b8a4:	b138      	cbz	r0, 800b8b6 <_svfiprintf_r+0x142>
 800b8a6:	2340      	movs	r3, #64	; 0x40
 800b8a8:	1b40      	subs	r0, r0, r5
 800b8aa:	fa03 f000 	lsl.w	r0, r3, r0
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	4303      	orrs	r3, r0
 800b8b2:	3701      	adds	r7, #1
 800b8b4:	9304      	str	r3, [sp, #16]
 800b8b6:	7839      	ldrb	r1, [r7, #0]
 800b8b8:	4827      	ldr	r0, [pc, #156]	; (800b958 <_svfiprintf_r+0x1e4>)
 800b8ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8be:	2206      	movs	r2, #6
 800b8c0:	1c7e      	adds	r6, r7, #1
 800b8c2:	f7f4 fc8d 	bl	80001e0 <memchr>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d038      	beq.n	800b93c <_svfiprintf_r+0x1c8>
 800b8ca:	4b24      	ldr	r3, [pc, #144]	; (800b95c <_svfiprintf_r+0x1e8>)
 800b8cc:	bb13      	cbnz	r3, 800b914 <_svfiprintf_r+0x1a0>
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	3307      	adds	r3, #7
 800b8d2:	f023 0307 	bic.w	r3, r3, #7
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	9303      	str	r3, [sp, #12]
 800b8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8dc:	444b      	add	r3, r9
 800b8de:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e0:	e76d      	b.n	800b7be <_svfiprintf_r+0x4a>
 800b8e2:	fb05 3202 	mla	r2, r5, r2, r3
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	460f      	mov	r7, r1
 800b8ea:	e7a6      	b.n	800b83a <_svfiprintf_r+0xc6>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	3701      	adds	r7, #1
 800b8f0:	9305      	str	r3, [sp, #20]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	250a      	movs	r5, #10
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8fc:	3a30      	subs	r2, #48	; 0x30
 800b8fe:	2a09      	cmp	r2, #9
 800b900:	d903      	bls.n	800b90a <_svfiprintf_r+0x196>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0c8      	beq.n	800b898 <_svfiprintf_r+0x124>
 800b906:	9105      	str	r1, [sp, #20]
 800b908:	e7c6      	b.n	800b898 <_svfiprintf_r+0x124>
 800b90a:	fb05 2101 	mla	r1, r5, r1, r2
 800b90e:	2301      	movs	r3, #1
 800b910:	4607      	mov	r7, r0
 800b912:	e7f0      	b.n	800b8f6 <_svfiprintf_r+0x182>
 800b914:	ab03      	add	r3, sp, #12
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	4622      	mov	r2, r4
 800b91a:	4b11      	ldr	r3, [pc, #68]	; (800b960 <_svfiprintf_r+0x1ec>)
 800b91c:	a904      	add	r1, sp, #16
 800b91e:	4640      	mov	r0, r8
 800b920:	f7fe f848 	bl	80099b4 <_printf_float>
 800b924:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b928:	4681      	mov	r9, r0
 800b92a:	d1d6      	bne.n	800b8da <_svfiprintf_r+0x166>
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	065b      	lsls	r3, r3, #25
 800b930:	f53f af35 	bmi.w	800b79e <_svfiprintf_r+0x2a>
 800b934:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b936:	b01d      	add	sp, #116	; 0x74
 800b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93c:	ab03      	add	r3, sp, #12
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	4622      	mov	r2, r4
 800b942:	4b07      	ldr	r3, [pc, #28]	; (800b960 <_svfiprintf_r+0x1ec>)
 800b944:	a904      	add	r1, sp, #16
 800b946:	4640      	mov	r0, r8
 800b948:	f7fe faea 	bl	8009f20 <_printf_i>
 800b94c:	e7ea      	b.n	800b924 <_svfiprintf_r+0x1b0>
 800b94e:	bf00      	nop
 800b950:	0800bc54 	.word	0x0800bc54
 800b954:	0800bc5a 	.word	0x0800bc5a
 800b958:	0800bc5e 	.word	0x0800bc5e
 800b95c:	080099b5 	.word	0x080099b5
 800b960:	0800b6c1 	.word	0x0800b6c1

0800b964 <_sbrk_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4c06      	ldr	r4, [pc, #24]	; (800b980 <_sbrk_r+0x1c>)
 800b968:	2300      	movs	r3, #0
 800b96a:	4605      	mov	r5, r0
 800b96c:	4608      	mov	r0, r1
 800b96e:	6023      	str	r3, [r4, #0]
 800b970:	f7f7 f922 	bl	8002bb8 <_sbrk>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d102      	bne.n	800b97e <_sbrk_r+0x1a>
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	b103      	cbz	r3, 800b97e <_sbrk_r+0x1a>
 800b97c:	602b      	str	r3, [r5, #0]
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	2000080c 	.word	0x2000080c

0800b984 <__ascii_wctomb>:
 800b984:	b149      	cbz	r1, 800b99a <__ascii_wctomb+0x16>
 800b986:	2aff      	cmp	r2, #255	; 0xff
 800b988:	bf85      	ittet	hi
 800b98a:	238a      	movhi	r3, #138	; 0x8a
 800b98c:	6003      	strhi	r3, [r0, #0]
 800b98e:	700a      	strbls	r2, [r1, #0]
 800b990:	f04f 30ff 	movhi.w	r0, #4294967295
 800b994:	bf98      	it	ls
 800b996:	2001      	movls	r0, #1
 800b998:	4770      	bx	lr
 800b99a:	4608      	mov	r0, r1
 800b99c:	4770      	bx	lr

0800b99e <memmove>:
 800b99e:	4288      	cmp	r0, r1
 800b9a0:	b510      	push	{r4, lr}
 800b9a2:	eb01 0302 	add.w	r3, r1, r2
 800b9a6:	d807      	bhi.n	800b9b8 <memmove+0x1a>
 800b9a8:	1e42      	subs	r2, r0, #1
 800b9aa:	4299      	cmp	r1, r3
 800b9ac:	d00a      	beq.n	800b9c4 <memmove+0x26>
 800b9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b9b6:	e7f8      	b.n	800b9aa <memmove+0xc>
 800b9b8:	4283      	cmp	r3, r0
 800b9ba:	d9f5      	bls.n	800b9a8 <memmove+0xa>
 800b9bc:	1881      	adds	r1, r0, r2
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	42d3      	cmn	r3, r2
 800b9c2:	d100      	bne.n	800b9c6 <memmove+0x28>
 800b9c4:	bd10      	pop	{r4, pc}
 800b9c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b9ce:	e7f7      	b.n	800b9c0 <memmove+0x22>

0800b9d0 <__malloc_lock>:
 800b9d0:	4770      	bx	lr

0800b9d2 <__malloc_unlock>:
 800b9d2:	4770      	bx	lr

0800b9d4 <_realloc_r>:
 800b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	4614      	mov	r4, r2
 800b9da:	460e      	mov	r6, r1
 800b9dc:	b921      	cbnz	r1, 800b9e8 <_realloc_r+0x14>
 800b9de:	4611      	mov	r1, r2
 800b9e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b9e4:	f7ff be12 	b.w	800b60c <_malloc_r>
 800b9e8:	b922      	cbnz	r2, 800b9f4 <_realloc_r+0x20>
 800b9ea:	f7ff fdc1 	bl	800b570 <_free_r>
 800b9ee:	4625      	mov	r5, r4
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9f4:	f000 f814 	bl	800ba20 <_malloc_usable_size_r>
 800b9f8:	42a0      	cmp	r0, r4
 800b9fa:	d20f      	bcs.n	800ba1c <_realloc_r+0x48>
 800b9fc:	4621      	mov	r1, r4
 800b9fe:	4638      	mov	r0, r7
 800ba00:	f7ff fe04 	bl	800b60c <_malloc_r>
 800ba04:	4605      	mov	r5, r0
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d0f2      	beq.n	800b9f0 <_realloc_r+0x1c>
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	f7ff fabb 	bl	800af88 <memcpy>
 800ba12:	4631      	mov	r1, r6
 800ba14:	4638      	mov	r0, r7
 800ba16:	f7ff fdab 	bl	800b570 <_free_r>
 800ba1a:	e7e9      	b.n	800b9f0 <_realloc_r+0x1c>
 800ba1c:	4635      	mov	r5, r6
 800ba1e:	e7e7      	b.n	800b9f0 <_realloc_r+0x1c>

0800ba20 <_malloc_usable_size_r>:
 800ba20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba24:	1f18      	subs	r0, r3, #4
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bfbc      	itt	lt
 800ba2a:	580b      	ldrlt	r3, [r1, r0]
 800ba2c:	18c0      	addlt	r0, r0, r3
 800ba2e:	4770      	bx	lr

0800ba30 <_init>:
 800ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba32:	bf00      	nop
 800ba34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba36:	bc08      	pop	{r3}
 800ba38:	469e      	mov	lr, r3
 800ba3a:	4770      	bx	lr

0800ba3c <_fini>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	bf00      	nop
 800ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba42:	bc08      	pop	{r3}
 800ba44:	469e      	mov	lr, r3
 800ba46:	4770      	bx	lr
