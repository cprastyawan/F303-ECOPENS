	TIM1->CCR5 = setPWM + compWindowOffset;

	if(__HAL_COMP_COMP1_EXTI_GET_FLAG() && waitForCommutation == 0){
		HAL_COMP_Stop_IT(&hcomp1);
		sConfig.Channel = ADC_CHANNEL_2;

		/*commutationTimerCounterArray[5] = __HAL_TIM_GET_COUNTER(&htim3);
		commutationTimerCounterAverage = (commutationTimerCounterArray[0]+commutationTimerCounterArray[1]+commutationTimerCounterArray[2]+commutationTimerCounterArray[3]+commutationTimerCounterArray[4]+commutationTimerCounterArray[5])/12;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutationTimerCounterAverage + commutationTimerOffset);
		__HAL_TIM_SET_COUNTER(&htim3, 0);*/

		for(uint8_t i = 0; i<5; i++) commutationTimerCounterArray[i] = commutationTimerCounterArray[i+1];

		waitForCommutation = 1;

	}

	else if(__HAL_COMP_COMP2_EXTI_GET_FLAG() && waitForCommutation == 0){
		HAL_COMP_Stop_IT(&hcomp2);
		sConfig.Channel = ADC_CHANNEL_3;

		/*commutationTimerCounterArray[5] = __HAL_TIM_GET_COUNTER(&htim3);
		commutationTimerCounterAverage = (commutationTimerCounterArray[0]+commutationTimerCounterArray[1]+commutationTimerCounterArray[2]+commutationTimerCounterArray[3]+commutationTimerCounterArray[4]+commutationTimerCounterArray[5])/12;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutationTimerCounterAverage + commutationTimerOffset);
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		for(uint8_t i = 0; i<5; i++) commutationTimerCounterArray[i] = commutationTimerCounterArray[i+1];*/

		waitForCommutation = 1;
	}

	else if(__HAL_COMP_COMP3_EXTI_GET_FLAG() && waitForCommutation == 0){
		HAL_COMP_Stop_IT(&hcomp3);
		sConfig.Channel = ADC_CHANNEL_4;

		/*commutationTimerCounterArray[5] = __HAL_TIM_GET_COUNTER(&htim3);
		commutationTimerCounterAverage = (commutationTimerCounterArray[0]+commutationTimerCounterArray[1]+commutationTimerCounterArray[2]+commutationTimerCounterArray[3]+commutationTimerCounterArray[4]+commutationTimerCounterArray[5])/12;
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, commutationTimerCounterAverage + commutationTimerOffset);
		__HAL_TIM_SET_COUNTER(&htim3, 0);
		for(uint8_t i = 0; i<5; i++) commutationTimerCounterArray[i] = commutationTimerCounterArray[i+1];*/

		waitForCommutation = 1;

		/*if(setPWM > 300 && pwmState == 0){
			HAL_GPIO_WritePin(GPIOB, OUT_A_Pin | OUT_B_Pin | OUT_C_Pin, GPIO_PIN_SET);

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_5);
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1900 + oc5Value);

			 TIM_OC_InitTypeDef sConfigOC5A;
			 sConfigOC5A.OCMode = TIM_OCMODE_PWM1;
			 compWindowOffset = -80;
			 sConfigOC5A.OCFastMode = TIM_OCFAST_DISABLE; //DISABLE
			 sConfigOC5A.OCIdleState = TIM_OCIDLESTATE_RESET;
			 sConfigOC5A.OCPolarity = TIM_OCPOLARITY_LOW; //LOW for PWM high detection
			 HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC5A, TIM_CHANNEL_5);
			 TIM1->CCR5 = setPWM + compWindowOffset;
			 pwmState = 1;
			 HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_5);
		}*/

		/*if(setPWM > 300 && pwmState == 1 && oc5Value != oc5ValueOld){
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1900 + oc5Value);
			oc5ValueOld = oc5Value;
		}*/

		/*if(setPWM <= 250 && pwmState == 1){
			HAL_GPIO_WritePin(GPIOB, OUT_A_Pin | OUT_B_Pin | OUT_C_Pin, GPIO_PIN_RESET);

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_5);
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);

			TIM_OC_InitTypeDef sConfigOC5B;
			sConfigOC5B.OCMode = TIM_OCMODE_PWM1;
			compWindowOffset = 300;
			sConfigOC5B.OCFastMode = TIM_OCFAST_DISABLE;
			sConfigOC5B.OCIdleState = TIM_OCIDLESTATE_RESET;
			sConfigOC5B.OCPolarity = TIM_OCPOLARITY_HIGH; //HIGH for PWM low detection
			HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC5B, TIM_CHANNEL_5);
			TIM1->CCR5 = setPWM + compWindowOffset;
			pwmState = 0;
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_5);*/
		//}
	}

	//TIM1->CCR5 = setPWM + compWindowOffset;
	//TIM1->CCR1 = setPWM;

	HAL_ADC_ConfigChannel(&hadc2, &sConfig);
	__HAL_TIM_SET_COUNTER(&htim7, 0);
	HAL_ADC_Start_IT(&hadc2);
	//HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);


	HAL_ADC_ConfigChannel(&hadc2, &sConfig);
	HAL_ADC_Start(&hadc2);
	//for(int i=0;i<50;i++) asm("nop");

	while(adcIntegral <= adcOffset){
		if(__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) == SET){
			adcIntegral += HAL_ADC_GetValue(&hadc2);
			//for(int i=0; i<50; i++);
			//__HAL_ADC_CLEAR_FLAG(&hadc2, ADC_FLAG_EOC);
		}
	}
	HAL_ADC_Stop(&hadc2);
	adcIntegral = 0;
	commutationPattern(NEXT);